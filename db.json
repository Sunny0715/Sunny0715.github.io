{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinPay.jpg","path":"images/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/1.png","path":"uploads/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/header-bk.jpg","path":"uploads/header-bk.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/weixinPay.jpg","path":"uploads/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"source/favicon1.ico","path":"favicon1.ico","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1496540493000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1496540493000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1496540493000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1496540493000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1496540493000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1496540493000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1496540493000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1496540493000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1496540493000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1496540493000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1496540493000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1496540493000},{"_id":"themes/next/_config.yml","hash":"d74e0809254a0ce09b2a61649073b7ad7a5ae1da","modified":1521612416660},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1496540493000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1496540493000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1496540493000},{"_id":"source/404.html","hash":"578e1d55dcc56999bea63e923e2fe8c822a15ea0","modified":1496540493000},{"_id":"source/CNAME","hash":"58d0aa88566c797c28277a599098a85c25f39fd9","modified":1516864923208},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1496540493000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1496540493000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1496540493000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1496540493000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1496540493000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1496540493000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1496540493000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1496540493000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1496540493000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1496540493000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1496540493000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1496540493000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1496540493000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1496540493000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1496540493000},{"_id":"themes/next/layout/_layout.swig","hash":"ea69ea3ea2342f9a2f94c1c9097d37738da1cbc2","modified":1520907250200},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1496540493000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1496540493000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1496540493000},{"_id":"themes/next/layout/page.swig","hash":"2166316fcd0e93bf9f8a54ce55a8f675eeab23ae","modified":1496540493000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1496540493000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1496540493000},{"_id":"themes/next/layout/tag.swig","hash":"9f71c3428ce3c21e14e0c4fd0eb21d97170eb492","modified":1496540493000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1496540493000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1496540493000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1496540493000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1496540493000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1496540493000},{"_id":"source/_posts/HttpClient后台跨域.md","hash":"4aabe1b3d65ef440746f440ae662ed89d4b9f379","modified":1520920582588},{"_id":"source/_posts/Apache-Commons-Email发送邮件.md","hash":"c0bdf85a7e32e75be4d7e5524f3bb2554a257d65","modified":1522236619408},{"_id":"source/_posts/JAVA定时调度-Timer和Executors.md","hash":"4da781734c68a1b0c2228b9942d57e518abc698d","modified":1520920142851},{"_id":"source/_posts/JAVA实现HTML转PDF.md","hash":"08529f97cf0d400261f768018384d5da3a695466","modified":1520920180032},{"_id":"source/_posts/JAVA实现简单爬虫.md","hash":"1488c48fc143bd00ec482319b290c26ec7714854","modified":1520920192521},{"_id":"source/_posts/JVM入门.md","hash":"44288f1e667ff0809006111b93c4be58129db19a","modified":1520920216365},{"_id":"source/_posts/JVM类加载机制.md","hash":"6f5604f24e632d4f28eb739ffc76cccfdc8d52da","modified":1520920204484},{"_id":"source/_posts/Java-String-intern方法.md","hash":"1be09810a1d061473a9197aedcf21edabe3aa794","modified":1520920114428},{"_id":"source/_posts/Java备份和还原MySQL数据库.md","hash":"16f8672ab5331f17407823b0e077c2e86001e389","modified":1520920129262},{"_id":"source/_posts/Java生成PDF.md","hash":"c9f5e61d6632e51851a95617e3b6dab40428a7bc","modified":1520920158726},{"_id":"source/_posts/Linux下安装Nginx.md","hash":"686dda1e6a231456e2050aaea9e49c46f713a33a","modified":1520920281886},{"_id":"source/_posts/Linux下Tomcat的安装与优化.md","hash":"32da9d6e06581fb62452a68241a384258bda4416","modified":1520920248918},{"_id":"source/_posts/Linux下安装JDK与MySQL.md","hash":"cf2252ea87653bdc039492ec2325d6a1f97dc881","modified":1521526725762},{"_id":"source/_posts/Linux基本命令.md","hash":"df73dd7d21418034ecebd51cac431607b0fbbbe2","modified":1522825825121},{"_id":"source/_posts/Markdown语法.md","hash":"6d56e073e50c88cdff82a48f5895ecdf193b4c50","modified":1520920297762},{"_id":"source/_posts/MySQL主从复制.md","hash":"06848e968fb301a3fe3c2adfb5a6771e1fabda50","modified":1524809436944},{"_id":"source/_posts/MySQL优化.md","hash":"08de9a442995214b73ff2686fd12f6563d079c6e","modified":1520920313654},{"_id":"source/_posts/MySQL执行计划.md","hash":"d92994e706de97d74af8c3247d9fec2650618e8a","modified":1524797433906},{"_id":"source/_posts/Mybatis之缓存.md","hash":"f4e500faec55c071cb04c9698d8a8856259742b9","modified":1521526677946},{"_id":"source/_posts/Nginx配置文件详解.md","hash":"0bdb63bb8aeed0e23deb8baae5e45d372479b4ec","modified":1520920100900},{"_id":"source/_posts/Redis数据过期策略.md","hash":"643f7b4b33c9835c0fc30b40592c9f999fdb4af2","modified":1523355159340},{"_id":"source/_posts/Sping定时任务.md","hash":"708490723c3146f61c8f3df5c654ceae35f480e1","modified":1520920013196},{"_id":"source/_posts/Spring-AOP两种配置方式.md","hash":"33bbc777610775b099965356086fe19461934454","modified":1520920350194},{"_id":"source/_posts/Spring-Mybatis之Mapper热部署.md","hash":"94d7625d7e51508091b42cf7a990c3fa6e09bdd7","modified":1521513912021},{"_id":"source/_posts/Spring-webSocket.md","hash":"d6ffa97bb1c43d34bd9833189aae96db930e819a","modified":1521261047275},{"_id":"source/_posts/Spring之动态代理.md","hash":"f0ecfb702a94858a6b255a1e79fc2104ab0c4087","modified":1522719976918},{"_id":"source/_posts/tomcat入门.md","hash":"29522ed0bcbaca9f3be43e509f9482116c354ded","modified":1520920378071},{"_id":"source/_posts/UML工具-PowerDesigner设计数据库.md","hash":"a0bf199db805a5fa4f60a27626f19c226ee6b52e","modified":1520920391889},{"_id":"source/_posts/博客建成第一天.md","hash":"daed0b5e1226e46c55d599670214fc9cd6f6d35f","modified":1515115030015},{"_id":"source/_posts/分布式下ID生成算法-SnowFlake.md","hash":"907c67288f5df284ff9a7737f6dcf521a477a998","modified":1520920421330},{"_id":"source/_posts/回顾过去-展望未来.md","hash":"c7694bc22696dc200b7b81ffce097fdc22f14b78","modified":1520920431648},{"_id":"source/_posts/大话数据库连接池.md","hash":"085e839e501a43e415ffe9063589cadba17af64b","modified":1521526946399},{"_id":"source/_posts/微信公众号网页开发.md","hash":"c0851f6d13a66adf663ca04d8e902bcd914da904","modified":1520920482015},{"_id":"source/_posts/浅谈共享单车.md","hash":"a455aae06fea5bda269dedb837e9d19c1e421443","modified":1515115012638},{"_id":"source/_posts/系统中功能点的版本控制.md","hash":"13e33bb70c3e7f847631fb7c4b7ae0f955bd2dd6","modified":1520920503365},{"_id":"source/_posts/详解Tomcat连接池与连接数.md","hash":"2122ce1717950a36336331dd2af21b1c3ab6a348","modified":1520920518252},{"_id":"source/_posts/线程池之ThreadPoolExecutor.md","hash":"647f3039030d5a830d7d3b161ec404e40335a526","modified":1521511113008},{"_id":"source/_posts/说说JSON和JSONP.md","hash":"185daf92d8c433f1478c8e9a570564ad50931970","modified":1520920467615},{"_id":"source/_posts/谈谈敏捷开发.md","hash":"954efe1c1ad2862123bd6babf6c1cf56d0a6d60a","modified":1521081338089},{"_id":"source/_posts/静态服务器搭建及前端知识点.md","hash":"4decc6b33647111a4f641d32f133876ca3fabed4","modified":1521952122066},{"_id":"source/_posts/跨页面-Tab-Window-通信的几种方法.md","hash":"d1f336a5746b031ce7c767b332314a9a89cabe1d","modified":1520920455005},{"_id":"source/about/index.md","hash":"98440174c0a5feee882109b861955d345f85e531","modified":1496540493000},{"_id":"source/categories/index.md","hash":"90bb103e21f9645871d8ce6122db99407c76ea87","modified":1496540493000},{"_id":"source/tags/index.md","hash":"11c6ba3279f347c97931477f61bc326b07f0714e","modified":1496540493000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"source/favicon.ico","hash":"99e87757f58b44828d2a92c39731731ebd6adc4e","modified":1516434104696},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496540493000},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"396feef13c2f0a2241d70b28a304e6583d3d32f8","modified":1520907607252},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1496540493000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496540493000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1496540493000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1a3ff2ac1c10b465579ede9405c0bf77b6541d78","modified":1520917873916},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1496540493000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e373ae99e1ffe14c9892ffc0efa93a52a715924b","modified":1496540493000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1496540493000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3543660367ff829abb3c56e0a9c04c209bcfbf8d","modified":1496540493000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3610c011f285501132e5655ae4d1819e6d33e7de","modified":1496540493000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1496540493000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1520908011687},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1496540493000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1496540493000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1496540493000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1496540493000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1496540493000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1496540493000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1496540493000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1496540493000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1496540493000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1496540493000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1496540493000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1496540493000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1496540493000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1496540493000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1496540493000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1496540493000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1496540493000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1496540493000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1496540493000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1496540493000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496540493000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496540493000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1496540493000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1496540493000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496540493000},{"_id":"themes/next/source/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496540493000},{"_id":"themes/next/source/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1496540493000},{"_id":"themes/next/source/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1496540493000},{"_id":"themes/next/source/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1496540493000},{"_id":"themes/next/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1504510516600},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1496540493000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1496540493000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1496540493000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1496540493000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c9dfa6b127661e34fe976df36a34ae42d07f175e","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1496540493000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1496540493000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"9fbdeb83a3a824fc27c16865ed3706889e99a04e","modified":1496540493000},{"_id":"themes/next/source/css/_variables/donate.styl","hash":"5ce88441b2400ebda1e13ae0903880f9ceaa3593","modified":1496540493000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496540493000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496540493000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496540493000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496540493000},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1520907163129},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496540493000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496540493000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496540493000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1496540493000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496540493000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496540493000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1496540493000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496540493000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496540493000},{"_id":"source/favicon1.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1504510516600},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1496540493000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"a917c5f953f9b9d1cfd50df846b4edd3600cd0bc","modified":1520910416713},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"f1df2efa476892bb92307dbf7881cb19a525619b","modified":1520909979614},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1520909929566},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1496540493000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496540493000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496540493000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"737f317cb83de04002f3bfda24f996775ff05f8e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"000ec53f18596a218246799c479302e775c9cff1","modified":1520910506551},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"24d2883695271695010d7caf1d39c7c6a748f3f0","modified":1520907354329},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"0f0d6d0f2a3a45df70acf8c553d1fc5aac2fdff2","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496540493000},{"_id":"themes/next/source/images/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1504510516600},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496540493000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496540493000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496540493000},{"_id":"public/baidusitemap.xml","hash":"dbf62493b90fe115cefc3b450e5efb9b6b4c3f4a","modified":1524809484237},{"_id":"public/content.json","hash":"22348f76b809474ddee2a54fedbc902f636a95b2","modified":1524809484288},{"_id":"public/search.xml","hash":"6599a2fb2c4c60a3a8e6f3c10b589f30aa4d0ef3","modified":1524809484289},{"_id":"public/sitemap.xml","hash":"678362aa5d71467f213142db52e8b0d9ef8c3321","modified":1524809484289},{"_id":"public/404.html","hash":"6e9c31aba82f4f05b8a0605be583b939d04b4b96","modified":1524809484647},{"_id":"public/about/index.html","hash":"7a99c21d10c963aad9f92baedc32f63f653a0efb","modified":1524809484649},{"_id":"public/categories/index.html","hash":"1558ef9de1095686bf00a6c36db3e1cf274abe28","modified":1524809484650},{"_id":"public/tags/index.html","hash":"b8d21dd91ca3fbdcadc71c750d038409b2c82c26","modified":1524809484650},{"_id":"public/2017/03/07/博客建成第一天/index.html","hash":"be6d0e5362f5260b95841014cfa3c10eafbf0702","modified":1524809484650},{"_id":"public/2017/03/21/Markdown语法/index.html","hash":"2ea9f86f98f613b00a57b5d45728a78f4ab5ed96","modified":1524809484650},{"_id":"public/2017/03/24/浅谈共享单车/index.html","hash":"26d437def8201ad77734fd0f23cfad09745c5335","modified":1524809484650},{"_id":"public/2017/03/27/JAVA定时调度-Timer和Executors/index.html","hash":"ea91f878b1aa1dc62357660fa2f385b46cd7aff0","modified":1524809484650},{"_id":"public/2017/04/01/JAVA实现简单爬虫/index.html","hash":"6854b735d435cd1c24eacec61076e924b6238033","modified":1524809484650},{"_id":"public/2017/04/07/Linux基本命令/index.html","hash":"ce4adcab34085cc8761176025b55653d42e51f62","modified":1524809484651},{"_id":"public/2017/04/17/MySQL优化/index.html","hash":"002d53a59301be57cfe535dba58c52cc3e3f9084","modified":1524809484651},{"_id":"public/2017/06/01/微信公众号网页开发/index.html","hash":"264700ba4e46f97e1a943e2332957f20dd401517","modified":1524809484651},{"_id":"public/2017/06/13/静态服务器搭建及前端知识点/index.html","hash":"2a878f9b24cce6dacd972b072248e67ccb1c4a4c","modified":1524809484651},{"_id":"public/2017/07/27/JAVA实现HTML转PDF/index.html","hash":"99210e70c11a2aa7e0872285128df3e26b7cb02b","modified":1524809484652},{"_id":"public/2017/09/01/跨页面-Tab-Window-通信的几种方法/index.html","hash":"ec62da2c784ce4a16bbf98c97eac32db4d1fcbda","modified":1524809484652},{"_id":"public/2017/09/09/Spring-AOP两种配置方式/index.html","hash":"2d36dfc17a271b9511cdd8b92681c15ddc7610b2","modified":1524809484653},{"_id":"public/2017/09/15/Spring-Mybatis之Mapper热部署/index.html","hash":"896a4915ed377d245cce89a39851a2c43eed8d47","modified":1524809484653},{"_id":"public/2017/09/21/系统中功能点的版本控制/index.html","hash":"797e976973ee1a634567ae9cf4ba938e2d548d97","modified":1524809484653},{"_id":"public/2017/09/24/Java备份和还原MySQL数据库/index.html","hash":"4e718196be59315d830cfaf660c433a6ec8f2a9e","modified":1524809484653},{"_id":"public/2017/10/30/分布式下ID生成算法-SnowFlake/index.html","hash":"e6429aed03b5717d12b627b6273e2be72bde63cd","modified":1524809484653},{"_id":"public/2017/11/13/Java生成PDF/index.html","hash":"377577476972168b27325f90f052c880ec73ba90","modified":1524809484653},{"_id":"public/2017/11/20/JVM入门/index.html","hash":"f3571494a9c43403760545639ad2da3a22b431d4","modified":1524809484653},{"_id":"public/2017/12/01/Java-String-intern方法/index.html","hash":"77db4caabfa6b28987a23fb15e2a3a62cc01cfa6","modified":1524809484653},{"_id":"public/2017/12/06/UML工具-PowerDesigner设计数据库/index.html","hash":"8a3c0ccfa30e7abf252a87f960cc486b12d95862","modified":1524809484654},{"_id":"public/2017/12/13/JVM类加载机制/index.html","hash":"e5a74eb5e55f8c4eb631015e39a1c77ee86fec75","modified":1524809484654},{"_id":"public/2017/12/20/tomcat入门/index.html","hash":"9efd2d35f5e016deb1f1b3a22884d9cbf96b0f13","modified":1524809484654},{"_id":"public/2017/12/28/详解Tomcat连接池与连接数/index.html","hash":"933a62775eb1bebc6c137c41ac40a30d88dea75b","modified":1524809484654},{"_id":"public/2018/01/02/回顾过去-展望未来/index.html","hash":"acd696231fe251aa0d30e96000c775ecc1289591","modified":1524809484654},{"_id":"public/2018/01/05/Linux下Tomcat的安装与优化/index.html","hash":"a438487be372a4092c973d16213fd0cd87cadb77","modified":1524809484654},{"_id":"public/2018/01/09/Linux下安装JDK与MySQL/index.html","hash":"b929c2ca308f2369d3bfcc84b1da340f8e5a9d5a","modified":1524809484654},{"_id":"public/2018/01/11/Linux下安装Nginx/index.html","hash":"c53cb07c4925f6b6bf1cfb7e5021c5a430ffb6e5","modified":1524809484654},{"_id":"public/2018/01/16/说说JSON和JSONP/index.html","hash":"98be9c8ffe3ead23004d7bde7d2dd9496fe338f9","modified":1524809484654},{"_id":"public/2018/01/20/HttpClient后台跨域/index.html","hash":"1b61d3c97f1ecaefaba02adbf248aeb2d97a8bd5","modified":1524809484655},{"_id":"public/2018/01/24/Nginx配置文件详解/index.html","hash":"322894652836dbd31baedf87ea87f295847272ac","modified":1524809484655},{"_id":"public/2018/02/06/大话数据库连接池/index.html","hash":"af20700493b53da40848a5383c90cb19fb4fda91","modified":1524809484655},{"_id":"public/2018/03/07/Sping定时任务/index.html","hash":"8a7fda4477fd184a5864f7481cdeceea27d289ab","modified":1524809484655},{"_id":"public/2018/03/15/谈谈敏捷开发/index.html","hash":"a9b5ec0494f9007cd477f45479f78a4a25cfdceb","modified":1524809484655},{"_id":"public/2018/03/16/Spring-webSocket/index.html","hash":"febbd2844065286ba3630effc6c248a02dc42ba9","modified":1524809484655},{"_id":"public/2018/03/17/线程池之ThreadPoolExecutor/index.html","hash":"a78309441657c0086a0e5d247eb4b55efeccfdc9","modified":1524809484655},{"_id":"public/2018/03/20/Mybatis之缓存/index.html","hash":"c293d7e1a1ce10c1d1faa372b907caa39e705c1c","modified":1524809484655},{"_id":"public/2018/03/28/Apache-Commons-Email发送邮件/index.html","hash":"e16e41e3a1390325fec512b0ff7d3df5ae628cec","modified":1524809484655},{"_id":"public/2018/04/02/Spring之动态代理/index.html","hash":"33bc3cdb5adc50fee7c7c6a6e1284aa1d2ce2f47","modified":1524809484655},{"_id":"public/2018/04/09/Redis数据过期策略/index.html","hash":"683bb88d8324fd277eb88892597d457286f5bdcb","modified":1524809484656},{"_id":"public/2018/04/17/MySQL主从复制/index.html","hash":"aebf41d8117b75bc77a5750fd3ab061781043b93","modified":1524809484656},{"_id":"public/2018/04/27/MySQL执行计划/index.html","hash":"e542069965cb9337c19567f8ad8526d8c30b8f70","modified":1524809484656},{"_id":"public/archives/index.html","hash":"2ed8fc3228a7fd46edd639280ee4f9eb6df7ab9b","modified":1524809484656},{"_id":"public/archives/page/2/index.html","hash":"2a893d2603ae10c84440994e9075a62c7676cb27","modified":1524809484656},{"_id":"public/archives/page/3/index.html","hash":"56e7179f6259c2226c1837885a2cfd06d767c784","modified":1524809484656},{"_id":"public/archives/page/4/index.html","hash":"7f4142a1390c3f85ff97aa7b9e094f25ef09acfb","modified":1524809484656},{"_id":"public/archives/page/5/index.html","hash":"068940e1828d93506874974168c3fee466101eaa","modified":1524809484656},{"_id":"public/archives/2017/index.html","hash":"ada88f5d8ebe52c7527a09a201824df13a010b82","modified":1524809484656},{"_id":"public/archives/2017/page/2/index.html","hash":"5d864eb3dbdd4a40716e04183b823c8f366986f1","modified":1524809484657},{"_id":"public/archives/2017/page/3/index.html","hash":"fd03153c6dd461af8ce3ffdc7d2fbbcf60558e58","modified":1524809484657},{"_id":"public/archives/2017/03/index.html","hash":"930a09e955dbc7576d17f7c0355f64db47ca8c56","modified":1524809484657},{"_id":"public/archives/2017/04/index.html","hash":"85b86f4b9e4f091350063d1ddfbf108929c8652d","modified":1524809484657},{"_id":"public/archives/2017/06/index.html","hash":"1d3a4c49ed457f347b2124e059fd4e8f2a6889d5","modified":1524809484657},{"_id":"public/archives/2017/07/index.html","hash":"f1d51930eb7bfae7df89b52073dfa4ff9016191d","modified":1524809484657},{"_id":"public/archives/2017/09/index.html","hash":"d86200e582df096dddb3067546a662099599d8c0","modified":1524809484657},{"_id":"public/archives/2017/10/index.html","hash":"e6ddbf52997eb56aced260f0036ba5244d07af20","modified":1524809484658},{"_id":"public/archives/2017/11/index.html","hash":"8492c926e97c735d64ebc49d6803ac921c9f0e67","modified":1524809484658},{"_id":"public/archives/2017/12/index.html","hash":"8692aeba7fa80f8f4546d5c060a4588ee3638c85","modified":1524809484658},{"_id":"public/archives/2018/index.html","hash":"10bedeec307f5a54c6d94402eba3070fcf8b917b","modified":1524809484658},{"_id":"public/archives/2018/page/2/index.html","hash":"cf5b34fefb5f55f7571c14ef5287b781b6db82e2","modified":1524809484658},{"_id":"public/archives/2018/01/index.html","hash":"0a5930d964c7ac8ab6acec36f24fa6cc9e91a46e","modified":1524809484658},{"_id":"public/archives/2018/02/index.html","hash":"33a1c2d89b7940fdf8fa296dd3645b58a1853dc7","modified":1524809484658},{"_id":"public/archives/2018/03/index.html","hash":"f84ee2d17b2eb9e014b995e2c3a2c0614c6a1a27","modified":1524809484659},{"_id":"public/archives/2018/04/index.html","hash":"b20bc542aa6153c7acf4647c5408def9bc4f2058","modified":1524809484659},{"_id":"public/categories/technology/index.html","hash":"ce5ac473e63c9796fbe5e4eb005331a7ae0bc17f","modified":1524809484659},{"_id":"public/categories/technology/page/2/index.html","hash":"755081dcde26deb421f8547523251c8c63ee0a7b","modified":1524809484659},{"_id":"public/categories/technology/page/3/index.html","hash":"fe8e930858b290ce47728cc6903f46a95147c90e","modified":1524809484659},{"_id":"public/categories/technology/page/4/index.html","hash":"f824222f6356030555600c60662a3ea16b88564f","modified":1524809484659},{"_id":"public/categories/life/index.html","hash":"e8de4784c08abab15318acf0d0cbe646305e9adc","modified":1524809484659},{"_id":"public/categories/society/index.html","hash":"753bc8e19457a4f4be2bbce6404fcd90c7418a83","modified":1524809484660},{"_id":"public/index.html","hash":"be2496cf69c4cc589e21d41e5b6a72eaa9d01de6","modified":1524809484660},{"_id":"public/page/2/index.html","hash":"6d658013c4d3bd443dada2e63763ed271d823b8d","modified":1524809484660},{"_id":"public/page/3/index.html","hash":"dd63b758c3ecef59913df12026800d14d0a21636","modified":1524809484660},{"_id":"public/page/4/index.html","hash":"93fb67386b64b8ffd6e4a806ad2d706c2df3e3b2","modified":1524809484660},{"_id":"public/page/5/index.html","hash":"3abdc550cf805597533589cfed50dbc41ee147ec","modified":1524809484660},{"_id":"public/page/6/index.html","hash":"c0a436a8d5053fe7e78be5df2386ce7364d2743d","modified":1524809484660},{"_id":"public/tags/java/index.html","hash":"4b498ad3f2612cbdc8e4251252c745f40e53c25d","modified":1524809484660},{"_id":"public/tags/java/page/2/index.html","hash":"55a796d57667d61c18d9e241b7a081835a7bd9f6","modified":1524809484660},{"_id":"public/tags/tips/index.html","hash":"96ed1ae63eaa72e2648e2f1f7e60d26e4015a04b","modified":1524809484660},{"_id":"public/tags/tips/page/2/index.html","hash":"d9448d2b181aa806d6600ecc5b02c257004b2e9d","modified":1524809484660},{"_id":"public/tags/tool/index.html","hash":"950e60e1bda9c34e690ba2f48c1a67bd0eaa6155","modified":1524809484661},{"_id":"public/tags/jvm/index.html","hash":"9032b8189001f1ac2b9e0e9a0d8a84aafe00883d","modified":1524809484661},{"_id":"public/tags/mysql/index.html","hash":"a2d77d4b7caa6288160ab40fe23782530dac0e3d","modified":1524809484661},{"_id":"public/tags/tomcat/index.html","hash":"739181a9f36c0fc9b174b825ecc46ce4c9cdd7aa","modified":1524809484661},{"_id":"public/tags/linux/index.html","hash":"c6c9ecfa41847704d28f7759e233eb7f6d03a0bf","modified":1524809484661},{"_id":"public/tags/mybatis/index.html","hash":"fe9dd121ecab244732255c790d66fac61d725f08","modified":1524809484661},{"_id":"public/tags/nginx/index.html","hash":"e656c100052d379cb180fdeb94d6113b84853170","modified":1524809484673},{"_id":"public/tags/redis/index.html","hash":"e3444de495b67f3994b41d5b8bc90df844a8ce30","modified":1524809484673},{"_id":"public/tags/spring/index.html","hash":"bbf64625fc5abc0f464fef03103d51eb544d0cbb","modified":1524809484673},{"_id":"public/tags/随笔/index.html","hash":"76fa9b464bc1c0b3546bbaacaa27a724a1e8d8e3","modified":1524809484673},{"_id":"public/tags/移动端/index.html","hash":"667e80352f42b707121d2b901bc54b25ba5f5b62","modified":1524809484674},{"_id":"public/tags/前端/index.html","hash":"d91198544adbb1fd46294e87e47aded8efe2a30f","modified":1524809484674},{"_id":"public/CNAME","hash":"58d0aa88566c797c28277a599098a85c25f39fd9","modified":1524809484674},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1524809484674},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1524809484674},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1524809484674},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1524809484674},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1524809484675},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1524809484675},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1524809484675},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1524809484675},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524809484675},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524809484675},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1524809484675},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1524809484675},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1524809484675},{"_id":"public/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1524809484676},{"_id":"public/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1524809484676},{"_id":"public/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1524809484676},{"_id":"public/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1524809484676},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1524809484676},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1524809484676},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1524809484676},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1524809484676},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1524809484677},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1524809484677},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1524809484677},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1524809484677},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1524809484677},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1524809484677},{"_id":"public/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1524809485849},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524809485852},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524809485866},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1524809485889},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1524809485889},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1524809485889},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1524809485890},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1524809485890},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1524809485890},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1524809485890},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1524809485890},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1524809485890},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1524809485890},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1524809485891},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1524809485891},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1524809485891},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1524809485891},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1524809485891},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1524809485891},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1524809485891},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1524809485892},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1524809485892},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1524809485892},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1524809485892},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1524809485892},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1524809485892},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1524809485892},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1524809485892},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1524809485892},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1524809485892},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1524809485893},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1524809485893},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1524809485893},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1524809485893},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1524809485894},{"_id":"public/css/main.css","hash":"2e8cd249c3fa4f32bde05252282e2b7d303baa86","modified":1524809485894},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1524809485894},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1524809485894},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1524809485894},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524809485895},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1524809485895},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1524809485895},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1524809485895},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524809485895},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1524809485895},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1524809485895},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1524809485895},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1524809485896},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524809485897},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1524809485897},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1524809485898},{"_id":"public/favicon.ico","hash":"99e87757f58b44828d2a92c39731731ebd6adc4e","modified":1524809485990},{"_id":"public/favicon1.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1524809486045},{"_id":"public/images/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1524809486046},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1524809486046}],"Category":[{"name":"technology","_id":"cjghk6tze00033gfkyrbs9pan"},{"name":"life","_id":"cjghk6u3e002j3gfkdqzau2xf"},{"name":"society","_id":"cjghk6u4000313gfkts6hurh7"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404����ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404����ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-08-14T09:26:38.043Z","updated":"2017-06-04T01:41:33.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjghk6tnu00003gfk1nykf5jd","content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404����ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404����ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"About","date":"2017-03-07T01:00:07.000Z","_content":"\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","source":"about/index.md","raw":"---\ntitle: About\ndate: 2017-03-07 09:00:07\n---\n\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","updated":"2017-06-04T01:41:33.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjghk6u9j005m3gfktd30t7j3","content":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n"},{"title":"分类","date":"2017-03-22T01:01:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-22 09:01:55\ntype: \"categories\"\n---\n","updated":"2017-06-04T01:41:33.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjghk6u9l005n3gfk7yx2uwix","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-03-22T01:01:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-22 09:01:22\ntype: \"tags\"\n---\n","updated":"2017-06-04T01:41:33.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjghk6u9n005o3gfk154cihn3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Apache-Commons-Email发送邮件","date":"2018-03-28T10:18:13.000Z","_content":"\n# 引言\n\n使用Apache-Commons-Email发送邮件\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/index.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n# 环境准备\n\nMaven的pom.xml 文件中引入依赖\n\n```xml\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-email</artifactId>\n    <version>1.5</version>\n</dependency>\n```\n\n# 一个简单的纯文本邮件\n\n## HTTP模式下\n\n第一个例子是创建一个简单的email。\n\n```java\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.SimpleEmail;\n/**\n* 类名: TestSimpleEmail.java <br/>\n* 详细描述: 一个简单的纯文本邮件   <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestSimpleEmail {\n\n\tpublic static void main(String[] args) {\n\n\t\t   SimpleEmail email = new SimpleEmail();\n\t        //设置发送主机的服务器地址(如果不设置，默认是\"mail.host\")\n\t        email.setHostName (\"smtp.163.com\");\n        \t// 开启debug模式\n        \temail.setDebug(true);\n\t        //设置端口号\n\t        email.setSmtpPort(25);//默认也是25\n\t        //如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码\n\t        email.setAuthentication ( \"from@163.com\", \"password\" );\n\t        try {\n\t        \t//设置收件人邮箱以及名称\n\t        \temail.addTo (\"to@qq.com\", \"收件人名称\");\n\t        \t//发件人邮箱以及名称\n\t\t        //email.setFrom (\"from@163.com\", \"发件人名称\");\n\t        \t//发件人邮箱以及名称，邮件编码格式\n\t\t        email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n\t\t        //设置邮件的主题\n\t\t        email.setSubject (\"这是邮件主题内容\");\n\t\t        //邮件正文消息\n\t\t        email.setMsg (\"这是邮件内容！\");\n\t\t        // 发送\n\t\t        email.send ();\n\t\t        System.out.println (\"Send email successful!\");\n\t\t\t} catch (EmailException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}       \n\t}\n}\n```\n\n如果遇到乱码情况可以通过以下方案解决：\n\n```java\n//设置主题的字符集为UTF-8\nemail.setCharset(\"UTF-8\");\n//设置内容的字符集为UTF-8,先buildMimeMessage才能设置内容文本\nemail.getMimeMessage().setText(\"测试邮件内容\",\"UTF-8\");\n```\n\n## 开启了HTTPS\n\n需要添加ssl端口，以及开启SSLOnConnect。\n\n```java\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.SimpleEmail;\n/**\n* 类名: TestSimpleSSLEmail.java <br/>\n* 详细描述: 一个简单的纯文本邮件 --开启了https的情况下   <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestSimpleSSLEmail {\n \n\tpublic static void main(String[] args) {\n \n\t\t    SimpleEmail email = new SimpleEmail ();\n\t        // smtp host\n\t        email.setHostName (\"smtp.qq.com\");\n\t        //端口号\n\t        email.setSslSmtpPort(\"465\");\n\t        // 登陆邮件服务器的用户名和密码\n\t        email.setAuthentication (\"from@qq.com\", \"password\");//注意qq邮箱需要授权，在设置那里生成一个随机码，然后填写到密码框。\n\t        // 接收人\n\t        email.setSSLOnConnect(true);\n\t        try {\n\t        \t//设置收件人邮箱以及名称\n\t\t\t\temail.addTo (\"to@qq.com\", \"to\");\n\t\t\t\t// 发送人\n\t\t        //email.setFrom (\"from@163.com\", \"from\");\n\t\t        email.setFrom(\"from@qq.com\", \"from\", \"UTF-8\");\n\t\t        //设置邮件的主题\n\t\t        email.setSubject (\"这是邮件主题内容\");\n\t\t        //邮件正文消息\n\t\t        email.setMsg (\"这是邮件内容！--一个简单的纯文本邮件 --开启了https的情况下  \");\n\t\t        // 发送\n\t\t        email.send ();\n\t\t        System.out.println (\"Send email successful!\");\n\t\t\t} catch (EmailException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t}\n}\n```\n\n特别要注意的是qq邮箱进行了加密，所以需要到qq账户设置里面拿到开启stmp发信客户端的密码。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-1.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-2.png\" algin=\"center\"/></div>\n\n取到一串字符串，然后填写到密码处。不然会报以下的错误。而不是填写QQ账号密码到密码认证处。详细也可以参照[***QQ客户端说明文档***](http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331)。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-Exception.png\" algin=\"center\"/></div>\n\n# 发送带附件的邮件\n\n发送带附件的邮件得用MultiPartEmail 类来给邮件添加附件。除过覆盖attach()方法来给邮件添加附件外，这个类就和SimpleEmail类差不多。对于内联或是加入附件的个数是没有限制的。但附件必须是MIME编码。最简单的添加附件的方式是用 EmailAttachment类。\n\n## 本地附件\n\n```java\nimport org.apache.commons.mail.EmailAttachment;\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.MultiPartEmail;\n/**\n* 类名: TestEmailAttachment.java <br/>\n* 详细描述:发送带附件的邮件--读取本地路径的文件  <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestEmailAttachment {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t  // 创建一个Email附件\n\t\t  EmailAttachment attachment = new EmailAttachment();\n           // 本地资源需要存在\n\t\t  attachment.setPath(\"E:\\\\qrcode.jpg\");\n\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);\n\t\t  attachment.setDescription(\"图片\");\n           // 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来。\n\t\t  attachment.setName(\"qrcode.jpg\");\n\t\t \n\t\t  // Create the email message\n\t\t  MultiPartEmail email = new MultiPartEmail();\n\t\t  // smtp host\n\t      email.setHostName (\"smtp.163.com\");\n\t      //设置端口号\n\t      email.setSmtpPort(25);//默认也是25\n\t      // 登陆邮件服务器的用户名和密码\n\t      email.setAuthentication (\"from@163.com\",\"password\");\n\t\t  try {\n                //设置收件人邮箱以及名称\n                email.addTo (\"to@qq.com\", \"收件人名称\");\n                //发件人邮箱以及名称\n                //email.setFrom (\"from@163.com\", \"发件人名称\");\n                //发件人邮箱以及名称，邮件编码格式\n                email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n                //设置邮件的主题\n                email.setSubject (\"这是邮件主题内容\");\n                //邮件正文消息\n                email.setMsg (\"这是邮件内容！\");\n\n                // add the attachment\n                email.attach(attachment);\n                // send the email\n                email.send();\n                System.out.println (\"Send email successful!\");\n\t\t} catch (EmailException e) {\n\t\t\te.printStackTrace();\n\t\t}\t  \n\t}\n}\n```\n\n## 远程附件\n\n如果没有本地文件，可以用 EmailAttachment 添加任何可用的URL。当邮件发送后，文件会自动加载并加入到邮件内容。\n\n```java\nimport java.net.MalformedURLException;\nimport java.net.URL;\n \nimport org.apache.commons.mail.EmailAttachment;\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.MultiPartEmail;\n/**\n* 类名: TestEmailAttachment.java <br/>\n* 详细描述:发送带附件的邮件--读取本地路径的文件  <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestEmailAttachment2 {\n \n\tpublic static void main(String[] args) throws MalformedURLException {\n\t\t\n\t\t  // 创建一个Email附件\n\t\t  EmailAttachment attachment = new EmailAttachment();\n\t\t  attachment.setURL(new URL(\"http://www.apache.org/images/asf_logo_wide.gif\"));\n\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);\n\t\t  attachment.setDescription(\"Apache logo\");\n           // 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来\n\t\t  attachment.setName(\"asf_logo_wide.gif\");\n\t\t \n\t\t  // Create the email message\n\t\t  MultiPartEmail email = new MultiPartEmail();\n\t\t  // smtp host\n\t      email.setHostName (\"smtp.163.com\");\n\t      //设置端口号(默认25)\n\t      email.setSmtpPort(25);\n\t      // 登陆邮件服务器的用户名和密码\n\t      email.setAuthentication (\"from@163.com\",\"password\");\n\t\t  \n\t\t  try {\n                // 设置收件人邮箱以及名称\n                email.addTo (\"to@qq.com\", \"收件人名称\");\n                // 发件人邮箱以及名称\n                // email.setFrom (\"from@163.com\", \"发件人名称\");\n                // 发件人邮箱以及名称，邮件编码格式\n                email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n                // 设置邮件的主题\n                email.setSubject (\"这是邮件主题内容\");\n                // 邮件正文消息\n                email.setMsg (\"这是邮件内容！\");\n\n                // 添加附件\n                email.attach(attachment);\n                // 发送邮件\n                email.send();\n                System.out.println (\"Send email successful!\");\n\t\t} catch (EmailException e) {\n\t\t\te.printStackTrace();\n\t\t}\t  \n\t}\n}\n```\n\n# 发送带HTML格式的邮件\n\n```java\nimport java.net.MalformedURLException;\nimport java.net.URL;\n \nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.HtmlEmail;\n/**\n* 类名: TestHtmlEmail.java <br/>\n* 详细描述: 发送带HTML格式的邮件<br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestHtmlEmail {\n \n\tpublic static void main(String[] args) {\n\t\t// 创建HTML邮件\n\t\tHtmlEmail email = new HtmlEmail();\n\t    // 设置发送主机的服务器地址\n        email.setHostName (\"smtp.163.com\");\n        // 设置端口号(默认25)\n        email.setSmtpPort(25);\n        // 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码\n        email.setAuthentication (\"from@163.com\", \"password\" );\n\t\t  try {\n\t\t\t  URL url = new URL(\"http://www.apache.org/images/asf_logo_wide.gif\");\n\t\t\t  String cid = email.embed(url, \"Apache logo\");\n\t\t\t  \n\t\t\t  //设置收件人邮箱以及名称\n\t          email.addTo (\"to@qq.com\", \"收件人名称\");\n\t          //发件人邮箱以及名称\n\t\t      //email.setFrom (\"from@163.com\", \"发件人名称\");\n\t          //发件人邮箱以及名称，邮件编码格式\n\t\t      email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n\t\t      //设置邮件的主题\n\t\t      email.setSubject (\"这是邮件主题内容-发送带HTML格式的邮件\");\n\t\t\t \n\t\t      // HTML信息\n\t\t\t  email.setHtmlMsg(\"<html>The apache logo - <img src=\\\"cid:\" + cid + \"\\\"></html>\");\n\t\t\t  // set the alternative message\n\t\t\t  email.setTextMsg(\"Your email client does not support HTML messages\");\n\t\t\t  // 发送邮件\n\t\t\t  email.send();\n\t\t\t  System.out.println (\"Send email successful!\");\n\t\t} catch (EmailException | MalformedURLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n注意：\n\n- embed()方法返回一个字符串。该字符串是一个随机生成的标识符，必须在图像标记中引用图像的图像。\n- 没有调用setmsg()这个例子。因为如果HTML内容里有内联图片的话，这个方法是不能用的。这样我们可以用setHtmlMsg和setTextMsg方法。\n\n# 发送带嵌入图片的HTML文本\n\n前面说的是创建带嵌入图片的HTML邮件，但是用HTML邮件模板来处理图片是很麻烦的。ImageHtmlEmail类能解决这个问题，它能很方便的将所有外部图片转化为内联图片。\n\n```java\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.ImageHtmlEmail;\nimport org.apache.commons.mail.resolver.DataSourceUrlResolver;\n \n/**\n* 类名: TestHtmlEmail.java <br/>\n* 详细描述: 发送带HTML格式的邮件--嵌入图片的HTML文本 <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestHtmlEmail2 {\n \n\tpublic static void main(String[] args) {\n \n\t\t// create the email message\n\t    ImageHtmlEmail email = new ImageHtmlEmail();\n\t\t// 设置发送主机的服务器地址\n\t    email.setHostName (\"smtp.163.com\");\n\t    // 设置端口号(默认25)\n        email.setSmtpPort(25);\n        // 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码\n        email.setAuthentication ( \"from@163.com\", \"password\" );\n\t\t// load your HTML email template\n\t\t String htmlEmailTemplate = \"嵌入图片的HTML文本:<img src=\\\"http://www.apache.org/images/feather.gif\\\"> ....\";\n \n\t\ttry {\n\t\t\tURL url = new URL(\"http://www.apache.org\");\n\t\t\temail.setDataSourceResolver(new DataSourceUrlResolver(url));\n\t\t\t// 设置收件人邮箱以及名称\n\t\t\temail.addTo(\"to@sina.com\", \"收件人名称\");\n\t\t\t// 发件人邮箱以及名称\n\t\t\t// 发件人邮箱以及名称，邮件编码格式\n\t\t\temail.setFrom(\"from@qq.com\", \"发件人名称\", \"UTF-8\");\n\t\t\t// 设置邮件的主题\n\t\t\temail.setSubject(\"这是邮件主题内容\");\n\n\t\t\t// set the html message\n\t\t\temail.setHtmlMsg(htmlEmailTemplate);\n\t\t\temail.setCharset(\"UTF-8\");\n\n\t\t\t// set the alternative message\n\t\t\temail.setTextMsg(\"Your email client does not support HTML messages\");\n\n\t\t\t// 发送邮件\n\t\t\temail.send();\n\t\t\tSystem.out.println(\"Send email successful!\");\n\t\t} catch (MalformedURLException | EmailException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n# 调试\n\nJavaMail API支持调试选项，通过调用setDebug(true)来开启调试。调试信息会通过System.out打印出来。\n\ncommons-email的安全设置的特性。可以用EmailLiveTest和EmailConfiguration类在真正的SMTP服务器上测试commons-email。\n\n# 认证\n\n如果要对SMTP服务器进行认证，可以在发邮件前调用setAuthentication(userName,password)方法测试。这将会在JavaMail API发送邮件时创建DefaultAuthenticator实例，要支持此方法得让你的服务器支持RFC255协议。\n\n可以用javax.mail.Authenticator的子类来完成更加复杂的认证，如弹出个对话框等。当想收集并处理用户信息时，必须覆盖getPasswordAuthentication()方法。用Email.setAuthenticator方法可以创建新的Authenticator类。\n\n# 参考文章\n\n***http://commons.apache.org/proper/commons-email/userguide.html***\n\n[***Apache Commons Email 发送邮件的用法介绍以及实战练习*** ](http://www.souvc.com/?p=499)","source":"_posts/Apache-Commons-Email发送邮件.md","raw":"---\ntitle: Apache-Commons-Email发送邮件\ndate: 2018-03-28 18:18:13\ntags: [java,tips]\ncategories: technology\n---\n\n# 引言\n\n使用Apache-Commons-Email发送邮件\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/index.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n# 环境准备\n\nMaven的pom.xml 文件中引入依赖\n\n```xml\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-email</artifactId>\n    <version>1.5</version>\n</dependency>\n```\n\n# 一个简单的纯文本邮件\n\n## HTTP模式下\n\n第一个例子是创建一个简单的email。\n\n```java\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.SimpleEmail;\n/**\n* 类名: TestSimpleEmail.java <br/>\n* 详细描述: 一个简单的纯文本邮件   <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestSimpleEmail {\n\n\tpublic static void main(String[] args) {\n\n\t\t   SimpleEmail email = new SimpleEmail();\n\t        //设置发送主机的服务器地址(如果不设置，默认是\"mail.host\")\n\t        email.setHostName (\"smtp.163.com\");\n        \t// 开启debug模式\n        \temail.setDebug(true);\n\t        //设置端口号\n\t        email.setSmtpPort(25);//默认也是25\n\t        //如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码\n\t        email.setAuthentication ( \"from@163.com\", \"password\" );\n\t        try {\n\t        \t//设置收件人邮箱以及名称\n\t        \temail.addTo (\"to@qq.com\", \"收件人名称\");\n\t        \t//发件人邮箱以及名称\n\t\t        //email.setFrom (\"from@163.com\", \"发件人名称\");\n\t        \t//发件人邮箱以及名称，邮件编码格式\n\t\t        email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n\t\t        //设置邮件的主题\n\t\t        email.setSubject (\"这是邮件主题内容\");\n\t\t        //邮件正文消息\n\t\t        email.setMsg (\"这是邮件内容！\");\n\t\t        // 发送\n\t\t        email.send ();\n\t\t        System.out.println (\"Send email successful!\");\n\t\t\t} catch (EmailException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}       \n\t}\n}\n```\n\n如果遇到乱码情况可以通过以下方案解决：\n\n```java\n//设置主题的字符集为UTF-8\nemail.setCharset(\"UTF-8\");\n//设置内容的字符集为UTF-8,先buildMimeMessage才能设置内容文本\nemail.getMimeMessage().setText(\"测试邮件内容\",\"UTF-8\");\n```\n\n## 开启了HTTPS\n\n需要添加ssl端口，以及开启SSLOnConnect。\n\n```java\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.SimpleEmail;\n/**\n* 类名: TestSimpleSSLEmail.java <br/>\n* 详细描述: 一个简单的纯文本邮件 --开启了https的情况下   <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestSimpleSSLEmail {\n \n\tpublic static void main(String[] args) {\n \n\t\t    SimpleEmail email = new SimpleEmail ();\n\t        // smtp host\n\t        email.setHostName (\"smtp.qq.com\");\n\t        //端口号\n\t        email.setSslSmtpPort(\"465\");\n\t        // 登陆邮件服务器的用户名和密码\n\t        email.setAuthentication (\"from@qq.com\", \"password\");//注意qq邮箱需要授权，在设置那里生成一个随机码，然后填写到密码框。\n\t        // 接收人\n\t        email.setSSLOnConnect(true);\n\t        try {\n\t        \t//设置收件人邮箱以及名称\n\t\t\t\temail.addTo (\"to@qq.com\", \"to\");\n\t\t\t\t// 发送人\n\t\t        //email.setFrom (\"from@163.com\", \"from\");\n\t\t        email.setFrom(\"from@qq.com\", \"from\", \"UTF-8\");\n\t\t        //设置邮件的主题\n\t\t        email.setSubject (\"这是邮件主题内容\");\n\t\t        //邮件正文消息\n\t\t        email.setMsg (\"这是邮件内容！--一个简单的纯文本邮件 --开启了https的情况下  \");\n\t\t        // 发送\n\t\t        email.send ();\n\t\t        System.out.println (\"Send email successful!\");\n\t\t\t} catch (EmailException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t}\n}\n```\n\n特别要注意的是qq邮箱进行了加密，所以需要到qq账户设置里面拿到开启stmp发信客户端的密码。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-1.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-2.png\" algin=\"center\"/></div>\n\n取到一串字符串，然后填写到密码处。不然会报以下的错误。而不是填写QQ账号密码到密码认证处。详细也可以参照[***QQ客户端说明文档***](http://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=331)。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-Exception.png\" algin=\"center\"/></div>\n\n# 发送带附件的邮件\n\n发送带附件的邮件得用MultiPartEmail 类来给邮件添加附件。除过覆盖attach()方法来给邮件添加附件外，这个类就和SimpleEmail类差不多。对于内联或是加入附件的个数是没有限制的。但附件必须是MIME编码。最简单的添加附件的方式是用 EmailAttachment类。\n\n## 本地附件\n\n```java\nimport org.apache.commons.mail.EmailAttachment;\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.MultiPartEmail;\n/**\n* 类名: TestEmailAttachment.java <br/>\n* 详细描述:发送带附件的邮件--读取本地路径的文件  <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestEmailAttachment {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t  // 创建一个Email附件\n\t\t  EmailAttachment attachment = new EmailAttachment();\n           // 本地资源需要存在\n\t\t  attachment.setPath(\"E:\\\\qrcode.jpg\");\n\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);\n\t\t  attachment.setDescription(\"图片\");\n           // 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来。\n\t\t  attachment.setName(\"qrcode.jpg\");\n\t\t \n\t\t  // Create the email message\n\t\t  MultiPartEmail email = new MultiPartEmail();\n\t\t  // smtp host\n\t      email.setHostName (\"smtp.163.com\");\n\t      //设置端口号\n\t      email.setSmtpPort(25);//默认也是25\n\t      // 登陆邮件服务器的用户名和密码\n\t      email.setAuthentication (\"from@163.com\",\"password\");\n\t\t  try {\n                //设置收件人邮箱以及名称\n                email.addTo (\"to@qq.com\", \"收件人名称\");\n                //发件人邮箱以及名称\n                //email.setFrom (\"from@163.com\", \"发件人名称\");\n                //发件人邮箱以及名称，邮件编码格式\n                email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n                //设置邮件的主题\n                email.setSubject (\"这是邮件主题内容\");\n                //邮件正文消息\n                email.setMsg (\"这是邮件内容！\");\n\n                // add the attachment\n                email.attach(attachment);\n                // send the email\n                email.send();\n                System.out.println (\"Send email successful!\");\n\t\t} catch (EmailException e) {\n\t\t\te.printStackTrace();\n\t\t}\t  \n\t}\n}\n```\n\n## 远程附件\n\n如果没有本地文件，可以用 EmailAttachment 添加任何可用的URL。当邮件发送后，文件会自动加载并加入到邮件内容。\n\n```java\nimport java.net.MalformedURLException;\nimport java.net.URL;\n \nimport org.apache.commons.mail.EmailAttachment;\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.MultiPartEmail;\n/**\n* 类名: TestEmailAttachment.java <br/>\n* 详细描述:发送带附件的邮件--读取本地路径的文件  <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestEmailAttachment2 {\n \n\tpublic static void main(String[] args) throws MalformedURLException {\n\t\t\n\t\t  // 创建一个Email附件\n\t\t  EmailAttachment attachment = new EmailAttachment();\n\t\t  attachment.setURL(new URL(\"http://www.apache.org/images/asf_logo_wide.gif\"));\n\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);\n\t\t  attachment.setDescription(\"Apache logo\");\n           // 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来\n\t\t  attachment.setName(\"asf_logo_wide.gif\");\n\t\t \n\t\t  // Create the email message\n\t\t  MultiPartEmail email = new MultiPartEmail();\n\t\t  // smtp host\n\t      email.setHostName (\"smtp.163.com\");\n\t      //设置端口号(默认25)\n\t      email.setSmtpPort(25);\n\t      // 登陆邮件服务器的用户名和密码\n\t      email.setAuthentication (\"from@163.com\",\"password\");\n\t\t  \n\t\t  try {\n                // 设置收件人邮箱以及名称\n                email.addTo (\"to@qq.com\", \"收件人名称\");\n                // 发件人邮箱以及名称\n                // email.setFrom (\"from@163.com\", \"发件人名称\");\n                // 发件人邮箱以及名称，邮件编码格式\n                email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n                // 设置邮件的主题\n                email.setSubject (\"这是邮件主题内容\");\n                // 邮件正文消息\n                email.setMsg (\"这是邮件内容！\");\n\n                // 添加附件\n                email.attach(attachment);\n                // 发送邮件\n                email.send();\n                System.out.println (\"Send email successful!\");\n\t\t} catch (EmailException e) {\n\t\t\te.printStackTrace();\n\t\t}\t  \n\t}\n}\n```\n\n# 发送带HTML格式的邮件\n\n```java\nimport java.net.MalformedURLException;\nimport java.net.URL;\n \nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.HtmlEmail;\n/**\n* 类名: TestHtmlEmail.java <br/>\n* 详细描述: 发送带HTML格式的邮件<br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestHtmlEmail {\n \n\tpublic static void main(String[] args) {\n\t\t// 创建HTML邮件\n\t\tHtmlEmail email = new HtmlEmail();\n\t    // 设置发送主机的服务器地址\n        email.setHostName (\"smtp.163.com\");\n        // 设置端口号(默认25)\n        email.setSmtpPort(25);\n        // 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码\n        email.setAuthentication (\"from@163.com\", \"password\" );\n\t\t  try {\n\t\t\t  URL url = new URL(\"http://www.apache.org/images/asf_logo_wide.gif\");\n\t\t\t  String cid = email.embed(url, \"Apache logo\");\n\t\t\t  \n\t\t\t  //设置收件人邮箱以及名称\n\t          email.addTo (\"to@qq.com\", \"收件人名称\");\n\t          //发件人邮箱以及名称\n\t\t      //email.setFrom (\"from@163.com\", \"发件人名称\");\n\t          //发件人邮箱以及名称，邮件编码格式\n\t\t      email.setFrom(\"from@163.com\", \"发件人名称\", \"UTF-8\");\n\t\t      //设置邮件的主题\n\t\t      email.setSubject (\"这是邮件主题内容-发送带HTML格式的邮件\");\n\t\t\t \n\t\t      // HTML信息\n\t\t\t  email.setHtmlMsg(\"<html>The apache logo - <img src=\\\"cid:\" + cid + \"\\\"></html>\");\n\t\t\t  // set the alternative message\n\t\t\t  email.setTextMsg(\"Your email client does not support HTML messages\");\n\t\t\t  // 发送邮件\n\t\t\t  email.send();\n\t\t\t  System.out.println (\"Send email successful!\");\n\t\t} catch (EmailException | MalformedURLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n注意：\n\n- embed()方法返回一个字符串。该字符串是一个随机生成的标识符，必须在图像标记中引用图像的图像。\n- 没有调用setmsg()这个例子。因为如果HTML内容里有内联图片的话，这个方法是不能用的。这样我们可以用setHtmlMsg和setTextMsg方法。\n\n# 发送带嵌入图片的HTML文本\n\n前面说的是创建带嵌入图片的HTML邮件，但是用HTML邮件模板来处理图片是很麻烦的。ImageHtmlEmail类能解决这个问题，它能很方便的将所有外部图片转化为内联图片。\n\n```java\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport org.apache.commons.mail.EmailException;\nimport org.apache.commons.mail.ImageHtmlEmail;\nimport org.apache.commons.mail.resolver.DataSourceUrlResolver;\n \n/**\n* 类名: TestHtmlEmail.java <br/>\n* 详细描述: 发送带HTML格式的邮件--嵌入图片的HTML文本 <br/>\n* 发布版本： V1.0  <br/>\n */\npublic class TestHtmlEmail2 {\n \n\tpublic static void main(String[] args) {\n \n\t\t// create the email message\n\t    ImageHtmlEmail email = new ImageHtmlEmail();\n\t\t// 设置发送主机的服务器地址\n\t    email.setHostName (\"smtp.163.com\");\n\t    // 设置端口号(默认25)\n        email.setSmtpPort(25);\n        // 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码\n        email.setAuthentication ( \"from@163.com\", \"password\" );\n\t\t// load your HTML email template\n\t\t String htmlEmailTemplate = \"嵌入图片的HTML文本:<img src=\\\"http://www.apache.org/images/feather.gif\\\"> ....\";\n \n\t\ttry {\n\t\t\tURL url = new URL(\"http://www.apache.org\");\n\t\t\temail.setDataSourceResolver(new DataSourceUrlResolver(url));\n\t\t\t// 设置收件人邮箱以及名称\n\t\t\temail.addTo(\"to@sina.com\", \"收件人名称\");\n\t\t\t// 发件人邮箱以及名称\n\t\t\t// 发件人邮箱以及名称，邮件编码格式\n\t\t\temail.setFrom(\"from@qq.com\", \"发件人名称\", \"UTF-8\");\n\t\t\t// 设置邮件的主题\n\t\t\temail.setSubject(\"这是邮件主题内容\");\n\n\t\t\t// set the html message\n\t\t\temail.setHtmlMsg(htmlEmailTemplate);\n\t\t\temail.setCharset(\"UTF-8\");\n\n\t\t\t// set the alternative message\n\t\t\temail.setTextMsg(\"Your email client does not support HTML messages\");\n\n\t\t\t// 发送邮件\n\t\t\temail.send();\n\t\t\tSystem.out.println(\"Send email successful!\");\n\t\t} catch (MalformedURLException | EmailException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n# 调试\n\nJavaMail API支持调试选项，通过调用setDebug(true)来开启调试。调试信息会通过System.out打印出来。\n\ncommons-email的安全设置的特性。可以用EmailLiveTest和EmailConfiguration类在真正的SMTP服务器上测试commons-email。\n\n# 认证\n\n如果要对SMTP服务器进行认证，可以在发邮件前调用setAuthentication(userName,password)方法测试。这将会在JavaMail API发送邮件时创建DefaultAuthenticator实例，要支持此方法得让你的服务器支持RFC255协议。\n\n可以用javax.mail.Authenticator的子类来完成更加复杂的认证，如弹出个对话框等。当想收集并处理用户信息时，必须覆盖getPasswordAuthentication()方法。用Email.setAuthenticator方法可以创建新的Authenticator类。\n\n# 参考文章\n\n***http://commons.apache.org/proper/commons-email/userguide.html***\n\n[***Apache Commons Email 发送邮件的用法介绍以及实战练习*** ](http://www.souvc.com/?p=499)","slug":"Apache-Commons-Email发送邮件","published":1,"updated":"2018-03-28T11:30:19.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6tz100013gfk5niy7mnf","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>使用Apache-Commons-Email发送邮件</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/index.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>Maven的pom.xml 文件中引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-email<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"一个简单的纯文本邮件\"><a href=\"#一个简单的纯文本邮件\" class=\"headerlink\" title=\"一个简单的纯文本邮件\"></a>一个简单的纯文本邮件</h1><h2 id=\"HTTP模式下\"><a href=\"#HTTP模式下\" class=\"headerlink\" title=\"HTTP模式下\"></a>HTTP模式下</h2><p>第一个例子是创建一个简单的email。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.SimpleEmail;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 类名: TestSimpleEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 一个简单的纯文本邮件   &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSimpleEmail</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t   SimpleEmail email = <span class=\"keyword\">new</span> SimpleEmail();</div><div class=\"line\">\t        <span class=\"comment\">//设置发送主机的服务器地址(如果不设置，默认是\"mail.host\")</span></div><div class=\"line\">\t        email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">        \t<span class=\"comment\">// 开启debug模式</span></div><div class=\"line\">        \temail.setDebug(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t        <span class=\"comment\">//设置端口号</span></div><div class=\"line\">\t        email.setSmtpPort(<span class=\"number\">25</span>);<span class=\"comment\">//默认也是25</span></div><div class=\"line\">\t        <span class=\"comment\">//如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码</span></div><div class=\"line\">\t        email.setAuthentication ( <span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"password\"</span> );</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t        \t<span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">\t        \temail.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">\t        \t<span class=\"comment\">//发件人邮箱以及名称</span></div><div class=\"line\">\t\t        <span class=\"comment\">//email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">\t        \t<span class=\"comment\">//发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">\t\t        email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">\t\t        email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//邮件正文消息</span></div><div class=\"line\">\t\t        email.setMsg (<span class=\"string\">\"这是邮件内容！\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">// 发送</span></div><div class=\"line\">\t\t        email.send ();</div><div class=\"line\">\t\t        System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;       </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果遇到乱码情况可以通过以下方案解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置主题的字符集为UTF-8</span></div><div class=\"line\">email.setCharset(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\"><span class=\"comment\">//设置内容的字符集为UTF-8,先buildMimeMessage才能设置内容文本</span></div><div class=\"line\">email.getMimeMessage().setText(<span class=\"string\">\"测试邮件内容\"</span>,<span class=\"string\">\"UTF-8\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"开启了HTTPS\"><a href=\"#开启了HTTPS\" class=\"headerlink\" title=\"开启了HTTPS\"></a>开启了HTTPS</h2><p>需要添加ssl端口，以及开启SSLOnConnect。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.SimpleEmail;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 类名: TestSimpleSSLEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 一个简单的纯文本邮件 --开启了https的情况下   &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSimpleSSLEmail</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t\t    SimpleEmail email = <span class=\"keyword\">new</span> SimpleEmail ();</div><div class=\"line\">\t        <span class=\"comment\">// smtp host</span></div><div class=\"line\">\t        email.setHostName (<span class=\"string\">\"smtp.qq.com\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">//端口号</span></div><div class=\"line\">\t        email.setSslSmtpPort(<span class=\"string\">\"465\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">// 登陆邮件服务器的用户名和密码</span></div><div class=\"line\">\t        email.setAuthentication (<span class=\"string\">\"from@qq.com\"</span>, <span class=\"string\">\"password\"</span>);<span class=\"comment\">//注意qq邮箱需要授权，在设置那里生成一个随机码，然后填写到密码框。</span></div><div class=\"line\">\t        <span class=\"comment\">// 接收人</span></div><div class=\"line\">\t        email.setSSLOnConnect(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t        \t<span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">\t\t\t\temail.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"to\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 发送人</span></div><div class=\"line\">\t\t        <span class=\"comment\">//email.setFrom (\"from@163.com\", \"from\");</span></div><div class=\"line\">\t\t        email.setFrom(<span class=\"string\">\"from@qq.com\"</span>, <span class=\"string\">\"from\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">\t\t        email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//邮件正文消息</span></div><div class=\"line\">\t\t        email.setMsg (<span class=\"string\">\"这是邮件内容！--一个简单的纯文本邮件 --开启了https的情况下  \"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">// 发送</span></div><div class=\"line\">\t\t        email.send ();</div><div class=\"line\">\t\t        System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>特别要注意的是qq邮箱进行了加密，所以需要到qq账户设置里面拿到开启stmp发信客户端的密码。</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-1.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-2.png\" algin=\"center\"></div>\n\n<p>取到一串字符串，然后填写到密码处。不然会报以下的错误。而不是填写QQ账号密码到密码认证处。详细也可以参照<a href=\"http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331\" target=\"_blank\" rel=\"external\"><strong><em>QQ客户端说明文档</em></strong></a>。</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-Exception.png\" algin=\"center\"></div>\n\n<h1 id=\"发送带附件的邮件\"><a href=\"#发送带附件的邮件\" class=\"headerlink\" title=\"发送带附件的邮件\"></a>发送带附件的邮件</h1><p>发送带附件的邮件得用MultiPartEmail 类来给邮件添加附件。除过覆盖attach()方法来给邮件添加附件外，这个类就和SimpleEmail类差不多。对于内联或是加入附件的个数是没有限制的。但附件必须是MIME编码。最简单的添加附件的方式是用 EmailAttachment类。</p>\n<h2 id=\"本地附件\"><a href=\"#本地附件\" class=\"headerlink\" title=\"本地附件\"></a>本地附件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailAttachment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.MultiPartEmail;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 类名: TestEmailAttachment.java &lt;br/&gt;</div><div class=\"line\">* 详细描述:发送带附件的邮件--读取本地路径的文件  &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestEmailAttachment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t  <span class=\"comment\">// 创建一个Email附件</span></div><div class=\"line\">\t\t  EmailAttachment attachment = <span class=\"keyword\">new</span> EmailAttachment();</div><div class=\"line\">           <span class=\"comment\">// 本地资源需要存在</span></div><div class=\"line\">\t\t  attachment.setPath(<span class=\"string\">\"E:\\\\qrcode.jpg\"</span>);</div><div class=\"line\">\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);</div><div class=\"line\">\t\t  attachment.setDescription(<span class=\"string\">\"图片\"</span>);</div><div class=\"line\">           <span class=\"comment\">// 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来。</span></div><div class=\"line\">\t\t  attachment.setName(<span class=\"string\">\"qrcode.jpg\"</span>);</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t  <span class=\"comment\">// Create the email message</span></div><div class=\"line\">\t\t  MultiPartEmail email = <span class=\"keyword\">new</span> MultiPartEmail();</div><div class=\"line\">\t\t  <span class=\"comment\">// smtp host</span></div><div class=\"line\">\t      email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">\t      <span class=\"comment\">//设置端口号</span></div><div class=\"line\">\t      email.setSmtpPort(<span class=\"number\">25</span>);<span class=\"comment\">//默认也是25</span></div><div class=\"line\">\t      <span class=\"comment\">// 登陆邮件服务器的用户名和密码</span></div><div class=\"line\">\t      email.setAuthentication (<span class=\"string\">\"from@163.com\"</span>,<span class=\"string\">\"password\"</span>);</div><div class=\"line\">\t\t  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">                email.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">                <span class=\"comment\">//发件人邮箱以及名称</span></div><div class=\"line\">                <span class=\"comment\">//email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">                <span class=\"comment\">//发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">                email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">                <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">                email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">                <span class=\"comment\">//邮件正文消息</span></div><div class=\"line\">                email.setMsg (<span class=\"string\">\"这是邮件内容！\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// add the attachment</span></div><div class=\"line\">                email.attach(attachment);</div><div class=\"line\">                <span class=\"comment\">// send the email</span></div><div class=\"line\">                email.send();</div><div class=\"line\">                System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;\t  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"远程附件\"><a href=\"#远程附件\" class=\"headerlink\" title=\"远程附件\"></a>远程附件</h2><p>如果没有本地文件，可以用 EmailAttachment 添加任何可用的URL。当邮件发送后，文件会自动加载并加入到邮件内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.net.MalformedURLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailAttachment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.MultiPartEmail;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 类名: TestEmailAttachment.java &lt;br/&gt;</div><div class=\"line\">* 详细描述:发送带附件的邮件--读取本地路径的文件  &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestEmailAttachment2</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MalformedURLException </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t  <span class=\"comment\">// 创建一个Email附件</span></div><div class=\"line\">\t\t  EmailAttachment attachment = <span class=\"keyword\">new</span> EmailAttachment();</div><div class=\"line\">\t\t  attachment.setURL(<span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://www.apache.org/images/asf_logo_wide.gif\"</span>));</div><div class=\"line\">\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);</div><div class=\"line\">\t\t  attachment.setDescription(<span class=\"string\">\"Apache logo\"</span>);</div><div class=\"line\">           <span class=\"comment\">// 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来</span></div><div class=\"line\">\t\t  attachment.setName(<span class=\"string\">\"asf_logo_wide.gif\"</span>);</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t  <span class=\"comment\">// Create the email message</span></div><div class=\"line\">\t\t  MultiPartEmail email = <span class=\"keyword\">new</span> MultiPartEmail();</div><div class=\"line\">\t\t  <span class=\"comment\">// smtp host</span></div><div class=\"line\">\t      email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">\t      <span class=\"comment\">//设置端口号(默认25)</span></div><div class=\"line\">\t      email.setSmtpPort(<span class=\"number\">25</span>);</div><div class=\"line\">\t      <span class=\"comment\">// 登陆邮件服务器的用户名和密码</span></div><div class=\"line\">\t      email.setAuthentication (<span class=\"string\">\"from@163.com\"</span>,<span class=\"string\">\"password\"</span>);</div><div class=\"line\">\t\t  </div><div class=\"line\">\t\t  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 设置收件人邮箱以及名称</span></div><div class=\"line\">                email.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">                <span class=\"comment\">// 发件人邮箱以及名称</span></div><div class=\"line\">                <span class=\"comment\">// email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">                <span class=\"comment\">// 发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">                email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">                <span class=\"comment\">// 设置邮件的主题</span></div><div class=\"line\">                email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">                <span class=\"comment\">// 邮件正文消息</span></div><div class=\"line\">                email.setMsg (<span class=\"string\">\"这是邮件内容！\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 添加附件</span></div><div class=\"line\">                email.attach(attachment);</div><div class=\"line\">                <span class=\"comment\">// 发送邮件</span></div><div class=\"line\">                email.send();</div><div class=\"line\">                System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;\t  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"发送带HTML格式的邮件\"><a href=\"#发送带HTML格式的邮件\" class=\"headerlink\" title=\"发送带HTML格式的邮件\"></a>发送带HTML格式的邮件</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.net.MalformedURLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.HtmlEmail;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 类名: TestHtmlEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 发送带HTML格式的邮件&lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHtmlEmail</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建HTML邮件</span></div><div class=\"line\">\t\tHtmlEmail email = <span class=\"keyword\">new</span> HtmlEmail();</div><div class=\"line\">\t    <span class=\"comment\">// 设置发送主机的服务器地址</span></div><div class=\"line\">        email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置端口号(默认25)</span></div><div class=\"line\">        email.setSmtpPort(<span class=\"number\">25</span>);</div><div class=\"line\">        <span class=\"comment\">// 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码</span></div><div class=\"line\">        email.setAuthentication (<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"password\"</span> );</div><div class=\"line\">\t\t  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t  URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://www.apache.org/images/asf_logo_wide.gif\"</span>);</div><div class=\"line\">\t\t\t  String cid = email.embed(url, <span class=\"string\">\"Apache logo\"</span>);</div><div class=\"line\">\t\t\t  </div><div class=\"line\">\t\t\t  <span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">\t          email.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">\t          <span class=\"comment\">//发件人邮箱以及名称</span></div><div class=\"line\">\t\t      <span class=\"comment\">//email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">\t          <span class=\"comment\">//发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">\t\t      email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t      <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">\t\t      email.setSubject (<span class=\"string\">\"这是邮件主题内容-发送带HTML格式的邮件\"</span>);</div><div class=\"line\">\t\t\t </div><div class=\"line\">\t\t      <span class=\"comment\">// HTML信息</span></div><div class=\"line\">\t\t\t  email.setHtmlMsg(<span class=\"string\">\"&lt;html&gt;The apache logo - &lt;img src=\\\"cid:\"</span> + cid + <span class=\"string\">\"\\\"&gt;&lt;/html&gt;\"</span>);</div><div class=\"line\">\t\t\t  <span class=\"comment\">// set the alternative message</span></div><div class=\"line\">\t\t\t  email.setTextMsg(<span class=\"string\">\"Your email client does not support HTML messages\"</span>);</div><div class=\"line\">\t\t\t  <span class=\"comment\">// 发送邮件</span></div><div class=\"line\">\t\t\t  email.send();</div><div class=\"line\">\t\t\t  System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (EmailException | MalformedURLException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>embed()方法返回一个字符串。该字符串是一个随机生成的标识符，必须在图像标记中引用图像的图像。</li>\n<li>没有调用setmsg()这个例子。因为如果HTML内容里有内联图片的话，这个方法是不能用的。这样我们可以用setHtmlMsg和setTextMsg方法。</li>\n</ul>\n<h1 id=\"发送带嵌入图片的HTML文本\"><a href=\"#发送带嵌入图片的HTML文本\" class=\"headerlink\" title=\"发送带嵌入图片的HTML文本\"></a>发送带嵌入图片的HTML文本</h1><p>前面说的是创建带嵌入图片的HTML邮件，但是用HTML邮件模板来处理图片是很麻烦的。ImageHtmlEmail类能解决这个问题，它能很方便的将所有外部图片转化为内联图片。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.net.MalformedURLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.ImageHtmlEmail;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.resolver.DataSourceUrlResolver;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 类名: TestHtmlEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 发送带HTML格式的邮件--嵌入图片的HTML文本 &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHtmlEmail2</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t\t<span class=\"comment\">// create the email message</span></div><div class=\"line\">\t    ImageHtmlEmail email = <span class=\"keyword\">new</span> ImageHtmlEmail();</div><div class=\"line\">\t\t<span class=\"comment\">// 设置发送主机的服务器地址</span></div><div class=\"line\">\t    email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">\t    <span class=\"comment\">// 设置端口号(默认25)</span></div><div class=\"line\">        email.setSmtpPort(<span class=\"number\">25</span>);</div><div class=\"line\">        <span class=\"comment\">// 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码</span></div><div class=\"line\">        email.setAuthentication ( <span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"password\"</span> );</div><div class=\"line\">\t\t<span class=\"comment\">// load your HTML email template</span></div><div class=\"line\">\t\t String htmlEmailTemplate = <span class=\"string\">\"嵌入图片的HTML文本:&lt;img src=\\\"http://www.apache.org/images/feather.gif\\\"&gt; ....\"</span>;</div><div class=\"line\"> </div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tURL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://www.apache.org\"</span>);</div><div class=\"line\">\t\t\temail.setDataSourceResolver(<span class=\"keyword\">new</span> DataSourceUrlResolver(url));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 设置收件人邮箱以及名称</span></div><div class=\"line\">\t\t\temail.addTo(<span class=\"string\">\"to@sina.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 发件人邮箱以及名称</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">\t\t\temail.setFrom(<span class=\"string\">\"from@qq.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 设置邮件的主题</span></div><div class=\"line\">\t\t\temail.setSubject(<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// set the html message</span></div><div class=\"line\">\t\t\temail.setHtmlMsg(htmlEmailTemplate);</div><div class=\"line\">\t\t\temail.setCharset(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// set the alternative message</span></div><div class=\"line\">\t\t\temail.setTextMsg(<span class=\"string\">\"Your email client does not support HTML messages\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 发送邮件</span></div><div class=\"line\">\t\t\temail.send();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (MalformedURLException | EmailException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><p>JavaMail API支持调试选项，通过调用setDebug(true)来开启调试。调试信息会通过System.out打印出来。</p>\n<p>commons-email的安全设置的特性。可以用EmailLiveTest和EmailConfiguration类在真正的SMTP服务器上测试commons-email。</p>\n<h1 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h1><p>如果要对SMTP服务器进行认证，可以在发邮件前调用setAuthentication(userName,password)方法测试。这将会在JavaMail API发送邮件时创建DefaultAuthenticator实例，要支持此方法得让你的服务器支持RFC255协议。</p>\n<p>可以用javax.mail.Authenticator的子类来完成更加复杂的认证，如弹出个对话框等。当想收集并处理用户信息时，必须覆盖getPasswordAuthentication()方法。用Email.setAuthenticator方法可以创建新的Authenticator类。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><strong><em><a href=\"http://commons.apache.org/proper/commons-email/userguide.html\" target=\"_blank\" rel=\"external\">http://commons.apache.org/proper/commons-email/userguide.html</a></em></strong></p>\n<p><a href=\"http://www.souvc.com/?p=499\" target=\"_blank\" rel=\"external\"><strong><em>Apache Commons Email 发送邮件的用法介绍以及实战练习</em></strong> </a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>使用Apache-Commons-Email发送邮件</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/index.jpg\" algin=\"center\"/></div>","more":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><p>Maven的pom.xml 文件中引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-email<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"一个简单的纯文本邮件\"><a href=\"#一个简单的纯文本邮件\" class=\"headerlink\" title=\"一个简单的纯文本邮件\"></a>一个简单的纯文本邮件</h1><h2 id=\"HTTP模式下\"><a href=\"#HTTP模式下\" class=\"headerlink\" title=\"HTTP模式下\"></a>HTTP模式下</h2><p>第一个例子是创建一个简单的email。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.SimpleEmail;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* 类名: TestSimpleEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 一个简单的纯文本邮件   &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSimpleEmail</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t   SimpleEmail email = <span class=\"keyword\">new</span> SimpleEmail();</div><div class=\"line\">\t        <span class=\"comment\">//设置发送主机的服务器地址(如果不设置，默认是\"mail.host\")</span></div><div class=\"line\">\t        email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">        \t<span class=\"comment\">// 开启debug模式</span></div><div class=\"line\">        \temail.setDebug(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t        <span class=\"comment\">//设置端口号</span></div><div class=\"line\">\t        email.setSmtpPort(<span class=\"number\">25</span>);<span class=\"comment\">//默认也是25</span></div><div class=\"line\">\t        <span class=\"comment\">//如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码</span></div><div class=\"line\">\t        email.setAuthentication ( <span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"password\"</span> );</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t        \t<span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">\t        \temail.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">\t        \t<span class=\"comment\">//发件人邮箱以及名称</span></div><div class=\"line\">\t\t        <span class=\"comment\">//email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">\t        \t<span class=\"comment\">//发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">\t\t        email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">\t\t        email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//邮件正文消息</span></div><div class=\"line\">\t\t        email.setMsg (<span class=\"string\">\"这是邮件内容！\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">// 发送</span></div><div class=\"line\">\t\t        email.send ();</div><div class=\"line\">\t\t        System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;       </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果遇到乱码情况可以通过以下方案解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//设置主题的字符集为UTF-8</span></div><div class=\"line\">email.setCharset(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\"><span class=\"comment\">//设置内容的字符集为UTF-8,先buildMimeMessage才能设置内容文本</span></div><div class=\"line\">email.getMimeMessage().setText(<span class=\"string\">\"测试邮件内容\"</span>,<span class=\"string\">\"UTF-8\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"开启了HTTPS\"><a href=\"#开启了HTTPS\" class=\"headerlink\" title=\"开启了HTTPS\"></a>开启了HTTPS</h2><p>需要添加ssl端口，以及开启SSLOnConnect。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.SimpleEmail;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* 类名: TestSimpleSSLEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 一个简单的纯文本邮件 --开启了https的情况下   &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSimpleSSLEmail</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t\t    SimpleEmail email = <span class=\"keyword\">new</span> SimpleEmail ();</div><div class=\"line\">\t        <span class=\"comment\">// smtp host</span></div><div class=\"line\">\t        email.setHostName (<span class=\"string\">\"smtp.qq.com\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">//端口号</span></div><div class=\"line\">\t        email.setSslSmtpPort(<span class=\"string\">\"465\"</span>);</div><div class=\"line\">\t        <span class=\"comment\">// 登陆邮件服务器的用户名和密码</span></div><div class=\"line\">\t        email.setAuthentication (<span class=\"string\">\"from@qq.com\"</span>, <span class=\"string\">\"password\"</span>);<span class=\"comment\">//注意qq邮箱需要授权，在设置那里生成一个随机码，然后填写到密码框。</span></div><div class=\"line\">\t        <span class=\"comment\">// 接收人</span></div><div class=\"line\">\t        email.setSSLOnConnect(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t        \t<span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">\t\t\t\temail.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"to\"</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 发送人</span></div><div class=\"line\">\t\t        <span class=\"comment\">//email.setFrom (\"from@163.com\", \"from\");</span></div><div class=\"line\">\t\t        email.setFrom(<span class=\"string\">\"from@qq.com\"</span>, <span class=\"string\">\"from\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">\t\t        email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">//邮件正文消息</span></div><div class=\"line\">\t\t        email.setMsg (<span class=\"string\">\"这是邮件内容！--一个简单的纯文本邮件 --开启了https的情况下  \"</span>);</div><div class=\"line\">\t\t        <span class=\"comment\">// 发送</span></div><div class=\"line\">\t\t        email.send ();</div><div class=\"line\">\t\t        System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>特别要注意的是qq邮箱进行了加密，所以需要到qq账户设置里面拿到开启stmp发信客户端的密码。</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-1.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-2.png\" algin=\"center\"/></div>\n\n<p>取到一串字符串，然后填写到密码处。不然会报以下的错误。而不是填写QQ账号密码到密码认证处。详细也可以参照<a href=\"http://service.mail.qq.com/cgi-bin/help?subtype=1&amp;&amp;id=28&amp;&amp;no=331\"><strong><em>QQ客户端说明文档</em></strong></a>。</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/java-email/QQ-Exception.png\" algin=\"center\"/></div>\n\n<h1 id=\"发送带附件的邮件\"><a href=\"#发送带附件的邮件\" class=\"headerlink\" title=\"发送带附件的邮件\"></a>发送带附件的邮件</h1><p>发送带附件的邮件得用MultiPartEmail 类来给邮件添加附件。除过覆盖attach()方法来给邮件添加附件外，这个类就和SimpleEmail类差不多。对于内联或是加入附件的个数是没有限制的。但附件必须是MIME编码。最简单的添加附件的方式是用 EmailAttachment类。</p>\n<h2 id=\"本地附件\"><a href=\"#本地附件\" class=\"headerlink\" title=\"本地附件\"></a>本地附件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailAttachment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.MultiPartEmail;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* 类名: TestEmailAttachment.java &lt;br/&gt;</div><div class=\"line\">* 详细描述:发送带附件的邮件--读取本地路径的文件  &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestEmailAttachment</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t  <span class=\"comment\">// 创建一个Email附件</span></div><div class=\"line\">\t\t  EmailAttachment attachment = <span class=\"keyword\">new</span> EmailAttachment();</div><div class=\"line\">           <span class=\"comment\">// 本地资源需要存在</span></div><div class=\"line\">\t\t  attachment.setPath(<span class=\"string\">\"E:\\\\qrcode.jpg\"</span>);</div><div class=\"line\">\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);</div><div class=\"line\">\t\t  attachment.setDescription(<span class=\"string\">\"图片\"</span>);</div><div class=\"line\">           <span class=\"comment\">// 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来。</span></div><div class=\"line\">\t\t  attachment.setName(<span class=\"string\">\"qrcode.jpg\"</span>);</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t  <span class=\"comment\">// Create the email message</span></div><div class=\"line\">\t\t  MultiPartEmail email = <span class=\"keyword\">new</span> MultiPartEmail();</div><div class=\"line\">\t\t  <span class=\"comment\">// smtp host</span></div><div class=\"line\">\t      email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">\t      <span class=\"comment\">//设置端口号</span></div><div class=\"line\">\t      email.setSmtpPort(<span class=\"number\">25</span>);<span class=\"comment\">//默认也是25</span></div><div class=\"line\">\t      <span class=\"comment\">// 登陆邮件服务器的用户名和密码</span></div><div class=\"line\">\t      email.setAuthentication (<span class=\"string\">\"from@163.com\"</span>,<span class=\"string\">\"password\"</span>);</div><div class=\"line\">\t\t  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">                email.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">                <span class=\"comment\">//发件人邮箱以及名称</span></div><div class=\"line\">                <span class=\"comment\">//email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">                <span class=\"comment\">//发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">                email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">                <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">                email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">                <span class=\"comment\">//邮件正文消息</span></div><div class=\"line\">                email.setMsg (<span class=\"string\">\"这是邮件内容！\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// add the attachment</span></div><div class=\"line\">                email.attach(attachment);</div><div class=\"line\">                <span class=\"comment\">// send the email</span></div><div class=\"line\">                email.send();</div><div class=\"line\">                System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;\t  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"远程附件\"><a href=\"#远程附件\" class=\"headerlink\" title=\"远程附件\"></a>远程附件</h2><p>如果没有本地文件，可以用 EmailAttachment 添加任何可用的URL。当邮件发送后，文件会自动加载并加入到邮件内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.net.MalformedURLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailAttachment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.MultiPartEmail;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* 类名: TestEmailAttachment.java &lt;br/&gt;</div><div class=\"line\">* 详细描述:发送带附件的邮件--读取本地路径的文件  &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestEmailAttachment2</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> MalformedURLException </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t  <span class=\"comment\">// 创建一个Email附件</span></div><div class=\"line\">\t\t  EmailAttachment attachment = <span class=\"keyword\">new</span> EmailAttachment();</div><div class=\"line\">\t\t  attachment.setURL(<span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://www.apache.org/images/asf_logo_wide.gif\"</span>));</div><div class=\"line\">\t\t  attachment.setDisposition(EmailAttachment.ATTACHMENT);</div><div class=\"line\">\t\t  attachment.setDescription(<span class=\"string\">\"Apache logo\"</span>);</div><div class=\"line\">           <span class=\"comment\">// 自定义文件名，并且格式要一致，不然附近收到的话，有可能读不出来</span></div><div class=\"line\">\t\t  attachment.setName(<span class=\"string\">\"asf_logo_wide.gif\"</span>);</div><div class=\"line\">\t\t </div><div class=\"line\">\t\t  <span class=\"comment\">// Create the email message</span></div><div class=\"line\">\t\t  MultiPartEmail email = <span class=\"keyword\">new</span> MultiPartEmail();</div><div class=\"line\">\t\t  <span class=\"comment\">// smtp host</span></div><div class=\"line\">\t      email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">\t      <span class=\"comment\">//设置端口号(默认25)</span></div><div class=\"line\">\t      email.setSmtpPort(<span class=\"number\">25</span>);</div><div class=\"line\">\t      <span class=\"comment\">// 登陆邮件服务器的用户名和密码</span></div><div class=\"line\">\t      email.setAuthentication (<span class=\"string\">\"from@163.com\"</span>,<span class=\"string\">\"password\"</span>);</div><div class=\"line\">\t\t  </div><div class=\"line\">\t\t  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// 设置收件人邮箱以及名称</span></div><div class=\"line\">                email.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">                <span class=\"comment\">// 发件人邮箱以及名称</span></div><div class=\"line\">                <span class=\"comment\">// email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">                <span class=\"comment\">// 发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">                email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">                <span class=\"comment\">// 设置邮件的主题</span></div><div class=\"line\">                email.setSubject (<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\">                <span class=\"comment\">// 邮件正文消息</span></div><div class=\"line\">                email.setMsg (<span class=\"string\">\"这是邮件内容！\"</span>);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 添加附件</span></div><div class=\"line\">                email.attach(attachment);</div><div class=\"line\">                <span class=\"comment\">// 发送邮件</span></div><div class=\"line\">                email.send();</div><div class=\"line\">                System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (EmailException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;\t  </div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"发送带HTML格式的邮件\"><a href=\"#发送带HTML格式的邮件\" class=\"headerlink\" title=\"发送带HTML格式的邮件\"></a>发送带HTML格式的邮件</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.net.MalformedURLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.HtmlEmail;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* 类名: TestHtmlEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 发送带HTML格式的邮件&lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHtmlEmail</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建HTML邮件</span></div><div class=\"line\">\t\tHtmlEmail email = <span class=\"keyword\">new</span> HtmlEmail();</div><div class=\"line\">\t    <span class=\"comment\">// 设置发送主机的服务器地址</span></div><div class=\"line\">        email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 设置端口号(默认25)</span></div><div class=\"line\">        email.setSmtpPort(<span class=\"number\">25</span>);</div><div class=\"line\">        <span class=\"comment\">// 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码</span></div><div class=\"line\">        email.setAuthentication (<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"password\"</span> );</div><div class=\"line\">\t\t  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t  URL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://www.apache.org/images/asf_logo_wide.gif\"</span>);</div><div class=\"line\">\t\t\t  String cid = email.embed(url, <span class=\"string\">\"Apache logo\"</span>);</div><div class=\"line\">\t\t\t  </div><div class=\"line\">\t\t\t  <span class=\"comment\">//设置收件人邮箱以及名称</span></div><div class=\"line\">\t          email.addTo (<span class=\"string\">\"to@qq.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">\t          <span class=\"comment\">//发件人邮箱以及名称</span></div><div class=\"line\">\t\t      <span class=\"comment\">//email.setFrom (\"from@163.com\", \"发件人名称\");</span></div><div class=\"line\">\t          <span class=\"comment\">//发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">\t\t      email.setFrom(<span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t      <span class=\"comment\">//设置邮件的主题</span></div><div class=\"line\">\t\t      email.setSubject (<span class=\"string\">\"这是邮件主题内容-发送带HTML格式的邮件\"</span>);</div><div class=\"line\">\t\t\t </div><div class=\"line\">\t\t      <span class=\"comment\">// HTML信息</span></div><div class=\"line\">\t\t\t  email.setHtmlMsg(<span class=\"string\">\"&lt;html&gt;The apache logo - &lt;img src=\\\"cid:\"</span> + cid + <span class=\"string\">\"\\\"&gt;&lt;/html&gt;\"</span>);</div><div class=\"line\">\t\t\t  <span class=\"comment\">// set the alternative message</span></div><div class=\"line\">\t\t\t  email.setTextMsg(<span class=\"string\">\"Your email client does not support HTML messages\"</span>);</div><div class=\"line\">\t\t\t  <span class=\"comment\">// 发送邮件</span></div><div class=\"line\">\t\t\t  email.send();</div><div class=\"line\">\t\t\t  System.out.println (<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (EmailException | MalformedURLException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>embed()方法返回一个字符串。该字符串是一个随机生成的标识符，必须在图像标记中引用图像的图像。</li>\n<li>没有调用setmsg()这个例子。因为如果HTML内容里有内联图片的话，这个方法是不能用的。这样我们可以用setHtmlMsg和setTextMsg方法。</li>\n</ul>\n<h1 id=\"发送带嵌入图片的HTML文本\"><a href=\"#发送带嵌入图片的HTML文本\" class=\"headerlink\" title=\"发送带嵌入图片的HTML文本\"></a>发送带嵌入图片的HTML文本</h1><p>前面说的是创建带嵌入图片的HTML邮件，但是用HTML邮件模板来处理图片是很麻烦的。ImageHtmlEmail类能解决这个问题，它能很方便的将所有外部图片转化为内联图片。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.net.MalformedURLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.EmailException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.ImageHtmlEmail;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.mail.resolver.DataSourceUrlResolver;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">* 类名: TestHtmlEmail.java &lt;br/&gt;</div><div class=\"line\">* 详细描述: 发送带HTML格式的邮件--嵌入图片的HTML文本 &lt;br/&gt;</div><div class=\"line\">* 发布版本： V1.0  &lt;br/&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHtmlEmail2</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">\t\t<span class=\"comment\">// create the email message</span></div><div class=\"line\">\t    ImageHtmlEmail email = <span class=\"keyword\">new</span> ImageHtmlEmail();</div><div class=\"line\">\t\t<span class=\"comment\">// 设置发送主机的服务器地址</span></div><div class=\"line\">\t    email.setHostName (<span class=\"string\">\"smtp.163.com\"</span>);</div><div class=\"line\">\t    <span class=\"comment\">// 设置端口号(默认25)</span></div><div class=\"line\">        email.setSmtpPort(<span class=\"number\">25</span>);</div><div class=\"line\">        <span class=\"comment\">// 如果要求身份验证，设置用户名、密码，分别为发件人在邮件服务器上注册的用户名和密码</span></div><div class=\"line\">        email.setAuthentication ( <span class=\"string\">\"from@163.com\"</span>, <span class=\"string\">\"password\"</span> );</div><div class=\"line\">\t\t<span class=\"comment\">// load your HTML email template</span></div><div class=\"line\">\t\t String htmlEmailTemplate = <span class=\"string\">\"嵌入图片的HTML文本:&lt;img src=\\\"http://www.apache.org/images/feather.gif\\\"&gt; ....\"</span>;</div><div class=\"line\"> </div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tURL url = <span class=\"keyword\">new</span> URL(<span class=\"string\">\"http://www.apache.org\"</span>);</div><div class=\"line\">\t\t\temail.setDataSourceResolver(<span class=\"keyword\">new</span> DataSourceUrlResolver(url));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 设置收件人邮箱以及名称</span></div><div class=\"line\">\t\t\temail.addTo(<span class=\"string\">\"to@sina.com\"</span>, <span class=\"string\">\"收件人名称\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 发件人邮箱以及名称</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 发件人邮箱以及名称，邮件编码格式</span></div><div class=\"line\">\t\t\temail.setFrom(<span class=\"string\">\"from@qq.com\"</span>, <span class=\"string\">\"发件人名称\"</span>, <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 设置邮件的主题</span></div><div class=\"line\">\t\t\temail.setSubject(<span class=\"string\">\"这是邮件主题内容\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// set the html message</span></div><div class=\"line\">\t\t\temail.setHtmlMsg(htmlEmailTemplate);</div><div class=\"line\">\t\t\temail.setCharset(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// set the alternative message</span></div><div class=\"line\">\t\t\temail.setTextMsg(<span class=\"string\">\"Your email client does not support HTML messages\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 发送邮件</span></div><div class=\"line\">\t\t\temail.send();</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Send email successful!\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (MalformedURLException | EmailException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h1><p>JavaMail API支持调试选项，通过调用setDebug(true)来开启调试。调试信息会通过System.out打印出来。</p>\n<p>commons-email的安全设置的特性。可以用EmailLiveTest和EmailConfiguration类在真正的SMTP服务器上测试commons-email。</p>\n<h1 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h1><p>如果要对SMTP服务器进行认证，可以在发邮件前调用setAuthentication(userName,password)方法测试。这将会在JavaMail API发送邮件时创建DefaultAuthenticator实例，要支持此方法得让你的服务器支持RFC255协议。</p>\n<p>可以用javax.mail.Authenticator的子类来完成更加复杂的认证，如弹出个对话框等。当想收集并处理用户信息时，必须覆盖getPasswordAuthentication()方法。用Email.setAuthenticator方法可以创建新的Authenticator类。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><strong><em><a href=\"http://commons.apache.org/proper/commons-email/userguide.html\">http://commons.apache.org/proper/commons-email/userguide.html</a></em></strong></p>\n<p><a href=\"http://www.souvc.com/?p=499\"><strong><em>Apache Commons Email 发送邮件的用法介绍以及实战练习</em></strong> </a></p>"},{"title":"HttpClient后台跨域","date":"2018-01-20T01:48:24.000Z","_content":"\n# 引言\n\n跨域可以说是一个经常遇到的问题，最近在联调一个身份证识别接口，该接口由python语言编写，Java语言调用，刚开始采用了CORS（Cross-Origin Resource Sharing）跨域，在IE8上一直出现兼容性问题，固定的思维容易出现错误，自己一直想着前端Ajax跨域而忽略了后台HttpClient的跨域，最后还是用HttpClient顺利解决问题，避免了浏览器跨域带来的兼容性问题。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01-20/HTTPClient.png\" algin=\"center\"/></div><!-- more -->\n\n# HttpClient VS Jsonp\n\n之前的博客有说过Jsonp的跨域方式，**jsonp的核心则是动态添加`<script>`标签来调用服务器提供的js脚本**。相比于HttpClient，Jsonp有两个很大的缺点：\n\n1、它只能发送get请求，如果发送post请求会造成无法解析获取不到数据的问题。\n\n2、如果返回的数据没有经过配置相应的编码文件来处理，拿到的数据可能会是一堆乱码。\n\n问题总是能解决，HttpClient则没那么多约束，HttpClient封装了http协议的jar包，基本的请求方法get、post、put、 delete都能实现，当然得在web.xml文件中配置相应的filter拦截器拦截请求后再设好编码，一般返回的参数都是Json字符串，而我们只需要导入Jackson或者fastJson或者别的jar包来解析这对象把他转换成你所需要的数据即可。\n\n# 整合Spring\n\n## 添加依赖\n\n```xml\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpclient</artifactId>\n\t<version>4.5.2</version>\n</dependency>\n```\n\n## 封装方法\n\n新建HttpClientUtil工具类\n\n```java\npublic class HttpClientUtil {\n\n\tpublic static String doGet(String url, Map<String, String> param) {\n\n\t\t// 创建Httpclient对象\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\n\t\tString resultString = \"\";\n\t\tCloseableHttpResponse response = null;\n\t\ttry {\n\t\t\t// 创建uri\n\t\t\tURIBuilder builder = new URIBuilder(url);\n\t\t\tif (param != null) {\n\t\t\t\tfor (String key : param.keySet()) {\n\t\t\t\t\tbuilder.addParameter(key, param.get(key));\n\t\t\t\t}\n\t\t\t}\n\t\t\tURI uri = builder.build();\n\n\t\t\t// 创建http GET请求\n\t\t\tHttpGet httpGet = new HttpGet(uri);\n\n\t\t\t// 执行请求\n\t\t\tresponse = httpclient.execute(httpGet);\n\t\t\t// 判断返回状态是否为200\n\t\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\t\tresultString = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (response != null) {\n\t\t\t\t\tresponse.close();\n\t\t\t\t}\n\t\t\t\thttpclient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn resultString;\n\t}\n\n\tpublic static String doGet(String url) {\n\t\treturn doGet(url, null);\n\t}\n\n\tpublic static String doPost(String url, Map<String, String> param) {\n\t\t// 创建Httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse response = null;\n\t\tString resultString = \"\";\n\t\ttry {\n\t\t\t// 创建Http Post请求\n\t\t\tHttpPost httpPost = new HttpPost(url);\n\t\t\t// 创建参数列表\n\t\t\tif (param != null) {\n\t\t\t\tList<NameValuePair> paramList = new ArrayList<>();\n\t\t\t\tfor (String key : param.keySet()) {\n\t\t\t\t\tparamList.add(new BasicNameValuePair(key, param.get(key)));\n\t\t\t\t}\n\t\t\t\t// 模拟表单\n\t\t\t\tUrlEncodedFormEntity entity = new UrlEncodedFormEntity(paramList);\n\t\t\t\thttpPost.setEntity(entity);\n\t\t\t}\n\t\t\t// 执行http请求\n\t\t\tresponse = httpClient.execute(httpPost);\n\t\t\tresultString = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn resultString;\n\t}\n\n\tpublic static String doPost(String url) {\n\t\treturn doPost(url, null);\n\t}\n\t\n\tpublic static String doPostJson(String url, String json) {\n\t\t// 创建Httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse response = null;\n\t\tString resultString = \"\";\n\t\ttry {\n\t\t\t// 创建Http Post请求\n\t\t\tHttpPost httpPost = new HttpPost(url);\n\t\t\t// 创建请求内容\n\t\t\tStringEntity entity = new StringEntity(json, ContentType.APPLICATION_JSON);\n\t\t\thttpPost.setEntity(entity);\n\t\t\t// 执行http请求\n\t\t\tresponse = httpClient.execute(httpPost);\n\t\t\tresultString = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn resultString;\n\t}\n}\n```\n\n## 单元测试\n\n```java\npublic class HttpClientTest {\n\n\t@Test\n\tpublic void doGet() throws Exception {\n\t\t//创建一个httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\t//创建一个GET对象\n\t\tHttpGet get = new HttpGet(\"http://www.sogou.com\");\n\t\t//执行请求\n\t\tCloseableHttpResponse response = httpClient.execute(get);\n\t\t//取响应的结果\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tSystem.out.println(statusCode);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString string = EntityUtils.toString(entity, \"utf-8\");\n\t\tSystem.out.println(string);\n\t\t//关闭httpclient\n\t\tresponse.close();\n\t\thttpClient.close();\n\t}\n\t\n\t@Test\n\tpublic void doGetWithParam() throws Exception{\n\t\t//创建一个httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\t//创建一个uri对象\n\t\tURIBuilder uriBuilder = new URIBuilder(\"http://www.sogou.com/web\");\n\t\turiBuilder.addParameter(\"query\", \"花千骨\");\n\t\tHttpGet get = new HttpGet(uriBuilder.build());\n\t\t//执行请求\n\t\tCloseableHttpResponse response = httpClient.execute(get);\n\t\t//取响应的结果\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tSystem.out.println(statusCode);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString string = EntityUtils.toString(entity, \"utf-8\");\n\t\tSystem.out.println(string);\n\t\t//关闭httpclient\n\t\tresponse.close();\n\t\thttpClient.close();\n\t}\n\t\n\t@Test\n\tpublic void doPost() throws Exception {\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\t\t//创建一个post对象\n\t\tHttpPost post = new HttpPost(\"http://localhost:8082/httpclient/post.action\");\n\t\t//执行post请求\n\t\tCloseableHttpResponse response = httpClient.execute(post);\n\t\tString string = EntityUtils.toString(response.getEntity());\n\t\tSystem.out.println(string);\n\t\tresponse.close();\n\t\thttpClient.close();\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void doPostWithParam() throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t \n\t\t//创建一个post对象  \n\t\tHttpPost post = new HttpPost(\"http://localhost:8082/httpclient/post.action\");\n\t\t//创建一个Entity。模拟一个表单\n\t\tList<NameValuePair> kvList = new ArrayList<>();\n\t\tkvList.add(new BasicNameValuePair(\"username\", \"张三\"));\n\t\tkvList.add(new BasicNameValuePair(\"password\", \"123\"));\n\t\t\n\t\t//包装成一个Entity对象 \n\t\tStringEntity entity = new UrlEncodedFormEntity(kvList, \"utf-8\");\n\t\t//设置请求的内容 \n\t\tpost.setEntity(entity);\n\t\t\n\t\t//执行post请求\n\t\tCloseableHttpResponse response = httpClient.execute(post);\n\t\tString string = EntityUtils.toString(response.getEntity());\n\t\tSystem.out.println(string);\n\t\tresponse.close();\n\t\thttpClient.close();\n\t}\n}\n```\n\n## 项目实例\n\n```java\n/**\n * 订单处理Service\n * <p>Title: OrderServiceImpl</p>\n * <p>Description: </p>\n * @version 1.0\n */\n@Service\npublic class OrderServiceImpl implements OrderService {\n\t\n\t@Value(\"${ORDER_BASE_URL}\")\n\tprivate String ORDER_BASE_URL;\n\t@Value(\"${ORDER_CREATE_URL}\")\n\tprivate String ORDER_CREATE_URL;\n\t\n\t@Override\n\tpublic String createOrder(Order order) {\n\t\t//调用order的服务提交订单。\n\t\tString json = HttpClientUtil.doPostJson(ORDER_BASE_URL + ORDER_CREATE_URL, JsonUtils.objectToJson(order));\n\t\t//把json转换成taotaoResult\n\t\tTaotaoResult taotaoResult = TaotaoResult.format(json);\n\t\tif (taotaoResult.getStatus() == 200) {\n\t\t\tObject orderId = taotaoResult.getData();\n\t\t\treturn orderId.toString();\n\t\t}\n\t\treturn \"\";\n\t}\n}\n```\n\n# 总结\n\nHttpClient与Jsonp能够轻易的解决跨域问题，从而得到自己想要的数据(来自不同IP，协议，端口)，唯一的不同点是，HttpClient是在后台Java代码中进行跨域访问，而Jsonp是在前台js中进行跨域访问。跨域还有一级跨域，二级跨域，更多内容值得研究。","source":"_posts/HttpClient后台跨域.md","raw":"---\ntitle: HttpClient后台跨域\ndate: 2018-01-20 09:48:24\ntags: [java,tips]\ncategories: technology\n---\n\n# 引言\n\n跨域可以说是一个经常遇到的问题，最近在联调一个身份证识别接口，该接口由python语言编写，Java语言调用，刚开始采用了CORS（Cross-Origin Resource Sharing）跨域，在IE8上一直出现兼容性问题，固定的思维容易出现错误，自己一直想着前端Ajax跨域而忽略了后台HttpClient的跨域，最后还是用HttpClient顺利解决问题，避免了浏览器跨域带来的兼容性问题。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01-20/HTTPClient.png\" algin=\"center\"/></div><!-- more -->\n\n# HttpClient VS Jsonp\n\n之前的博客有说过Jsonp的跨域方式，**jsonp的核心则是动态添加`<script>`标签来调用服务器提供的js脚本**。相比于HttpClient，Jsonp有两个很大的缺点：\n\n1、它只能发送get请求，如果发送post请求会造成无法解析获取不到数据的问题。\n\n2、如果返回的数据没有经过配置相应的编码文件来处理，拿到的数据可能会是一堆乱码。\n\n问题总是能解决，HttpClient则没那么多约束，HttpClient封装了http协议的jar包，基本的请求方法get、post、put、 delete都能实现，当然得在web.xml文件中配置相应的filter拦截器拦截请求后再设好编码，一般返回的参数都是Json字符串，而我们只需要导入Jackson或者fastJson或者别的jar包来解析这对象把他转换成你所需要的数据即可。\n\n# 整合Spring\n\n## 添加依赖\n\n```xml\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpclient</artifactId>\n\t<version>4.5.2</version>\n</dependency>\n```\n\n## 封装方法\n\n新建HttpClientUtil工具类\n\n```java\npublic class HttpClientUtil {\n\n\tpublic static String doGet(String url, Map<String, String> param) {\n\n\t\t// 创建Httpclient对象\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\n\t\tString resultString = \"\";\n\t\tCloseableHttpResponse response = null;\n\t\ttry {\n\t\t\t// 创建uri\n\t\t\tURIBuilder builder = new URIBuilder(url);\n\t\t\tif (param != null) {\n\t\t\t\tfor (String key : param.keySet()) {\n\t\t\t\t\tbuilder.addParameter(key, param.get(key));\n\t\t\t\t}\n\t\t\t}\n\t\t\tURI uri = builder.build();\n\n\t\t\t// 创建http GET请求\n\t\t\tHttpGet httpGet = new HttpGet(uri);\n\n\t\t\t// 执行请求\n\t\t\tresponse = httpclient.execute(httpGet);\n\t\t\t// 判断返回状态是否为200\n\t\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\t\tresultString = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (response != null) {\n\t\t\t\t\tresponse.close();\n\t\t\t\t}\n\t\t\t\thttpclient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn resultString;\n\t}\n\n\tpublic static String doGet(String url) {\n\t\treturn doGet(url, null);\n\t}\n\n\tpublic static String doPost(String url, Map<String, String> param) {\n\t\t// 创建Httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse response = null;\n\t\tString resultString = \"\";\n\t\ttry {\n\t\t\t// 创建Http Post请求\n\t\t\tHttpPost httpPost = new HttpPost(url);\n\t\t\t// 创建参数列表\n\t\t\tif (param != null) {\n\t\t\t\tList<NameValuePair> paramList = new ArrayList<>();\n\t\t\t\tfor (String key : param.keySet()) {\n\t\t\t\t\tparamList.add(new BasicNameValuePair(key, param.get(key)));\n\t\t\t\t}\n\t\t\t\t// 模拟表单\n\t\t\t\tUrlEncodedFormEntity entity = new UrlEncodedFormEntity(paramList);\n\t\t\t\thttpPost.setEntity(entity);\n\t\t\t}\n\t\t\t// 执行http请求\n\t\t\tresponse = httpClient.execute(httpPost);\n\t\t\tresultString = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn resultString;\n\t}\n\n\tpublic static String doPost(String url) {\n\t\treturn doPost(url, null);\n\t}\n\t\n\tpublic static String doPostJson(String url, String json) {\n\t\t// 创建Httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse response = null;\n\t\tString resultString = \"\";\n\t\ttry {\n\t\t\t// 创建Http Post请求\n\t\t\tHttpPost httpPost = new HttpPost(url);\n\t\t\t// 创建请求内容\n\t\t\tStringEntity entity = new StringEntity(json, ContentType.APPLICATION_JSON);\n\t\t\thttpPost.setEntity(entity);\n\t\t\t// 执行http请求\n\t\t\tresponse = httpClient.execute(httpPost);\n\t\t\tresultString = EntityUtils.toString(response.getEntity(), \"utf-8\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\treturn resultString;\n\t}\n}\n```\n\n## 单元测试\n\n```java\npublic class HttpClientTest {\n\n\t@Test\n\tpublic void doGet() throws Exception {\n\t\t//创建一个httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\t//创建一个GET对象\n\t\tHttpGet get = new HttpGet(\"http://www.sogou.com\");\n\t\t//执行请求\n\t\tCloseableHttpResponse response = httpClient.execute(get);\n\t\t//取响应的结果\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tSystem.out.println(statusCode);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString string = EntityUtils.toString(entity, \"utf-8\");\n\t\tSystem.out.println(string);\n\t\t//关闭httpclient\n\t\tresponse.close();\n\t\thttpClient.close();\n\t}\n\t\n\t@Test\n\tpublic void doGetWithParam() throws Exception{\n\t\t//创建一个httpclient对象\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\t//创建一个uri对象\n\t\tURIBuilder uriBuilder = new URIBuilder(\"http://www.sogou.com/web\");\n\t\turiBuilder.addParameter(\"query\", \"花千骨\");\n\t\tHttpGet get = new HttpGet(uriBuilder.build());\n\t\t//执行请求\n\t\tCloseableHttpResponse response = httpClient.execute(get);\n\t\t//取响应的结果\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tSystem.out.println(statusCode);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString string = EntityUtils.toString(entity, \"utf-8\");\n\t\tSystem.out.println(string);\n\t\t//关闭httpclient\n\t\tresponse.close();\n\t\thttpClient.close();\n\t}\n\t\n\t@Test\n\tpublic void doPost() throws Exception {\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\t\t//创建一个post对象\n\t\tHttpPost post = new HttpPost(\"http://localhost:8082/httpclient/post.action\");\n\t\t//执行post请求\n\t\tCloseableHttpResponse response = httpClient.execute(post);\n\t\tString string = EntityUtils.toString(response.getEntity());\n\t\tSystem.out.println(string);\n\t\tresponse.close();\n\t\thttpClient.close();\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void doPostWithParam() throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t \n\t\t//创建一个post对象  \n\t\tHttpPost post = new HttpPost(\"http://localhost:8082/httpclient/post.action\");\n\t\t//创建一个Entity。模拟一个表单\n\t\tList<NameValuePair> kvList = new ArrayList<>();\n\t\tkvList.add(new BasicNameValuePair(\"username\", \"张三\"));\n\t\tkvList.add(new BasicNameValuePair(\"password\", \"123\"));\n\t\t\n\t\t//包装成一个Entity对象 \n\t\tStringEntity entity = new UrlEncodedFormEntity(kvList, \"utf-8\");\n\t\t//设置请求的内容 \n\t\tpost.setEntity(entity);\n\t\t\n\t\t//执行post请求\n\t\tCloseableHttpResponse response = httpClient.execute(post);\n\t\tString string = EntityUtils.toString(response.getEntity());\n\t\tSystem.out.println(string);\n\t\tresponse.close();\n\t\thttpClient.close();\n\t}\n}\n```\n\n## 项目实例\n\n```java\n/**\n * 订单处理Service\n * <p>Title: OrderServiceImpl</p>\n * <p>Description: </p>\n * @version 1.0\n */\n@Service\npublic class OrderServiceImpl implements OrderService {\n\t\n\t@Value(\"${ORDER_BASE_URL}\")\n\tprivate String ORDER_BASE_URL;\n\t@Value(\"${ORDER_CREATE_URL}\")\n\tprivate String ORDER_CREATE_URL;\n\t\n\t@Override\n\tpublic String createOrder(Order order) {\n\t\t//调用order的服务提交订单。\n\t\tString json = HttpClientUtil.doPostJson(ORDER_BASE_URL + ORDER_CREATE_URL, JsonUtils.objectToJson(order));\n\t\t//把json转换成taotaoResult\n\t\tTaotaoResult taotaoResult = TaotaoResult.format(json);\n\t\tif (taotaoResult.getStatus() == 200) {\n\t\t\tObject orderId = taotaoResult.getData();\n\t\t\treturn orderId.toString();\n\t\t}\n\t\treturn \"\";\n\t}\n}\n```\n\n# 总结\n\nHttpClient与Jsonp能够轻易的解决跨域问题，从而得到自己想要的数据(来自不同IP，协议，端口)，唯一的不同点是，HttpClient是在后台Java代码中进行跨域访问，而Jsonp是在前台js中进行跨域访问。跨域还有一级跨域，二级跨域，更多内容值得研究。","slug":"HttpClient后台跨域","published":1,"updated":"2018-03-13T05:56:22.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6tzb00023gfk1icgof6u","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>跨域可以说是一个经常遇到的问题，最近在联调一个身份证识别接口，该接口由python语言编写，Java语言调用，刚开始采用了CORS（Cross-Origin Resource Sharing）跨域，在IE8上一直出现兼容性问题，固定的思维容易出现错误，自己一直想着前端Ajax跨域而忽略了后台HttpClient的跨域，最后还是用HttpClient顺利解决问题，避免了浏览器跨域带来的兼容性问题。<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01-20/HTTPClient.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"HttpClient-VS-Jsonp\"><a href=\"#HttpClient-VS-Jsonp\" class=\"headerlink\" title=\"HttpClient VS Jsonp\"></a>HttpClient VS Jsonp</h1><p>之前的博客有说过Jsonp的跨域方式，<strong>jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本</strong>。相比于HttpClient，Jsonp有两个很大的缺点：</p>\n<p>1、它只能发送get请求，如果发送post请求会造成无法解析获取不到数据的问题。</p>\n<p>2、如果返回的数据没有经过配置相应的编码文件来处理，拿到的数据可能会是一堆乱码。</p>\n<p>问题总是能解决，HttpClient则没那么多约束，HttpClient封装了http协议的jar包，基本的请求方法get、post、put、 delete都能实现，当然得在web.xml文件中配置相应的filter拦截器拦截请求后再设好编码，一般返回的参数都是Json字符串，而我们只需要导入Jackson或者fastJson或者别的jar包来解析这对象把他转换成你所需要的数据即可。</p>\n<h1 id=\"整合Spring\"><a href=\"#整合Spring\" class=\"headerlink\" title=\"整合Spring\"></a>整合Spring</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"封装方法\"><a href=\"#封装方法\" class=\"headerlink\" title=\"封装方法\"></a>封装方法</h2><p>新建HttpClientUtil工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doGet</span><span class=\"params\">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 创建Httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpclient = HttpClients.createDefault();</div><div class=\"line\"></div><div class=\"line\">\t\tString resultString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建uri</span></div><div class=\"line\">\t\t\tURIBuilder builder = <span class=\"keyword\">new</span> URIBuilder(url);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</div><div class=\"line\">\t\t\t\t\tbuilder.addParameter(key, param.get(key));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tURI uri = builder.build();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建http GET请求</span></div><div class=\"line\">\t\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(uri);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 执行请求</span></div><div class=\"line\">\t\t\tresponse = httpclient.execute(httpGet);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 判断返回状态是否为200</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (response.getStatusLine().getStatusCode() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\t\tresultString = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tresponse.close();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\thttpclient.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> resultString;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doGet</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> doGet(url, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doPost</span><span class=\"params\">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建Httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tString resultString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建Http Post请求</span></div><div class=\"line\">\t\t\tHttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(url);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建参数列表</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tList&lt;NameValuePair&gt; paramList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</div><div class=\"line\">\t\t\t\t\tparamList.add(<span class=\"keyword\">new</span> BasicNameValuePair(key, param.get(key)));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 模拟表单</span></div><div class=\"line\">\t\t\t\tUrlEncodedFormEntity entity = <span class=\"keyword\">new</span> UrlEncodedFormEntity(paramList);</div><div class=\"line\">\t\t\t\thttpPost.setEntity(entity);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 执行http请求</span></div><div class=\"line\">\t\t\tresponse = httpClient.execute(httpPost);</div><div class=\"line\">\t\t\tresultString = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tresponse.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> resultString;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doPost</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> doPost(url, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doPostJson</span><span class=\"params\">(String url, String json)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建Httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tString resultString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建Http Post请求</span></div><div class=\"line\">\t\t\tHttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(url);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建请求内容</span></div><div class=\"line\">\t\t\tStringEntity entity = <span class=\"keyword\">new</span> StringEntity(json, ContentType.APPLICATION_JSON);</div><div class=\"line\">\t\t\thttpPost.setEntity(entity);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 执行http请求</span></div><div class=\"line\">\t\t\tresponse = httpClient.execute(httpPost);</div><div class=\"line\">\t\t\tresultString = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tresponse.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> resultString;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个GET对象</span></div><div class=\"line\">\t\tHttpGet get = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://www.sogou.com\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//执行请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(get);</div><div class=\"line\">\t\t<span class=\"comment\">//取响应的结果</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> statusCode = response.getStatusLine().getStatusCode();</div><div class=\"line\">\t\tSystem.out.println(statusCode);</div><div class=\"line\">\t\tHttpEntity entity = response.getEntity();</div><div class=\"line\">\t\tString string = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\t<span class=\"comment\">//关闭httpclient</span></div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGetWithParam</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个uri对象</span></div><div class=\"line\">\t\tURIBuilder uriBuilder = <span class=\"keyword\">new</span> URIBuilder(<span class=\"string\">\"http://www.sogou.com/web\"</span>);</div><div class=\"line\">\t\turiBuilder.addParameter(<span class=\"string\">\"query\"</span>, <span class=\"string\">\"花千骨\"</span>);</div><div class=\"line\">\t\tHttpGet get = <span class=\"keyword\">new</span> HttpGet(uriBuilder.build());</div><div class=\"line\">\t\t<span class=\"comment\">//执行请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(get);</div><div class=\"line\">\t\t<span class=\"comment\">//取响应的结果</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> statusCode = response.getStatusLine().getStatusCode();</div><div class=\"line\">\t\tSystem.out.println(statusCode);</div><div class=\"line\">\t\tHttpEntity entity = response.getEntity();</div><div class=\"line\">\t\tString string = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\t<span class=\"comment\">//关闭httpclient</span></div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//创建一个post对象</span></div><div class=\"line\">\t\tHttpPost post = <span class=\"keyword\">new</span> HttpPost(<span class=\"string\">\"http://localhost:8082/httpclient/post.action\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//执行post请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(post);</div><div class=\"line\">\t\tString string = EntityUtils.toString(response.getEntity());</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPostWithParam</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t </div><div class=\"line\">\t\t<span class=\"comment\">//创建一个post对象  </span></div><div class=\"line\">\t\tHttpPost post = <span class=\"keyword\">new</span> HttpPost(<span class=\"string\">\"http://localhost:8082/httpclient/post.action\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个Entity。模拟一个表单</span></div><div class=\"line\">\t\tList&lt;NameValuePair&gt; kvList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\tkvList.add(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"张三\"</span>));</div><div class=\"line\">\t\tkvList.add(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"123\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//包装成一个Entity对象 </span></div><div class=\"line\">\t\tStringEntity entity = <span class=\"keyword\">new</span> UrlEncodedFormEntity(kvList, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//设置请求的内容 </span></div><div class=\"line\">\t\tpost.setEntity(entity);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//执行post请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(post);</div><div class=\"line\">\t\tString string = EntityUtils.toString(response.getEntity());</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"项目实例\"><a href=\"#项目实例\" class=\"headerlink\" title=\"项目实例\"></a>项目实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 订单处理Service</div><div class=\"line\"> * &lt;p&gt;Title: OrderServiceImpl&lt;/p&gt;</div><div class=\"line\"> * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Service</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ORDER_BASE_URL&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String ORDER_BASE_URL;</div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ORDER_CREATE_URL&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String ORDER_CREATE_URL;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createOrder</span><span class=\"params\">(Order order)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//调用order的服务提交订单。</span></div><div class=\"line\">\t\tString json = HttpClientUtil.doPostJson(ORDER_BASE_URL + ORDER_CREATE_URL, JsonUtils.objectToJson(order));</div><div class=\"line\">\t\t<span class=\"comment\">//把json转换成taotaoResult</span></div><div class=\"line\">\t\tTaotaoResult taotaoResult = TaotaoResult.format(json);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (taotaoResult.getStatus() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\tObject orderId = taotaoResult.getData();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> orderId.toString();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>HttpClient与Jsonp能够轻易的解决跨域问题，从而得到自己想要的数据(来自不同IP，协议，端口)，唯一的不同点是，HttpClient是在后台Java代码中进行跨域访问，而Jsonp是在前台js中进行跨域访问。跨域还有一级跨域，二级跨域，更多内容值得研究。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>跨域可以说是一个经常遇到的问题，最近在联调一个身份证识别接口，该接口由python语言编写，Java语言调用，刚开始采用了CORS（Cross-Origin Resource Sharing）跨域，在IE8上一直出现兼容性问题，固定的思维容易出现错误，自己一直想着前端Ajax跨域而忽略了后台HttpClient的跨域，最后还是用HttpClient顺利解决问题，避免了浏览器跨域带来的兼容性问题。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01-20/HTTPClient.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"HttpClient-VS-Jsonp\"><a href=\"#HttpClient-VS-Jsonp\" class=\"headerlink\" title=\"HttpClient VS Jsonp\"></a>HttpClient VS Jsonp</h1><p>之前的博客有说过Jsonp的跨域方式，<strong>jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本</strong>。相比于HttpClient，Jsonp有两个很大的缺点：</p>\n<p>1、它只能发送get请求，如果发送post请求会造成无法解析获取不到数据的问题。</p>\n<p>2、如果返回的数据没有经过配置相应的编码文件来处理，拿到的数据可能会是一堆乱码。</p>\n<p>问题总是能解决，HttpClient则没那么多约束，HttpClient封装了http协议的jar包，基本的请求方法get、post、put、 delete都能实现，当然得在web.xml文件中配置相应的filter拦截器拦截请求后再设好编码，一般返回的参数都是Json字符串，而我们只需要导入Jackson或者fastJson或者别的jar包来解析这对象把他转换成你所需要的数据即可。</p>\n<h1 id=\"整合Spring\"><a href=\"#整合Spring\" class=\"headerlink\" title=\"整合Spring\"></a>整合Spring</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"封装方法\"><a href=\"#封装方法\" class=\"headerlink\" title=\"封装方法\"></a>封装方法</h2><p>新建HttpClientUtil工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientUtil</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doGet</span><span class=\"params\">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 创建Httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpclient = HttpClients.createDefault();</div><div class=\"line\"></div><div class=\"line\">\t\tString resultString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建uri</span></div><div class=\"line\">\t\t\tURIBuilder builder = <span class=\"keyword\">new</span> URIBuilder(url);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</div><div class=\"line\">\t\t\t\t\tbuilder.addParameter(key, param.get(key));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tURI uri = builder.build();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建http GET请求</span></div><div class=\"line\">\t\t\tHttpGet httpGet = <span class=\"keyword\">new</span> HttpGet(uri);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 执行请求</span></div><div class=\"line\">\t\t\tresponse = httpclient.execute(httpGet);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 判断返回状态是否为200</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (response.getStatusLine().getStatusCode() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\t\tresultString = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (response != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\tresponse.close();</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\thttpclient.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> resultString;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doGet</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> doGet(url, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doPost</span><span class=\"params\">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建Httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tString resultString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建Http Post请求</span></div><div class=\"line\">\t\t\tHttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(url);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建参数列表</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (param != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tList&lt;NameValuePair&gt; paramList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String key : param.keySet()) &#123;</div><div class=\"line\">\t\t\t\t\tparamList.add(<span class=\"keyword\">new</span> BasicNameValuePair(key, param.get(key)));</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 模拟表单</span></div><div class=\"line\">\t\t\t\tUrlEncodedFormEntity entity = <span class=\"keyword\">new</span> UrlEncodedFormEntity(paramList);</div><div class=\"line\">\t\t\t\thttpPost.setEntity(entity);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 执行http请求</span></div><div class=\"line\">\t\t\tresponse = httpClient.execute(httpPost);</div><div class=\"line\">\t\t\tresultString = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tresponse.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> resultString;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doPost</span><span class=\"params\">(String url)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> doPost(url, <span class=\"keyword\">null</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">doPostJson</span><span class=\"params\">(String url, String json)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建Httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\tCloseableHttpResponse response = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\tString resultString = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建Http Post请求</span></div><div class=\"line\">\t\t\tHttpPost httpPost = <span class=\"keyword\">new</span> HttpPost(url);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建请求内容</span></div><div class=\"line\">\t\t\tStringEntity entity = <span class=\"keyword\">new</span> StringEntity(json, ContentType.APPLICATION_JSON);</div><div class=\"line\">\t\t\thttpPost.setEntity(entity);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 执行http请求</span></div><div class=\"line\">\t\t\tresponse = httpClient.execute(httpPost);</div><div class=\"line\">\t\t\tresultString = EntityUtils.toString(response.getEntity(), <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tresponse.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> resultString;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpClientTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个GET对象</span></div><div class=\"line\">\t\tHttpGet get = <span class=\"keyword\">new</span> HttpGet(<span class=\"string\">\"http://www.sogou.com\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//执行请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(get);</div><div class=\"line\">\t\t<span class=\"comment\">//取响应的结果</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> statusCode = response.getStatusLine().getStatusCode();</div><div class=\"line\">\t\tSystem.out.println(statusCode);</div><div class=\"line\">\t\tHttpEntity entity = response.getEntity();</div><div class=\"line\">\t\tString string = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\t<span class=\"comment\">//关闭httpclient</span></div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGetWithParam</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个httpclient对象</span></div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个uri对象</span></div><div class=\"line\">\t\tURIBuilder uriBuilder = <span class=\"keyword\">new</span> URIBuilder(<span class=\"string\">\"http://www.sogou.com/web\"</span>);</div><div class=\"line\">\t\turiBuilder.addParameter(<span class=\"string\">\"query\"</span>, <span class=\"string\">\"花千骨\"</span>);</div><div class=\"line\">\t\tHttpGet get = <span class=\"keyword\">new</span> HttpGet(uriBuilder.build());</div><div class=\"line\">\t\t<span class=\"comment\">//执行请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(get);</div><div class=\"line\">\t\t<span class=\"comment\">//取响应的结果</span></div><div class=\"line\">\t\t<span class=\"keyword\">int</span> statusCode = response.getStatusLine().getStatusCode();</div><div class=\"line\">\t\tSystem.out.println(statusCode);</div><div class=\"line\">\t\tHttpEntity entity = response.getEntity();</div><div class=\"line\">\t\tString string = EntityUtils.toString(entity, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\t<span class=\"comment\">//关闭httpclient</span></div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//创建一个post对象</span></div><div class=\"line\">\t\tHttpPost post = <span class=\"keyword\">new</span> HttpPost(<span class=\"string\">\"http://localhost:8082/httpclient/post.action\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//执行post请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(post);</div><div class=\"line\">\t\tString string = EntityUtils.toString(response.getEntity());</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Test</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPostWithParam</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\tCloseableHttpClient httpClient = HttpClients.createDefault();</div><div class=\"line\">\t </div><div class=\"line\">\t\t<span class=\"comment\">//创建一个post对象  </span></div><div class=\"line\">\t\tHttpPost post = <span class=\"keyword\">new</span> HttpPost(<span class=\"string\">\"http://localhost:8082/httpclient/post.action\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//创建一个Entity。模拟一个表单</span></div><div class=\"line\">\t\tList&lt;NameValuePair&gt; kvList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">\t\tkvList.add(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"张三\"</span>));</div><div class=\"line\">\t\tkvList.add(<span class=\"keyword\">new</span> BasicNameValuePair(<span class=\"string\">\"password\"</span>, <span class=\"string\">\"123\"</span>));</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//包装成一个Entity对象 </span></div><div class=\"line\">\t\tStringEntity entity = <span class=\"keyword\">new</span> UrlEncodedFormEntity(kvList, <span class=\"string\">\"utf-8\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//设置请求的内容 </span></div><div class=\"line\">\t\tpost.setEntity(entity);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//执行post请求</span></div><div class=\"line\">\t\tCloseableHttpResponse response = httpClient.execute(post);</div><div class=\"line\">\t\tString string = EntityUtils.toString(response.getEntity());</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t\tresponse.close();</div><div class=\"line\">\t\thttpClient.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"项目实例\"><a href=\"#项目实例\" class=\"headerlink\" title=\"项目实例\"></a>项目实例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 订单处理Service</div><div class=\"line\"> * &lt;p&gt;Title: OrderServiceImpl&lt;/p&gt;</div><div class=\"line\"> * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 1.0</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Service</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">OrderService</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ORDER_BASE_URL&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String ORDER_BASE_URL;</div><div class=\"line\">\t<span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;ORDER_CREATE_URL&#125;\"</span>)</div><div class=\"line\">\t<span class=\"keyword\">private</span> String ORDER_CREATE_URL;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">createOrder</span><span class=\"params\">(Order order)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//调用order的服务提交订单。</span></div><div class=\"line\">\t\tString json = HttpClientUtil.doPostJson(ORDER_BASE_URL + ORDER_CREATE_URL, JsonUtils.objectToJson(order));</div><div class=\"line\">\t\t<span class=\"comment\">//把json转换成taotaoResult</span></div><div class=\"line\">\t\tTaotaoResult taotaoResult = TaotaoResult.format(json);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (taotaoResult.getStatus() == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\tObject orderId = taotaoResult.getData();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> orderId.toString();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>HttpClient与Jsonp能够轻易的解决跨域问题，从而得到自己想要的数据(来自不同IP，协议，端口)，唯一的不同点是，HttpClient是在后台Java代码中进行跨域访问，而Jsonp是在前台js中进行跨域访问。跨域还有一级跨域，二级跨域，更多内容值得研究。</p>"},{"title":"JAVA实现HTML转PDF","date":"2017-07-27T05:22:32.000Z","_content":"\n​\t最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：\n\n1. 使用`wkhtmltox`\n2. 使用`iText+Flying Saucer`\n\n但是还是强烈推荐用第一种方法。<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"/></div><!-- more -->\n\n# 使用wkhtmltox(推荐)\n\nwkhtmltox实现网页转换成图片或PDF\n\n## 命令实现\n\n1. 进入wkhtmltox官网软件下载  ：https://wkhtmltopdf.org/downloads.html\n2. 安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别`wkhtmltoimage.exe`是将HTML转化为image，`wkhtmltopdf.exe`是将HTML转化为PDF文件，这正是我们想要的。\n\n![path](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png)\n\n3. 进入${home}/bin目录下打开cmd输入以下命令验证 \n\n```java\nwkhtmltopdf HTML路径 保存路径\n如： wkhtmltopdf www.baidu.com d:\\test.pdf\n```\n\n![command](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png)\n\n生成完成后会出现Done。\n\n## 代码实现\n\nJAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段\n\n```java\n/**\n * HTMLTOPPDF\n * 利用wkhtmltopdf生成PDF\n */\npublic class HtmlToPDF {\n    //wkhtmltopdf.exe安装路径\n    public static final String toPdfTool = \"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\";\n    //需要生成PDF的URL\n    public static final String srcPath = \"http://www.jianshu.com/p/4d65857ffe5e\";\n\n    public static void main(String[] args) throws Exception{\n \t\t//设置纸张大小: A4, Letter, etc.\n        String pageSize = \"A4\";\n\t\t//生成后存放路径\n        String destPath = \"E:\\\\PDF生成教程及讲解.pdf\"; \n        convert(pageSize, destPath);\n    }\n\n    public static void convert(String pageSize, String destPath){\n        File file = new File(destPath);\n        File parent = file.getParentFile();\n        if (!parent.exists()){\n            parent.mkdirs();\n        }\n        StringBuilder cmd = new StringBuilder();\n        cmd.append(toPdfTool).append(\" \");\n        cmd.append(\"--page-size \");\n        cmd.append(pageSize).append(\" \");\n        cmd.append(srcPath).append(\" \");\n        cmd.append(destPath);\n\n        try {\n            Runtime.getRuntime().exec(cmd.toString());\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n详细参数说明可参考：<http://www.jianshu.com/p/4d65857ffe5e>\n\n\n\n# 使用iText+Flying Saucer\n\n```\n itext可实现 \n 1.可以进行块的创建\n 2.表格的使用\n 3.设置页面的事件\n 4.字体的设置\n 5.图片的设置（包含水印）\n 6.HTML转化成PDF（支持css,javascript）\n 7.表单创建\n 8.PDF之间的操作等详细的内容可以查看网站的说明。\n```\n\n## Maven配置\n\n```xml\n<dependency>\n   <groupId>com.itextpdf</groupId>\n   <artifactId>itextpdf</artifactId>\n   <version>5.8.8</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.6</version>\n</dependency>\n```\n\n## 代码片段\n\n```java\n/**\n * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。\n */\npublic class HtmlToPDF {\n    public static void main(String[] args) throws Exception{\n\n        Document document = new Document(PageSize.A4.rotate()); //设置为A4纸大小\n\n        ITextRenderer renderer = new ITextRenderer();\n        ITextFontResolver fontResolver = renderer.getFontResolver();\n        fontResolver.addFont(\"D:/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n        // step 2\n        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\"D:\\\\pdf.pdf\"));\n        // step 3\n        document.open();\n        // step 4\n        XMLWorkerHelper.getInstance().parseXHtml(writer, document,\n                new FileInputStream(\"D:/a.html\"));\n        //step 5\n        document.close();\n        System.out.println( \"PDF Created!\" );\n    }\n}\n```\n\n## 注意事项\n\n1. .输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：\n\n   ```html\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n   <html xmlns=\"http://www.w3.org/1999/xhtml\"> \n   ```\n\n\n2. 生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(\"C:/Windows/Fonts/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style='font-family:SimSun'，要是使用其他字符生成pdf时候，中文就会不显示生成PDF\n3. 设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小\n4. 所需的jar包，[下载点我](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip)。核心jar是修改后的\n\n\n\n# 比较和总结\n\n## 比较\n\nitext\n\n```\n1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。\n2. 并且itext中文适配不是很好和换行问题。\n3. 且对HTML格式要求严格。\n```\n\nwkhtmltopdf\n\n```\n1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。\n2. 小巧方便，转换速度快。\n3. 跨平台，在Liunx下用，在win下也可以用。\n```\n\n## 总结\n\n​\t综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。","source":"_posts/JAVA实现HTML转PDF.md","raw":"---\ntitle: JAVA实现HTML转PDF\ndate: 2017-07-27 13:22:32\ntags: [java,tips]\ncategories: technology\n---\n\n​\t最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：\n\n1. 使用`wkhtmltox`\n2. 使用`iText+Flying Saucer`\n\n但是还是强烈推荐用第一种方法。<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"/></div><!-- more -->\n\n# 使用wkhtmltox(推荐)\n\nwkhtmltox实现网页转换成图片或PDF\n\n## 命令实现\n\n1. 进入wkhtmltox官网软件下载  ：https://wkhtmltopdf.org/downloads.html\n2. 安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别`wkhtmltoimage.exe`是将HTML转化为image，`wkhtmltopdf.exe`是将HTML转化为PDF文件，这正是我们想要的。\n\n![path](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png)\n\n3. 进入${home}/bin目录下打开cmd输入以下命令验证 \n\n```java\nwkhtmltopdf HTML路径 保存路径\n如： wkhtmltopdf www.baidu.com d:\\test.pdf\n```\n\n![command](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png)\n\n生成完成后会出现Done。\n\n## 代码实现\n\nJAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段\n\n```java\n/**\n * HTMLTOPPDF\n * 利用wkhtmltopdf生成PDF\n */\npublic class HtmlToPDF {\n    //wkhtmltopdf.exe安装路径\n    public static final String toPdfTool = \"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\";\n    //需要生成PDF的URL\n    public static final String srcPath = \"http://www.jianshu.com/p/4d65857ffe5e\";\n\n    public static void main(String[] args) throws Exception{\n \t\t//设置纸张大小: A4, Letter, etc.\n        String pageSize = \"A4\";\n\t\t//生成后存放路径\n        String destPath = \"E:\\\\PDF生成教程及讲解.pdf\"; \n        convert(pageSize, destPath);\n    }\n\n    public static void convert(String pageSize, String destPath){\n        File file = new File(destPath);\n        File parent = file.getParentFile();\n        if (!parent.exists()){\n            parent.mkdirs();\n        }\n        StringBuilder cmd = new StringBuilder();\n        cmd.append(toPdfTool).append(\" \");\n        cmd.append(\"--page-size \");\n        cmd.append(pageSize).append(\" \");\n        cmd.append(srcPath).append(\" \");\n        cmd.append(destPath);\n\n        try {\n            Runtime.getRuntime().exec(cmd.toString());\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n详细参数说明可参考：<http://www.jianshu.com/p/4d65857ffe5e>\n\n\n\n# 使用iText+Flying Saucer\n\n```\n itext可实现 \n 1.可以进行块的创建\n 2.表格的使用\n 3.设置页面的事件\n 4.字体的设置\n 5.图片的设置（包含水印）\n 6.HTML转化成PDF（支持css,javascript）\n 7.表单创建\n 8.PDF之间的操作等详细的内容可以查看网站的说明。\n```\n\n## Maven配置\n\n```xml\n<dependency>\n   <groupId>com.itextpdf</groupId>\n   <artifactId>itextpdf</artifactId>\n   <version>5.8.8</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.6</version>\n</dependency>\n```\n\n## 代码片段\n\n```java\n/**\n * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。\n */\npublic class HtmlToPDF {\n    public static void main(String[] args) throws Exception{\n\n        Document document = new Document(PageSize.A4.rotate()); //设置为A4纸大小\n\n        ITextRenderer renderer = new ITextRenderer();\n        ITextFontResolver fontResolver = renderer.getFontResolver();\n        fontResolver.addFont(\"D:/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n        // step 2\n        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\"D:\\\\pdf.pdf\"));\n        // step 3\n        document.open();\n        // step 4\n        XMLWorkerHelper.getInstance().parseXHtml(writer, document,\n                new FileInputStream(\"D:/a.html\"));\n        //step 5\n        document.close();\n        System.out.println( \"PDF Created!\" );\n    }\n}\n```\n\n## 注意事项\n\n1. .输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：\n\n   ```html\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n   <html xmlns=\"http://www.w3.org/1999/xhtml\"> \n   ```\n\n\n2. 生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(\"C:/Windows/Fonts/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style='font-family:SimSun'，要是使用其他字符生成pdf时候，中文就会不显示生成PDF\n3. 设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小\n4. 所需的jar包，[下载点我](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip)。核心jar是修改后的\n\n\n\n# 比较和总结\n\n## 比较\n\nitext\n\n```\n1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。\n2. 并且itext中文适配不是很好和换行问题。\n3. 且对HTML格式要求严格。\n```\n\nwkhtmltopdf\n\n```\n1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。\n2. 小巧方便，转换速度快。\n3. 跨平台，在Liunx下用，在win下也可以用。\n```\n\n## 总结\n\n​\t综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。","slug":"JAVA实现HTML转PDF","published":1,"updated":"2018-03-13T05:49:40.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6tzj00053gfkcde7gle9","content":"<p>​    最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：</p>\n<ol>\n<li>使用<code>wkhtmltox</code></li>\n<li>使用<code>iText+Flying Saucer</code></li>\n</ol>\n<p>但是还是强烈推荐用第一种方法。<div align=\"center\"><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"使用wkhtmltox-推荐\"><a href=\"#使用wkhtmltox-推荐\" class=\"headerlink\" title=\"使用wkhtmltox(推荐)\"></a>使用wkhtmltox(推荐)</h1><p>wkhtmltox实现网页转换成图片或PDF</p>\n<h2 id=\"命令实现\"><a href=\"#命令实现\" class=\"headerlink\" title=\"命令实现\"></a>命令实现</h2><ol>\n<li>进入wkhtmltox官网软件下载  ：<a href=\"https://wkhtmltopdf.org/downloads.html\" target=\"_blank\" rel=\"external\">https://wkhtmltopdf.org/downloads.html</a></li>\n<li>安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别<code>wkhtmltoimage.exe</code>是将HTML转化为image，<code>wkhtmltopdf.exe</code>是将HTML转化为PDF文件，这正是我们想要的。</li>\n</ol>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png\" alt=\"path\"></p>\n<ol>\n<li>进入${home}/bin目录下打开cmd输入以下命令验证 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wkhtmltopdf HTML路径 保存路径</div><div class=\"line\">如： wkhtmltopdf www.baidu.com d:\\test.pdf</div></pre></td></tr></table></figure>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png\" alt=\"command\"></p>\n<p>生成完成后会出现Done。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>JAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * HTMLTOPPDF</div><div class=\"line\"> * 利用wkhtmltopdf生成PDF</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//wkhtmltopdf.exe安装路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String toPdfTool = <span class=\"string\">\"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\"</span>;</div><div class=\"line\">    <span class=\"comment\">//需要生成PDF的URL</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String srcPath = <span class=\"string\">\"http://www.jianshu.com/p/4d65857ffe5e\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//设置纸张大小: A4, Letter, etc.</span></div><div class=\"line\">        String pageSize = <span class=\"string\">\"A4\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//生成后存放路径</span></div><div class=\"line\">        String destPath = <span class=\"string\">\"E:\\\\PDF生成教程及讲解.pdf\"</span>; </div><div class=\"line\">        convert(pageSize, destPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">convert</span><span class=\"params\">(String pageSize, String destPath)</span></span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(destPath);</div><div class=\"line\">        File parent = file.getParentFile();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!parent.exists())&#123;</div><div class=\"line\">            parent.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder cmd = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        cmd.append(toPdfTool).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(<span class=\"string\">\"--page-size \"</span>);</div><div class=\"line\">        cmd.append(pageSize).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(srcPath).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(destPath);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Runtime.getRuntime().exec(cmd.toString());</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细参数说明可参考：<a href=\"http://www.jianshu.com/p/4d65857ffe5e\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/4d65857ffe5e</a></p>\n<h1 id=\"使用iText-Flying-Saucer\"><a href=\"#使用iText-Flying-Saucer\" class=\"headerlink\" title=\"使用iText+Flying Saucer\"></a>使用iText+Flying Saucer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext可实现 </div><div class=\"line\">1.可以进行块的创建</div><div class=\"line\">2.表格的使用</div><div class=\"line\">3.设置页面的事件</div><div class=\"line\">4.字体的设置</div><div class=\"line\">5.图片的设置（包含水印）</div><div class=\"line\">6.HTML转化成PDF（支持css,javascript）</div><div class=\"line\">7.表单创建</div><div class=\"line\">8.PDF之间的操作等详细的内容可以查看网站的说明。</div></pre></td></tr></table></figure>\n<h2 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Document document = <span class=\"keyword\">new</span> Document(PageSize.A4.rotate()); <span class=\"comment\">//设置为A4纸大小</span></div><div class=\"line\"></div><div class=\"line\">        ITextRenderer renderer = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">        ITextFontResolver fontResolver = renderer.getFontResolver();</div><div class=\"line\">        fontResolver.addFont(<span class=\"string\">\"D:/simsun.ttc\"</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">        <span class=\"comment\">// step 2</span></div><div class=\"line\">        PdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\pdf.pdf\"</span>));</div><div class=\"line\">        <span class=\"comment\">// step 3</span></div><div class=\"line\">        document.open();</div><div class=\"line\">        <span class=\"comment\">// step 4</span></div><div class=\"line\">        XMLWorkerHelper.getInstance().parseXHtml(writer, document,</div><div class=\"line\">                <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"D:/a.html\"</span>));</div><div class=\"line\">        <span class=\"comment\">//step 5</span></div><div class=\"line\">        document.close();</div><div class=\"line\">        System.out.println( <span class=\"string\">\"PDF Created!\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>.输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(“C:/Windows/Fonts/simsun.ttc”, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style=’font-family:SimSun’，要是使用其他字符生成pdf时候，中文就会不显示生成PDF</p>\n</li>\n<li>设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小</li>\n<li>所需的jar包，<a href=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip\" target=\"_blank\" rel=\"external\">下载点我</a>。核心jar是修改后的</li>\n</ol>\n<h1 id=\"比较和总结\"><a href=\"#比较和总结\" class=\"headerlink\" title=\"比较和总结\"></a>比较和总结</h1><h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>itext</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。</div><div class=\"line\">2. 并且itext中文适配不是很好和换行问题。</div><div class=\"line\">3. 且对HTML格式要求严格。</div></pre></td></tr></table></figure>\n<p>wkhtmltopdf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。</div><div class=\"line\">2. 小巧方便，转换速度快。</div><div class=\"line\">3. 跨平台，在Liunx下用，在win下也可以用。</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。</p>\n","site":{"data":{}},"excerpt":"<p>​    最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：</p>\n<ol>\n<li>使用<code>wkhtmltox</code></li>\n<li>使用<code>iText+Flying Saucer</code></li>\n</ol>\n<p>但是还是强烈推荐用第一种方法。<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"使用wkhtmltox-推荐\"><a href=\"#使用wkhtmltox-推荐\" class=\"headerlink\" title=\"使用wkhtmltox(推荐)\"></a>使用wkhtmltox(推荐)</h1><p>wkhtmltox实现网页转换成图片或PDF</p>\n<h2 id=\"命令实现\"><a href=\"#命令实现\" class=\"headerlink\" title=\"命令实现\"></a>命令实现</h2><ol>\n<li>进入wkhtmltox官网软件下载  ：<a href=\"https://wkhtmltopdf.org/downloads.html\">https://wkhtmltopdf.org/downloads.html</a></li>\n<li>安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别<code>wkhtmltoimage.exe</code>是将HTML转化为image，<code>wkhtmltopdf.exe</code>是将HTML转化为PDF文件，这正是我们想要的。</li>\n</ol>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png\" alt=\"path\"></p>\n<ol>\n<li>进入${home}/bin目录下打开cmd输入以下命令验证 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wkhtmltopdf HTML路径 保存路径</div><div class=\"line\">如： wkhtmltopdf www.baidu.com d:\\test.pdf</div></pre></td></tr></table></figure>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png\" alt=\"command\"></p>\n<p>生成完成后会出现Done。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>JAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * HTMLTOPPDF</div><div class=\"line\"> * 利用wkhtmltopdf生成PDF</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//wkhtmltopdf.exe安装路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String toPdfTool = <span class=\"string\">\"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\"</span>;</div><div class=\"line\">    <span class=\"comment\">//需要生成PDF的URL</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String srcPath = <span class=\"string\">\"http://www.jianshu.com/p/4d65857ffe5e\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//设置纸张大小: A4, Letter, etc.</span></div><div class=\"line\">        String pageSize = <span class=\"string\">\"A4\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//生成后存放路径</span></div><div class=\"line\">        String destPath = <span class=\"string\">\"E:\\\\PDF生成教程及讲解.pdf\"</span>; </div><div class=\"line\">        convert(pageSize, destPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">convert</span><span class=\"params\">(String pageSize, String destPath)</span></span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(destPath);</div><div class=\"line\">        File parent = file.getParentFile();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!parent.exists())&#123;</div><div class=\"line\">            parent.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder cmd = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        cmd.append(toPdfTool).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(<span class=\"string\">\"--page-size \"</span>);</div><div class=\"line\">        cmd.append(pageSize).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(srcPath).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(destPath);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Runtime.getRuntime().exec(cmd.toString());</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细参数说明可参考：<a href=\"http://www.jianshu.com/p/4d65857ffe5e\">http://www.jianshu.com/p/4d65857ffe5e</a></p>\n<h1 id=\"使用iText-Flying-Saucer\"><a href=\"#使用iText-Flying-Saucer\" class=\"headerlink\" title=\"使用iText+Flying Saucer\"></a>使用iText+Flying Saucer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext可实现 </div><div class=\"line\">1.可以进行块的创建</div><div class=\"line\">2.表格的使用</div><div class=\"line\">3.设置页面的事件</div><div class=\"line\">4.字体的设置</div><div class=\"line\">5.图片的设置（包含水印）</div><div class=\"line\">6.HTML转化成PDF（支持css,javascript）</div><div class=\"line\">7.表单创建</div><div class=\"line\">8.PDF之间的操作等详细的内容可以查看网站的说明。</div></pre></td></tr></table></figure>\n<h2 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Document document = <span class=\"keyword\">new</span> Document(PageSize.A4.rotate()); <span class=\"comment\">//设置为A4纸大小</span></div><div class=\"line\"></div><div class=\"line\">        ITextRenderer renderer = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">        ITextFontResolver fontResolver = renderer.getFontResolver();</div><div class=\"line\">        fontResolver.addFont(<span class=\"string\">\"D:/simsun.ttc\"</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">        <span class=\"comment\">// step 2</span></div><div class=\"line\">        PdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\pdf.pdf\"</span>));</div><div class=\"line\">        <span class=\"comment\">// step 3</span></div><div class=\"line\">        document.open();</div><div class=\"line\">        <span class=\"comment\">// step 4</span></div><div class=\"line\">        XMLWorkerHelper.getInstance().parseXHtml(writer, document,</div><div class=\"line\">                <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"D:/a.html\"</span>));</div><div class=\"line\">        <span class=\"comment\">//step 5</span></div><div class=\"line\">        document.close();</div><div class=\"line\">        System.out.println( <span class=\"string\">\"PDF Created!\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>.输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(“C:/Windows/Fonts/simsun.ttc”, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style=’font-family:SimSun’，要是使用其他字符生成pdf时候，中文就会不显示生成PDF</p>\n</li>\n<li>设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小</li>\n<li>所需的jar包，<a href=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip\">下载点我</a>。核心jar是修改后的</li>\n</ol>\n<h1 id=\"比较和总结\"><a href=\"#比较和总结\" class=\"headerlink\" title=\"比较和总结\"></a>比较和总结</h1><h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>itext</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。</div><div class=\"line\">2. 并且itext中文适配不是很好和换行问题。</div><div class=\"line\">3. 且对HTML格式要求严格。</div></pre></td></tr></table></figure>\n<p>wkhtmltopdf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。</div><div class=\"line\">2. 小巧方便，转换速度快。</div><div class=\"line\">3. 跨平台，在Liunx下用，在win下也可以用。</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。</p>"},{"title":"JAVA定时调度 Timer和Executors","date":"2017-03-27T09:42:49.000Z","_content":"\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","source":"_posts/JAVA定时调度-Timer和Executors.md","raw":"---\ntitle: 'JAVA定时调度 Timer和Executors'\ndate: 2017-03-27 17:42:49\ntags: [java,tips]\ncategories: technology\n---\n\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","slug":"JAVA定时调度-Timer和Executors","published":1,"updated":"2018-03-13T05:49:02.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6tzl00063gfko6yg0oa7","content":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。<a id=\"more\"></a></p>\n<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。","more":"</p>\n<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA实现简单网络爬虫","date":"2017-04-01T06:17:39.000Z","_content":"\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div><!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","source":"_posts/JAVA实现简单爬虫.md","raw":"---\ntitle: JAVA实现简单网络爬虫\ndate: 2017-04-01 14:17:39\ntags: [java, tool]\ncategories: technology\n---\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div><!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","slug":"JAVA实现简单爬虫","published":1,"updated":"2018-03-13T05:49:52.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6tzm00073gfkc7223aq9","content":"<p><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"external\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\" target=\"_blank\" rel=\"external\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\" target=\"_blank\" rel=\"external\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>\n","site":{"data":{}},"excerpt":"<p><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>","more":"</p>\n<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>"},{"title":"JVM类加载机制","date":"2017-12-13T02:03:36.000Z","_content":"\n# 引言\n\n之前的博客说了Java虚拟机的运行时数据区域、GC算法、垃圾回收器等知识。距离深入了解还有一段距离，包括虚拟机的类加载机制、性能调优、线程并发等等还都没有涉及到，一直在看周志明的《深入理解Java虚拟机》，越深入去读发现这本书写的真的是经典，解决了自己很多的疑惑。\n\nJVM的类加载机制。虚拟机把描述类的数据从class文件加载到内存中，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/0.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 类加载过程\n\n类被加载到虚拟机内存中开始，到卸载出内存为止。它的生命周期分7个阶段，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）、卸载（Unloading）。其中验证、准备、解析三个部分统称为连接（Linking）。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/2.png\" algin=\"center\"/>\n\n</div>\n\n## 加载\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流。\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。\n\n```java\n注意：JVM中的ClassLoader类加载器加载Class发生在此阶段。后面会有描述。\n```\n\n## 连接\n\n### 验证\n\n验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：`文件格式的验证`、`元数据的验证`、`字节码验证`和`符号引用验证`。\n\n#### 文件格式验证\n\n1. 主要验证字节流是否符合calss文件格式的规范，如果符合则把字节流加载到方法区中进行存储。\n2. 验证文件头、主次版本等等。\n\n#### 元数据验证\n\n主要对字节码描述的信息进行语义分析，保证其描述符合Java语言的要求。\n\n1. 类是否有父类。\n2. 是否继承了不允许被继承的类（final修饰过的类）。\n3. 如果这个类不是抽象类，是否实现其父类或接口中所有要求实现的方法。\n4. 类中的字段、方法是否与父类产生矛盾（如：覆盖父类final类型的字段，或者不符合个则的方法）。\n\n#### 字节码验证\n\n该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。\n保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。\n\n#### 符号引用验证\n\n1. 符号引用中通过字符串描述的全限定名是否能找到对应的类。\n2. 在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。\n3. 符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问。\n\n### 准备\n\n**准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。**对于该阶段有以下几点需要注意：\n\n  1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。\n\n​    2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n\n假设一个类变量的定义为：public static int value = 3；\n\n那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器<clinit>（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。\n\n下表列出了Java中所有基本数据类型以及reference类型的默认零值：\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/defaultValue.png\"/>\n\n</div>\n\n```\n注意：\n只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是在对象实例化的时候初始化分配值的。\n```\n\n### 解析\n\n**解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。**\n\n1. 类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。\n2. 字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。\n3. 类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。\n4. 接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。\n\n## 初始化\n\n初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是**根据程序员通过程序指定的主观计划去初始化类变量和其他资源**，或者可以从另一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。\n\n1. 执行类构造器<clinit>。\n2. 初始化静态变量、静态块中的数据等（一个类加载器只会初始化一次）。\n3. 子类的<clinit>调用前保证父类的<clinit>被调用。\n\n```java\n注意：\n<clinit>是线程安全的，执行<clinit>的线程需要先获取锁才能进行初始化操作，保证只有一个线程能执行<clinit>(利用此特性可以实现线程安全的懒汉单例模式)。如果在一个类的<clinit>方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。\n```\n\n# 类加载器\n\n类被加载进虚拟机是由类加载器（ClassLoader）来完成的。类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果。只有在两个类被**同一个类加载器**加载的前提下，比较才有意义。否则，即使两个类来自同一个class文件，被同一个JVM加载，但是加载它们的类加载器不同，则这两个类就不相等。这就相当于两个命名空间中的等价类`LoaderA::C`和`LoaderB::C`。\n\n## 类加载器的种类\n\n从Java虚拟机的角度来分的话，ClassLoader分为启动类加载器（Bootstrap ClassLoader）和其它的加载器。其中Bootstrap ClassLoader负责加载Java的核心类，该类加载器使用C++语言实现，属于虚拟机自身的一部分。而其它类加载器独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。\n\n站在Java开发人员的角度来分的话，ClassLoader分为：\n\n- **启动类加载器（Bootstrap ClassLoader）**\n\n  负责加载`JAVA_HOME\\lib`目录中并且能被虚拟机识别的类库到JVM内存中（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载），如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。\n\n- **扩展类加载器（Extension ClassLoader）**\n\n  该加载器主要是负责加载`JDK\\jre\\lib\\ext`目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类）。该加载器可以被开发者直接使用。\n\n- **应用程序类加载器（Application ClassLoader）**\n\n  该类加载器也称为系统类加载器（System ClassLoader），它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，`一般情况下这个就是程序中默认的类加载器`。\n\n除此之外，还有自定义的类加载器，它们之间的层次关系被称为类加载器的**双亲委派模型**。该模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器，而这种父子关系一般通过**组合（Composition）关系**来实现，而不是通过继承（Inheritance）。\n\n# 双亲委派模型\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/3.jpg\" algin=\"center\"/>\n\n</div>\n\n如上图所示的类加载器之间的这种层次关系，就称为**类加载器的双亲委派模型**（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。\n\n双亲委派模型的工作过程为：**如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载**。\n\n   使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起**具备了一种带有优先级的层次关系**。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。\n\n   在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：\n\n```java\nprotected synchronized Class<?> loadClass(String name, boolean resolve)   throws ClassNotFoundException{  \n    // First, check if the class has already been loaded  \n    //首先检查请求的类是否已经被加载过   \n    Class c = findLoadedClass(name);  \n    if (c == null) {  \n        try {  \n          \t//委派父类加载器加载  \n            if (parent != null) {  \n                c = parent.loadClass(name, false);\n            //委派启动类加载器加载  \n            } else {  \n                c = findBootstrapClassOrNull(name);  \n            }  \n        //父类加载器无法完成类加载请求   \n        } catch (ClassNotFoundException e) {  \n            // ClassNotFoundException thrown if class not found  \n            // from the non-null parent class loader  \n        }  \n       \t//本身类加载器进行类加载\n        if (c == null) {  \n            // If still not found, then invoke findClass in order  \n            // to find the class.  \n            c = findClass(name);  \n        }  \n    }  \n    if (resolve) {  \n        resolveClass(c);  \n    }  \n    return c;  \n}  \n```\n\n通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。\n\n注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现。\n\n# 总结\n\n整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码，但这里的执行代码只是个开端，它仅限于<clinit>（）方法。类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始。","source":"_posts/JVM类加载机制.md","raw":"---\ntitle: JVM类加载机制\ndate: 2017-12-13 10:03:36\ntags: [java,jvm]\ncategories: technology\n---\n\n# 引言\n\n之前的博客说了Java虚拟机的运行时数据区域、GC算法、垃圾回收器等知识。距离深入了解还有一段距离，包括虚拟机的类加载机制、性能调优、线程并发等等还都没有涉及到，一直在看周志明的《深入理解Java虚拟机》，越深入去读发现这本书写的真的是经典，解决了自己很多的疑惑。\n\nJVM的类加载机制。虚拟机把描述类的数据从class文件加载到内存中，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/0.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 类加载过程\n\n类被加载到虚拟机内存中开始，到卸载出内存为止。它的生命周期分7个阶段，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）、卸载（Unloading）。其中验证、准备、解析三个部分统称为连接（Linking）。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/2.png\" algin=\"center\"/>\n\n</div>\n\n## 加载\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流。\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。\n\n```java\n注意：JVM中的ClassLoader类加载器加载Class发生在此阶段。后面会有描述。\n```\n\n## 连接\n\n### 验证\n\n验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：`文件格式的验证`、`元数据的验证`、`字节码验证`和`符号引用验证`。\n\n#### 文件格式验证\n\n1. 主要验证字节流是否符合calss文件格式的规范，如果符合则把字节流加载到方法区中进行存储。\n2. 验证文件头、主次版本等等。\n\n#### 元数据验证\n\n主要对字节码描述的信息进行语义分析，保证其描述符合Java语言的要求。\n\n1. 类是否有父类。\n2. 是否继承了不允许被继承的类（final修饰过的类）。\n3. 如果这个类不是抽象类，是否实现其父类或接口中所有要求实现的方法。\n4. 类中的字段、方法是否与父类产生矛盾（如：覆盖父类final类型的字段，或者不符合个则的方法）。\n\n#### 字节码验证\n\n该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。\n保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。\n\n#### 符号引用验证\n\n1. 符号引用中通过字符串描述的全限定名是否能找到对应的类。\n2. 在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。\n3. 符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问。\n\n### 准备\n\n**准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。**对于该阶段有以下几点需要注意：\n\n  1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。\n\n​    2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n\n假设一个类变量的定义为：public static int value = 3；\n\n那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器<clinit>（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。\n\n下表列出了Java中所有基本数据类型以及reference类型的默认零值：\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/defaultValue.png\"/>\n\n</div>\n\n```\n注意：\n只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是在对象实例化的时候初始化分配值的。\n```\n\n### 解析\n\n**解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。**\n\n1. 类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。\n2. 字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。\n3. 类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。\n4. 接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。\n\n## 初始化\n\n初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是**根据程序员通过程序指定的主观计划去初始化类变量和其他资源**，或者可以从另一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。\n\n1. 执行类构造器<clinit>。\n2. 初始化静态变量、静态块中的数据等（一个类加载器只会初始化一次）。\n3. 子类的<clinit>调用前保证父类的<clinit>被调用。\n\n```java\n注意：\n<clinit>是线程安全的，执行<clinit>的线程需要先获取锁才能进行初始化操作，保证只有一个线程能执行<clinit>(利用此特性可以实现线程安全的懒汉单例模式)。如果在一个类的<clinit>方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。\n```\n\n# 类加载器\n\n类被加载进虚拟机是由类加载器（ClassLoader）来完成的。类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果。只有在两个类被**同一个类加载器**加载的前提下，比较才有意义。否则，即使两个类来自同一个class文件，被同一个JVM加载，但是加载它们的类加载器不同，则这两个类就不相等。这就相当于两个命名空间中的等价类`LoaderA::C`和`LoaderB::C`。\n\n## 类加载器的种类\n\n从Java虚拟机的角度来分的话，ClassLoader分为启动类加载器（Bootstrap ClassLoader）和其它的加载器。其中Bootstrap ClassLoader负责加载Java的核心类，该类加载器使用C++语言实现，属于虚拟机自身的一部分。而其它类加载器独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。\n\n站在Java开发人员的角度来分的话，ClassLoader分为：\n\n- **启动类加载器（Bootstrap ClassLoader）**\n\n  负责加载`JAVA_HOME\\lib`目录中并且能被虚拟机识别的类库到JVM内存中（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载），如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。\n\n- **扩展类加载器（Extension ClassLoader）**\n\n  该加载器主要是负责加载`JDK\\jre\\lib\\ext`目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类）。该加载器可以被开发者直接使用。\n\n- **应用程序类加载器（Application ClassLoader）**\n\n  该类加载器也称为系统类加载器（System ClassLoader），它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，`一般情况下这个就是程序中默认的类加载器`。\n\n除此之外，还有自定义的类加载器，它们之间的层次关系被称为类加载器的**双亲委派模型**。该模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器，而这种父子关系一般通过**组合（Composition）关系**来实现，而不是通过继承（Inheritance）。\n\n# 双亲委派模型\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/3.jpg\" algin=\"center\"/>\n\n</div>\n\n如上图所示的类加载器之间的这种层次关系，就称为**类加载器的双亲委派模型**（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。\n\n双亲委派模型的工作过程为：**如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载**。\n\n   使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起**具备了一种带有优先级的层次关系**。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。\n\n   在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：\n\n```java\nprotected synchronized Class<?> loadClass(String name, boolean resolve)   throws ClassNotFoundException{  \n    // First, check if the class has already been loaded  \n    //首先检查请求的类是否已经被加载过   \n    Class c = findLoadedClass(name);  \n    if (c == null) {  \n        try {  \n          \t//委派父类加载器加载  \n            if (parent != null) {  \n                c = parent.loadClass(name, false);\n            //委派启动类加载器加载  \n            } else {  \n                c = findBootstrapClassOrNull(name);  \n            }  \n        //父类加载器无法完成类加载请求   \n        } catch (ClassNotFoundException e) {  \n            // ClassNotFoundException thrown if class not found  \n            // from the non-null parent class loader  \n        }  \n       \t//本身类加载器进行类加载\n        if (c == null) {  \n            // If still not found, then invoke findClass in order  \n            // to find the class.  \n            c = findClass(name);  \n        }  \n    }  \n    if (resolve) {  \n        resolveClass(c);  \n    }  \n    return c;  \n}  \n```\n\n通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。\n\n注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现。\n\n# 总结\n\n整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码，但这里的执行代码只是个开端，它仅限于<clinit>（）方法。类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始。","slug":"JVM类加载机制","published":1,"updated":"2018-03-13T05:50:04.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6tzt000a3gfkyc9pvpzz","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>之前的博客说了Java虚拟机的运行时数据区域、GC算法、垃圾回收器等知识。距离深入了解还有一段距离，包括虚拟机的类加载机制、性能调优、线程并发等等还都没有涉及到，一直在看周志明的《深入理解Java虚拟机》，越深入去读发现这本书写的真的是经典，解决了自己很多的疑惑。</p>\n<p>JVM的类加载机制。虚拟机把描述类的数据从class文件加载到内存中，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/0.png\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h1><p>类被加载到虚拟机内存中开始，到卸载出内存为止。它的生命周期分7个阶段，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）、卸载（Unloading）。其中验证、准备、解析三个部分统称为连接（Linking）。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/2.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：JVM中的ClassLoader类加载器加载Class发生在此阶段。后面会有描述。</div></pre></td></tr></table></figure>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：<code>文件格式的验证</code>、<code>元数据的验证</code>、<code>字节码验证</code>和<code>符号引用验证</code>。</p>\n<h4 id=\"文件格式验证\"><a href=\"#文件格式验证\" class=\"headerlink\" title=\"文件格式验证\"></a>文件格式验证</h4><ol>\n<li>主要验证字节流是否符合calss文件格式的规范，如果符合则把字节流加载到方法区中进行存储。</li>\n<li>验证文件头、主次版本等等。</li>\n</ol>\n<h4 id=\"元数据验证\"><a href=\"#元数据验证\" class=\"headerlink\" title=\"元数据验证\"></a>元数据验证</h4><p>主要对字节码描述的信息进行语义分析，保证其描述符合Java语言的要求。</p>\n<ol>\n<li>类是否有父类。</li>\n<li>是否继承了不允许被继承的类（final修饰过的类）。</li>\n<li>如果这个类不是抽象类，是否实现其父类或接口中所有要求实现的方法。</li>\n<li>类中的字段、方法是否与父类产生矛盾（如：覆盖父类final类型的字段，或者不符合个则的方法）。</li>\n</ol>\n<h4 id=\"字节码验证\"><a href=\"#字节码验证\" class=\"headerlink\" title=\"字节码验证\"></a>字节码验证</h4><p>该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。<br>保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。</p>\n<h4 id=\"符号引用验证\"><a href=\"#符号引用验证\" class=\"headerlink\" title=\"符号引用验证\"></a>符号引用验证</h4><ol>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类。</li>\n<li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</li>\n<li>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问。</li>\n</ol>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。</strong>对于该阶段有以下几点需要注意：</p>\n<p>  1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p>\n<p>​    2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p>\n<p>假设一个类变量的定义为：public static int value = 3；</p>\n<p>那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器<clinit>（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</clinit></p>\n<p>下表列出了Java中所有基本数据类型以及reference类型的默认零值：</p>\n<div align=\"center\"><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/defaultValue.png\"><br><br></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是在对象实例化的时候初始化分配值的。</div></pre></td></tr></table></figure>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p><strong>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</strong></p>\n<ol>\n<li>类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</li>\n<li>字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</li>\n<li>类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</li>\n<li>接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。</li>\n</ol>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是<strong>根据程序员通过程序指定的主观计划去初始化类变量和其他资源</strong>，或者可以从另一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。</clinit></p>\n<ol>\n<li>执行类构造器<clinit>。</clinit></li>\n<li>初始化静态变量、静态块中的数据等（一个类加载器只会初始化一次）。</li>\n<li>子类的<clinit>调用前保证父类的<clinit>被调用。</clinit></clinit></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">&lt;clinit&gt;是线程安全的，执行&lt;clinit&gt;的线程需要先获取锁才能进行初始化操作，保证只有一个线程能执行&lt;clinit&gt;(利用此特性可以实现线程安全的懒汉单例模式)。如果在一个类的&lt;clinit&gt;方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</div></pre></td></tr></table></figure>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p>类被加载进虚拟机是由类加载器（ClassLoader）来完成的。类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果。只有在两个类被<strong>同一个类加载器</strong>加载的前提下，比较才有意义。否则，即使两个类来自同一个class文件，被同一个JVM加载，但是加载它们的类加载器不同，则这两个类就不相等。这就相当于两个命名空间中的等价类<code>LoaderA::C</code>和<code>LoaderB::C</code>。</p>\n<h2 id=\"类加载器的种类\"><a href=\"#类加载器的种类\" class=\"headerlink\" title=\"类加载器的种类\"></a>类加载器的种类</h2><p>从Java虚拟机的角度来分的话，ClassLoader分为启动类加载器（Bootstrap ClassLoader）和其它的加载器。其中Bootstrap ClassLoader负责加载Java的核心类，该类加载器使用C++语言实现，属于虚拟机自身的一部分。而其它类加载器独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。</p>\n<p>站在Java开发人员的角度来分的话，ClassLoader分为：</p>\n<ul>\n<li><p><strong>启动类加载器（Bootstrap ClassLoader）</strong></p>\n<p>负责加载<code>JAVA_HOME\\lib</code>目录中并且能被虚拟机识别的类库到JVM内存中（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载），如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</p>\n</li>\n<li><p><strong>扩展类加载器（Extension ClassLoader）</strong></p>\n<p>该加载器主要是负责加载<code>JDK\\jre\\lib\\ext</code>目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类）。该加载器可以被开发者直接使用。</p>\n</li>\n<li><p><strong>应用程序类加载器（Application ClassLoader）</strong></p>\n<p>该类加载器也称为系统类加载器（System ClassLoader），它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，<code>一般情况下这个就是程序中默认的类加载器</code>。</p>\n</li>\n</ul>\n<p>除此之外，还有自定义的类加载器，它们之间的层次关系被称为类加载器的<strong>双亲委派模型</strong>。该模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器，而这种父子关系一般通过<strong>组合（Composition）关系</strong>来实现，而不是通过继承（Inheritance）。</p>\n<h1 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h1><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/3.jpg\" algin=\"center\"><br><br></div>\n\n<p>如上图所示的类加载器之间的这种层次关系，就称为<strong>类加载器的双亲委派模型</strong>（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。</p>\n<p>双亲委派模型的工作过程为：<strong>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载</strong>。</p>\n<p>   使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起<strong>具备了一种带有优先级的层次关系</strong>。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。</p>\n<p>   在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)   <span class=\"keyword\">throws</span> ClassNotFoundException&#123;  </div><div class=\"line\">    <span class=\"comment\">// First, check if the class has already been loaded  </span></div><div class=\"line\">    <span class=\"comment\">//首先检查请求的类是否已经被加载过   </span></div><div class=\"line\">    Class c = findLoadedClass(name);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">          \t<span class=\"comment\">//委派父类加载器加载  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                c = parent.loadClass(name, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"comment\">//委派启动类加载器加载  </span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                c = findBootstrapClassOrNull(name);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        <span class=\"comment\">//父类加载器无法完成类加载请求   </span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;  </div><div class=\"line\">            <span class=\"comment\">// ClassNotFoundException thrown if class not found  </span></div><div class=\"line\">            <span class=\"comment\">// from the non-null parent class loader  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">       \t<span class=\"comment\">//本身类加载器进行类加载</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">// If still not found, then invoke findClass in order  </span></div><div class=\"line\">            <span class=\"comment\">// to find the class.  </span></div><div class=\"line\">            c = findClass(name);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (resolve) &#123;  </div><div class=\"line\">        resolveClass(c);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> c;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。</p>\n<p>注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码，但这里的执行代码只是个开端，它仅限于<clinit>（）方法。类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始。</clinit></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>之前的博客说了Java虚拟机的运行时数据区域、GC算法、垃圾回收器等知识。距离深入了解还有一段距离，包括虚拟机的类加载机制、性能调优、线程并发等等还都没有涉及到，一直在看周志明的《深入理解Java虚拟机》，越深入去读发现这本书写的真的是经典，解决了自己很多的疑惑。</p>\n<p>JVM的类加载机制。虚拟机把描述类的数据从class文件加载到内存中，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/0.png\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h1><p>类被加载到虚拟机内存中开始，到卸载出内存为止。它的生命周期分7个阶段，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）、卸载（Unloading）。其中验证、准备、解析三个部分统称为连接（Linking）。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/2.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为对方法区中这些数据的访问入口。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：JVM中的ClassLoader类加载器加载Class发生在此阶段。后面会有描述。</div></pre></td></tr></table></figure>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：<code>文件格式的验证</code>、<code>元数据的验证</code>、<code>字节码验证</code>和<code>符号引用验证</code>。</p>\n<h4 id=\"文件格式验证\"><a href=\"#文件格式验证\" class=\"headerlink\" title=\"文件格式验证\"></a>文件格式验证</h4><ol>\n<li>主要验证字节流是否符合calss文件格式的规范，如果符合则把字节流加载到方法区中进行存储。</li>\n<li>验证文件头、主次版本等等。</li>\n</ol>\n<h4 id=\"元数据验证\"><a href=\"#元数据验证\" class=\"headerlink\" title=\"元数据验证\"></a>元数据验证</h4><p>主要对字节码描述的信息进行语义分析，保证其描述符合Java语言的要求。</p>\n<ol>\n<li>类是否有父类。</li>\n<li>是否继承了不允许被继承的类（final修饰过的类）。</li>\n<li>如果这个类不是抽象类，是否实现其父类或接口中所有要求实现的方法。</li>\n<li>类中的字段、方法是否与父类产生矛盾（如：覆盖父类final类型的字段，或者不符合个则的方法）。</li>\n</ol>\n<h4 id=\"字节码验证\"><a href=\"#字节码验证\" class=\"headerlink\" title=\"字节码验证\"></a>字节码验证</h4><p>该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。<br>保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。</p>\n<h4 id=\"符号引用验证\"><a href=\"#符号引用验证\" class=\"headerlink\" title=\"符号引用验证\"></a>符号引用验证</h4><ol>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类。</li>\n<li>在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。</li>\n<li>符号引用中的类、字段、方法的访问性（private、protected、public、default）是否可被当前类访问。</li>\n</ol>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p><strong>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。</strong>对于该阶段有以下几点需要注意：</p>\n<p>  1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p>\n<p>​    2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p>\n<p>假设一个类变量的定义为：public static int value = 3；</p>\n<p>那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器<clinit>（）方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行。</p>\n<p>下表列出了Java中所有基本数据类型以及reference类型的默认零值：</p>\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/defaultValue.png\"/><br><br></div>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">只设置类中的静态变量（方法区中），不包括实例变量（堆内存中），实例变量是在对象实例化的时候初始化分配值的。</div></pre></td></tr></table></figure>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p><strong>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</strong></p>\n<ol>\n<li>类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</li>\n<li>字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</li>\n<li>类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</li>\n<li>接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。</li>\n</ol>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>初始化是类加载过程的最后一步，到了此阶段，才真正开始执行类中定义的Java程序代码。在准备阶段，类变量已经被赋过一次系统要求的初始值，而在初始化阶段，则是<strong>根据程序员通过程序指定的主观计划去初始化类变量和其他资源</strong>，或者可以从另一个角度来表达：初始化阶段是执行类构造器<clinit>()方法的过程。</p>\n<ol>\n<li>执行类构造器<clinit>。</li>\n<li>初始化静态变量、静态块中的数据等（一个类加载器只会初始化一次）。</li>\n<li>子类的<clinit>调用前保证父类的<clinit>被调用。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：</div><div class=\"line\">&lt;clinit&gt;是线程安全的，执行&lt;clinit&gt;的线程需要先获取锁才能进行初始化操作，保证只有一个线程能执行&lt;clinit&gt;(利用此特性可以实现线程安全的懒汉单例模式)。如果在一个类的&lt;clinit&gt;方法中有耗时很长的操作，那就可能造成多个线程阻塞，在实际应用中这种阻塞往往是很隐蔽的。</div></pre></td></tr></table></figure>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p>类被加载进虚拟机是由类加载器（ClassLoader）来完成的。类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类的加载阶段。对于任意一个类，都需要由它的类加载器和这个类本身一同确定其在就Java虚拟机中的唯一性，也就是说，即使两个类来源于同一个Class文件，只要加载它们的类加载器不同，那这两个类就必定不相等。这里的“相等”包括了代表类的Class对象的equals（）、isAssignableFrom（）、isInstance（）等方法的返回结果，也包括了使用instanceof关键字对对象所属关系的判定结果。只有在两个类被<strong>同一个类加载器</strong>加载的前提下，比较才有意义。否则，即使两个类来自同一个class文件，被同一个JVM加载，但是加载它们的类加载器不同，则这两个类就不相等。这就相当于两个命名空间中的等价类<code>LoaderA::C</code>和<code>LoaderB::C</code>。</p>\n<h2 id=\"类加载器的种类\"><a href=\"#类加载器的种类\" class=\"headerlink\" title=\"类加载器的种类\"></a>类加载器的种类</h2><p>从Java虚拟机的角度来分的话，ClassLoader分为启动类加载器（Bootstrap ClassLoader）和其它的加载器。其中Bootstrap ClassLoader负责加载Java的核心类，该类加载器使用C++语言实现，属于虚拟机自身的一部分。而其它类加载器独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。</p>\n<p>站在Java开发人员的角度来分的话，ClassLoader分为：</p>\n<ul>\n<li><p><strong>启动类加载器（Bootstrap ClassLoader）</strong></p>\n<p>负责加载<code>JAVA_HOME\\lib</code>目录中并且能被虚拟机识别的类库到JVM内存中（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载），如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</p>\n</li>\n<li><p><strong>扩展类加载器（Extension ClassLoader）</strong></p>\n<p>该加载器主要是负责加载<code>JDK\\jre\\lib\\ext</code>目录中，或者由java.ext.dirs系统变量指定的路径中的所有类库（如javax.*开头的类）。该加载器可以被开发者直接使用。</p>\n</li>\n<li><p><strong>应用程序类加载器（Application ClassLoader）</strong></p>\n<p>该类加载器也称为系统类加载器（System ClassLoader），它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，<code>一般情况下这个就是程序中默认的类加载器</code>。</p>\n</li>\n</ul>\n<p>除此之外，还有自定义的类加载器，它们之间的层次关系被称为类加载器的<strong>双亲委派模型</strong>。该模型要求除了顶层的启动类加载器外，其余的类加载器都应该有自己的父类加载器，而这种父子关系一般通过<strong>组合（Composition）关系</strong>来实现，而不是通过继承（Inheritance）。</p>\n<h1 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a>双亲委派模型</h1><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/ClassLoader/3.jpg\" algin=\"center\"/><br><br></div>\n\n<p>如上图所示的类加载器之间的这种层次关系，就称为<strong>类加载器的双亲委派模型</strong>（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。</p>\n<p>双亲委派模型的工作过程为：<strong>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载</strong>。</p>\n<p>   使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起<strong>具备了一种带有优先级的层次关系</strong>。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。</p>\n<p>   在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> Class&lt;?&gt; loadClass(String name, <span class=\"keyword\">boolean</span> resolve)   <span class=\"keyword\">throws</span> ClassNotFoundException&#123;  </div><div class=\"line\">    <span class=\"comment\">// First, check if the class has already been loaded  </span></div><div class=\"line\">    <span class=\"comment\">//首先检查请求的类是否已经被加载过   </span></div><div class=\"line\">    Class c = findLoadedClass(name);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">          \t<span class=\"comment\">//委派父类加载器加载  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                c = parent.loadClass(name, <span class=\"keyword\">false</span>);</div><div class=\"line\">            <span class=\"comment\">//委派启动类加载器加载  </span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                c = findBootstrapClassOrNull(name);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        <span class=\"comment\">//父类加载器无法完成类加载请求   </span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;  </div><div class=\"line\">            <span class=\"comment\">// ClassNotFoundException thrown if class not found  </span></div><div class=\"line\">            <span class=\"comment\">// from the non-null parent class loader  </span></div><div class=\"line\">        &#125;  </div><div class=\"line\">       \t<span class=\"comment\">//本身类加载器进行类加载</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"comment\">// If still not found, then invoke findClass in order  </span></div><div class=\"line\">            <span class=\"comment\">// to find the class.  </span></div><div class=\"line\">            c = findClass(name);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">if</span> (resolve) &#123;  </div><div class=\"line\">        resolveClass(c);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    <span class=\"keyword\">return</span> c;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。</p>\n<p>注意，双亲委派模型是Java设计者推荐给开发者的类加载器的实现方式，并不是强制规定的。大多数的类加载器都遵循这个模型，但是JDK中也有较大规模破坏双亲模型的情况，例如线程上下文类加载器（Thread Context ClassLoader）的出现。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>整个类加载过程中，除了在加载阶段用户应用程序可以自定义类加载器参与之外，其余所有的动作完全由虚拟机主导和控制。到了初始化才开始执行类中定义的Java程序代码，但这里的执行代码只是个开端，它仅限于<clinit>（）方法。类加载过程中主要是将Class文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始。</p>"},{"title":"JVM入门","date":"2017-11-20T07:27:10.000Z","_content":"\n# 引言\n\nJVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 运行时数据区域\n\nJVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： \n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"/>\n\n</div>\n\n## **程序计数器(线程私有)**\n\n程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，`分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成`。\n\n由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。\n\n此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。\n\n## Java虚拟机栈(线程私有)\n\n生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。\n\n局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。\n\n这个区域可能出现的两种异常：\n\n- 一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。\n- 另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，\n\n## 本地方法栈\n\n本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而`本地方法栈是为Native方法服务`。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。\n\n## Java堆(线程共享区域)\n\nJava堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：**所有对象实例及数组都要在堆上分配**。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。\n\nJava堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。\n\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。\n\n当堆无法再扩展时，会抛出OutOfMemoryError异常。\n\n## **方法区(线程共享区域)**\n\n**方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据**。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。\n\n```\n运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。\n```\n\n另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 \n\n# GC算法\n\nJava与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。\n\n## 标记-清除算法(Mark-Sweep)\n\n最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。\n\n它的不足主要有两个：\n\n1. 效率问题，标记和清除两个过程效率都不高；\n2. 空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"/>\n\n</div>\n\n## 复制算法(Copy)\n\n为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。\n\n但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。\n\n研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。\n\n当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"/>\n\n</div>\n\n## 标记整理(Mark-Compact)\n\n复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n\n标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"/>\n\n</div>\n\n## 分代收集算法\n\n当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。\n\n在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。\n\n# HotSpot算法实现\n\n## 枚举根节点\n\n可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。\n在jvm中，做为GCRoots的对象：\n\n1. 虚拟机栈(栈桢中的本地变量表)中的引用的对象;\n2. 方法区中的类静态属性引用的对象;\n3. 方法区中的常量引用的对象;\n4. 本地方法栈中JNI的引用的对象 。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"/>\n\n</div>\n\n从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。\n\n可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，*即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。*\n\n## 垃圾收集器\n\n如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。\n\nJava虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"/>\n\n</div>\n\n图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。\n\n### 概念理解\n\n1. **并发和并行**\n   这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。\n\n   - **并行（Parallel）**：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。\n   - **并发（Concurrent）**：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。\n\n2. **Minor GC 和 Full GC**\n\n   - **新生代GC（Minor GC）**：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n   - **老年代GC（Major GC / Full GC）**：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。\n\n3. **吞吐量**\n\n   吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。\n   虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。\n\n### Serial收集器\n\nSerial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。\n\n\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   这个收集器是一个`单线程`的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。`Stop The World`(STW)\n2. **应用场景：**\n   Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。\n3. **优势：**\n   简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。\n\n### ParNew收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   ParNew收集器其实就是Serial收集器的**多线程版本**，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。\n2. **应用场景：**\n   ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。\n\n很重要的原因是：`除了Serial收集器外，目前只有它能与CMS收集器配合工作。`\n在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。\n不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。\n\n**Serial收集器 VS ParNew收集器：**\nParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。\n然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。\n\n### Parallel Scavenge收集器\n\n1. **特性：**\n   Parallel Scavenge收集器是一个**新生代收集器**，它也是使用**复制算法**的收集器，又是**并行**的多线程收集器。\n2. **应用场景：**\n   停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n3. **对比分析：**\n\n- **Parallel Scavenge收集器 VS CMS等收集器：**\n  Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个**可控制的吞吐量**（Throughput）。\n  由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。\n\n- **Parallel Scavenge收集器 VS ParNew收集器：**\n  Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。\n\n  **GC自适应的调节策略**：\n  Parallel Scavenge收集器有一个参数-`XX:+UseAdaptiveSizePolicy`。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。\n\n### Serial Old收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Serial Old是Serial收集器的**老年代版本**，它同样是一个**单线程收集器**，使用**标记－整理**算法。\n2. **应用场景：**\n\n- **Client模式**\n  Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。\n- **Server模式**\n  如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。\n\n### **Parallel Old收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Parallel Old是Parallel Scavenge收集器的**老年代版本**，使用**多线程**和**“标记－整理”**算法。\n2. **应用场景：**\n   在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。\n\n这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。\n\n### **CMS收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"/>\n\n</div>\n\n1. 特性：\n\n   CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。`CMS收集器是基于“标记—清除”算法实现的`，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：\n\n- **初始标记（CMS initial mark）**\n  初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。\n- **并发标记（CMS concurrent mark）**\n  并发标记阶段就是进行GC Roots Tracing的过程。\n- **重新标记（CMS remark）**\n  重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。\n- **并发清除（CMS concurrent sweep）**\n  并发清除阶段会清除对象。\n\n由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。\n\n1. **优点：**\n   CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：**并发收集**、**低停顿**。\n2. **缺点：**\n\n- **CMS收集器对CPU资源非常敏感**\n  其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。\n  CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。\n\n- **CMS收集器无法处理浮动垃圾**\n  CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。\n\n  由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。\n  也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。\n\n- **CMS收集器会产生大量空间碎片**\n  CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。\n\n  空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。\n\n### **G1收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   G1（Garbage-First）是一款面向**服务端应用**的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。\n\n- **并行与并发**\n  G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。\n- **分代收集**\n  与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。\n- **空间整合**\n  与CMS的“标记—清理”算法不同，G1从**整体来看是基于“标记—整理”**算法实现的收集器，从**局部（两个Region之间）上来看是基于“复制”**算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。\n- **可预测的停顿**\n  这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。\n\n在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n\nG1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。\n\n1. **执行过程：**\n   G1收集器的运作大致可划分为以下几个步骤：\n\n- **初始标记（Initial Marking）**\n  初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。\n- **并发标记（Concurrent Marking）**\n  并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。\n- **最终标记（Final Marking）**\n  最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程`Remembered Set Logs`里面，最终标记阶段需要把`Remembered Set Logs`的数据合并到`Remembered Set`中，这阶段需要停顿线程，但是可并行执行。\n- **筛选回收（Live Data Counting and Evacuation）**\n  筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。\n\n**CMS收集器 VS G1收集器：**\n\nG1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。\n\n# 总结\n\n内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。\n\n虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。","source":"_posts/JVM入门.md","raw":"---\ntitle: JVM入门\ndate: 2017-11-20 15:27:10\ntags: [java,jvm]\ncategories: technology\n---\n\n# 引言\n\nJVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 运行时数据区域\n\nJVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： \n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"/>\n\n</div>\n\n## **程序计数器(线程私有)**\n\n程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，`分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成`。\n\n由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。\n\n此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。\n\n## Java虚拟机栈(线程私有)\n\n生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。\n\n局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。\n\n这个区域可能出现的两种异常：\n\n- 一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。\n- 另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，\n\n## 本地方法栈\n\n本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而`本地方法栈是为Native方法服务`。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。\n\n## Java堆(线程共享区域)\n\nJava堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：**所有对象实例及数组都要在堆上分配**。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。\n\nJava堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。\n\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。\n\n当堆无法再扩展时，会抛出OutOfMemoryError异常。\n\n## **方法区(线程共享区域)**\n\n**方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据**。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。\n\n```\n运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。\n```\n\n另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 \n\n# GC算法\n\nJava与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。\n\n## 标记-清除算法(Mark-Sweep)\n\n最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。\n\n它的不足主要有两个：\n\n1. 效率问题，标记和清除两个过程效率都不高；\n2. 空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"/>\n\n</div>\n\n## 复制算法(Copy)\n\n为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。\n\n但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。\n\n研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。\n\n当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"/>\n\n</div>\n\n## 标记整理(Mark-Compact)\n\n复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n\n标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"/>\n\n</div>\n\n## 分代收集算法\n\n当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。\n\n在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。\n\n# HotSpot算法实现\n\n## 枚举根节点\n\n可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。\n在jvm中，做为GCRoots的对象：\n\n1. 虚拟机栈(栈桢中的本地变量表)中的引用的对象;\n2. 方法区中的类静态属性引用的对象;\n3. 方法区中的常量引用的对象;\n4. 本地方法栈中JNI的引用的对象 。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"/>\n\n</div>\n\n从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。\n\n可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，*即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。*\n\n## 垃圾收集器\n\n如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。\n\nJava虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"/>\n\n</div>\n\n图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。\n\n### 概念理解\n\n1. **并发和并行**\n   这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。\n\n   - **并行（Parallel）**：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。\n   - **并发（Concurrent）**：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。\n\n2. **Minor GC 和 Full GC**\n\n   - **新生代GC（Minor GC）**：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n   - **老年代GC（Major GC / Full GC）**：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。\n\n3. **吞吐量**\n\n   吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。\n   虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。\n\n### Serial收集器\n\nSerial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。\n\n\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   这个收集器是一个`单线程`的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。`Stop The World`(STW)\n2. **应用场景：**\n   Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。\n3. **优势：**\n   简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。\n\n### ParNew收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   ParNew收集器其实就是Serial收集器的**多线程版本**，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。\n2. **应用场景：**\n   ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。\n\n很重要的原因是：`除了Serial收集器外，目前只有它能与CMS收集器配合工作。`\n在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。\n不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。\n\n**Serial收集器 VS ParNew收集器：**\nParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。\n然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。\n\n### Parallel Scavenge收集器\n\n1. **特性：**\n   Parallel Scavenge收集器是一个**新生代收集器**，它也是使用**复制算法**的收集器，又是**并行**的多线程收集器。\n2. **应用场景：**\n   停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n3. **对比分析：**\n\n- **Parallel Scavenge收集器 VS CMS等收集器：**\n  Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个**可控制的吞吐量**（Throughput）。\n  由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。\n\n- **Parallel Scavenge收集器 VS ParNew收集器：**\n  Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。\n\n  **GC自适应的调节策略**：\n  Parallel Scavenge收集器有一个参数-`XX:+UseAdaptiveSizePolicy`。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。\n\n### Serial Old收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Serial Old是Serial收集器的**老年代版本**，它同样是一个**单线程收集器**，使用**标记－整理**算法。\n2. **应用场景：**\n\n- **Client模式**\n  Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。\n- **Server模式**\n  如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。\n\n### **Parallel Old收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Parallel Old是Parallel Scavenge收集器的**老年代版本**，使用**多线程**和**“标记－整理”**算法。\n2. **应用场景：**\n   在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。\n\n这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。\n\n### **CMS收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"/>\n\n</div>\n\n1. 特性：\n\n   CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。`CMS收集器是基于“标记—清除”算法实现的`，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：\n\n- **初始标记（CMS initial mark）**\n  初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。\n- **并发标记（CMS concurrent mark）**\n  并发标记阶段就是进行GC Roots Tracing的过程。\n- **重新标记（CMS remark）**\n  重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。\n- **并发清除（CMS concurrent sweep）**\n  并发清除阶段会清除对象。\n\n由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。\n\n1. **优点：**\n   CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：**并发收集**、**低停顿**。\n2. **缺点：**\n\n- **CMS收集器对CPU资源非常敏感**\n  其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。\n  CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。\n\n- **CMS收集器无法处理浮动垃圾**\n  CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。\n\n  由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。\n  也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。\n\n- **CMS收集器会产生大量空间碎片**\n  CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。\n\n  空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。\n\n### **G1收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   G1（Garbage-First）是一款面向**服务端应用**的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。\n\n- **并行与并发**\n  G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。\n- **分代收集**\n  与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。\n- **空间整合**\n  与CMS的“标记—清理”算法不同，G1从**整体来看是基于“标记—整理”**算法实现的收集器，从**局部（两个Region之间）上来看是基于“复制”**算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。\n- **可预测的停顿**\n  这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。\n\n在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n\nG1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。\n\n1. **执行过程：**\n   G1收集器的运作大致可划分为以下几个步骤：\n\n- **初始标记（Initial Marking）**\n  初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。\n- **并发标记（Concurrent Marking）**\n  并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。\n- **最终标记（Final Marking）**\n  最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程`Remembered Set Logs`里面，最终标记阶段需要把`Remembered Set Logs`的数据合并到`Remembered Set`中，这阶段需要停顿线程，但是可并行执行。\n- **筛选回收（Live Data Counting and Evacuation）**\n  筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。\n\n**CMS收集器 VS G1收集器：**\n\nG1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。\n\n# 总结\n\n内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。\n\n虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。","slug":"JVM入门","published":1,"updated":"2018-03-13T05:50:16.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6tzw000c3gfkwpj23otf","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>JVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h1><p>JVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： </p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"程序计数器-线程私有\"><a href=\"#程序计数器-线程私有\" class=\"headerlink\" title=\"程序计数器(线程私有)\"></a><strong>程序计数器(线程私有)</strong></h2><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，<code>分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</code>。</p>\n<p>由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。</p>\n<p>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>\n<h2 id=\"Java虚拟机栈-线程私有\"><a href=\"#Java虚拟机栈-线程私有\" class=\"headerlink\" title=\"Java虚拟机栈(线程私有)\"></a>Java虚拟机栈(线程私有)</h2><p>生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。</p>\n<p>局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。</p>\n<p>这个区域可能出现的两种异常：</p>\n<ul>\n<li>一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。</li>\n<li>另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，</li>\n</ul>\n<h2 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h2><p>本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而<code>本地方法栈是为Native方法服务</code>。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p>\n<h2 id=\"Java堆-线程共享区域\"><a href=\"#Java堆-线程共享区域\" class=\"headerlink\" title=\"Java堆(线程共享区域)\"></a>Java堆(线程共享区域)</h2><p>Java堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：<strong>所有对象实例及数组都要在堆上分配</strong>。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。</p>\n<p>Java堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。</p>\n<p>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。</p>\n<p>当堆无法再扩展时，会抛出OutOfMemoryError异常。</p>\n<h2 id=\"方法区-线程共享区域\"><a href=\"#方法区-线程共享区域\" class=\"headerlink\" title=\"方法区(线程共享区域)\"></a><strong>方法区(线程共享区域)</strong></h2><p><strong>方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</div></pre></td></tr></table></figure>\n<p>另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 </p>\n<h1 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h1><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。</p>\n<h2 id=\"标记-清除算法-Mark-Sweep\"><a href=\"#标记-清除算法-Mark-Sweep\" class=\"headerlink\" title=\"标记-清除算法(Mark-Sweep)\"></a>标记-清除算法(Mark-Sweep)</h2><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>\n<p>它的不足主要有两个：</p>\n<ol>\n<li>效率问题，标记和清除两个过程效率都不高；</li>\n<li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ol>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"复制算法-Copy\"><a href=\"#复制算法-Copy\" class=\"headerlink\" title=\"复制算法(Copy)\"></a>复制算法(Copy)</h2><p>为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。</p>\n<p>但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。</p>\n<p>研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。</p>\n<p>当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"标记整理-Mark-Compact\"><a href=\"#标记整理-Mark-Compact\" class=\"headerlink\" title=\"标记整理(Mark-Compact)\"></a>标记整理(Mark-Compact)</h2><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p>\n<p>标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>\n<p>在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。</p>\n<h1 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h1><h2 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h2><p>可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。<br>在jvm中，做为GCRoots的对象：</p>\n<ol>\n<li>虚拟机栈(栈桢中的本地变量表)中的引用的对象;</li>\n<li>方法区中的类静态属性引用的对象;</li>\n<li>方法区中的常量引用的对象;</li>\n<li>本地方法栈中JNI的引用的对象 。</li>\n</ol>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"><br><br></div>\n\n<p>从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。</p>\n<p>可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，<em>即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</em></p>\n<h2 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h2><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</p>\n<p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"><br><br></div>\n\n<p>图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。</p>\n<h3 id=\"概念理解\"><a href=\"#概念理解\" class=\"headerlink\" title=\"概念理解\"></a>概念理解</h3><ol>\n<li><p><strong>并发和并行</strong><br>这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。</p>\n<ul>\n<li><strong>并行（Parallel）</strong>：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li>\n<li><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。</li>\n</ul>\n</li>\n<li><p><strong>Minor GC 和 Full GC</strong></p>\n<ul>\n<li><strong>新生代GC（Minor GC）</strong>：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li>\n<li><strong>老年代GC（Major GC / Full GC）</strong>：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li>\n</ul>\n</li>\n<li><p><strong>吞吐量</strong></p>\n<p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。<br>虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>\n</li>\n</ol>\n<h3 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h3><p>Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>这个收集器是一个<code>单线程</code>的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。<code>Stop The World</code>(STW)</li>\n<li><strong>应用场景：</strong><br>Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。</li>\n<li><strong>优势：</strong><br>简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</li>\n</ol>\n<h3 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>ParNew收集器其实就是Serial收集器的<strong>多线程版本</strong>，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。</li>\n<li><strong>应用场景：</strong><br>ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。</li>\n</ol>\n<p>很重要的原因是：<code>除了Serial收集器外，目前只有它能与CMS收集器配合工作。</code><br>在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。<br>不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>\n<p><strong>Serial收集器 VS ParNew收集器：</strong><br>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。<br>然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。</p>\n<h3 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h3><ol>\n<li><strong>特性：</strong><br>Parallel Scavenge收集器是一个<strong>新生代收集器</strong>，它也是使用<strong>复制算法</strong>的收集器，又是<strong>并行</strong>的多线程收集器。</li>\n<li><strong>应用场景：</strong><br>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</li>\n<li><strong>对比分析：</strong></li>\n</ol>\n<ul>\n<li><p><strong>Parallel Scavenge收集器 VS CMS等收集器：</strong><br>Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个<strong>可控制的吞吐量</strong>（Throughput）。<br>由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。</p>\n</li>\n<li><p><strong>Parallel Scavenge收集器 VS ParNew收集器：</strong><br>Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。</p>\n<p><strong>GC自适应的调节策略</strong>：<br>Parallel Scavenge收集器有一个参数-<code>XX:+UseAdaptiveSizePolicy</code>。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。</p>\n</li>\n</ul>\n<h3 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Serial Old是Serial收集器的<strong>老年代版本</strong>，它同样是一个<strong>单线程收集器</strong>，使用<strong>标记－整理</strong>算法。</li>\n<li><strong>应用场景：</strong></li>\n</ol>\n<ul>\n<li><strong>Client模式</strong><br>Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。</li>\n<li><strong>Server模式</strong><br>如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li>\n</ul>\n<h3 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a><strong>Parallel Old收集器</strong></h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Parallel Old是Parallel Scavenge收集器的<strong>老年代版本</strong>，使用<strong>多线程</strong>和<strong>“标记－整理”</strong>算法。</li>\n<li><strong>应用场景：</strong><br>在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</li>\n</ol>\n<p>这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。</p>\n<h3 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a><strong>CMS收集器</strong></h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><p>特性：</p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。<code>CMS收集器是基于“标记—清除”算法实现的</code>，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：</p>\n</li>\n</ol>\n<ul>\n<li><strong>初始标记（CMS initial mark）</strong><br>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。</li>\n<li><strong>并发标记（CMS concurrent mark）</strong><br>并发标记阶段就是进行GC Roots Tracing的过程。</li>\n<li><strong>重新标记（CMS remark）</strong><br>重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。</li>\n<li><strong>并发清除（CMS concurrent sweep）</strong><br>并发清除阶段会清除对象。</li>\n</ul>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>\n<ol>\n<li><strong>优点：</strong><br>CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：<strong>并发收集</strong>、<strong>低停顿</strong>。</li>\n<li><strong>缺点：</strong></li>\n</ol>\n<ul>\n<li><p><strong>CMS收集器对CPU资源非常敏感</strong><br>其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。<br>CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。</p>\n</li>\n<li><p><strong>CMS收集器无法处理浮动垃圾</strong><br>CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</p>\n<p>由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。<br>也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>\n</li>\n<li><p><strong>CMS收集器会产生大量空间碎片</strong><br>CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。</p>\n<p>空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。</p>\n</li>\n</ul>\n<h3 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a><strong>G1收集器</strong></h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>G1（Garbage-First）是一款面向<strong>服务端应用</strong>的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。</li>\n</ol>\n<ul>\n<li><strong>并行与并发</strong><br>G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li>\n<li><strong>分代收集</strong><br>与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong><br>与CMS的“标记—清理”算法不同，G1从<strong>整体来看是基于“标记—整理”</strong>算法实现的收集器，从<strong>局部（两个Region之间）上来看是基于“复制”</strong>算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li>\n<li><strong>可预测的停顿</strong><br>这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</li>\n</ul>\n<p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</p>\n<p>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</p>\n<ol>\n<li><strong>执行过程：</strong><br>G1收集器的运作大致可划分为以下几个步骤：</li>\n</ol>\n<ul>\n<li><strong>初始标记（Initial Marking）</strong><br>初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</li>\n<li><strong>并发标记（Concurrent Marking）</strong><br>并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</li>\n<li><strong>最终标记（Final Marking）</strong><br>最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程<code>Remembered Set Logs</code>里面，最终标记阶段需要把<code>Remembered Set Logs</code>的数据合并到<code>Remembered Set</code>中，这阶段需要停顿线程，但是可并行执行。</li>\n<li><strong>筛选回收（Live Data Counting and Evacuation）</strong><br>筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li>\n</ul>\n<p><strong>CMS收集器 VS G1收集器：</strong></p>\n<p>G1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。</p>\n<p>虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>JVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h1><p>JVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： </p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"程序计数器-线程私有\"><a href=\"#程序计数器-线程私有\" class=\"headerlink\" title=\"程序计数器(线程私有)\"></a><strong>程序计数器(线程私有)</strong></h2><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，<code>分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</code>。</p>\n<p>由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。</p>\n<p>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>\n<h2 id=\"Java虚拟机栈-线程私有\"><a href=\"#Java虚拟机栈-线程私有\" class=\"headerlink\" title=\"Java虚拟机栈(线程私有)\"></a>Java虚拟机栈(线程私有)</h2><p>生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。</p>\n<p>局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。</p>\n<p>这个区域可能出现的两种异常：</p>\n<ul>\n<li>一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。</li>\n<li>另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，</li>\n</ul>\n<h2 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h2><p>本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而<code>本地方法栈是为Native方法服务</code>。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p>\n<h2 id=\"Java堆-线程共享区域\"><a href=\"#Java堆-线程共享区域\" class=\"headerlink\" title=\"Java堆(线程共享区域)\"></a>Java堆(线程共享区域)</h2><p>Java堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：<strong>所有对象实例及数组都要在堆上分配</strong>。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。</p>\n<p>Java堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。</p>\n<p>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。</p>\n<p>当堆无法再扩展时，会抛出OutOfMemoryError异常。</p>\n<h2 id=\"方法区-线程共享区域\"><a href=\"#方法区-线程共享区域\" class=\"headerlink\" title=\"方法区(线程共享区域)\"></a><strong>方法区(线程共享区域)</strong></h2><p><strong>方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</div></pre></td></tr></table></figure>\n<p>另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 </p>\n<h1 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h1><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。</p>\n<h2 id=\"标记-清除算法-Mark-Sweep\"><a href=\"#标记-清除算法-Mark-Sweep\" class=\"headerlink\" title=\"标记-清除算法(Mark-Sweep)\"></a>标记-清除算法(Mark-Sweep)</h2><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>\n<p>它的不足主要有两个：</p>\n<ol>\n<li>效率问题，标记和清除两个过程效率都不高；</li>\n<li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ol>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"复制算法-Copy\"><a href=\"#复制算法-Copy\" class=\"headerlink\" title=\"复制算法(Copy)\"></a>复制算法(Copy)</h2><p>为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。</p>\n<p>但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。</p>\n<p>研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。</p>\n<p>当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"标记整理-Mark-Compact\"><a href=\"#标记整理-Mark-Compact\" class=\"headerlink\" title=\"标记整理(Mark-Compact)\"></a>标记整理(Mark-Compact)</h2><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p>\n<p>标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>\n<p>在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。</p>\n<h1 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h1><h2 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h2><p>可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。<br>在jvm中，做为GCRoots的对象：</p>\n<ol>\n<li>虚拟机栈(栈桢中的本地变量表)中的引用的对象;</li>\n<li>方法区中的类静态属性引用的对象;</li>\n<li>方法区中的常量引用的对象;</li>\n<li>本地方法栈中JNI的引用的对象 。</li>\n</ol>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"/><br><br></div>\n\n<p>从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。</p>\n<p>可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，<em>即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</em></p>\n<h2 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h2><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</p>\n<p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"/><br><br></div>\n\n<p>图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。</p>\n<h3 id=\"概念理解\"><a href=\"#概念理解\" class=\"headerlink\" title=\"概念理解\"></a>概念理解</h3><ol>\n<li><p><strong>并发和并行</strong><br>这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。</p>\n<ul>\n<li><strong>并行（Parallel）</strong>：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li>\n<li><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。</li>\n</ul>\n</li>\n<li><p><strong>Minor GC 和 Full GC</strong></p>\n<ul>\n<li><strong>新生代GC（Minor GC）</strong>：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li>\n<li><strong>老年代GC（Major GC / Full GC）</strong>：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li>\n</ul>\n</li>\n<li><p><strong>吞吐量</strong></p>\n<p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。<br>虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>\n</li>\n</ol>\n<h3 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h3><p>Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>这个收集器是一个<code>单线程</code>的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。<code>Stop The World</code>(STW)</li>\n<li><strong>应用场景：</strong><br>Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。</li>\n<li><strong>优势：</strong><br>简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</li>\n</ol>\n<h3 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>ParNew收集器其实就是Serial收集器的<strong>多线程版本</strong>，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。</li>\n<li><strong>应用场景：</strong><br>ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。</li>\n</ol>\n<p>很重要的原因是：<code>除了Serial收集器外，目前只有它能与CMS收集器配合工作。</code><br>在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。<br>不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>\n<p><strong>Serial收集器 VS ParNew收集器：</strong><br>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。<br>然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。</p>\n<h3 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h3><ol>\n<li><strong>特性：</strong><br>Parallel Scavenge收集器是一个<strong>新生代收集器</strong>，它也是使用<strong>复制算法</strong>的收集器，又是<strong>并行</strong>的多线程收集器。</li>\n<li><strong>应用场景：</strong><br>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</li>\n<li><strong>对比分析：</strong></li>\n</ol>\n<ul>\n<li><p><strong>Parallel Scavenge收集器 VS CMS等收集器：</strong><br>Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个<strong>可控制的吞吐量</strong>（Throughput）。<br>由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。</p>\n</li>\n<li><p><strong>Parallel Scavenge收集器 VS ParNew收集器：</strong><br>Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。</p>\n<p><strong>GC自适应的调节策略</strong>：<br>Parallel Scavenge收集器有一个参数-<code>XX:+UseAdaptiveSizePolicy</code>。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。</p>\n</li>\n</ul>\n<h3 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Serial Old是Serial收集器的<strong>老年代版本</strong>，它同样是一个<strong>单线程收集器</strong>，使用<strong>标记－整理</strong>算法。</li>\n<li><strong>应用场景：</strong></li>\n</ol>\n<ul>\n<li><strong>Client模式</strong><br>Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。</li>\n<li><strong>Server模式</strong><br>如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li>\n</ul>\n<h3 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a><strong>Parallel Old收集器</strong></h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Parallel Old是Parallel Scavenge收集器的<strong>老年代版本</strong>，使用<strong>多线程</strong>和<strong>“标记－整理”</strong>算法。</li>\n<li><strong>应用场景：</strong><br>在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</li>\n</ol>\n<p>这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。</p>\n<h3 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a><strong>CMS收集器</strong></h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><p>特性：</p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。<code>CMS收集器是基于“标记—清除”算法实现的</code>，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：</p>\n</li>\n</ol>\n<ul>\n<li><strong>初始标记（CMS initial mark）</strong><br>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。</li>\n<li><strong>并发标记（CMS concurrent mark）</strong><br>并发标记阶段就是进行GC Roots Tracing的过程。</li>\n<li><strong>重新标记（CMS remark）</strong><br>重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。</li>\n<li><strong>并发清除（CMS concurrent sweep）</strong><br>并发清除阶段会清除对象。</li>\n</ul>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>\n<ol>\n<li><strong>优点：</strong><br>CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：<strong>并发收集</strong>、<strong>低停顿</strong>。</li>\n<li><strong>缺点：</strong></li>\n</ol>\n<ul>\n<li><p><strong>CMS收集器对CPU资源非常敏感</strong><br>其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。<br>CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。</p>\n</li>\n<li><p><strong>CMS收集器无法处理浮动垃圾</strong><br>CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</p>\n<p>由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。<br>也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>\n</li>\n<li><p><strong>CMS收集器会产生大量空间碎片</strong><br>CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。</p>\n<p>空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。</p>\n</li>\n</ul>\n<h3 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a><strong>G1收集器</strong></h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>G1（Garbage-First）是一款面向<strong>服务端应用</strong>的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。</li>\n</ol>\n<ul>\n<li><strong>并行与并发</strong><br>G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li>\n<li><strong>分代收集</strong><br>与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong><br>与CMS的“标记—清理”算法不同，G1从<strong>整体来看是基于“标记—整理”</strong>算法实现的收集器，从<strong>局部（两个Region之间）上来看是基于“复制”</strong>算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li>\n<li><strong>可预测的停顿</strong><br>这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</li>\n</ul>\n<p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</p>\n<p>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</p>\n<ol>\n<li><strong>执行过程：</strong><br>G1收集器的运作大致可划分为以下几个步骤：</li>\n</ol>\n<ul>\n<li><strong>初始标记（Initial Marking）</strong><br>初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</li>\n<li><strong>并发标记（Concurrent Marking）</strong><br>并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</li>\n<li><strong>最终标记（Final Marking）</strong><br>最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程<code>Remembered Set Logs</code>里面，最终标记阶段需要把<code>Remembered Set Logs</code>的数据合并到<code>Remembered Set</code>中，这阶段需要停顿线程，但是可并行执行。</li>\n<li><strong>筛选回收（Live Data Counting and Evacuation）</strong><br>筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li>\n</ul>\n<p><strong>CMS收集器 VS G1收集器：</strong></p>\n<p>G1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。</p>\n<p>虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。</p>"},{"title":"Java String intern方法","date":"2017-12-01T02:27:19.000Z","_content":"\n# 引言\n\nString类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。\n\nintern()方法设计的初衷，就是重用String对象，以节省内存消耗。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 案例\n\n```java\nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n在**JDK1.7**下输出结果为：\n\n```java\ntrue\ntrue\n```\n\n再将上面的例子加上一行代码：\n\n```java\nString str2 = \"rainbowhorse\";\t//新加的一行代码，其余不变  \nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n再运行，结果为：\n\n```java\nfalse\nfalse\n```\n\n在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。\n\n# 为什么使用intern()方法\n\n就如引言所说的，**intern()方法设计的初衷，就是重用String对象，以节省内存消耗**。下面通过例子来说明：\n\n```java\npublic class Test {\n\tstatic final int MAX = 100000;\n\tstatic final String[] arr = new String[MAX];\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 为长度为10的Integer数组随机赋值\n\t\tInteger[] sample = new Integer[10];\n\t\tRandom random = new Random(1000);\n\t\tfor (int i = 0; i < sample.length; i++) {\n\t\t\tsample[i] = random.nextInt();\n\t\t}\n\t\t// 记录程序开始时间\n\t\tlong t = System.currentTimeMillis();\n\t\t// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数\n\t\tfor (int i = 0; i < MAX; i++) {\n\t\t\tarr[i] = new String(String.valueOf(sample[i % sample.length]));\n\t\t\t// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();\n\t\t}\n\t\tSystem.out.println((System.currentTimeMillis() - t) + \"ms\");\n\t\tSystem.gc();\n\t}\n}\n```\n\n这个主要是为了证明`使用intern()比不使用intern()消耗的内存更少`。\n\n先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window ---> Preferences --> Java --> Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过[MAT](http://download.eclipse.org/mat/)插件查看该hprof文件。\n\n不使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"/>\n\n</div>\n\n使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"/>\n\n</div>\n\n从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。\n\n但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 \n\n# 深入理解intern()方法\n\n**JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。**\n\n看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false true  \n```\n\n再分别调整上面代码2、3行，7、8行的顺序：\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false false  \n```\n\n## **JDK1.6**\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"/>\n\n</div>\n\n在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。\n\n使用**引号声明的字符串都是会直接在字符串常量池中生成**的，而**new 出来的String对象是放在堆空间中**的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。\n\nintern()方法在JDK1.6中的作用是：比如String s = new String(\"rainbowhorse\")，再调用s.intern()，此时返回值还是字符串\"rainbowhorse\"，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在\"rainbowhorse\"这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把\"rainbowhorse\"添加到字符串池中，然后再返回它的引用。\n\n## JDK1.7\n\n### 例一分析\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，**生成了常量池中的“1” 和堆空间中的字符串对象**。\n\ns.intern()，这一行的作用是s对象去常量池中寻找后发现\"1\"**已经存在于常量池中了**。\n\nString s2 = \"1\"，这行代码是生成一个s2的引用**指向常量池中的“1”对象**。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意**此时常量池中是没有 “11”对象**的。\n\ns3.intern()，这一行代码，是将 s3中的**“11”字符串放入 String 常量池中**，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 \"11\" 的对象。\n\n**但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用**。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。\n\nString s4 = \"11\"， 这一行代码会**直接去常量池中创建**，但是发现已经有这个对象了，此时也就是**指向 s3 引用对象的一个引用**。因此s3 == s4返回了true。\n\n### 例二分析\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，生成了**常量池中的“1” 和堆空间中的字符串对象**。\n\nString s2 = \"1\"，这行代码是生成一个s2的**引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它**。\n\ns.intern()，这一行在这里就没什么实际作用了。因为\"1\"已经存在了。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意此时常量池中是没有 “11”对象的。\n\nString s4 = \"11\"， 这一行代码会**直接去生成常量池中的\"11\"**。\n\ns3.intern()，这一行在这里就没什么实际作用了。因为\"11\"已经存在了。\n\n结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。\n\n# 总结\n\n从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，**如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用**。","source":"_posts/Java-String-intern方法.md","raw":"---\ntitle: Java String intern方法\ndate: 2017-11-31 10:27:19\ntags: [java,tips]\ncategories: technology\n---\n\n# 引言\n\nString类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。\n\nintern()方法设计的初衷，就是重用String对象，以节省内存消耗。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 案例\n\n```java\nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n在**JDK1.7**下输出结果为：\n\n```java\ntrue\ntrue\n```\n\n再将上面的例子加上一行代码：\n\n```java\nString str2 = \"rainbowhorse\";\t//新加的一行代码，其余不变  \nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n再运行，结果为：\n\n```java\nfalse\nfalse\n```\n\n在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。\n\n# 为什么使用intern()方法\n\n就如引言所说的，**intern()方法设计的初衷，就是重用String对象，以节省内存消耗**。下面通过例子来说明：\n\n```java\npublic class Test {\n\tstatic final int MAX = 100000;\n\tstatic final String[] arr = new String[MAX];\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 为长度为10的Integer数组随机赋值\n\t\tInteger[] sample = new Integer[10];\n\t\tRandom random = new Random(1000);\n\t\tfor (int i = 0; i < sample.length; i++) {\n\t\t\tsample[i] = random.nextInt();\n\t\t}\n\t\t// 记录程序开始时间\n\t\tlong t = System.currentTimeMillis();\n\t\t// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数\n\t\tfor (int i = 0; i < MAX; i++) {\n\t\t\tarr[i] = new String(String.valueOf(sample[i % sample.length]));\n\t\t\t// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();\n\t\t}\n\t\tSystem.out.println((System.currentTimeMillis() - t) + \"ms\");\n\t\tSystem.gc();\n\t}\n}\n```\n\n这个主要是为了证明`使用intern()比不使用intern()消耗的内存更少`。\n\n先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window ---> Preferences --> Java --> Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过[MAT](http://download.eclipse.org/mat/)插件查看该hprof文件。\n\n不使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"/>\n\n</div>\n\n使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"/>\n\n</div>\n\n从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。\n\n但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 \n\n# 深入理解intern()方法\n\n**JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。**\n\n看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false true  \n```\n\n再分别调整上面代码2、3行，7、8行的顺序：\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false false  \n```\n\n## **JDK1.6**\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"/>\n\n</div>\n\n在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。\n\n使用**引号声明的字符串都是会直接在字符串常量池中生成**的，而**new 出来的String对象是放在堆空间中**的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。\n\nintern()方法在JDK1.6中的作用是：比如String s = new String(\"rainbowhorse\")，再调用s.intern()，此时返回值还是字符串\"rainbowhorse\"，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在\"rainbowhorse\"这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把\"rainbowhorse\"添加到字符串池中，然后再返回它的引用。\n\n## JDK1.7\n\n### 例一分析\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，**生成了常量池中的“1” 和堆空间中的字符串对象**。\n\ns.intern()，这一行的作用是s对象去常量池中寻找后发现\"1\"**已经存在于常量池中了**。\n\nString s2 = \"1\"，这行代码是生成一个s2的引用**指向常量池中的“1”对象**。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意**此时常量池中是没有 “11”对象**的。\n\ns3.intern()，这一行代码，是将 s3中的**“11”字符串放入 String 常量池中**，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 \"11\" 的对象。\n\n**但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用**。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。\n\nString s4 = \"11\"， 这一行代码会**直接去常量池中创建**，但是发现已经有这个对象了，此时也就是**指向 s3 引用对象的一个引用**。因此s3 == s4返回了true。\n\n### 例二分析\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，生成了**常量池中的“1” 和堆空间中的字符串对象**。\n\nString s2 = \"1\"，这行代码是生成一个s2的**引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它**。\n\ns.intern()，这一行在这里就没什么实际作用了。因为\"1\"已经存在了。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意此时常量池中是没有 “11”对象的。\n\nString s4 = \"11\"， 这一行代码会**直接去生成常量池中的\"11\"**。\n\ns3.intern()，这一行在这里就没什么实际作用了。因为\"11\"已经存在了。\n\n结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。\n\n# 总结\n\n从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，**如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用**。","slug":"Java-String-intern方法","published":1,"updated":"2018-03-13T05:48:34.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u01000g3gfkise33y0y","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>String类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。</p>\n<p>intern()方法设计的初衷，就是重用String对象，以节省内存消耗。<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>在<strong>JDK1.7</strong>下输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再将上面的例子加上一行代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str2 = <span class=\"string\">\"rainbowhorse\"</span>;\t<span class=\"comment\">//新加的一行代码，其余不变  </span></div><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>再运行，结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<p>在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。</p>\n<h1 id=\"为什么使用intern-方法\"><a href=\"#为什么使用intern-方法\" class=\"headerlink\" title=\"为什么使用intern()方法\"></a>为什么使用intern()方法</h1><p>就如引言所说的，<strong>intern()方法设计的初衷，就是重用String对象，以节省内存消耗</strong>。下面通过例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">100000</span>;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] arr = <span class=\"keyword\">new</span> String[MAX];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 为长度为10的Integer数组随机赋值</span></div><div class=\"line\">\t\tInteger[] sample = <span class=\"keyword\">new</span> Integer[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sample.length; i++) &#123;</div><div class=\"line\">\t\t\tsample[i] = random.nextInt();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 记录程序开始时间</span></div><div class=\"line\">\t\t<span class=\"keyword\">long</span> t = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"comment\">// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) &#123;</div><div class=\"line\">\t\t\tarr[i] = <span class=\"keyword\">new</span> String(String.valueOf(sample[i % sample.length]));</div><div class=\"line\">\t\t\t<span class=\"comment\">// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println((System.currentTimeMillis() - t) + <span class=\"string\">\"ms\"</span>);</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个主要是为了证明<code>使用intern()比不使用intern()消耗的内存更少</code>。</p>\n<p>先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window —&gt; Preferences –&gt; Java –&gt; Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过<a href=\"http://download.eclipse.org/mat/\" target=\"_blank\" rel=\"external\">MAT</a>插件查看该hprof文件。</p>\n<p>不使用intern()方法</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"><br><br></div>\n\n<p>使用intern()方法</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"><br><br></div>\n\n<p>从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。</p>\n<p>但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 </p>\n<h1 id=\"深入理解intern-方法\"><a href=\"#深入理解intern-方法\" class=\"headerlink\" title=\"深入理解intern()方法\"></a>深入理解intern()方法</h1><p><strong>JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。</strong></p>\n<p>看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再分别调整上面代码2、3行，7、8行的顺序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"JDK1-6\"><a href=\"#JDK1-6\" class=\"headerlink\" title=\"JDK1.6\"></a><strong>JDK1.6</strong></h2><div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"><br><br></div>\n\n<p>在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。</p>\n<p>使用<strong>引号声明的字符串都是会直接在字符串常量池中生成</strong>的，而<strong>new 出来的String对象是放在堆空间中</strong>的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。</p>\n<p>intern()方法在JDK1.6中的作用是：比如String s = new String(“rainbowhorse”)，再调用s.intern()，此时返回值还是字符串”rainbowhorse”，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在”rainbowhorse”这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把”rainbowhorse”添加到字符串池中，然后再返回它的引用。</p>\n<h2 id=\"JDK1-7\"><a href=\"#JDK1-7\" class=\"headerlink\" title=\"JDK1.7\"></a>JDK1.7</h2><h3 id=\"例一分析\"><a href=\"#例一分析\" class=\"headerlink\" title=\"例一分析\"></a>例一分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"><br><br></div>\n\n<p>String s = newString(“1”)，<strong>生成了常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>s.intern()，这一行的作用是s对象去常量池中寻找后发现”1”<strong>已经存在于常量池中了</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的引用<strong>指向常量池中的“1”对象</strong>。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意<strong>此时常量池中是没有 “11”对象</strong>的。</p>\n<p>s3.intern()，这一行代码，是将 s3中的<strong>“11”字符串放入 String 常量池中</strong>，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 “11” 的对象。</p>\n<p><strong>但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用</strong>。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去常量池中创建</strong>，但是发现已经有这个对象了，此时也就是<strong>指向 s3 引用对象的一个引用</strong>。因此s3 == s4返回了true。</p>\n<h3 id=\"例二分析\"><a href=\"#例二分析\" class=\"headerlink\" title=\"例二分析\"></a>例二分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"><br><br></div>\n\n<p>String s = newString(“1”)，生成了<strong>常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的<strong>引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它</strong>。</p>\n<p>s.intern()，这一行在这里就没什么实际作用了。因为”1”已经存在了。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意此时常量池中是没有 “11”对象的。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去生成常量池中的”11”</strong>。</p>\n<p>s3.intern()，这一行在这里就没什么实际作用了。因为”11”已经存在了。</p>\n<p>结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，<strong>如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用</strong>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>String类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。</p>\n<p>intern()方法设计的初衷，就是重用String对象，以节省内存消耗。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>在<strong>JDK1.7</strong>下输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再将上面的例子加上一行代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str2 = <span class=\"string\">\"rainbowhorse\"</span>;\t<span class=\"comment\">//新加的一行代码，其余不变  </span></div><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>再运行，结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<p>在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。</p>\n<h1 id=\"为什么使用intern-方法\"><a href=\"#为什么使用intern-方法\" class=\"headerlink\" title=\"为什么使用intern()方法\"></a>为什么使用intern()方法</h1><p>就如引言所说的，<strong>intern()方法设计的初衷，就是重用String对象，以节省内存消耗</strong>。下面通过例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">100000</span>;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] arr = <span class=\"keyword\">new</span> String[MAX];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 为长度为10的Integer数组随机赋值</span></div><div class=\"line\">\t\tInteger[] sample = <span class=\"keyword\">new</span> Integer[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sample.length; i++) &#123;</div><div class=\"line\">\t\t\tsample[i] = random.nextInt();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 记录程序开始时间</span></div><div class=\"line\">\t\t<span class=\"keyword\">long</span> t = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"comment\">// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) &#123;</div><div class=\"line\">\t\t\tarr[i] = <span class=\"keyword\">new</span> String(String.valueOf(sample[i % sample.length]));</div><div class=\"line\">\t\t\t<span class=\"comment\">// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println((System.currentTimeMillis() - t) + <span class=\"string\">\"ms\"</span>);</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个主要是为了证明<code>使用intern()比不使用intern()消耗的内存更少</code>。</p>\n<p>先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window —&gt; Preferences –&gt; Java –&gt; Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过<a href=\"http://download.eclipse.org/mat/\">MAT</a>插件查看该hprof文件。</p>\n<p>不使用intern()方法</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"/><br><br></div>\n\n<p>使用intern()方法</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"/><br><br></div>\n\n<p>从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。</p>\n<p>但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 </p>\n<h1 id=\"深入理解intern-方法\"><a href=\"#深入理解intern-方法\" class=\"headerlink\" title=\"深入理解intern()方法\"></a>深入理解intern()方法</h1><p><strong>JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。</strong></p>\n<p>看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再分别调整上面代码2、3行，7、8行的顺序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"JDK1-6\"><a href=\"#JDK1-6\" class=\"headerlink\" title=\"JDK1.6\"></a><strong>JDK1.6</strong></h2><div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"/><br><br></div>\n\n<p>在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。</p>\n<p>使用<strong>引号声明的字符串都是会直接在字符串常量池中生成</strong>的，而<strong>new 出来的String对象是放在堆空间中</strong>的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。</p>\n<p>intern()方法在JDK1.6中的作用是：比如String s = new String(“rainbowhorse”)，再调用s.intern()，此时返回值还是字符串”rainbowhorse”，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在”rainbowhorse”这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把”rainbowhorse”添加到字符串池中，然后再返回它的引用。</p>\n<h2 id=\"JDK1-7\"><a href=\"#JDK1-7\" class=\"headerlink\" title=\"JDK1.7\"></a>JDK1.7</h2><h3 id=\"例一分析\"><a href=\"#例一分析\" class=\"headerlink\" title=\"例一分析\"></a>例一分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"/><br><br></div>\n\n<p>String s = newString(“1”)，<strong>生成了常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>s.intern()，这一行的作用是s对象去常量池中寻找后发现”1”<strong>已经存在于常量池中了</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的引用<strong>指向常量池中的“1”对象</strong>。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意<strong>此时常量池中是没有 “11”对象</strong>的。</p>\n<p>s3.intern()，这一行代码，是将 s3中的<strong>“11”字符串放入 String 常量池中</strong>，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 “11” 的对象。</p>\n<p><strong>但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用</strong>。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去常量池中创建</strong>，但是发现已经有这个对象了，此时也就是<strong>指向 s3 引用对象的一个引用</strong>。因此s3 == s4返回了true。</p>\n<h3 id=\"例二分析\"><a href=\"#例二分析\" class=\"headerlink\" title=\"例二分析\"></a>例二分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"/><br><br></div>\n\n<p>String s = newString(“1”)，生成了<strong>常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的<strong>引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它</strong>。</p>\n<p>s.intern()，这一行在这里就没什么实际作用了。因为”1”已经存在了。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意此时常量池中是没有 “11”对象的。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去生成常量池中的”11”</strong>。</p>\n<p>s3.intern()，这一行在这里就没什么实际作用了。因为”11”已经存在了。</p>\n<p>结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，<strong>如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用</strong>。</p>"},{"title":"Java备份和还原MySQL数据库","date":"2017-09-24T09:43:10.000Z","_content":"\n# 引言\n\n​\t在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 使用MySQL自带工具\n\n## 备份\n\n备份使用MySQL的`mysqldump`命令来实现，示例代码\n\n```java\n\t  final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);\n\n    /**\n     * Java代码实现MySQL数据库导出\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param savePath     数据库导出文件保存路径\n     * @param fileName     数据库导出文件文件名\n     * @param databaseName 要导出的数据库名\n     * @return 返回true表示导出成功，否则返回false。\n     * @author maxu\n     */\n    public static boolean backUpDatabase(String hostIP, String userName, String password, String databaseName, String savePath, String fileName) throws InterruptedException {\n        File saveFile = new File(savePath);\n        if (!saveFile.exists()) {// 如果目录不存在\n            saveFile.mkdirs();// 创建文件夹\n        }\n        if (!savePath.endsWith(File.separator)) {\n            savePath = savePath + File.separator;\n        }\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n            printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(savePath + fileName), \"utf8\"));\n            Process process = Runtime.getRuntime().exec(\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --set-charset=UTF8 \" + databaseName);\n            InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream(), \"utf8\");\n            bufferedReader = new BufferedReader(inputStreamReader);\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                printWriter.println(line);\n            }\n            printWriter.flush();\n            if (process.waitFor() == 0) {//0 表示线程正常终止。\n                logger.info(\"数据库已备份到——>>\" + savePath);\n                return true;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (printWriter != null) {\n                    printWriter.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return false;\n    }\n```\n\n## 还原\n\n```java\n  \n   final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  \n\t\n   /**\n     * Java代码实现MySQL数据库还原\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param path         需要还原数据库文件的路径\n     * @param fileName     需要还原数据库文件的名称\n     * @param databaseName 需要还原的数据库名称\n     * @return 返回true表示还原成功，否则返回false。\n     */\n    public static boolean restoreDatabase(String hostIP, String userName, String password, String databaseName, String path, String fileName) throws InterruptedException {\n\n        OutputStream out = null;\n        BufferedReader br = null;\n        PrintStream ps = null;\n        try {\n            // 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况\n            Process process = Runtime.getRuntime().exec(\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --default-character-set=utf8 \" + databaseName);\n            out = process.getOutputStream();//控制台的输入信息作为输出流\n            StringBuffer sb = new StringBuffer(\"\");\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(path + fileName), \"utf8\"));\n            String outStr;\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line + \"\\r\\n\");\n            }\n            outStr = sb.toString();\n\n            ps = new PrintStream(out, true, \"utf8\");\n            ps.write(outStr.getBytes());\n//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");\n//            writer.write(outStr);\n            // 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免\n//            writer.flush();\n//            writer.close();\n            if (process.waitFor() == 0) {   //0 表示线程正常终止。\n               return true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            try {\n                if (ps != null) {\n                    ps.close();\n                }\n                if (br != null) {\n                    br.close();\n                }\n                if (out != null){\n                    out.close();\n                }\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n        return false;\n}\n```\n\n测试\n\n```java\npublic static void main(String[] args){\n\n        //数据库备份\n        /*try {\n            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库成功备份！！\");\n            } else {\n                logger.info(\"数据库备份失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }*/\n        //数据库恢复\n        try {\n            if (restoreDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库恢复成功！！\");\n            } else {\n                logger.info(\"数据库恢复失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n代码下载点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java)\n\n# Windows下bat命令\n\n工作环境 Windows Server 2003 ，`MySQL`安装目录 D:\\DevTools\\MySQL ,\n\n`WinRAR` 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe \n\n备份数据存储的路径为 D:\\\\数据备份，好了下面开始写`DOS批处理命令`了。代码如下:\n\n```python\ncolor 9\nrem ---------------------数据库备份开始-----------------------\n@echo off\n\nset \"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\" \nREM 日期格式：20170924200727 \nmd \"D:\\%ymd%\" \n\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\" --opt -Q taotao -uroot -proot > D:\\%Ymd%\\taotao.sql\nREM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码\nREM echo Winrar loading... \nREM  \"C:\\Program Files\\WinRAR\\WinRAR.exe\" a -ep1 -r -o+ -m5 -df \"D:\\数据备份\\%Ymd%.rar\" \"D:\\数据备份\\%Ymd%\" \n@echo on\nrem ---------------------数据库备份完成-----------------------\n\npause\n```\n\n把上面的命令保存为 *backup.bat* ，双击运行，就开始备份数据了。 \n\n第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 \n\n第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 \n\n第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 \n\n最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 \n\n如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。\n\n但是用windows下bat命令备份有一个致命缺点：**备份时数据库会暂时断开。(30M断开5s左右)**\n\n# 总结\n\n第二种方式的缺点太致命：**备份时数据库会暂时断开**。\n\n所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。","source":"_posts/Java备份和还原MySQL数据库.md","raw":"---\ntitle: Java备份和还原MySQL数据库\ndate: 2017-09-24 17:43:10\ntags: [java,mysql]\ncategories: technology\n---\n\n# 引言\n\n​\t在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 使用MySQL自带工具\n\n## 备份\n\n备份使用MySQL的`mysqldump`命令来实现，示例代码\n\n```java\n\t  final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);\n\n    /**\n     * Java代码实现MySQL数据库导出\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param savePath     数据库导出文件保存路径\n     * @param fileName     数据库导出文件文件名\n     * @param databaseName 要导出的数据库名\n     * @return 返回true表示导出成功，否则返回false。\n     * @author maxu\n     */\n    public static boolean backUpDatabase(String hostIP, String userName, String password, String databaseName, String savePath, String fileName) throws InterruptedException {\n        File saveFile = new File(savePath);\n        if (!saveFile.exists()) {// 如果目录不存在\n            saveFile.mkdirs();// 创建文件夹\n        }\n        if (!savePath.endsWith(File.separator)) {\n            savePath = savePath + File.separator;\n        }\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n            printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(savePath + fileName), \"utf8\"));\n            Process process = Runtime.getRuntime().exec(\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --set-charset=UTF8 \" + databaseName);\n            InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream(), \"utf8\");\n            bufferedReader = new BufferedReader(inputStreamReader);\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                printWriter.println(line);\n            }\n            printWriter.flush();\n            if (process.waitFor() == 0) {//0 表示线程正常终止。\n                logger.info(\"数据库已备份到——>>\" + savePath);\n                return true;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (printWriter != null) {\n                    printWriter.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return false;\n    }\n```\n\n## 还原\n\n```java\n  \n   final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  \n\t\n   /**\n     * Java代码实现MySQL数据库还原\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param path         需要还原数据库文件的路径\n     * @param fileName     需要还原数据库文件的名称\n     * @param databaseName 需要还原的数据库名称\n     * @return 返回true表示还原成功，否则返回false。\n     */\n    public static boolean restoreDatabase(String hostIP, String userName, String password, String databaseName, String path, String fileName) throws InterruptedException {\n\n        OutputStream out = null;\n        BufferedReader br = null;\n        PrintStream ps = null;\n        try {\n            // 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况\n            Process process = Runtime.getRuntime().exec(\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --default-character-set=utf8 \" + databaseName);\n            out = process.getOutputStream();//控制台的输入信息作为输出流\n            StringBuffer sb = new StringBuffer(\"\");\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(path + fileName), \"utf8\"));\n            String outStr;\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line + \"\\r\\n\");\n            }\n            outStr = sb.toString();\n\n            ps = new PrintStream(out, true, \"utf8\");\n            ps.write(outStr.getBytes());\n//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");\n//            writer.write(outStr);\n            // 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免\n//            writer.flush();\n//            writer.close();\n            if (process.waitFor() == 0) {   //0 表示线程正常终止。\n               return true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            try {\n                if (ps != null) {\n                    ps.close();\n                }\n                if (br != null) {\n                    br.close();\n                }\n                if (out != null){\n                    out.close();\n                }\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n        return false;\n}\n```\n\n测试\n\n```java\npublic static void main(String[] args){\n\n        //数据库备份\n        /*try {\n            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库成功备份！！\");\n            } else {\n                logger.info(\"数据库备份失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }*/\n        //数据库恢复\n        try {\n            if (restoreDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库恢复成功！！\");\n            } else {\n                logger.info(\"数据库恢复失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n代码下载点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java)\n\n# Windows下bat命令\n\n工作环境 Windows Server 2003 ，`MySQL`安装目录 D:\\DevTools\\MySQL ,\n\n`WinRAR` 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe \n\n备份数据存储的路径为 D:\\\\数据备份，好了下面开始写`DOS批处理命令`了。代码如下:\n\n```python\ncolor 9\nrem ---------------------数据库备份开始-----------------------\n@echo off\n\nset \"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\" \nREM 日期格式：20170924200727 \nmd \"D:\\%ymd%\" \n\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\" --opt -Q taotao -uroot -proot > D:\\%Ymd%\\taotao.sql\nREM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码\nREM echo Winrar loading... \nREM  \"C:\\Program Files\\WinRAR\\WinRAR.exe\" a -ep1 -r -o+ -m5 -df \"D:\\数据备份\\%Ymd%.rar\" \"D:\\数据备份\\%Ymd%\" \n@echo on\nrem ---------------------数据库备份完成-----------------------\n\npause\n```\n\n把上面的命令保存为 *backup.bat* ，双击运行，就开始备份数据了。 \n\n第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 \n\n第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 \n\n第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 \n\n最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 \n\n如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。\n\n但是用windows下bat命令备份有一个致命缺点：**备份时数据库会暂时断开。(30M断开5s左右)**\n\n# 总结\n\n第二种方式的缺点太致命：**备份时数据库会暂时断开**。\n\n所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。","slug":"Java备份和还原MySQL数据库","published":1,"updated":"2018-03-13T05:48:49.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u06000j3gfkpjzrjr6e","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"使用MySQL自带工具\"><a href=\"#使用MySQL自带工具\" class=\"headerlink\" title=\"使用MySQL自带工具\"></a>使用MySQL自带工具</h1><h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>备份使用MySQL的<code>mysqldump</code>命令来实现，示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * Java代码实现MySQL数据库导出</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">  * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">  * <span class=\"doctag\">@param</span> savePath     数据库导出文件保存路径</div><div class=\"line\">  * <span class=\"doctag\">@param</span> fileName     数据库导出文件文件名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> databaseName 要导出的数据库名</div><div class=\"line\">  * <span class=\"doctag\">@return</span> 返回true表示导出成功，否则返回false。</div><div class=\"line\">  * <span class=\"doctag\">@author</span> maxu</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backUpDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String savePath, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">     File saveFile = <span class=\"keyword\">new</span> File(savePath);</div><div class=\"line\">     <span class=\"keyword\">if</span> (!saveFile.exists()) &#123;<span class=\"comment\">// 如果目录不存在</span></div><div class=\"line\">         saveFile.mkdirs();<span class=\"comment\">// 创建文件夹</span></div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!savePath.endsWith(File.separator)) &#123;</div><div class=\"line\">         savePath = savePath + File.separator;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     PrintWriter printWriter = <span class=\"keyword\">null</span>;</div><div class=\"line\">     BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(savePath + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">         Process process = Runtime.getRuntime().exec(<span class=\"string\">\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --set-charset=UTF8 \"</span> + databaseName);</div><div class=\"line\">         InputStreamReader inputStreamReader = <span class=\"keyword\">new</span> InputStreamReader(process.getInputStream(), <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">         bufferedReader = <span class=\"keyword\">new</span> BufferedReader(inputStreamReader);</div><div class=\"line\">         String line;</div><div class=\"line\">         <span class=\"keyword\">while</span> ((line = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             printWriter.println(line);</div><div class=\"line\">         &#125;</div><div class=\"line\">         printWriter.flush();</div><div class=\"line\">         <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">             logger.info(<span class=\"string\">\"数据库已备份到——&gt;&gt;\"</span> + savePath);</div><div class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (bufferedReader != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 bufferedReader.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">if</span> (printWriter != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 printWriter.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">             e.printStackTrace();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  </div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">     * Java代码实现MySQL数据库还原</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">     * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">     * <span class=\"doctag\">@param</span> path         需要还原数据库文件的路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> fileName     需要还原数据库文件的名称</div><div class=\"line\">     * <span class=\"doctag\">@param</span> databaseName 需要还原的数据库名称</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回true表示还原成功，否则返回false。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">restoreDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String path, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        OutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</div><div class=\"line\">        PrintStream ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况</span></div><div class=\"line\">            Process process = Runtime.getRuntime().exec(<span class=\"string\">\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --default-character-set=utf8 \"</span> + databaseName);</div><div class=\"line\">            out = process.getOutputStream();<span class=\"comment\">//控制台的输入信息作为输出流</span></div><div class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(path + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">            String outStr;</div><div class=\"line\">            String line;</div><div class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                sb.append(line + <span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            outStr = sb.toString();</div><div class=\"line\"></div><div class=\"line\">            ps = <span class=\"keyword\">new</span> PrintStream(out, <span class=\"keyword\">true</span>, <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">            ps.write(outStr.getBytes());</div><div class=\"line\"><span class=\"comment\">//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");</span></div><div class=\"line\"><span class=\"comment\">//            writer.write(outStr);</span></div><div class=\"line\">            <span class=\"comment\">// 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免</span></div><div class=\"line\"><span class=\"comment\">//            writer.flush();</span></div><div class=\"line\"><span class=\"comment\">//            writer.close();</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;   <span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    ps.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (br != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    br.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</div><div class=\"line\">                e1.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//数据库备份</span></div><div class=\"line\">        <span class=\"comment\">/*try &#123;</span></div><div class=\"line\">            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) &#123;</div><div class=\"line\">                logger.info(\"数据库成功备份！！\");</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                logger.info(\"数据库备份失败！！\");</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;*/</div><div class=\"line\">        <span class=\"comment\">//数据库恢复</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (restoreDatabase(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"taotao\"</span>, <span class=\"string\">\"D:/\"</span>, <span class=\"string\">\"taotao.sql\"</span>)) &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复成功！！\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复失败！！\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>代码下载点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java\" target=\"_blank\" rel=\"external\"><em>下载</em></a></p>\n<h1 id=\"Windows下bat命令\"><a href=\"#Windows下bat命令\" class=\"headerlink\" title=\"Windows下bat命令\"></a>Windows下bat命令</h1><p>工作环境 Windows Server 2003 ，<code>MySQL</code>安装目录 D:\\DevTools\\MySQL ,</p>\n<p><code>WinRAR</code> 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe </p>\n<p>备份数据存储的路径为 D:\\数据备份，好了下面开始写<code>DOS批处理命令</code>了。代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">color <span class=\"number\">9</span></div><div class=\"line\">rem ---------------------数据库备份开始-----------------------</div><div class=\"line\"><span class=\"meta\">@echo off</span></div><div class=\"line\"></div><div class=\"line\">set <span class=\"string\">\"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\"</span> </div><div class=\"line\">REM 日期格式：<span class=\"number\">20170924200727</span> </div><div class=\"line\">md <span class=\"string\">\"D:\\%ymd%\"</span> </div><div class=\"line\"><span class=\"string\">\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\"</span> --opt -Q taotao -uroot -proot &gt; D:\\%Ymd%\\taotao.sql</div><div class=\"line\">REM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码</div><div class=\"line\">REM echo Winrar loading... </div><div class=\"line\">REM  <span class=\"string\">\"C:\\Program Files\\WinRAR\\WinRAR.exe\"</span> a -ep1 -r -o+ -m5 -df <span class=\"string\">\"D:\\数据备份\\%Ymd%.rar\"</span> <span class=\"string\">\"D:\\数据备份\\%Ymd%\"</span> </div><div class=\"line\"><span class=\"meta\">@echo on</span></div><div class=\"line\">rem ---------------------数据库备份完成-----------------------</div><div class=\"line\"></div><div class=\"line\">pause</div></pre></td></tr></table></figure>\n<p>把上面的命令保存为 <em>backup.bat</em> ，双击运行，就开始备份数据了。 </p>\n<p>第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 </p>\n<p>第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 </p>\n<p>第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 </p>\n<p>最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 </p>\n<p>如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。</p>\n<p>但是用windows下bat命令备份有一个致命缺点：<strong>备份时数据库会暂时断开。(30M断开5s左右)</strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>第二种方式的缺点太致命：<strong>备份时数据库会暂时断开</strong>。</p>\n<p>所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"使用MySQL自带工具\"><a href=\"#使用MySQL自带工具\" class=\"headerlink\" title=\"使用MySQL自带工具\"></a>使用MySQL自带工具</h1><h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>备份使用MySQL的<code>mysqldump</code>命令来实现，示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * Java代码实现MySQL数据库导出</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">  * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">  * <span class=\"doctag\">@param</span> savePath     数据库导出文件保存路径</div><div class=\"line\">  * <span class=\"doctag\">@param</span> fileName     数据库导出文件文件名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> databaseName 要导出的数据库名</div><div class=\"line\">  * <span class=\"doctag\">@return</span> 返回true表示导出成功，否则返回false。</div><div class=\"line\">  * <span class=\"doctag\">@author</span> maxu</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backUpDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String savePath, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">     File saveFile = <span class=\"keyword\">new</span> File(savePath);</div><div class=\"line\">     <span class=\"keyword\">if</span> (!saveFile.exists()) &#123;<span class=\"comment\">// 如果目录不存在</span></div><div class=\"line\">         saveFile.mkdirs();<span class=\"comment\">// 创建文件夹</span></div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!savePath.endsWith(File.separator)) &#123;</div><div class=\"line\">         savePath = savePath + File.separator;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     PrintWriter printWriter = <span class=\"keyword\">null</span>;</div><div class=\"line\">     BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(savePath + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">         Process process = Runtime.getRuntime().exec(<span class=\"string\">\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --set-charset=UTF8 \"</span> + databaseName);</div><div class=\"line\">         InputStreamReader inputStreamReader = <span class=\"keyword\">new</span> InputStreamReader(process.getInputStream(), <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">         bufferedReader = <span class=\"keyword\">new</span> BufferedReader(inputStreamReader);</div><div class=\"line\">         String line;</div><div class=\"line\">         <span class=\"keyword\">while</span> ((line = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             printWriter.println(line);</div><div class=\"line\">         &#125;</div><div class=\"line\">         printWriter.flush();</div><div class=\"line\">         <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">             logger.info(<span class=\"string\">\"数据库已备份到——&gt;&gt;\"</span> + savePath);</div><div class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (bufferedReader != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 bufferedReader.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">if</span> (printWriter != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 printWriter.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">             e.printStackTrace();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  </div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"comment\">/**</div><div class=\"line\">     * Java代码实现MySQL数据库还原</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">     * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">     * <span class=\"doctag\">@param</span> path         需要还原数据库文件的路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> fileName     需要还原数据库文件的名称</div><div class=\"line\">     * <span class=\"doctag\">@param</span> databaseName 需要还原的数据库名称</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回true表示还原成功，否则返回false。</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">restoreDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String path, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        OutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</div><div class=\"line\">        PrintStream ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况</span></div><div class=\"line\">            Process process = Runtime.getRuntime().exec(<span class=\"string\">\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --default-character-set=utf8 \"</span> + databaseName);</div><div class=\"line\">            out = process.getOutputStream();<span class=\"comment\">//控制台的输入信息作为输出流</span></div><div class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(path + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">            String outStr;</div><div class=\"line\">            String line;</div><div class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                sb.append(line + <span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            outStr = sb.toString();</div><div class=\"line\"></div><div class=\"line\">            ps = <span class=\"keyword\">new</span> PrintStream(out, <span class=\"keyword\">true</span>, <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">            ps.write(outStr.getBytes());</div><div class=\"line\"><span class=\"comment\">//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");</span></div><div class=\"line\"><span class=\"comment\">//            writer.write(outStr);</span></div><div class=\"line\">            <span class=\"comment\">// 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免</span></div><div class=\"line\"><span class=\"comment\">//            writer.flush();</span></div><div class=\"line\"><span class=\"comment\">//            writer.close();</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;   <span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    ps.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (br != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    br.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</div><div class=\"line\">                e1.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//数据库备份</span></div><div class=\"line\">        <span class=\"comment\">/*try &#123;</div><div class=\"line\">            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) &#123;</div><div class=\"line\">                logger.info(\"数据库成功备份！！\");</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                logger.info(\"数据库备份失败！！\");</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;*/</span></div><div class=\"line\">        <span class=\"comment\">//数据库恢复</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (restoreDatabase(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"taotao\"</span>, <span class=\"string\">\"D:/\"</span>, <span class=\"string\">\"taotao.sql\"</span>)) &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复成功！！\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复失败！！\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>代码下载点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java\"><em>下载</em></a></p>\n<h1 id=\"Windows下bat命令\"><a href=\"#Windows下bat命令\" class=\"headerlink\" title=\"Windows下bat命令\"></a>Windows下bat命令</h1><p>工作环境 Windows Server 2003 ，<code>MySQL</code>安装目录 D:\\DevTools\\MySQL ,</p>\n<p><code>WinRAR</code> 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe </p>\n<p>备份数据存储的路径为 D:\\数据备份，好了下面开始写<code>DOS批处理命令</code>了。代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">color <span class=\"number\">9</span></div><div class=\"line\">rem ---------------------数据库备份开始-----------------------</div><div class=\"line\"><span class=\"meta\">@echo off</span></div><div class=\"line\"></div><div class=\"line\">set <span class=\"string\">\"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\"</span> </div><div class=\"line\">REM 日期格式：<span class=\"number\">20170924200727</span> </div><div class=\"line\">md <span class=\"string\">\"D:\\%ymd%\"</span> </div><div class=\"line\"><span class=\"string\">\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\"</span> --opt -Q taotao -uroot -proot &gt; D:\\%Ymd%\\taotao.sql</div><div class=\"line\">REM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码</div><div class=\"line\">REM echo Winrar loading... </div><div class=\"line\">REM  <span class=\"string\">\"C:\\Program Files\\WinRAR\\WinRAR.exe\"</span> a -ep1 -r -o+ -m5 -df <span class=\"string\">\"D:\\数据备份\\%Ymd%.rar\"</span> <span class=\"string\">\"D:\\数据备份\\%Ymd%\"</span> </div><div class=\"line\"><span class=\"meta\">@echo on</span></div><div class=\"line\">rem ---------------------数据库备份完成-----------------------</div><div class=\"line\"></div><div class=\"line\">pause</div></pre></td></tr></table></figure>\n<p>把上面的命令保存为 <em>backup.bat</em> ，双击运行，就开始备份数据了。 </p>\n<p>第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 </p>\n<p>第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 </p>\n<p>第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 </p>\n<p>最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 </p>\n<p>如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。</p>\n<p>但是用windows下bat命令备份有一个致命缺点：<strong>备份时数据库会暂时断开。(30M断开5s左右)</strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>第二种方式的缺点太致命：<strong>备份时数据库会暂时断开</strong>。</p>\n<p>所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。</p>"},{"title":"Java生成PDF","date":"2017-11-13T07:51:53.000Z","_content":"\n# 引言\n\n在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于**JAVA实现HTML转PDF**，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。\n\n本博客项目地址：https://github.com/Sunny0715/java_pdf_demo<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"/>\n\n</div><!-- more -->\n\n# iText介绍\n\niText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。\n\niText 官网：http://itextpdf.com/\n\niText 开发文档： http://developers.itextpdf.com/developers-home\n\niText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\n\n# iText简单使用\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf -->\n<dependency>\n    <groupId>com.itextpdf</groupId>\n    <artifactId>itextpdf</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n测试代码：JavaToPdf\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 不支持中文\n * ClassName: JavaToPdf \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdf {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld.pdf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tdocument.add(new Paragraph(\"hello world\"));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"/>\n\n</div>\n\n# iText中文支持\n\niText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf\n\n可参考文档：http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\n\n测试代码：JavaToPdfCN\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Font;\nimport com.itextpdf.text.FontFactory;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 支持中文\n * ClassName: JavaToPdfCN \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfCN {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN.pdf\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\tdocument.add(new Paragraph(\"hello world，我是rainbowhorse。\", font));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"/>\n\n</div>\n\n# iText-HTML渲染\n\n在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF\n\n可参考文档：http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker -->\n<dependency>\n    <groupId>com.itextpdf.tool</groupId>\n    <artifactId>xmlworker</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n添加模板：template.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.red {\n\tcolor: red;\n}\n</style>\n</head>\n<body>\n\t<div class=\"red\">你好，rainbowhorse</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtml\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\n/**\n * HTML转PDF\n * ClassName: JavaToPdfHtml \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtml {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = PathUtil.getCurrentPath() + \"/template.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new FileInputStream(HTML), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"/>\n\n</div>\n\n**注意：**\n\n1. HTML中必须使用标准的语法，标签一定需要闭合。\n2. HTML中如果有中文，需要在样式中添加对应字体的样式。\n\n# iText-HTML-Freemarker渲染\n\n在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。\n\n添加FreeMarke依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.freemarker/freemarker -->\n<dependency>\n    <groupId>org.freemarker</groupId>\n    <artifactId>freemarker</artifactId>\n    <version>2.3.19</version>\n</dependency>\n```\n\n添加模板：template_freemarker.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.blue {\n\tcolor: blue;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 100px;\n\ttop: 150px\n}\n</style>\n</head>\n<body>\n\t<div class=\"blue pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\tpublic static void createPdf(String content, String dest) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dest));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new ByteArrayInputStream(content.getBytes()), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out);\n\t\t\t// 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"/>\n\n</div>\n\n目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。\n\n# Flying Saucer-CSS高级特性支持\n\nFlying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.\n\nFlying Saucer是基于iText的，支持对CSS高级特性的解析。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.5</version>\n</dependency>\n  \n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf-itext5</artifactId>\n    <version>9.1.5</version>\n</dependency>\n```\n\n添加模板：template_freemarker_fs.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\n @page {\n \tsize:297mm 230mm;\n        @top-left{\n            content:element(header-left);\n        };\n        @top-right {\n            content: element(header-right)\n        };\n        @bottom-left {\n            content: element(footer-left)\n        };\n        @bottom-right {\n            content: element(footer-right)\n        };\n    }\n\nbody {\n\tfont-family: SimHei;\n}\n\n.color {\n\tcolor: green;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 200px;\n\ttop: 200px;\n\twidth: 200px;\n\tfont-size: 20px;\n}\n</style>\n</head>\n<body>\n\t<img src=\"logo.jpg\" />\n\t<div class=\"color pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker：\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF Flying Saucer\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\t// 图片路径\n\tprivate static final String LOGO_PATH = \"file:/\" + PathUtil.getCurrentPath() + \"/\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static void createPdf(String content, String dest)\n\t\t\tthrows IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\trender.createPDF(new FileOutputStream(dest));\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"/>\n\n</div>\n\n在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。\n\n**对于生成的pdf页面大小，可以用css的@page属性设置。**\n\n# PDF转图片\n\n在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl -->\n<dependency>\n    <groupId>org.jpedal</groupId>\n    <artifactId>jpedal-lgpl</artifactId>\n    <version>4.74b27</version>\n</dependency>\n```\n\n测试代码：JavaToPdfImgHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.imageio.ImageIO;\n\nimport org.jpedal.PdfDecoder;\nimport org.jpedal.exception.PdfException;\nimport org.jpedal.fonts.FontMappings;\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * Jpedal把pdf转成图片 \n * ClassName: JavaToPdfImgHtmlFreeMarker\n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfImgHtmlFreeMarker {\n\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\";\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static final String LOGO_PATH = \"file://\" + PathUtil.getCurrentPath() + \"/logo.png\";\n\tprivate static final String IMG_EXT = \"png\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\n\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);\n\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), 2, 1, IMG_EXT);\n\n\t\tFileOutputStream fileStream = new FileOutputStream(new File(DEST));\n\t\tfileStream.write(imgSteam.toByteArray());\n\t\tfileStream.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据模板生成pdf文件流\n\t */\n\tpublic static ByteArrayOutputStream createPdf(String content) {\n\t\tByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\ttry {\n\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\ttry {\n\t\t\trender.createPDF(outStream);\n\t\t\treturn outStream;\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\toutStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据pdf二进制文件 生成图片文件\n\t *\n\t * @param bytes\n\t *            pdf二进制\n\t * @param scaling\n\t *            清晰度\n\t * @param pageNum\n\t *            页数\n\t */\n\tpublic static ByteArrayOutputStream pdfToImg(byte[] bytes, float scaling, int pageNum, String formatName) {\n\t\t// 推荐的方法打开PdfDecoder\n\t\tPdfDecoder pdfDecoder = new PdfDecoder(true);\n\t\tFontMappings.setFontReplacements();\n\t\t// 修改图片的清晰度\n\t\tpdfDecoder.scaling = scaling;\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\ttry {\n\t\t\t// 打开pdf文件，生成PdfDecoder对象\n\t\t\tpdfDecoder.openPdfArray(bytes); // bytes is byte[] array with PDF\n\t\t\t// 获取第pageNum页的pdf\n\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);\n\n\t\t\tImageIO.write(img, formatName, out);\n\t\t} catch (PdfException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn out;\n\t}\n}\n```\n\n输出结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"/>\n\n</div>\n\nJpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。\n\n# 总结\n\n对于电子凭证的技术方案，总结如下:\n\n1. HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。\n2. 渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。\n3. 在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。","source":"_posts/Java生成PDF.md","raw":"---\ntitle: Java生成PDF\ndate: 2017-11-13 15:51:53\ntags: [java,tips]\ncategories: technology\n---\n\n# 引言\n\n在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于**JAVA实现HTML转PDF**，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。\n\n本博客项目地址：https://github.com/Sunny0715/java_pdf_demo<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"/>\n\n</div><!-- more -->\n\n# iText介绍\n\niText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。\n\niText 官网：http://itextpdf.com/\n\niText 开发文档： http://developers.itextpdf.com/developers-home\n\niText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\n\n# iText简单使用\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf -->\n<dependency>\n    <groupId>com.itextpdf</groupId>\n    <artifactId>itextpdf</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n测试代码：JavaToPdf\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 不支持中文\n * ClassName: JavaToPdf \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdf {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld.pdf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tdocument.add(new Paragraph(\"hello world\"));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"/>\n\n</div>\n\n# iText中文支持\n\niText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf\n\n可参考文档：http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\n\n测试代码：JavaToPdfCN\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Font;\nimport com.itextpdf.text.FontFactory;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 支持中文\n * ClassName: JavaToPdfCN \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfCN {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN.pdf\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\tdocument.add(new Paragraph(\"hello world，我是rainbowhorse。\", font));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"/>\n\n</div>\n\n# iText-HTML渲染\n\n在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF\n\n可参考文档：http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker -->\n<dependency>\n    <groupId>com.itextpdf.tool</groupId>\n    <artifactId>xmlworker</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n添加模板：template.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.red {\n\tcolor: red;\n}\n</style>\n</head>\n<body>\n\t<div class=\"red\">你好，rainbowhorse</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtml\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\n/**\n * HTML转PDF\n * ClassName: JavaToPdfHtml \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtml {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = PathUtil.getCurrentPath() + \"/template.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new FileInputStream(HTML), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"/>\n\n</div>\n\n**注意：**\n\n1. HTML中必须使用标准的语法，标签一定需要闭合。\n2. HTML中如果有中文，需要在样式中添加对应字体的样式。\n\n# iText-HTML-Freemarker渲染\n\n在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。\n\n添加FreeMarke依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.freemarker/freemarker -->\n<dependency>\n    <groupId>org.freemarker</groupId>\n    <artifactId>freemarker</artifactId>\n    <version>2.3.19</version>\n</dependency>\n```\n\n添加模板：template_freemarker.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.blue {\n\tcolor: blue;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 100px;\n\ttop: 150px\n}\n</style>\n</head>\n<body>\n\t<div class=\"blue pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\tpublic static void createPdf(String content, String dest) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dest));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new ByteArrayInputStream(content.getBytes()), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out);\n\t\t\t// 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"/>\n\n</div>\n\n目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。\n\n# Flying Saucer-CSS高级特性支持\n\nFlying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.\n\nFlying Saucer是基于iText的，支持对CSS高级特性的解析。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.5</version>\n</dependency>\n  \n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf-itext5</artifactId>\n    <version>9.1.5</version>\n</dependency>\n```\n\n添加模板：template_freemarker_fs.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\n @page {\n \tsize:297mm 230mm;\n        @top-left{\n            content:element(header-left);\n        };\n        @top-right {\n            content: element(header-right)\n        };\n        @bottom-left {\n            content: element(footer-left)\n        };\n        @bottom-right {\n            content: element(footer-right)\n        };\n    }\n\nbody {\n\tfont-family: SimHei;\n}\n\n.color {\n\tcolor: green;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 200px;\n\ttop: 200px;\n\twidth: 200px;\n\tfont-size: 20px;\n}\n</style>\n</head>\n<body>\n\t<img src=\"logo.jpg\" />\n\t<div class=\"color pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker：\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF Flying Saucer\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\t// 图片路径\n\tprivate static final String LOGO_PATH = \"file:/\" + PathUtil.getCurrentPath() + \"/\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static void createPdf(String content, String dest)\n\t\t\tthrows IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\trender.createPDF(new FileOutputStream(dest));\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"/>\n\n</div>\n\n在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。\n\n**对于生成的pdf页面大小，可以用css的@page属性设置。**\n\n# PDF转图片\n\n在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl -->\n<dependency>\n    <groupId>org.jpedal</groupId>\n    <artifactId>jpedal-lgpl</artifactId>\n    <version>4.74b27</version>\n</dependency>\n```\n\n测试代码：JavaToPdfImgHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.imageio.ImageIO;\n\nimport org.jpedal.PdfDecoder;\nimport org.jpedal.exception.PdfException;\nimport org.jpedal.fonts.FontMappings;\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * Jpedal把pdf转成图片 \n * ClassName: JavaToPdfImgHtmlFreeMarker\n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfImgHtmlFreeMarker {\n\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\";\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static final String LOGO_PATH = \"file://\" + PathUtil.getCurrentPath() + \"/logo.png\";\n\tprivate static final String IMG_EXT = \"png\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\n\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);\n\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), 2, 1, IMG_EXT);\n\n\t\tFileOutputStream fileStream = new FileOutputStream(new File(DEST));\n\t\tfileStream.write(imgSteam.toByteArray());\n\t\tfileStream.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据模板生成pdf文件流\n\t */\n\tpublic static ByteArrayOutputStream createPdf(String content) {\n\t\tByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\ttry {\n\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\ttry {\n\t\t\trender.createPDF(outStream);\n\t\t\treturn outStream;\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\toutStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据pdf二进制文件 生成图片文件\n\t *\n\t * @param bytes\n\t *            pdf二进制\n\t * @param scaling\n\t *            清晰度\n\t * @param pageNum\n\t *            页数\n\t */\n\tpublic static ByteArrayOutputStream pdfToImg(byte[] bytes, float scaling, int pageNum, String formatName) {\n\t\t// 推荐的方法打开PdfDecoder\n\t\tPdfDecoder pdfDecoder = new PdfDecoder(true);\n\t\tFontMappings.setFontReplacements();\n\t\t// 修改图片的清晰度\n\t\tpdfDecoder.scaling = scaling;\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\ttry {\n\t\t\t// 打开pdf文件，生成PdfDecoder对象\n\t\t\tpdfDecoder.openPdfArray(bytes); // bytes is byte[] array with PDF\n\t\t\t// 获取第pageNum页的pdf\n\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);\n\n\t\t\tImageIO.write(img, formatName, out);\n\t\t} catch (PdfException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn out;\n\t}\n}\n```\n\n输出结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"/>\n\n</div>\n\nJpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。\n\n# 总结\n\n对于电子凭证的技术方案，总结如下:\n\n1. HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。\n2. 渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。\n3. 在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。","slug":"Java生成PDF","published":1,"updated":"2018-03-13T05:49:18.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u0b000n3gfkrqww8apy","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于<strong>JAVA实现HTML转PDF</strong>，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。</p>\n<p>本博客项目地址：<a href=\"https://github.com/Sunny0715/java_pdf_demo\" target=\"_blank\" rel=\"external\">https://github.com/Sunny0715/java_pdf_demo</a><div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"iText介绍\"><a href=\"#iText介绍\" class=\"headerlink\" title=\"iText介绍\"></a>iText介绍</h1><p>iText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。</p>\n<p>iText 官网：<a href=\"http://itextpdf.com/\" target=\"_blank\" rel=\"external\">http://itextpdf.com/</a></p>\n<p>iText 开发文档： <a href=\"http://developers.itextpdf.com/developers-home\" target=\"_blank\" rel=\"external\">http://developers.itextpdf.com/developers-home</a></p>\n<p>iText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在<a href=\"http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\" target=\"_blank\" rel=\"external\">http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。</a></p>\n<h1 id=\"iText简单使用\"><a href=\"#iText简单使用\" class=\"headerlink\" title=\"iText简单使用\"></a>iText简单使用</h1><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 不支持中文</div><div class=\"line\"> * ClassName: JavaToPdf </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdf</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld.pdf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world\"</span>));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"iText中文支持\"><a href=\"#iText中文支持\" class=\"headerlink\" title=\"iText中文支持\"></a>iText中文支持</h1><p>iText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\" target=\"_blank\" rel=\"external\">http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java</a></p>\n<p>测试代码：JavaToPdfCN</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.FontFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 支持中文</div><div class=\"line\"> * ClassName: JavaToPdfCN </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfCN</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world，我是rainbowhorse。\"</span>, font));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"iText-HTML渲染\"><a href=\"#iText-HTML渲染\" class=\"headerlink\" title=\"iText-HTML渲染\"></a>iText-HTML渲染</h1><p>在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\" target=\"_blank\" rel=\"external\">http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples</a></p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf.tool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>xmlworker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.red &#123;</div><div class=\"line\">\tcolor: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red\"</span>&gt;</span>你好，rainbowhorse<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtml </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtml</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = PathUtil.getCurrentPath() + <span class=\"string\">\"/template.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> FileInputStream(HTML), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"><br><br></div>\n\n<p><strong>注意：</strong></p>\n<ol>\n<li>HTML中必须使用标准的语法，标签一定需要闭合。</li>\n<li>HTML中如果有中文，需要在样式中添加对应字体的样式。</li>\n</ol>\n<h1 id=\"iText-HTML-Freemarker渲染\"><a href=\"#iText-HTML-Freemarker渲染\" class=\"headerlink\" title=\"iText-HTML-Freemarker渲染\"></a>iText-HTML-Freemarker渲染</h1><p>在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。</p>\n<p>添加FreeMarke依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.freemarker<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>freemarker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blue &#123;</div><div class=\"line\">\tcolor: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 100px;</div><div class=\"line\">\ttop: 150px</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blue pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * FreeMarker模板的HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> ByteArrayInputStream(content.getBytes()), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"><br><br></div>\n\n<p>目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。</p>\n<h1 id=\"Flying-Saucer-CSS高级特性支持\"><a href=\"#Flying-Saucer-CSS高级特性支持\" class=\"headerlink\" title=\"Flying Saucer-CSS高级特性支持\"></a>Flying Saucer-CSS高级特性支持</h1><p>Flying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.</p>\n<p>Flying Saucer是基于iText的，支持对CSS高级特性的解析。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf-itext5<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker_fs.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"> @page &#123;</div><div class=\"line\"> \tsize:297mm 230mm;</div><div class=\"line\">        @top-left&#123;</div><div class=\"line\">            content:element(header-left);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @top-right &#123;</div><div class=\"line\">            content: element(header-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-left &#123;</div><div class=\"line\">            content: element(footer-left)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-right &#123;</div><div class=\"line\">            content: element(footer-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.color &#123;</div><div class=\"line\">\tcolor: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 200px;</div><div class=\"line\">\ttop: 200px;</div><div class=\"line\">\twidth: 200px;</div><div class=\"line\">\tfont-size: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.jpg\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * FreeMarker模板的HTML转PDF Flying Saucer</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 图片路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file:/\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException &#123;</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\trender.createPDF(<span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"><br><br></div>\n\n<p>在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。</p>\n<p><strong>对于生成的pdf页面大小，可以用css的@page属性设置。</strong></p>\n<h1 id=\"PDF转图片\"><a href=\"#PDF转图片\" class=\"headerlink\" title=\"PDF转图片\"></a>PDF转图片</h1><p>在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jpedal<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jpedal-lgpl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.74b27<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfImgHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.PdfDecoder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.exception.PdfException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.fonts.FontMappings;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Jpedal把pdf转成图片 </div><div class=\"line\"> * ClassName: JavaToPdfImgHtmlFreeMarker</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfImgHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file://\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/logo.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMG_EXT = <span class=\"string\">\"png\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);</div><div class=\"line\">\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), <span class=\"number\">2</span>, <span class=\"number\">1</span>, IMG_EXT);</div><div class=\"line\"></div><div class=\"line\">\t\tFileOutputStream fileStream = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(DEST));</div><div class=\"line\">\t\tfileStream.write(imgSteam.toByteArray());</div><div class=\"line\">\t\tfileStream.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 根据模板生成pdf文件流</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">createPdf</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\trender.createPDF(outStream);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> outStream;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\toutStream.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 根据pdf二进制文件 生成图片文件</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bytes</div><div class=\"line\">\t *            pdf二进制</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> scaling</div><div class=\"line\">\t *            清晰度</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> pageNum</div><div class=\"line\">\t *            页数</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">pdfToImg</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes, <span class=\"keyword\">float</span> scaling, <span class=\"keyword\">int</span> pageNum, String formatName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 推荐的方法打开PdfDecoder</span></div><div class=\"line\">\t\tPdfDecoder pdfDecoder = <span class=\"keyword\">new</span> PdfDecoder(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tFontMappings.setFontReplacements();</div><div class=\"line\">\t\t<span class=\"comment\">// 修改图片的清晰度</span></div><div class=\"line\">\t\tpdfDecoder.scaling = scaling;</div><div class=\"line\">\t\tByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 打开pdf文件，生成PdfDecoder对象</span></div><div class=\"line\">\t\t\tpdfDecoder.openPdfArray(bytes); <span class=\"comment\">// bytes is byte[] array with PDF</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取第pageNum页的pdf</span></div><div class=\"line\">\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);</div><div class=\"line\"></div><div class=\"line\">\t\t\tImageIO.write(img, formatName, out);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (PdfException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> out;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"><br><br></div>\n\n<p>Jpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于电子凭证的技术方案，总结如下:</p>\n<ol>\n<li>HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。</li>\n<li>渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。</li>\n<li>在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于<strong>JAVA实现HTML转PDF</strong>，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。</p>\n<p>本博客项目地址：<a href=\"https://github.com/Sunny0715/java_pdf_demo\">https://github.com/Sunny0715/java_pdf_demo</a><div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"iText介绍\"><a href=\"#iText介绍\" class=\"headerlink\" title=\"iText介绍\"></a>iText介绍</h1><p>iText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。</p>\n<p>iText 官网：<a href=\"http://itextpdf.com/\">http://itextpdf.com/</a></p>\n<p>iText 开发文档： <a href=\"http://developers.itextpdf.com/developers-home\">http://developers.itextpdf.com/developers-home</a></p>\n<p>iText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在<a href=\"http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\">http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。</a></p>\n<h1 id=\"iText简单使用\"><a href=\"#iText简单使用\" class=\"headerlink\" title=\"iText简单使用\"></a>iText简单使用</h1><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 不支持中文</div><div class=\"line\"> * ClassName: JavaToPdf </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdf</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld.pdf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world\"</span>));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"iText中文支持\"><a href=\"#iText中文支持\" class=\"headerlink\" title=\"iText中文支持\"></a>iText中文支持</h1><p>iText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\">http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java</a></p>\n<p>测试代码：JavaToPdfCN</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.FontFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 支持中文</div><div class=\"line\"> * ClassName: JavaToPdfCN </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfCN</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world，我是rainbowhorse。\"</span>, font));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"iText-HTML渲染\"><a href=\"#iText-HTML渲染\" class=\"headerlink\" title=\"iText-HTML渲染\"></a>iText-HTML渲染</h1><p>在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\">http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples</a></p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf.tool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>xmlworker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.red &#123;</div><div class=\"line\">\tcolor: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red\"</span>&gt;</span>你好，rainbowhorse<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtml </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtml</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = PathUtil.getCurrentPath() + <span class=\"string\">\"/template.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> FileInputStream(HTML), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"/><br><br></div>\n\n<p><strong>注意：</strong></p>\n<ol>\n<li>HTML中必须使用标准的语法，标签一定需要闭合。</li>\n<li>HTML中如果有中文，需要在样式中添加对应字体的样式。</li>\n</ol>\n<h1 id=\"iText-HTML-Freemarker渲染\"><a href=\"#iText-HTML-Freemarker渲染\" class=\"headerlink\" title=\"iText-HTML-Freemarker渲染\"></a>iText-HTML-Freemarker渲染</h1><p>在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。</p>\n<p>添加FreeMarke依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.freemarker<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>freemarker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blue &#123;</div><div class=\"line\">\tcolor: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 100px;</div><div class=\"line\">\ttop: 150px</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blue pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * FreeMarker模板的HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> ByteArrayInputStream(content.getBytes()), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"/><br><br></div>\n\n<p>目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。</p>\n<h1 id=\"Flying-Saucer-CSS高级特性支持\"><a href=\"#Flying-Saucer-CSS高级特性支持\" class=\"headerlink\" title=\"Flying Saucer-CSS高级特性支持\"></a>Flying Saucer-CSS高级特性支持</h1><p>Flying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.</p>\n<p>Flying Saucer是基于iText的，支持对CSS高级特性的解析。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf-itext5<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker_fs.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\"> @page &#123;</div><div class=\"line\"> \tsize:297mm 230mm;</div><div class=\"line\">        @top-left&#123;</div><div class=\"line\">            content:element(header-left);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @top-right &#123;</div><div class=\"line\">            content: element(header-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-left &#123;</div><div class=\"line\">            content: element(footer-left)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-right &#123;</div><div class=\"line\">            content: element(footer-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.color &#123;</div><div class=\"line\">\tcolor: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 200px;</div><div class=\"line\">\ttop: 200px;</div><div class=\"line\">\twidth: 200px;</div><div class=\"line\">\tfont-size: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.jpg\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * FreeMarker模板的HTML转PDF Flying Saucer</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 图片路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file:/\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\trender.createPDF(<span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"/><br><br></div>\n\n<p>在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。</p>\n<p><strong>对于生成的pdf页面大小，可以用css的@page属性设置。</strong></p>\n<h1 id=\"PDF转图片\"><a href=\"#PDF转图片\" class=\"headerlink\" title=\"PDF转图片\"></a>PDF转图片</h1><p>在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jpedal<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jpedal-lgpl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.74b27<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfImgHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.PdfDecoder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.exception.PdfException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.fonts.FontMappings;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Jpedal把pdf转成图片 </div><div class=\"line\"> * ClassName: JavaToPdfImgHtmlFreeMarker</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfImgHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file://\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/logo.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMG_EXT = <span class=\"string\">\"png\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);</div><div class=\"line\">\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), <span class=\"number\">2</span>, <span class=\"number\">1</span>, IMG_EXT);</div><div class=\"line\"></div><div class=\"line\">\t\tFileOutputStream fileStream = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(DEST));</div><div class=\"line\">\t\tfileStream.write(imgSteam.toByteArray());</div><div class=\"line\">\t\tfileStream.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 根据模板生成pdf文件流</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">createPdf</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\trender.createPDF(outStream);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> outStream;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\toutStream.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 根据pdf二进制文件 生成图片文件</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bytes</div><div class=\"line\">\t *            pdf二进制</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> scaling</div><div class=\"line\">\t *            清晰度</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> pageNum</div><div class=\"line\">\t *            页数</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">pdfToImg</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes, <span class=\"keyword\">float</span> scaling, <span class=\"keyword\">int</span> pageNum, String formatName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 推荐的方法打开PdfDecoder</span></div><div class=\"line\">\t\tPdfDecoder pdfDecoder = <span class=\"keyword\">new</span> PdfDecoder(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tFontMappings.setFontReplacements();</div><div class=\"line\">\t\t<span class=\"comment\">// 修改图片的清晰度</span></div><div class=\"line\">\t\tpdfDecoder.scaling = scaling;</div><div class=\"line\">\t\tByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 打开pdf文件，生成PdfDecoder对象</span></div><div class=\"line\">\t\t\tpdfDecoder.openPdfArray(bytes); <span class=\"comment\">// bytes is byte[] array with PDF</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取第pageNum页的pdf</span></div><div class=\"line\">\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);</div><div class=\"line\"></div><div class=\"line\">\t\t\tImageIO.write(img, formatName, out);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (PdfException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> out;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"/><br><br></div>\n\n<p>Jpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于电子凭证的技术方案，总结如下:</p>\n<ol>\n<li>HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。</li>\n<li>渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。</li>\n<li>在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。</li>\n</ol>"},{"title":"Linux下Tomcat的安装与优化","date":"2018-01-05T11:04:11.000Z","_content":"\n# 引言\n\nLinux系统已经搁置很久了，之前有在Ubuntu系统上开发过，但是Linux已经很久没有用了。现在公司把项目部署在Linux系统上，又要把Linux相关知识温习一下。这篇博客温习一下Linux下Tomcat的部署与优化，大部分的操作与在windows上相同。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/tomcat_linux.png\" algin=\"center\"/></div><!-- more -->\n\n# Tomcat的安装\n\n首先下载Tomcat的压缩包（apache-tomcat-7.0.82.tar.gz），下载地址为：*https://tomcat.apache.org/download-70.cgi*\n\n将压缩包放到Linux预定目录下，执行tar的解压缩命令\n\n```xml\ncd /usr/soft/\ntar -zxvf apache-tomcat-7.0.82.tar.gz\n```\n\n进入到apache-tomcat-7.0.82.tar.gz的bin目录下执行**./startup.sh** 命令即可启动Tomcat。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/1.png\" algin=\"center\"/>\n\n</div>\n\n# Tomcat的优化\n\n默认情况下Tomcat的配置适合开发模式或者比较小的系统应用，当访问量稍微多的时候比如1000人同时在线做一些频繁的业务操作的时候，可能性能方面就会存在问题，所以有必要在生产环境下对Tomcat做一些优化。\n\n之前几篇文章也提到了Tomcat相关参数的设置与优化，Windows操作系统与Linux操作系统大同小异。\n\n## APR模式\n\nTomcat 常用运行模式有3种，分别为 BIO，NIO，APR。生产环境建议用APR，从操作系统级别来解决异步的IO问题，大幅度的提高性能。Linux下需要另安装配置APR。\n\n### 下载\n\nAPR模式需要下载**apr-1.6.3.tar.gz**和**apr-util-1.6.1.tar.gz**两个文件，下载地址为：*http://apr.apache.org/download.cgi*\n\n### 安装\n\n将连个文件放到合适的位置然后进行安装操作。\n\n#### apr的安装\n\n依次执行，将安装路径设为`/usr/local/apr`\n\n```\ntar -zxvf apr-1.6.3.tar.gz\ncd apr-1.6.3.tar.gz\n./configure --prefix=/usr/local/apr\nmake\nmake install\n```\n\n#### apr-util的安装\n\n```\ntar -zxvf apr-util-1.6.1.tar.gz\ncd apr-util-1.6.1.tar.gz\n./configure --with-apr=/usr/local/apr/bin/apr-1-config\nmake\nmake install\n```\n\n#### 安装tomcat-native\n\n`tomcat-native.tar.gz是Tomcat自带的压缩包`，该文件在tomcat的bin目录下。\n\n系统要先安装好JDK，我的JDK的安装目录为：`/usr/soft/jdk1.8.0_152`\n\n```\ncd /usr/soft/apache-tomcat-7.0.82/bin/\ntar -zxvf tomcat-native.tar.gz\ncd tomcat-native-1.2.14-src/java/org/apache/tomcat/jni/\n./configure --with-apr=/usr/local/apr/bin/apr-1-config --with-java-home=/usr/soft/jdk1.8.0_152\nmake\nmake install\n```\n\n#### 配置\n\n1.  编辑tomcat目录下文件bin/catalina.sh**加载apr**，在任意地方加入下面一行\n\n```xml\nCATALINA_OPTS=\"$CATALINA_OPTS -Djava.library.path=/usr/local/apr/lib\"\n```\n\n2.  编辑bin/catalina.sh**配置JVM运行参数**，注意引号不要忘记。\n\n```\nJAVA_OPTS=\"-server -Xmx4g -Xms4g -Xmn1g -XX:PermSize=512M -XX:MaxPermSize=521M -XX:+DisableExplicitGC -XX:SurvivorRatio=3 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/soft/apache-tomcat-7.0.82 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:CMSInitiatingOccupancyFraction=65 -XX:+UseCMSInitiatingOccupancyOnly -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+UseCMSCompactAtFullCollection -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:/usr/soft/jdk1.8.0_152/log/gc.log -Djava.awt.headless=true\"\n```\n\n3. 编辑conf/server.xml**使用apr运行模式**\n\n```\n<Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               connectionTimeout=\"20000\" maxThreads=\"1000\" minSpareThreads=\"100\"\n\t\t\t   maxSpareThreads=\"200\" acceptCount=\"900\" enableLookups=\"false\"\n\t\t\t   compression=\"on\" compressionMinSize=\"1024\" compressableMimeType=\"text/html,text/xml,text/css,text/javascript\"\n               redirectPort=\"8443\" URIEncoding=\"UTF-8\" maxHttpHeaderSize=\"8192\"/>\n```\n\n4. 启动Tomcat\n\n启动tomcat，查看tomcat日志文件，若出现如下信息则表明安装配置成功。\n\n```\n一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init\n信息: Initializing ProtocolHandler [\"http-apr-8080\"]\n一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init\n信息:: Initializing ProtocolHandler [\"ajp-apr-8009\"]\n一月 05, 2018 2:03:09 下午 org.apache.catalina.startup.Catalina load\n信息:: Initialization processed in 1471 ms\n```\n\n# 结语\n\n性能的影响因素是多方面的，互相影响，首先是系统本身没问题，数据库的响应没问题，web容器顺畅，硬件顺畅，网络带宽足够，再使用一些小工具进行检测，只有在大量用户在实际的生产环境中使用系统，才能发现问题，找到问题的根源到底是哪一块引发的性能瓶颈，调整一下自然一切都变得顺畅。","source":"_posts/Linux下Tomcat的安装与优化.md","raw":"---\ntitle: Linux下Tomcat的安装与优化\ndate: 2018-01-05 19:04:11\ntags: [tomcat, tips, linux]\ncategories: technology\n---\n\n# 引言\n\nLinux系统已经搁置很久了，之前有在Ubuntu系统上开发过，但是Linux已经很久没有用了。现在公司把项目部署在Linux系统上，又要把Linux相关知识温习一下。这篇博客温习一下Linux下Tomcat的部署与优化，大部分的操作与在windows上相同。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/tomcat_linux.png\" algin=\"center\"/></div><!-- more -->\n\n# Tomcat的安装\n\n首先下载Tomcat的压缩包（apache-tomcat-7.0.82.tar.gz），下载地址为：*https://tomcat.apache.org/download-70.cgi*\n\n将压缩包放到Linux预定目录下，执行tar的解压缩命令\n\n```xml\ncd /usr/soft/\ntar -zxvf apache-tomcat-7.0.82.tar.gz\n```\n\n进入到apache-tomcat-7.0.82.tar.gz的bin目录下执行**./startup.sh** 命令即可启动Tomcat。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/1.png\" algin=\"center\"/>\n\n</div>\n\n# Tomcat的优化\n\n默认情况下Tomcat的配置适合开发模式或者比较小的系统应用，当访问量稍微多的时候比如1000人同时在线做一些频繁的业务操作的时候，可能性能方面就会存在问题，所以有必要在生产环境下对Tomcat做一些优化。\n\n之前几篇文章也提到了Tomcat相关参数的设置与优化，Windows操作系统与Linux操作系统大同小异。\n\n## APR模式\n\nTomcat 常用运行模式有3种，分别为 BIO，NIO，APR。生产环境建议用APR，从操作系统级别来解决异步的IO问题，大幅度的提高性能。Linux下需要另安装配置APR。\n\n### 下载\n\nAPR模式需要下载**apr-1.6.3.tar.gz**和**apr-util-1.6.1.tar.gz**两个文件，下载地址为：*http://apr.apache.org/download.cgi*\n\n### 安装\n\n将连个文件放到合适的位置然后进行安装操作。\n\n#### apr的安装\n\n依次执行，将安装路径设为`/usr/local/apr`\n\n```\ntar -zxvf apr-1.6.3.tar.gz\ncd apr-1.6.3.tar.gz\n./configure --prefix=/usr/local/apr\nmake\nmake install\n```\n\n#### apr-util的安装\n\n```\ntar -zxvf apr-util-1.6.1.tar.gz\ncd apr-util-1.6.1.tar.gz\n./configure --with-apr=/usr/local/apr/bin/apr-1-config\nmake\nmake install\n```\n\n#### 安装tomcat-native\n\n`tomcat-native.tar.gz是Tomcat自带的压缩包`，该文件在tomcat的bin目录下。\n\n系统要先安装好JDK，我的JDK的安装目录为：`/usr/soft/jdk1.8.0_152`\n\n```\ncd /usr/soft/apache-tomcat-7.0.82/bin/\ntar -zxvf tomcat-native.tar.gz\ncd tomcat-native-1.2.14-src/java/org/apache/tomcat/jni/\n./configure --with-apr=/usr/local/apr/bin/apr-1-config --with-java-home=/usr/soft/jdk1.8.0_152\nmake\nmake install\n```\n\n#### 配置\n\n1.  编辑tomcat目录下文件bin/catalina.sh**加载apr**，在任意地方加入下面一行\n\n```xml\nCATALINA_OPTS=\"$CATALINA_OPTS -Djava.library.path=/usr/local/apr/lib\"\n```\n\n2.  编辑bin/catalina.sh**配置JVM运行参数**，注意引号不要忘记。\n\n```\nJAVA_OPTS=\"-server -Xmx4g -Xms4g -Xmn1g -XX:PermSize=512M -XX:MaxPermSize=521M -XX:+DisableExplicitGC -XX:SurvivorRatio=3 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/soft/apache-tomcat-7.0.82 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:CMSInitiatingOccupancyFraction=65 -XX:+UseCMSInitiatingOccupancyOnly -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+UseCMSCompactAtFullCollection -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:/usr/soft/jdk1.8.0_152/log/gc.log -Djava.awt.headless=true\"\n```\n\n3. 编辑conf/server.xml**使用apr运行模式**\n\n```\n<Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               connectionTimeout=\"20000\" maxThreads=\"1000\" minSpareThreads=\"100\"\n\t\t\t   maxSpareThreads=\"200\" acceptCount=\"900\" enableLookups=\"false\"\n\t\t\t   compression=\"on\" compressionMinSize=\"1024\" compressableMimeType=\"text/html,text/xml,text/css,text/javascript\"\n               redirectPort=\"8443\" URIEncoding=\"UTF-8\" maxHttpHeaderSize=\"8192\"/>\n```\n\n4. 启动Tomcat\n\n启动tomcat，查看tomcat日志文件，若出现如下信息则表明安装配置成功。\n\n```\n一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init\n信息: Initializing ProtocolHandler [\"http-apr-8080\"]\n一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init\n信息:: Initializing ProtocolHandler [\"ajp-apr-8009\"]\n一月 05, 2018 2:03:09 下午 org.apache.catalina.startup.Catalina load\n信息:: Initialization processed in 1471 ms\n```\n\n# 结语\n\n性能的影响因素是多方面的，互相影响，首先是系统本身没问题，数据库的响应没问题，web容器顺畅，硬件顺畅，网络带宽足够，再使用一些小工具进行检测，只有在大量用户在实际的生产环境中使用系统，才能发现问题，找到问题的根源到底是哪一块引发的性能瓶颈，调整一下自然一切都变得顺畅。","slug":"Linux下Tomcat的安装与优化","published":1,"updated":"2018-03-13T05:50:48.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u0e000q3gfkkjmz2hao","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Linux系统已经搁置很久了，之前有在Ubuntu系统上开发过，但是Linux已经很久没有用了。现在公司把项目部署在Linux系统上，又要把Linux相关知识温习一下。这篇博客温习一下Linux下Tomcat的部署与优化，大部分的操作与在windows上相同。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/tomcat_linux.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"Tomcat的安装\"><a href=\"#Tomcat的安装\" class=\"headerlink\" title=\"Tomcat的安装\"></a>Tomcat的安装</h1><p>首先下载Tomcat的压缩包（apache-tomcat-7.0.82.tar.gz），下载地址为：<em><a href=\"https://tomcat.apache.org/download-70.cgi\" target=\"_blank\" rel=\"external\">https://tomcat.apache.org/download-70.cgi</a></em></p>\n<p>将压缩包放到Linux预定目录下，执行tar的解压缩命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/soft/</div><div class=\"line\">tar -zxvf apache-tomcat-7.0.82.tar.gz</div></pre></td></tr></table></figure>\n<p>进入到apache-tomcat-7.0.82.tar.gz的bin目录下执行<strong>./startup.sh</strong> 命令即可启动Tomcat。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/1.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"Tomcat的优化\"><a href=\"#Tomcat的优化\" class=\"headerlink\" title=\"Tomcat的优化\"></a>Tomcat的优化</h1><p>默认情况下Tomcat的配置适合开发模式或者比较小的系统应用，当访问量稍微多的时候比如1000人同时在线做一些频繁的业务操作的时候，可能性能方面就会存在问题，所以有必要在生产环境下对Tomcat做一些优化。</p>\n<p>之前几篇文章也提到了Tomcat相关参数的设置与优化，Windows操作系统与Linux操作系统大同小异。</p>\n<h2 id=\"APR模式\"><a href=\"#APR模式\" class=\"headerlink\" title=\"APR模式\"></a>APR模式</h2><p>Tomcat 常用运行模式有3种，分别为 BIO，NIO，APR。生产环境建议用APR，从操作系统级别来解决异步的IO问题，大幅度的提高性能。Linux下需要另安装配置APR。</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>APR模式需要下载<strong>apr-1.6.3.tar.gz</strong>和<strong>apr-util-1.6.1.tar.gz</strong>两个文件，下载地址为：<em><a href=\"http://apr.apache.org/download.cgi\" target=\"_blank\" rel=\"external\">http://apr.apache.org/download.cgi</a></em></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>将连个文件放到合适的位置然后进行安装操作。</p>\n<h4 id=\"apr的安装\"><a href=\"#apr的安装\" class=\"headerlink\" title=\"apr的安装\"></a>apr的安装</h4><p>依次执行，将安装路径设为<code>/usr/local/apr</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf apr-1.6.3.tar.gz</div><div class=\"line\">cd apr-1.6.3.tar.gz</div><div class=\"line\">./configure --prefix=/usr/local/apr</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"apr-util的安装\"><a href=\"#apr-util的安装\" class=\"headerlink\" title=\"apr-util的安装\"></a>apr-util的安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf apr-util-1.6.1.tar.gz</div><div class=\"line\">cd apr-util-1.6.1.tar.gz</div><div class=\"line\">./configure --with-apr=/usr/local/apr/bin/apr-1-config</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"安装tomcat-native\"><a href=\"#安装tomcat-native\" class=\"headerlink\" title=\"安装tomcat-native\"></a>安装tomcat-native</h4><p><code>tomcat-native.tar.gz是Tomcat自带的压缩包</code>，该文件在tomcat的bin目录下。</p>\n<p>系统要先安装好JDK，我的JDK的安装目录为：<code>/usr/soft/jdk1.8.0_152</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/soft/apache-tomcat-7.0.82/bin/</div><div class=\"line\">tar -zxvf tomcat-native.tar.gz</div><div class=\"line\">cd tomcat-native-1.2.14-src/java/org/apache/tomcat/jni/</div><div class=\"line\">./configure --with-apr=/usr/local/apr/bin/apr-1-config --with-java-home=/usr/soft/jdk1.8.0_152</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ol>\n<li>编辑tomcat目录下文件bin/catalina.sh<strong>加载apr</strong>，在任意地方加入下面一行</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CATALINA_OPTS=\"$CATALINA_OPTS -Djava.library.path=/usr/local/apr/lib\"</div></pre></td></tr></table></figure>\n<ol>\n<li>编辑bin/catalina.sh<strong>配置JVM运行参数</strong>，注意引号不要忘记。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_OPTS=&quot;-server -Xmx4g -Xms4g -Xmn1g -XX:PermSize=512M -XX:MaxPermSize=521M -XX:+DisableExplicitGC -XX:SurvivorRatio=3 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/soft/apache-tomcat-7.0.82 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:CMSInitiatingOccupancyFraction=65 -XX:+UseCMSInitiatingOccupancyOnly -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+UseCMSCompactAtFullCollection -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:/usr/soft/jdk1.8.0_152/log/gc.log -Djava.awt.headless=true&quot;</div></pre></td></tr></table></figure>\n<ol>\n<li>编辑conf/server.xml<strong>使用apr运行模式</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot; maxThreads=&quot;1000&quot; minSpareThreads=&quot;100&quot;</div><div class=\"line\">\t\t\t   maxSpareThreads=&quot;200&quot; acceptCount=&quot;900&quot; enableLookups=&quot;false&quot;</div><div class=\"line\">\t\t\t   compression=&quot;on&quot; compressionMinSize=&quot;1024&quot; compressableMimeType=&quot;text/html,text/xml,text/css,text/javascript&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; maxHttpHeaderSize=&quot;8192&quot;/&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>启动Tomcat</li>\n</ol>\n<p>启动tomcat，查看tomcat日志文件，若出现如下信息则表明安装配置成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init</div><div class=\"line\">信息: Initializing ProtocolHandler [&quot;http-apr-8080&quot;]</div><div class=\"line\">一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init</div><div class=\"line\">信息:: Initializing ProtocolHandler [&quot;ajp-apr-8009&quot;]</div><div class=\"line\">一月 05, 2018 2:03:09 下午 org.apache.catalina.startup.Catalina load</div><div class=\"line\">信息:: Initialization processed in 1471 ms</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>性能的影响因素是多方面的，互相影响，首先是系统本身没问题，数据库的响应没问题，web容器顺畅，硬件顺畅，网络带宽足够，再使用一些小工具进行检测，只有在大量用户在实际的生产环境中使用系统，才能发现问题，找到问题的根源到底是哪一块引发的性能瓶颈，调整一下自然一切都变得顺畅。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Linux系统已经搁置很久了，之前有在Ubuntu系统上开发过，但是Linux已经很久没有用了。现在公司把项目部署在Linux系统上，又要把Linux相关知识温习一下。这篇博客温习一下Linux下Tomcat的部署与优化，大部分的操作与在windows上相同。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/tomcat_linux.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"Tomcat的安装\"><a href=\"#Tomcat的安装\" class=\"headerlink\" title=\"Tomcat的安装\"></a>Tomcat的安装</h1><p>首先下载Tomcat的压缩包（apache-tomcat-7.0.82.tar.gz），下载地址为：<em><a href=\"https://tomcat.apache.org/download-70.cgi\">https://tomcat.apache.org/download-70.cgi</a></em></p>\n<p>将压缩包放到Linux预定目录下，执行tar的解压缩命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/soft/</div><div class=\"line\">tar -zxvf apache-tomcat-7.0.82.tar.gz</div></pre></td></tr></table></figure>\n<p>进入到apache-tomcat-7.0.82.tar.gz的bin目录下执行<strong>./startup.sh</strong> 命令即可启动Tomcat。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_tomcat/1.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"Tomcat的优化\"><a href=\"#Tomcat的优化\" class=\"headerlink\" title=\"Tomcat的优化\"></a>Tomcat的优化</h1><p>默认情况下Tomcat的配置适合开发模式或者比较小的系统应用，当访问量稍微多的时候比如1000人同时在线做一些频繁的业务操作的时候，可能性能方面就会存在问题，所以有必要在生产环境下对Tomcat做一些优化。</p>\n<p>之前几篇文章也提到了Tomcat相关参数的设置与优化，Windows操作系统与Linux操作系统大同小异。</p>\n<h2 id=\"APR模式\"><a href=\"#APR模式\" class=\"headerlink\" title=\"APR模式\"></a>APR模式</h2><p>Tomcat 常用运行模式有3种，分别为 BIO，NIO，APR。生产环境建议用APR，从操作系统级别来解决异步的IO问题，大幅度的提高性能。Linux下需要另安装配置APR。</p>\n<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>APR模式需要下载<strong>apr-1.6.3.tar.gz</strong>和<strong>apr-util-1.6.1.tar.gz</strong>两个文件，下载地址为：<em><a href=\"http://apr.apache.org/download.cgi\">http://apr.apache.org/download.cgi</a></em></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>将连个文件放到合适的位置然后进行安装操作。</p>\n<h4 id=\"apr的安装\"><a href=\"#apr的安装\" class=\"headerlink\" title=\"apr的安装\"></a>apr的安装</h4><p>依次执行，将安装路径设为<code>/usr/local/apr</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf apr-1.6.3.tar.gz</div><div class=\"line\">cd apr-1.6.3.tar.gz</div><div class=\"line\">./configure --prefix=/usr/local/apr</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"apr-util的安装\"><a href=\"#apr-util的安装\" class=\"headerlink\" title=\"apr-util的安装\"></a>apr-util的安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf apr-util-1.6.1.tar.gz</div><div class=\"line\">cd apr-util-1.6.1.tar.gz</div><div class=\"line\">./configure --with-apr=/usr/local/apr/bin/apr-1-config</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"安装tomcat-native\"><a href=\"#安装tomcat-native\" class=\"headerlink\" title=\"安装tomcat-native\"></a>安装tomcat-native</h4><p><code>tomcat-native.tar.gz是Tomcat自带的压缩包</code>，该文件在tomcat的bin目录下。</p>\n<p>系统要先安装好JDK，我的JDK的安装目录为：<code>/usr/soft/jdk1.8.0_152</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/soft/apache-tomcat-7.0.82/bin/</div><div class=\"line\">tar -zxvf tomcat-native.tar.gz</div><div class=\"line\">cd tomcat-native-1.2.14-src/java/org/apache/tomcat/jni/</div><div class=\"line\">./configure --with-apr=/usr/local/apr/bin/apr-1-config --with-java-home=/usr/soft/jdk1.8.0_152</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure>\n<h4 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h4><ol>\n<li>编辑tomcat目录下文件bin/catalina.sh<strong>加载apr</strong>，在任意地方加入下面一行</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">CATALINA_OPTS=\"$CATALINA_OPTS -Djava.library.path=/usr/local/apr/lib\"</div></pre></td></tr></table></figure>\n<ol>\n<li>编辑bin/catalina.sh<strong>配置JVM运行参数</strong>，注意引号不要忘记。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_OPTS=&quot;-server -Xmx4g -Xms4g -Xmn1g -XX:PermSize=512M -XX:MaxPermSize=521M -XX:+DisableExplicitGC -XX:SurvivorRatio=3 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/soft/apache-tomcat-7.0.82 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:CMSInitiatingOccupancyFraction=65 -XX:+UseCMSInitiatingOccupancyOnly -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+UseCMSCompactAtFullCollection -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -Xloggc:/usr/soft/jdk1.8.0_152/log/gc.log -Djava.awt.headless=true&quot;</div></pre></td></tr></table></figure>\n<ol>\n<li>编辑conf/server.xml<strong>使用apr运行模式</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Connector port=&quot;8080&quot; protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</div><div class=\"line\">               connectionTimeout=&quot;20000&quot; maxThreads=&quot;1000&quot; minSpareThreads=&quot;100&quot;</div><div class=\"line\">\t\t\t   maxSpareThreads=&quot;200&quot; acceptCount=&quot;900&quot; enableLookups=&quot;false&quot;</div><div class=\"line\">\t\t\t   compression=&quot;on&quot; compressionMinSize=&quot;1024&quot; compressableMimeType=&quot;text/html,text/xml,text/css,text/javascript&quot;</div><div class=\"line\">               redirectPort=&quot;8443&quot; URIEncoding=&quot;UTF-8&quot; maxHttpHeaderSize=&quot;8192&quot;/&gt;</div></pre></td></tr></table></figure>\n<ol>\n<li>启动Tomcat</li>\n</ol>\n<p>启动tomcat，查看tomcat日志文件，若出现如下信息则表明安装配置成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init</div><div class=\"line\">信息: Initializing ProtocolHandler [&quot;http-apr-8080&quot;]</div><div class=\"line\">一月 05, 2018 2:03:09 下午 org.apache.coyote.AbstractProtocol init</div><div class=\"line\">信息:: Initializing ProtocolHandler [&quot;ajp-apr-8009&quot;]</div><div class=\"line\">一月 05, 2018 2:03:09 下午 org.apache.catalina.startup.Catalina load</div><div class=\"line\">信息:: Initialization processed in 1471 ms</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>性能的影响因素是多方面的，互相影响，首先是系统本身没问题，数据库的响应没问题，web容器顺畅，硬件顺畅，网络带宽足够，再使用一些小工具进行检测，只有在大量用户在实际的生产环境中使用系统，才能发现问题，找到问题的根源到底是哪一块引发的性能瓶颈，调整一下自然一切都变得顺畅。</p>"},{"title":"Linux下安装JDK与MySQL","date":"2018-01-09T11:53:24.000Z","_content":"\n# 引言\n\n重温记录下Linux环境下JDK和MySQL的安装。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/installing-mysql-on-linux.png\" algin=\"center\"/></div><!-- more -->\n\n# JDK的安装\n\n## 下载解压\n\n下载JDK压缩包，下载目录：*http://www.oracle.com/technetwork/java/javase/downloads/index.html*\n\n解压\n\n```\ntar -xvzf jdk-8u152-linux-x64.tar.gz\n```\n\n## 配置环境变量\n\n以`root`用户使用以下命令进入配置环境变量的profile文件。\n\n```xml\nvim /etc/profile\n```\n\n在文件末尾加入以下内容并保存（注意修改JDK路径）。\n\n```\n# set java environment \nexport JAVA_HOME=/usr/soft/jdk1.8.0_152\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n在命令行使用以下命令使环境变量生效。\n\n```\nsource /etc/profile\n```\n\n## 切换JDK版本\n\n当Linux中安装多个JDK时切换进行版本切换。\n\n查看选择所有JDK。\n\n```\nalternatives --config java\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-f.png\" algin=\"center\"/>\n\n</div>\n\n给jdk1.8.0_152设置序列号，输入以下命令（注意修改JDK目录）。\n\n```\nalternatives --install /usr/bin/java java /usr/soft/jdk1.8.0_152 4\n```\n\n输入以下命令，选择JDK对应的数字，切换JDK版本。\n\n```\nalternatives --config java\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-s1.png\" algin=\"center\"/>\n\n</div>\n\n# MySQL的安装与卸载\n\n## yum安装\n\n从Oracle官方网站下载Linux系统对应的MySQL的yum源包。地址：*https://dev.mysql.com/downloads/repo/yum/*\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/1.png\" algin=\"center\"/>\n\n</div>\n\n把yum源包上传到linux，依次执行以下命令进行安装。\n\n```\nyum localinstall mysql-community-release-el6-5.noarch.rpm\nyum install mysql-server\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/2.png\" algin=\"center\"/>\n\n</div>\n\n安装完成后启动MySQL\n\n```\nservice mysqld start\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/3.png\" algin=\"center\"/>\n\n</div>\n\n给root用户设置密码\n\n```\n/usr/bin/mysqladmin -u root password 'root'\n```\n\n进入MySQL后进行远程连接授权\n\n```\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;\n```\n\n### 卸载\n\n查看MySQL的安装路径\n\n```\nwhereis mysql\n```\n\n查看mysql的安装包\n\n```\nrpm -qa|grep mysql\n```\n\n卸载\n\n```\nyum remove mysql\n```\n\n若卸载不完全，则要逐个卸载\n\n```\nrpm -qa|grep mysql\nyum remove mysql-community-release-el6-5.noarch\nyum remove mysql-community-common-5.6.38-2.el6.x86_64\nyum remove mysql-community-libs-5.6.38-2.el6.x86_64\n```\n\n删除mysql的数据库文件\n\n```\nrm -rf /var/lib/mysql/\n```\n\n## 安装包离线安装\n\n下载MySQL离线安装包：*https://dev.mysql.com/downloads/mysql/*\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/download.png\" algin=\"center\"/>\n\n</div>\n\n```java\nmv mysql-5.6.38-linux-glibc2.12-x86_64.tar.gz /usr/local/\ncd /usr/local/\n// 解压MySQL安装包\ntar -zxvf  mysql-5.6.38-linux-glibc2.12-x86_64.tar.gz\n// 重命名\nmv mysql-5.6.38-linux-glibc2.12-x86_64 mysql\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/tar.png\" algin=\"center\"/>\n\n</div>\n\n检查MySQL组和用户是否存在，如无创建\n\n```java\ncat /etc/group | grep mysql\ncat /etc/passwd | grep mysql\n// 如果没有则创建。useradd -r参数表示mysql用户是系统用户，不可用于登录系统\ngroupadd mysql\nuseradd -r -g mysql mysql\n```\n\n分配用户和组\n\n```java\ncd mysql\n// 更改mysql目录所属的用户(用户为mysql)\nchown -R mysql ../mysql/\n// -R是递归的意思，就是把mysql目录下的全部文件和子目录都设置为mysql用户和mysql组。\nchgrp -R mysql ../mysql/\n// 上面的做法是为了把mysql降权，以限定只能访问属于mysql用户的文件。\n```\n\n 安装及初始化数据库（创建系统数据库的表）\n\n```java\n./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/scripts.png\" algin=\"center\"/>\n\n</div>\n\n配置MySQL数据库\n\n```java\n// 复制配置文件\ncp -a ./support-files/my-default.cnf /etc/my.cnf\n// 更改配置文件信息\nvi /etc/my.cnf\n// 加入以下内容\n# These are commonly set, remove the # and set as required.\nbasedir = /usr/local/mysql\ndatadir = /usr/local/mysql/data\n```\n\n修改MySQL密码\n\n```java\n// 启动MySQL\n./support-files/mysql.server start\n// 修改密码\n./bin/mysqladmin -u root -h localhost.localdomain password 'root'\n// 进入MySQL\n./bin/mysql -h127.0.0.1 -uroot -proot\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/start.jpg\" algin=\"center\"/>\n\n</div>\n\n增加远程登录权限\n\n```\ngrant all privileges on *.* to root@'%' identified by 'root';\nflush privileges;\n```\n\n将MySQL加入Service系统服务\n\n```java\n// 先退出MySQL\ncp support-files/mysql.server /etc/init.d/mysqld\nchkconfig --add mysqld\nchkconfig mysqld on\nservice mysqld restart\nservice mysqld status  \n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/ok.png\" algin=\"center\"/>\n\n</div>\n\n到这里MySQL就配置完成了，剩下的就是优化MySQL，配置/etc/my.cnf啦！","source":"_posts/Linux下安装JDK与MySQL.md","raw":"---\ntitle: Linux下安装JDK与MySQL\ndate: 2018-01-09 19:53:24\ntags: [mysql, linux]\ncategories: technology\n---\n\n# 引言\n\n重温记录下Linux环境下JDK和MySQL的安装。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/installing-mysql-on-linux.png\" algin=\"center\"/></div><!-- more -->\n\n# JDK的安装\n\n## 下载解压\n\n下载JDK压缩包，下载目录：*http://www.oracle.com/technetwork/java/javase/downloads/index.html*\n\n解压\n\n```\ntar -xvzf jdk-8u152-linux-x64.tar.gz\n```\n\n## 配置环境变量\n\n以`root`用户使用以下命令进入配置环境变量的profile文件。\n\n```xml\nvim /etc/profile\n```\n\n在文件末尾加入以下内容并保存（注意修改JDK路径）。\n\n```\n# set java environment \nexport JAVA_HOME=/usr/soft/jdk1.8.0_152\nexport PATH=$PATH:$JAVA_HOME/bin\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n在命令行使用以下命令使环境变量生效。\n\n```\nsource /etc/profile\n```\n\n## 切换JDK版本\n\n当Linux中安装多个JDK时切换进行版本切换。\n\n查看选择所有JDK。\n\n```\nalternatives --config java\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-f.png\" algin=\"center\"/>\n\n</div>\n\n给jdk1.8.0_152设置序列号，输入以下命令（注意修改JDK目录）。\n\n```\nalternatives --install /usr/bin/java java /usr/soft/jdk1.8.0_152 4\n```\n\n输入以下命令，选择JDK对应的数字，切换JDK版本。\n\n```\nalternatives --config java\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-s1.png\" algin=\"center\"/>\n\n</div>\n\n# MySQL的安装与卸载\n\n## yum安装\n\n从Oracle官方网站下载Linux系统对应的MySQL的yum源包。地址：*https://dev.mysql.com/downloads/repo/yum/*\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/1.png\" algin=\"center\"/>\n\n</div>\n\n把yum源包上传到linux，依次执行以下命令进行安装。\n\n```\nyum localinstall mysql-community-release-el6-5.noarch.rpm\nyum install mysql-server\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/2.png\" algin=\"center\"/>\n\n</div>\n\n安装完成后启动MySQL\n\n```\nservice mysqld start\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/3.png\" algin=\"center\"/>\n\n</div>\n\n给root用户设置密码\n\n```\n/usr/bin/mysqladmin -u root password 'root'\n```\n\n进入MySQL后进行远程连接授权\n\n```\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;\n```\n\n### 卸载\n\n查看MySQL的安装路径\n\n```\nwhereis mysql\n```\n\n查看mysql的安装包\n\n```\nrpm -qa|grep mysql\n```\n\n卸载\n\n```\nyum remove mysql\n```\n\n若卸载不完全，则要逐个卸载\n\n```\nrpm -qa|grep mysql\nyum remove mysql-community-release-el6-5.noarch\nyum remove mysql-community-common-5.6.38-2.el6.x86_64\nyum remove mysql-community-libs-5.6.38-2.el6.x86_64\n```\n\n删除mysql的数据库文件\n\n```\nrm -rf /var/lib/mysql/\n```\n\n## 安装包离线安装\n\n下载MySQL离线安装包：*https://dev.mysql.com/downloads/mysql/*\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/download.png\" algin=\"center\"/>\n\n</div>\n\n```java\nmv mysql-5.6.38-linux-glibc2.12-x86_64.tar.gz /usr/local/\ncd /usr/local/\n// 解压MySQL安装包\ntar -zxvf  mysql-5.6.38-linux-glibc2.12-x86_64.tar.gz\n// 重命名\nmv mysql-5.6.38-linux-glibc2.12-x86_64 mysql\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/tar.png\" algin=\"center\"/>\n\n</div>\n\n检查MySQL组和用户是否存在，如无创建\n\n```java\ncat /etc/group | grep mysql\ncat /etc/passwd | grep mysql\n// 如果没有则创建。useradd -r参数表示mysql用户是系统用户，不可用于登录系统\ngroupadd mysql\nuseradd -r -g mysql mysql\n```\n\n分配用户和组\n\n```java\ncd mysql\n// 更改mysql目录所属的用户(用户为mysql)\nchown -R mysql ../mysql/\n// -R是递归的意思，就是把mysql目录下的全部文件和子目录都设置为mysql用户和mysql组。\nchgrp -R mysql ../mysql/\n// 上面的做法是为了把mysql降权，以限定只能访问属于mysql用户的文件。\n```\n\n 安装及初始化数据库（创建系统数据库的表）\n\n```java\n./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/scripts.png\" algin=\"center\"/>\n\n</div>\n\n配置MySQL数据库\n\n```java\n// 复制配置文件\ncp -a ./support-files/my-default.cnf /etc/my.cnf\n// 更改配置文件信息\nvi /etc/my.cnf\n// 加入以下内容\n# These are commonly set, remove the # and set as required.\nbasedir = /usr/local/mysql\ndatadir = /usr/local/mysql/data\n```\n\n修改MySQL密码\n\n```java\n// 启动MySQL\n./support-files/mysql.server start\n// 修改密码\n./bin/mysqladmin -u root -h localhost.localdomain password 'root'\n// 进入MySQL\n./bin/mysql -h127.0.0.1 -uroot -proot\n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/start.jpg\" algin=\"center\"/>\n\n</div>\n\n增加远程登录权限\n\n```\ngrant all privileges on *.* to root@'%' identified by 'root';\nflush privileges;\n```\n\n将MySQL加入Service系统服务\n\n```java\n// 先退出MySQL\ncp support-files/mysql.server /etc/init.d/mysqld\nchkconfig --add mysqld\nchkconfig mysqld on\nservice mysqld restart\nservice mysqld status  \n```\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/ok.png\" algin=\"center\"/>\n\n</div>\n\n到这里MySQL就配置完成了，剩下的就是优化MySQL，配置/etc/my.cnf啦！","slug":"Linux下安装JDK与MySQL","published":1,"updated":"2018-03-20T06:18:45.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u0i000u3gfku645vchc","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>重温记录下Linux环境下JDK和MySQL的安装。<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/installing-mysql-on-linux.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"JDK的安装\"><a href=\"#JDK的安装\" class=\"headerlink\" title=\"JDK的安装\"></a>JDK的安装</h1><h2 id=\"下载解压\"><a href=\"#下载解压\" class=\"headerlink\" title=\"下载解压\"></a>下载解压</h2><p>下载JDK压缩包，下载目录：<em><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></em></p>\n<p>解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf jdk-8u152-linux-x64.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>以<code>root</code>用户使用以下命令进入配置环境变量的profile文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/profile</div></pre></td></tr></table></figure>\n<p>在文件末尾加入以下内容并保存（注意修改JDK路径）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># set java environment </div><div class=\"line\">export JAVA_HOME=/usr/soft/jdk1.8.0_152</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</div><div class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div></pre></td></tr></table></figure>\n<p>在命令行使用以下命令使环境变量生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div></pre></td></tr></table></figure>\n<h2 id=\"切换JDK版本\"><a href=\"#切换JDK版本\" class=\"headerlink\" title=\"切换JDK版本\"></a>切换JDK版本</h2><p>当Linux中安装多个JDK时切换进行版本切换。</p>\n<p>查看选择所有JDK。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alternatives --config java</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-f.png\" algin=\"center\"><br><br></div>\n\n<p>给jdk1.8.0_152设置序列号，输入以下命令（注意修改JDK目录）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alternatives --install /usr/bin/java java /usr/soft/jdk1.8.0_152 4</div></pre></td></tr></table></figure>\n<p>输入以下命令，选择JDK对应的数字，切换JDK版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alternatives --config java</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-s1.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"MySQL的安装与卸载\"><a href=\"#MySQL的安装与卸载\" class=\"headerlink\" title=\"MySQL的安装与卸载\"></a>MySQL的安装与卸载</h1><h2 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h2><p>从Oracle官方网站下载Linux系统对应的MySQL的yum源包。地址：<em><a href=\"https://dev.mysql.com/downloads/repo/yum/\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/downloads/repo/yum/</a></em></p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/1.png\" algin=\"center\"><br><br></div>\n\n<p>把yum源包上传到linux，依次执行以下命令进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum localinstall mysql-community-release-el6-5.noarch.rpm</div><div class=\"line\">yum install mysql-server</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/2.png\" algin=\"center\"><br><br></div>\n\n<p>安装完成后启动MySQL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld start</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/3.png\" algin=\"center\"><br><br></div>\n\n<p>给root用户设置密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;root&apos;</div></pre></td></tr></table></figure>\n<p>进入MySQL后进行远程连接授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</div></pre></td></tr></table></figure>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>查看MySQL的安装路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis mysql</div></pre></td></tr></table></figure>\n<p>查看mysql的安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa|grep mysql</div></pre></td></tr></table></figure>\n<p>卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum remove mysql</div></pre></td></tr></table></figure>\n<p>若卸载不完全，则要逐个卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa|grep mysql</div><div class=\"line\">yum remove mysql-community-release-el6-5.noarch</div><div class=\"line\">yum remove mysql-community-common-5.6.38-2.el6.x86_64</div><div class=\"line\">yum remove mysql-community-libs-5.6.38-2.el6.x86_64</div></pre></td></tr></table></figure>\n<p>删除mysql的数据库文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf /var/lib/mysql/</div></pre></td></tr></table></figure>\n<h2 id=\"安装包离线安装\"><a href=\"#安装包离线安装\" class=\"headerlink\" title=\"安装包离线安装\"></a>安装包离线安装</h2><p>下载MySQL离线安装包：<em><a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/downloads/mysql/</a></em></p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/download.png\" algin=\"center\"><br><br></div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv mysql-<span class=\"number\">5.6</span>.38-linux-glibc2.12-x86_64.tar.gz /usr/local/</div><div class=\"line\">cd /usr/local/</div><div class=\"line\"><span class=\"comment\">// 解压MySQL安装包</span></div><div class=\"line\">tar -zxvf  mysql-<span class=\"number\">5.6</span>.38-linux-glibc2.12-x86_64.tar.gz</div><div class=\"line\"><span class=\"comment\">// 重命名</span></div><div class=\"line\">mv mysql-<span class=\"number\">5.6</span>.38-linux-glibc2.12-x86_64 mysql</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/tar.png\" algin=\"center\"><br><br></div>\n\n<p>检查MySQL组和用户是否存在，如无创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/group | grep mysql</div><div class=\"line\">cat /etc/passwd | grep mysql</div><div class=\"line\"><span class=\"comment\">// 如果没有则创建。useradd -r参数表示mysql用户是系统用户，不可用于登录系统</span></div><div class=\"line\">groupadd mysql</div><div class=\"line\">useradd -r -g mysql mysql</div></pre></td></tr></table></figure>\n<p>分配用户和组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd mysql</div><div class=\"line\"><span class=\"comment\">// 更改mysql目录所属的用户(用户为mysql)</span></div><div class=\"line\">chown -R mysql ../mysql/</div><div class=\"line\"><span class=\"comment\">// -R是递归的意思，就是把mysql目录下的全部文件和子目录都设置为mysql用户和mysql组。</span></div><div class=\"line\">chgrp -R mysql ../mysql/</div><div class=\"line\"><span class=\"comment\">// 上面的做法是为了把mysql降权，以限定只能访问属于mysql用户的文件。</span></div></pre></td></tr></table></figure>\n<p> 安装及初始化数据库（创建系统数据库的表）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/scripts.png\" algin=\"center\"><br><br></div>\n\n<p>配置MySQL数据库</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 复制配置文件</div><div class=\"line\">cp -a ./support-files/my-default.cnf /etc/my.cnf</div><div class=\"line\">// 更改配置文件信息</div><div class=\"line\">vi /etc/my.cnf</div><div class=\"line\">// 加入以下内容</div><div class=\"line\"># These are commonly set, remove the # and set as required.</div><div class=\"line\">basedir = /usr/local/mysql</div><div class=\"line\">datadir = /usr/local/mysql/data</div></pre></td></tr></table></figure>\n<p>修改MySQL密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 启动MySQL</span></div><div class=\"line\">./support-files/mysql.server start</div><div class=\"line\"><span class=\"comment\">// 修改密码</span></div><div class=\"line\">./bin/mysqladmin -u root -h localhost.localdomain password <span class=\"string\">'root'</span></div><div class=\"line\"><span class=\"comment\">// 进入MySQL</span></div><div class=\"line\">./bin/mysql -h127.0.0.1 -uroot -proot</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/start.jpg\" algin=\"center\"><br><br></div>\n\n<p>增加远程登录权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root&apos;;</div><div class=\"line\">flush privileges;</div></pre></td></tr></table></figure>\n<p>将MySQL加入Service系统服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先退出MySQL</span></div><div class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</div><div class=\"line\">chkconfig --add mysqld</div><div class=\"line\">chkconfig mysqld on</div><div class=\"line\">service mysqld restart</div><div class=\"line\">service mysqld status</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/ok.png\" algin=\"center\"><br><br></div>\n\n<p>到这里MySQL就配置完成了，剩下的就是优化MySQL，配置/etc/my.cnf啦！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>重温记录下Linux环境下JDK和MySQL的安装。<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/installing-mysql-on-linux.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"JDK的安装\"><a href=\"#JDK的安装\" class=\"headerlink\" title=\"JDK的安装\"></a>JDK的安装</h1><h2 id=\"下载解压\"><a href=\"#下载解压\" class=\"headerlink\" title=\"下载解压\"></a>下载解压</h2><p>下载JDK压缩包，下载目录：<em><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></em></p>\n<p>解压</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf jdk-8u152-linux-x64.tar.gz</div></pre></td></tr></table></figure>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>以<code>root</code>用户使用以下命令进入配置环境变量的profile文件。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vim /etc/profile</div></pre></td></tr></table></figure>\n<p>在文件末尾加入以下内容并保存（注意修改JDK路径）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># set java environment </div><div class=\"line\">export JAVA_HOME=/usr/soft/jdk1.8.0_152</div><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin</div><div class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div></pre></td></tr></table></figure>\n<p>在命令行使用以下命令使环境变量生效。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div></pre></td></tr></table></figure>\n<h2 id=\"切换JDK版本\"><a href=\"#切换JDK版本\" class=\"headerlink\" title=\"切换JDK版本\"></a>切换JDK版本</h2><p>当Linux中安装多个JDK时切换进行版本切换。</p>\n<p>查看选择所有JDK。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alternatives --config java</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-f.png\" algin=\"center\"/><br><br></div>\n\n<p>给jdk1.8.0_152设置序列号，输入以下命令（注意修改JDK目录）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alternatives --install /usr/bin/java java /usr/soft/jdk1.8.0_152 4</div></pre></td></tr></table></figure>\n<p>输入以下命令，选择JDK对应的数字，切换JDK版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alternatives --config java</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/config-s1.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"MySQL的安装与卸载\"><a href=\"#MySQL的安装与卸载\" class=\"headerlink\" title=\"MySQL的安装与卸载\"></a>MySQL的安装与卸载</h1><h2 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h2><p>从Oracle官方网站下载Linux系统对应的MySQL的yum源包。地址：<em><a href=\"https://dev.mysql.com/downloads/repo/yum/\">https://dev.mysql.com/downloads/repo/yum/</a></em></p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/1.png\" algin=\"center\"/><br><br></div>\n\n<p>把yum源包上传到linux，依次执行以下命令进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum localinstall mysql-community-release-el6-5.noarch.rpm</div><div class=\"line\">yum install mysql-server</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/2.png\" algin=\"center\"/><br><br></div>\n\n<p>安装完成后启动MySQL</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service mysqld start</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/3.png\" algin=\"center\"/><br><br></div>\n\n<p>给root用户设置密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/bin/mysqladmin -u root password &apos;root&apos;</div></pre></td></tr></table></figure>\n<p>进入MySQL后进行远程连接授权</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</div></pre></td></tr></table></figure>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><p>查看MySQL的安装路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">whereis mysql</div></pre></td></tr></table></figure>\n<p>查看mysql的安装包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa|grep mysql</div></pre></td></tr></table></figure>\n<p>卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum remove mysql</div></pre></td></tr></table></figure>\n<p>若卸载不完全，则要逐个卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa|grep mysql</div><div class=\"line\">yum remove mysql-community-release-el6-5.noarch</div><div class=\"line\">yum remove mysql-community-common-5.6.38-2.el6.x86_64</div><div class=\"line\">yum remove mysql-community-libs-5.6.38-2.el6.x86_64</div></pre></td></tr></table></figure>\n<p>删除mysql的数据库文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf /var/lib/mysql/</div></pre></td></tr></table></figure>\n<h2 id=\"安装包离线安装\"><a href=\"#安装包离线安装\" class=\"headerlink\" title=\"安装包离线安装\"></a>安装包离线安装</h2><p>下载MySQL离线安装包：<em><a href=\"https://dev.mysql.com/downloads/mysql/\">https://dev.mysql.com/downloads/mysql/</a></em></p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/download.png\" algin=\"center\"/><br><br></div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv mysql-<span class=\"number\">5.6</span>.38-linux-glibc2.12-x86_64.tar.gz /usr/local/</div><div class=\"line\">cd /usr/local/</div><div class=\"line\"><span class=\"comment\">// 解压MySQL安装包</span></div><div class=\"line\">tar -zxvf  mysql-<span class=\"number\">5.6</span>.38-linux-glibc2.12-x86_64.tar.gz</div><div class=\"line\"><span class=\"comment\">// 重命名</span></div><div class=\"line\">mv mysql-<span class=\"number\">5.6</span>.38-linux-glibc2.12-x86_64 mysql</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/tar.png\" algin=\"center\"/><br><br></div>\n\n<p>检查MySQL组和用户是否存在，如无创建</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/group | grep mysql</div><div class=\"line\">cat /etc/passwd | grep mysql</div><div class=\"line\"><span class=\"comment\">// 如果没有则创建。useradd -r参数表示mysql用户是系统用户，不可用于登录系统</span></div><div class=\"line\">groupadd mysql</div><div class=\"line\">useradd -r -g mysql mysql</div></pre></td></tr></table></figure>\n<p>分配用户和组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd mysql</div><div class=\"line\"><span class=\"comment\">// 更改mysql目录所属的用户(用户为mysql)</span></div><div class=\"line\">chown -R mysql ../mysql/</div><div class=\"line\"><span class=\"comment\">// -R是递归的意思，就是把mysql目录下的全部文件和子目录都设置为mysql用户和mysql组。</span></div><div class=\"line\">chgrp -R mysql ../mysql/</div><div class=\"line\"><span class=\"comment\">// 上面的做法是为了把mysql降权，以限定只能访问属于mysql用户的文件。</span></div></pre></td></tr></table></figure>\n<p> 安装及初始化数据库（创建系统数据库的表）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/scripts.png\" algin=\"center\"/><br><br></div>\n\n<p>配置MySQL数据库</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 复制配置文件</div><div class=\"line\">cp -a ./support-files/my-default.cnf /etc/my.cnf</div><div class=\"line\">// 更改配置文件信息</div><div class=\"line\">vi /etc/my.cnf</div><div class=\"line\">// 加入以下内容</div><div class=\"line\"># These are commonly set, remove the # and set as required.</div><div class=\"line\">basedir = /usr/local/mysql</div><div class=\"line\">datadir = /usr/local/mysql/data</div></pre></td></tr></table></figure>\n<p>修改MySQL密码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 启动MySQL</span></div><div class=\"line\">./support-files/mysql.server start</div><div class=\"line\"><span class=\"comment\">// 修改密码</span></div><div class=\"line\">./bin/mysqladmin -u root -h localhost.localdomain password <span class=\"string\">'root'</span></div><div class=\"line\"><span class=\"comment\">// 进入MySQL</span></div><div class=\"line\">./bin/mysql -h127.0.0.1 -uroot -proot</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/start.jpg\" algin=\"center\"/><br><br></div>\n\n<p>增加远程登录权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root&apos;;</div><div class=\"line\">flush privileges;</div></pre></td></tr></table></figure>\n<p>将MySQL加入Service系统服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 先退出MySQL</span></div><div class=\"line\">cp support-files/mysql.server /etc/init.d/mysqld</div><div class=\"line\">chkconfig --add mysqld</div><div class=\"line\">chkconfig mysqld on</div><div class=\"line\">service mysqld restart</div><div class=\"line\">service mysqld status</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_JDK_MySQL/ok.png\" algin=\"center\"/><br><br></div>\n\n<p>到这里MySQL就配置完成了，剩下的就是优化MySQL，配置/etc/my.cnf啦！</p>"},{"title":"Markdown语法指南","date":"2017-03-21T14:51:10.000Z","_content":"花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div><!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","source":"_posts/Markdown语法.md","raw":"---\ntitle: Markdown语法指南\ndate: 2017-03-21 22:51:10\ntags: [tips]\n---\n花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div><!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","slug":"Markdown语法","published":1,"updated":"2018-03-13T05:51:37.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u0n000x3gfk0naczwl0","content":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\" target=\"_blank\" rel=\"external\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\" target=\"_blank\" rel=\"external\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\" target=\"_blank\" rel=\"external\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\" target=\"_blank\" rel=\"external\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\" target=\"_blank\" rel=\"external\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`<span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span></span> 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span> 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>\n","site":{"data":{}},"excerpt":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>","more":"</p>\n<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`</span><span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span></span> 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span> 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>"},{"title":"Linux基本命令","date":"2017-04-07T07:59:22.000Z","_content":"\n# 引言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/></div><!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n## 基础命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n## crontab定时任务\n\n### 基本使用\n\n通过crontab 命令，可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。\n\n1. crontab文件格式\n\n   分 时 日 月 星期 要运行的命令\n\n- 第1列分钟0～59\n- 第2列小时0～23（0表示子夜）\n- 第3列日1～31\n- 第4列月1～12\n- 第5列星期0～7（0和7表示星期天）\n- 第6列要运行的命令\n\n2. 命令\n\n```shell\n#列出crontab文件\n$ crontab -l\n\n#编辑crontab文件\n$ crontab -e\n\n#删除crontab文件\n$ crontab -r\n```\n\n3. 使用实例\n\n```shell\n# 每1分钟执行一次myCommand\n$ * * * * * myCommand\n\n# 每小时的第3和第15分钟执行\n$ 3,15 * * * * myCommand\n\n# 每晚的21:30重启smb\n$ 30 21 * * * /etc/init.d/smb restart\n\n# 每周六、周日的1 : 10重启smb\n$ 10 1 * * 6,0 /etc/init.d/smb restart\n\n# 每一小时重启smb\n$ * */1 * * * /etc/init.d/smb restart\n```\n\n### 使用实例(定时备份MySQL)\n\n1. 在/usr/soft下新建脚本**mysqlbak.sh**\n\n```shell\n#!/bin/bash\n#备份路径\nBACKUP=/usr/soft/sql\n#当前时间\nDATETIME=$(date +%Y-%m-%d_%H%M%S)\necho \"==备份开始==\"\necho \"备份文件存放于${BACKUP}/$DATETIME.tar.gz\"\n#数据库地址\nHOST=localhost\n#数据库用户名\nDB_USER=root\n#数据库密码\nDB_PW=root\n#创建备份目录\n[ ! -d \"${BACKUP}/$DATETIME\" ] && mkdir -p \"${BACKUP}/$DATETIME\"\n#后台系统数据库\nDATABASE=test\n/usr/bin/mysqldump -u${DB_USER} -p${DB_PW} --host=$HOST -q -R --databases $DATABASE | gzip > ${BACKUP}/$DATETIME/$DATABASE.sql.gz\n\n#压缩成tar.gz包\ncd $BACKUP\ntar -zcvf $DATETIME.tar.gz $DATETIME\n#删除备份目录\nrm -rf ${BACKUP}/$DATETIME\n#删除10天前备份的数据\nfind $BACKUP -mtime +10 -name \"*.tar.gz\" -exec rm -rf {} \\;\necho \"===备份成功===\"\n```\n\n2. 赋予权限\n\n```shell\n$ chmod 777 mysqlbak.sh\n```\n\n3. 添加至定时任务\n\n```shell\n// 编辑定时任务列表\n$ crontab -e\n\n// 加入以下内容\n#每隔一个小时执行一次\n00 */1 * * * /usr/soft/mysqlbak.sh\n```\n\n### 注意\n\n- 新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。\n- 当crontab失效时，可以尝试**service crond restart**解决问题。或者查看日志看某个job有没有执行/报错**tail -f /var/log/cron**。\n- 千万别乱运行**crontab -r**。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。\n- 在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看[***http://www.cnblogs.com/skillup/articles/1877812.html***](http://www.cnblogs.com/skillup/articles/1877812.html)","source":"_posts/Linux基本命令.md","raw":"---\ntitle: Linux基本命令\ndate: 2017-04-07 15:59:22\ntags: [java, tips, linux]\ncategories: technology\n---\n\n# 引言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/></div><!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n## 基础命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n## crontab定时任务\n\n### 基本使用\n\n通过crontab 命令，可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。\n\n1. crontab文件格式\n\n   分 时 日 月 星期 要运行的命令\n\n- 第1列分钟0～59\n- 第2列小时0～23（0表示子夜）\n- 第3列日1～31\n- 第4列月1～12\n- 第5列星期0～7（0和7表示星期天）\n- 第6列要运行的命令\n\n2. 命令\n\n```shell\n#列出crontab文件\n$ crontab -l\n\n#编辑crontab文件\n$ crontab -e\n\n#删除crontab文件\n$ crontab -r\n```\n\n3. 使用实例\n\n```shell\n# 每1分钟执行一次myCommand\n$ * * * * * myCommand\n\n# 每小时的第3和第15分钟执行\n$ 3,15 * * * * myCommand\n\n# 每晚的21:30重启smb\n$ 30 21 * * * /etc/init.d/smb restart\n\n# 每周六、周日的1 : 10重启smb\n$ 10 1 * * 6,0 /etc/init.d/smb restart\n\n# 每一小时重启smb\n$ * */1 * * * /etc/init.d/smb restart\n```\n\n### 使用实例(定时备份MySQL)\n\n1. 在/usr/soft下新建脚本**mysqlbak.sh**\n\n```shell\n#!/bin/bash\n#备份路径\nBACKUP=/usr/soft/sql\n#当前时间\nDATETIME=$(date +%Y-%m-%d_%H%M%S)\necho \"==备份开始==\"\necho \"备份文件存放于${BACKUP}/$DATETIME.tar.gz\"\n#数据库地址\nHOST=localhost\n#数据库用户名\nDB_USER=root\n#数据库密码\nDB_PW=root\n#创建备份目录\n[ ! -d \"${BACKUP}/$DATETIME\" ] && mkdir -p \"${BACKUP}/$DATETIME\"\n#后台系统数据库\nDATABASE=test\n/usr/bin/mysqldump -u${DB_USER} -p${DB_PW} --host=$HOST -q -R --databases $DATABASE | gzip > ${BACKUP}/$DATETIME/$DATABASE.sql.gz\n\n#压缩成tar.gz包\ncd $BACKUP\ntar -zcvf $DATETIME.tar.gz $DATETIME\n#删除备份目录\nrm -rf ${BACKUP}/$DATETIME\n#删除10天前备份的数据\nfind $BACKUP -mtime +10 -name \"*.tar.gz\" -exec rm -rf {} \\;\necho \"===备份成功===\"\n```\n\n2. 赋予权限\n\n```shell\n$ chmod 777 mysqlbak.sh\n```\n\n3. 添加至定时任务\n\n```shell\n// 编辑定时任务列表\n$ crontab -e\n\n// 加入以下内容\n#每隔一个小时执行一次\n00 */1 * * * /usr/soft/mysqlbak.sh\n```\n\n### 注意\n\n- 新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。\n- 当crontab失效时，可以尝试**service crond restart**解决问题。或者查看日志看某个job有没有执行/报错**tail -f /var/log/cron**。\n- 千万别乱运行**crontab -r**。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。\n- 在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看[***http://www.cnblogs.com/skillup/articles/1877812.html***](http://www.cnblogs.com/skillup/articles/1877812.html)","slug":"Linux基本命令","published":1,"updated":"2018-04-04T07:10:25.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u0s00113gfk31ipjmpi","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\" target=\"_blank\" rel=\"external\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\" target=\"_blank\" rel=\"external\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\" target=\"_blank\" rel=\"external\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"crontab定时任务\"><a href=\"#crontab定时任务\" class=\"headerlink\" title=\"crontab定时任务\"></a>crontab定时任务</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>通过crontab 命令，可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p>\n<ol>\n<li><p>crontab文件格式</p>\n<p>分 时 日 月 星期 要运行的命令</p>\n</li>\n</ol>\n<ul>\n<li>第1列分钟0～59</li>\n<li>第2列小时0～23（0表示子夜）</li>\n<li>第3列日1～31</li>\n<li>第4列月1～12</li>\n<li>第5列星期0～7（0和7表示星期天）</li>\n<li>第6列要运行的命令</li>\n</ul>\n<ol>\n<li>命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#列出crontab文件</div><div class=\"line\">$ crontab -l</div><div class=\"line\"></div><div class=\"line\">#编辑crontab文件</div><div class=\"line\">$ crontab -e</div><div class=\"line\"></div><div class=\"line\">#删除crontab文件</div><div class=\"line\">$ crontab -r</div></pre></td></tr></table></figure>\n<ol>\n<li>使用实例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 每1分钟执行一次myCommand</div><div class=\"line\">$ * * * * * myCommand</div><div class=\"line\"></div><div class=\"line\"># 每小时的第3和第15分钟执行</div><div class=\"line\">$ 3,15 * * * * myCommand</div><div class=\"line\"></div><div class=\"line\"># 每晚的21:30重启smb</div><div class=\"line\">$ 30 21 * * * /etc/init.d/smb restart</div><div class=\"line\"></div><div class=\"line\"># 每周六、周日的1 : 10重启smb</div><div class=\"line\">$ 10 1 * * 6,0 /etc/init.d/smb restart</div><div class=\"line\"></div><div class=\"line\"># 每一小时重启smb</div><div class=\"line\">$ * */1 * * * /etc/init.d/smb restart</div></pre></td></tr></table></figure>\n<h3 id=\"使用实例-定时备份MySQL\"><a href=\"#使用实例-定时备份MySQL\" class=\"headerlink\" title=\"使用实例(定时备份MySQL)\"></a>使用实例(定时备份MySQL)</h3><ol>\n<li>在/usr/soft下新建脚本<strong>mysqlbak.sh</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">#备份路径</div><div class=\"line\">BACKUP=/usr/soft/sql</div><div class=\"line\">#当前时间</div><div class=\"line\">DATETIME=$(date +%Y-%m-%d_%H%M%S)</div><div class=\"line\">echo &quot;==备份开始==&quot;</div><div class=\"line\">echo &quot;备份文件存放于$&#123;BACKUP&#125;/$DATETIME.tar.gz&quot;</div><div class=\"line\">#数据库地址</div><div class=\"line\">HOST=localhost</div><div class=\"line\">#数据库用户名</div><div class=\"line\">DB_USER=root</div><div class=\"line\">#数据库密码</div><div class=\"line\">DB_PW=root</div><div class=\"line\">#创建备份目录</div><div class=\"line\">[ ! -d &quot;$&#123;BACKUP&#125;/$DATETIME&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$DATETIME&quot;</div><div class=\"line\">#后台系统数据库</div><div class=\"line\">DATABASE=test</div><div class=\"line\">/usr/bin/mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PW&#125; --host=$HOST -q -R --databases $DATABASE | gzip &gt; $&#123;BACKUP&#125;/$DATETIME/$DATABASE.sql.gz</div><div class=\"line\"></div><div class=\"line\">#压缩成tar.gz包</div><div class=\"line\">cd $BACKUP</div><div class=\"line\">tar -zcvf $DATETIME.tar.gz $DATETIME</div><div class=\"line\">#删除备份目录</div><div class=\"line\">rm -rf $&#123;BACKUP&#125;/$DATETIME</div><div class=\"line\">#删除10天前备份的数据</div><div class=\"line\">find $BACKUP -mtime +10 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \\;</div><div class=\"line\">echo &quot;===备份成功===&quot;</div></pre></td></tr></table></figure>\n<ol>\n<li>赋予权限</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod 777 mysqlbak.sh</div></pre></td></tr></table></figure>\n<ol>\n<li>添加至定时任务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 编辑定时任务列表</div><div class=\"line\">$ crontab -e</div><div class=\"line\"></div><div class=\"line\">// 加入以下内容</div><div class=\"line\">#每隔一个小时执行一次</div><div class=\"line\">00 */1 * * * /usr/soft/mysqlbak.sh</div></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</li>\n<li>当crontab失效时，可以尝试<strong>service crond restart</strong>解决问题。或者查看日志看某个job有没有执行/报错<strong>tail -f /var/log/cron</strong>。</li>\n<li>千万别乱运行<strong>crontab -r</strong>。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</li>\n<li>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。</li>\n</ul>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<a href=\"http://www.cnblogs.com/skillup/articles/1877812.html\" target=\"_blank\" rel=\"external\"><strong><em>http://www.cnblogs.com/skillup/articles/1877812.html</em></strong></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"crontab定时任务\"><a href=\"#crontab定时任务\" class=\"headerlink\" title=\"crontab定时任务\"></a>crontab定时任务</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>通过crontab 命令，可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常适合周期性的日志分析或数据备份等工作。</p>\n<ol>\n<li><p>crontab文件格式</p>\n<p>分 时 日 月 星期 要运行的命令</p>\n</li>\n</ol>\n<ul>\n<li>第1列分钟0～59</li>\n<li>第2列小时0～23（0表示子夜）</li>\n<li>第3列日1～31</li>\n<li>第4列月1～12</li>\n<li>第5列星期0～7（0和7表示星期天）</li>\n<li>第6列要运行的命令</li>\n</ul>\n<ol>\n<li>命令</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#列出crontab文件</div><div class=\"line\">$ crontab -l</div><div class=\"line\"></div><div class=\"line\">#编辑crontab文件</div><div class=\"line\">$ crontab -e</div><div class=\"line\"></div><div class=\"line\">#删除crontab文件</div><div class=\"line\">$ crontab -r</div></pre></td></tr></table></figure>\n<ol>\n<li>使用实例</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 每1分钟执行一次myCommand</div><div class=\"line\">$ * * * * * myCommand</div><div class=\"line\"></div><div class=\"line\"># 每小时的第3和第15分钟执行</div><div class=\"line\">$ 3,15 * * * * myCommand</div><div class=\"line\"></div><div class=\"line\"># 每晚的21:30重启smb</div><div class=\"line\">$ 30 21 * * * /etc/init.d/smb restart</div><div class=\"line\"></div><div class=\"line\"># 每周六、周日的1 : 10重启smb</div><div class=\"line\">$ 10 1 * * 6,0 /etc/init.d/smb restart</div><div class=\"line\"></div><div class=\"line\"># 每一小时重启smb</div><div class=\"line\">$ * */1 * * * /etc/init.d/smb restart</div></pre></td></tr></table></figure>\n<h3 id=\"使用实例-定时备份MySQL\"><a href=\"#使用实例-定时备份MySQL\" class=\"headerlink\" title=\"使用实例(定时备份MySQL)\"></a>使用实例(定时备份MySQL)</h3><ol>\n<li>在/usr/soft下新建脚本<strong>mysqlbak.sh</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">#备份路径</div><div class=\"line\">BACKUP=/usr/soft/sql</div><div class=\"line\">#当前时间</div><div class=\"line\">DATETIME=$(date +%Y-%m-%d_%H%M%S)</div><div class=\"line\">echo &quot;==备份开始==&quot;</div><div class=\"line\">echo &quot;备份文件存放于$&#123;BACKUP&#125;/$DATETIME.tar.gz&quot;</div><div class=\"line\">#数据库地址</div><div class=\"line\">HOST=localhost</div><div class=\"line\">#数据库用户名</div><div class=\"line\">DB_USER=root</div><div class=\"line\">#数据库密码</div><div class=\"line\">DB_PW=root</div><div class=\"line\">#创建备份目录</div><div class=\"line\">[ ! -d &quot;$&#123;BACKUP&#125;/$DATETIME&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$DATETIME&quot;</div><div class=\"line\">#后台系统数据库</div><div class=\"line\">DATABASE=test</div><div class=\"line\">/usr/bin/mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PW&#125; --host=$HOST -q -R --databases $DATABASE | gzip &gt; $&#123;BACKUP&#125;/$DATETIME/$DATABASE.sql.gz</div><div class=\"line\"></div><div class=\"line\">#压缩成tar.gz包</div><div class=\"line\">cd $BACKUP</div><div class=\"line\">tar -zcvf $DATETIME.tar.gz $DATETIME</div><div class=\"line\">#删除备份目录</div><div class=\"line\">rm -rf $&#123;BACKUP&#125;/$DATETIME</div><div class=\"line\">#删除10天前备份的数据</div><div class=\"line\">find $BACKUP -mtime +10 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \\;</div><div class=\"line\">echo &quot;===备份成功===&quot;</div></pre></td></tr></table></figure>\n<ol>\n<li>赋予权限</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chmod 777 mysqlbak.sh</div></pre></td></tr></table></figure>\n<ol>\n<li>添加至定时任务</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 编辑定时任务列表</div><div class=\"line\">$ crontab -e</div><div class=\"line\"></div><div class=\"line\">// 加入以下内容</div><div class=\"line\">#每隔一个小时执行一次</div><div class=\"line\">00 */1 * * * /usr/soft/mysqlbak.sh</div></pre></td></tr></table></figure>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</li>\n<li>当crontab失效时，可以尝试<strong>service crond restart</strong>解决问题。或者查看日志看某个job有没有执行/报错<strong>tail -f /var/log/cron</strong>。</li>\n<li>千万别乱运行<strong>crontab -r</strong>。它从Crontab目录（/var/spool/cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</li>\n<li>在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。</li>\n</ul>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<a href=\"http://www.cnblogs.com/skillup/articles/1877812.html\"><strong><em>http://www.cnblogs.com/skillup/articles/1877812.html</em></strong></a></p>"},{"title":"MySQL主从/主主复制","date":"2018-04-17T05:43:00.000Z","_content":"\n# 前言\n\nMySQL作为世界上最广泛的数据库之一，免费是原因之一，其本身功能的强大也是获得众多用的青睐的重要原因。在实际的生产环境中，单机版MySQL数据库就不能满足实际的需求了，此时数据库集群就很好的解决了这个问题了。采用MySQL分布式集群，能够搭建一个高并发、负载均衡的集群服务器。在此之前必须要保证每台MySQL服务器里的数据同步。数据同步可以通过MySQL内部配置就可以轻松完成，主要有**主从复制**和**主主复制**。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/index.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n在本案例下使用同一台机器安装两个数据库，只是端口不一致，一个为3306，一个为3308。\n\n# 复制原理\n\n1. Master将数据改变记录到二进制日志(binary log)中，也就是配置文件log-bin指定的文件，这些记录叫做二进制日志事件(binary log events) 。\n2. Slave通过I/O线程读取Master中的binary log events并写入到它的中继日志(relay log) 。\n3. Slave重做中继日志中的事件，把中继日志中的事件信息一条一条的在本地执行一次，完成数据在本地的存储，从而实现将改变反映到它自己的数据(数据重放)。\n\n# 复制类型\n\n 1、**基于语句的复制(statement)**\n\n> 在Master上执行的SQL语句，在Slave上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。\n\n 2、**基于行的复制(row)**\n\n> 把改变的内容复制到Slave，而不是把命令在Slave上执行一遍。从MySQL5.0开始支持。\n\n 3、**混合类型的复制(mixed)**\n\n> 默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。\n\n# 要求\n\n- 文件${mysql}/data/auto.cnf里server-uuid不能重复。\n- 主从服务器操作系统版本和位数一致。\n\n\n- Master和Slave数据库的版本要一致。\n\n\n- Master和Slave数据库中的数据要一致。\n\n\n- Master开启二进制日志，Master和Slave的server_id在局域网内必须唯一。\n\n# 主从复制\n\n主从复制能保证主SQL（Master）和从SQL（Slave）的数据是一致性的，向Master插入数据后，Slave会自动从Master把修改的数据同步过来（有一定的延迟），通过这种方式来保证数据的一致性，主从复制**基于日志(binlog)**。\n\n主从复制可解决：\n\n- **高可用**\n\n因为数据都是相同的，所以当Master挂掉后，可以指定一台Slave充当Master继续保证服务运行，因为数据是一致性的（如果当插入Master就挂掉，可能不一致，因为同步也需要时间）。\n\n- **负载均衡**\n\n因为读写分离也算是负载均衡的一种，一般都是有多台Slave的，所以可以将读操作指定到Slave服务器上（需要代码控制），然后再用负载均衡来选择那台Slave来提供服务，同时也可以吧一些大量计算的查询指定到某台Slave，这样就不会影响Master的写入以及其他查询。\n\n- **数据备份**\n\n一般我们都会做数据备份，可能是写定时任务，一些特殊行业可能还需要手动备份，有些行业要求备份和原数据不能在同一个地方，所以主从就能很好的解决这个问题，不仅备份及时，而且还可以多地备份，保证数据的安全。\n\n- **业务模块化**\n\n可以一个业务模块读取一个Slave，再针对不同的业务场景进行数据库的索引创建和根据业务选择MySQL存储引擎。\n\n## 配置Master\n\n### 配置my.cnf\n\nLinux下MySQL配置文件为my.cnf，windows下为my.ini。在Master添加以下配置：\n\n```sh\n[mysqld]\n## 设置server_id，一般设置为IP,注意要唯一\nserver_id=1\n## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）\nlog-bin=mysql-bin\n## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存\nbinlog_cache_size=1M\n## 主从复制的格式（mixed,statement,row，默认格式是statement）\nbinlog_format=mixed\n## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。\nexpire_logs_days=7\n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062\n```\n\n配置完成后重启MySQL。\n\n### 创建数据同步用户\n\n```sql\n-- -- 用户名：slave，密码：slave\nCREATE USER 'slave'@'%' IDENTIFIED BY 'slave';\n-- 授予用户REPLICATION SLAVE权限和REPLICATION CLIENT权限\nGRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';  \n```\n\n## 配置Slave\n\nLinux下MySQL配置文件为my.cnf，windows下为my.ini。在Slave添加以下配置：\n\n```sh\n[mysqld]\n## 设置server_id，一般设置为IP,注意要唯一\nserver_id \n## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用\nlog-bin=mysql-slave1-bin\n## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存\nbinlog_cache_size=1M\n## 主从复制的格式（mixed,statement,row，默认格式是statement）\nbinlog_format=mixed\n## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。\nexpire_logs_days=7\n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062\n## relay_log配置中继日志\nrelay_log=mysql-relay-bin  \n## log_slave_updates表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1\n## 防止改变数据(除了特殊的线程)\nread_only=1\n```\n\n**如果Slave为其它Slave的Master时，必须设置bin_log**。配置完成后重启MySQL。\n\n## 连接Master和Slave\n\n### 查询Master状态\n\n在master中执行\n\n```sql\nSHOW MASTER STATUS;\n```\n\n记录下返回结果的**File列和Position列**的值。\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_status.png\" algin=\"center\"/></div>\n\n### 在Slave中设置Master信息\n\n在slave中执行\n\n```sql\nCHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_USER='slave', MASTER_PASSWORD='slave', MASTER_PORT=3306, MASTER_LOG_FILE='mysql-bin.000014', MASTER_LOG_POS=1122, MASTER_CONNECT_RETRY=30;\n-- master_host='127.0.0.1' ## Master的IP地址\n-- master_user='slave' ## 用于同步数据的用户（在Master中授权的用户）\n-- master_password='slave' ## 同步数据用户的密码\n-- master_port=3306 ## Master数据库服务的端口\n-- master_log_file='mysql-bin.000014' ##指定Slave从哪个日志文件开始读复制数据（Master上执行命令的结果的File字段）\n-- master_log_pos=1122 ## 从哪个POSITION号开始读（Master上执行命令的结果的Position字段）\n-- masterconnectretry=30 ##当重新建立主从连接时，如果连接建立失败，间隔多久后重试。单位为秒，默认设置为60秒，同步延迟调优参数。\n```\n\n### 查看主从同步状态\n\n```sql\nSHOW SLAVE STATUS;\n```\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_notok.png\" algin=\"center\"/></div>\n\n可看到Slave_IO_State为空， Slave_IO_Running和Slave_SQL_Running是No，表明Slave还没有开始复制过程。相反Slave_IO_Running和Slave_SQL_Running是Yes表明已经开始工作了。\n\n### 开启/关闭主从\n\n在slave中执行\n\n```sql\n-- 停止主从\nSTOP SLAVE;\n-- 开启主从\nSTART SLAVE;\n```\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_ok.png\" algin=\"center\"/></div>\n\n查询查看主从同步状态，会发现**Slave_IO_Running和Slave_SQL_Running是Yes**了，表明开启成功。\n\n# 主主复制\n\n主主复制即在两台MySQL主机内都可以变更数据，而且另外一台主机也会做出相应的变更。其实现就是将两个主从复制有机合并起来就好了。只不过在配置的时候我们需要注意一些问题，例如，主键重复，server-id不能重复等等。\n\n## 配置Master\n\n接上一案例，在上一案例中的Slave中执行\n\n```sql\n-- 用户名：slave1，密码：slave1\nGRANT REPLICATION SLAVE ON *.* TO 'slave1'@'%' IDENTIFIED BY 'slave1';\nFLUSH PRIVILEGES;\nSHOW MASTER STATUS;\n```\n\n同样记录下返回结果的**File列和Position列**的值。\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/2-1.png\" algin=\"center\"/></div>\n\n## 配置Slave\n\n在上一案例中的Master中执行\n\n```sql\nCHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_USER='slave1', MASTER_PASSWORD='slave1', MASTER_PORT=3308, MASTER_LOG_FILE='mysql-bin.000017', MASTER_LOG_POS=1860, MASTER_CONNECT_RETRY=30;\n```\n\n分别开启 **START SLAVE;**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_1.jpg\" algin=\"center\"/></div>\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_2.png\" algin=\"center\"/></div>\n\n**当且仅当两个数据库Slave_IO_Running和Slave_SQL_Running都为 YES才表明状态正常。**\n\n## 注意\n\n- 主主复制只能保证主键不重复，却不能保证主键有序。\n- 当配置完成**Slave_IO_Running、Slave_SQL_Running不全为YES**时，show slave status\\G信息中有错误提示，可根据错误提示进行更正。\n- Slave_IO_Running、Slave_SQL_Running不全为YES时，大多数问题都是数据不统一导致。","source":"_posts/MySQL主从复制.md","raw":"---\ntitle: MySQL主从/主主复制\ndate: 2018-04-17 13:43:00\ntags: [mysql]\ncategories: technology\n---\n\n# 前言\n\nMySQL作为世界上最广泛的数据库之一，免费是原因之一，其本身功能的强大也是获得众多用的青睐的重要原因。在实际的生产环境中，单机版MySQL数据库就不能满足实际的需求了，此时数据库集群就很好的解决了这个问题了。采用MySQL分布式集群，能够搭建一个高并发、负载均衡的集群服务器。在此之前必须要保证每台MySQL服务器里的数据同步。数据同步可以通过MySQL内部配置就可以轻松完成，主要有**主从复制**和**主主复制**。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/index.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n在本案例下使用同一台机器安装两个数据库，只是端口不一致，一个为3306，一个为3308。\n\n# 复制原理\n\n1. Master将数据改变记录到二进制日志(binary log)中，也就是配置文件log-bin指定的文件，这些记录叫做二进制日志事件(binary log events) 。\n2. Slave通过I/O线程读取Master中的binary log events并写入到它的中继日志(relay log) 。\n3. Slave重做中继日志中的事件，把中继日志中的事件信息一条一条的在本地执行一次，完成数据在本地的存储，从而实现将改变反映到它自己的数据(数据重放)。\n\n# 复制类型\n\n 1、**基于语句的复制(statement)**\n\n> 在Master上执行的SQL语句，在Slave上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。\n\n 2、**基于行的复制(row)**\n\n> 把改变的内容复制到Slave，而不是把命令在Slave上执行一遍。从MySQL5.0开始支持。\n\n 3、**混合类型的复制(mixed)**\n\n> 默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。\n\n# 要求\n\n- 文件${mysql}/data/auto.cnf里server-uuid不能重复。\n- 主从服务器操作系统版本和位数一致。\n\n\n- Master和Slave数据库的版本要一致。\n\n\n- Master和Slave数据库中的数据要一致。\n\n\n- Master开启二进制日志，Master和Slave的server_id在局域网内必须唯一。\n\n# 主从复制\n\n主从复制能保证主SQL（Master）和从SQL（Slave）的数据是一致性的，向Master插入数据后，Slave会自动从Master把修改的数据同步过来（有一定的延迟），通过这种方式来保证数据的一致性，主从复制**基于日志(binlog)**。\n\n主从复制可解决：\n\n- **高可用**\n\n因为数据都是相同的，所以当Master挂掉后，可以指定一台Slave充当Master继续保证服务运行，因为数据是一致性的（如果当插入Master就挂掉，可能不一致，因为同步也需要时间）。\n\n- **负载均衡**\n\n因为读写分离也算是负载均衡的一种，一般都是有多台Slave的，所以可以将读操作指定到Slave服务器上（需要代码控制），然后再用负载均衡来选择那台Slave来提供服务，同时也可以吧一些大量计算的查询指定到某台Slave，这样就不会影响Master的写入以及其他查询。\n\n- **数据备份**\n\n一般我们都会做数据备份，可能是写定时任务，一些特殊行业可能还需要手动备份，有些行业要求备份和原数据不能在同一个地方，所以主从就能很好的解决这个问题，不仅备份及时，而且还可以多地备份，保证数据的安全。\n\n- **业务模块化**\n\n可以一个业务模块读取一个Slave，再针对不同的业务场景进行数据库的索引创建和根据业务选择MySQL存储引擎。\n\n## 配置Master\n\n### 配置my.cnf\n\nLinux下MySQL配置文件为my.cnf，windows下为my.ini。在Master添加以下配置：\n\n```sh\n[mysqld]\n## 设置server_id，一般设置为IP,注意要唯一\nserver_id=1\n## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）\nlog-bin=mysql-bin\n## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存\nbinlog_cache_size=1M\n## 主从复制的格式（mixed,statement,row，默认格式是statement）\nbinlog_format=mixed\n## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。\nexpire_logs_days=7\n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062\n```\n\n配置完成后重启MySQL。\n\n### 创建数据同步用户\n\n```sql\n-- -- 用户名：slave，密码：slave\nCREATE USER 'slave'@'%' IDENTIFIED BY 'slave';\n-- 授予用户REPLICATION SLAVE权限和REPLICATION CLIENT权限\nGRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';  \n```\n\n## 配置Slave\n\nLinux下MySQL配置文件为my.cnf，windows下为my.ini。在Slave添加以下配置：\n\n```sh\n[mysqld]\n## 设置server_id，一般设置为IP,注意要唯一\nserver_id \n## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）\nbinlog-ignore-db=mysql\n## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用\nlog-bin=mysql-slave1-bin\n## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存\nbinlog_cache_size=1M\n## 主从复制的格式（mixed,statement,row，默认格式是statement）\nbinlog_format=mixed\n## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。\nexpire_logs_days=7\n## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。\n## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致\nslave_skip_errors=1062\n## relay_log配置中继日志\nrelay_log=mysql-relay-bin  \n## log_slave_updates表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1\n## 防止改变数据(除了特殊的线程)\nread_only=1\n```\n\n**如果Slave为其它Slave的Master时，必须设置bin_log**。配置完成后重启MySQL。\n\n## 连接Master和Slave\n\n### 查询Master状态\n\n在master中执行\n\n```sql\nSHOW MASTER STATUS;\n```\n\n记录下返回结果的**File列和Position列**的值。\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_status.png\" algin=\"center\"/></div>\n\n### 在Slave中设置Master信息\n\n在slave中执行\n\n```sql\nCHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_USER='slave', MASTER_PASSWORD='slave', MASTER_PORT=3306, MASTER_LOG_FILE='mysql-bin.000014', MASTER_LOG_POS=1122, MASTER_CONNECT_RETRY=30;\n-- master_host='127.0.0.1' ## Master的IP地址\n-- master_user='slave' ## 用于同步数据的用户（在Master中授权的用户）\n-- master_password='slave' ## 同步数据用户的密码\n-- master_port=3306 ## Master数据库服务的端口\n-- master_log_file='mysql-bin.000014' ##指定Slave从哪个日志文件开始读复制数据（Master上执行命令的结果的File字段）\n-- master_log_pos=1122 ## 从哪个POSITION号开始读（Master上执行命令的结果的Position字段）\n-- masterconnectretry=30 ##当重新建立主从连接时，如果连接建立失败，间隔多久后重试。单位为秒，默认设置为60秒，同步延迟调优参数。\n```\n\n### 查看主从同步状态\n\n```sql\nSHOW SLAVE STATUS;\n```\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_notok.png\" algin=\"center\"/></div>\n\n可看到Slave_IO_State为空， Slave_IO_Running和Slave_SQL_Running是No，表明Slave还没有开始复制过程。相反Slave_IO_Running和Slave_SQL_Running是Yes表明已经开始工作了。\n\n### 开启/关闭主从\n\n在slave中执行\n\n```sql\n-- 停止主从\nSTOP SLAVE;\n-- 开启主从\nSTART SLAVE;\n```\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_ok.png\" algin=\"center\"/></div>\n\n查询查看主从同步状态，会发现**Slave_IO_Running和Slave_SQL_Running是Yes**了，表明开启成功。\n\n# 主主复制\n\n主主复制即在两台MySQL主机内都可以变更数据，而且另外一台主机也会做出相应的变更。其实现就是将两个主从复制有机合并起来就好了。只不过在配置的时候我们需要注意一些问题，例如，主键重复，server-id不能重复等等。\n\n## 配置Master\n\n接上一案例，在上一案例中的Slave中执行\n\n```sql\n-- 用户名：slave1，密码：slave1\nGRANT REPLICATION SLAVE ON *.* TO 'slave1'@'%' IDENTIFIED BY 'slave1';\nFLUSH PRIVILEGES;\nSHOW MASTER STATUS;\n```\n\n同样记录下返回结果的**File列和Position列**的值。\n\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/2-1.png\" algin=\"center\"/></div>\n\n## 配置Slave\n\n在上一案例中的Master中执行\n\n```sql\nCHANGE MASTER TO MASTER_HOST='127.0.0.1', MASTER_USER='slave1', MASTER_PASSWORD='slave1', MASTER_PORT=3308, MASTER_LOG_FILE='mysql-bin.000017', MASTER_LOG_POS=1860, MASTER_CONNECT_RETRY=30;\n```\n\n分别开启 **START SLAVE;**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_1.jpg\" algin=\"center\"/></div>\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_2.png\" algin=\"center\"/></div>\n\n**当且仅当两个数据库Slave_IO_Running和Slave_SQL_Running都为 YES才表明状态正常。**\n\n## 注意\n\n- 主主复制只能保证主键不重复，却不能保证主键有序。\n- 当配置完成**Slave_IO_Running、Slave_SQL_Running不全为YES**时，show slave status\\G信息中有错误提示，可根据错误提示进行更正。\n- Slave_IO_Running、Slave_SQL_Running不全为YES时，大多数问题都是数据不统一导致。","slug":"MySQL主从复制","published":1,"updated":"2018-04-27T06:10:36.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u0v00143gfk19lee02z","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>MySQL作为世界上最广泛的数据库之一，免费是原因之一，其本身功能的强大也是获得众多用的青睐的重要原因。在实际的生产环境中，单机版MySQL数据库就不能满足实际的需求了，此时数据库集群就很好的解决了这个问题了。采用MySQL分布式集群，能够搭建一个高并发、负载均衡的集群服务器。在此之前必须要保证每台MySQL服务器里的数据同步。数据同步可以通过MySQL内部配置就可以轻松完成，主要有<strong>主从复制</strong>和<strong>主主复制</strong>。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/index.jpg\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<p>在本案例下使用同一台机器安装两个数据库，只是端口不一致，一个为3306，一个为3308。</p>\n<h1 id=\"复制原理\"><a href=\"#复制原理\" class=\"headerlink\" title=\"复制原理\"></a>复制原理</h1><ol>\n<li>Master将数据改变记录到二进制日志(binary log)中，也就是配置文件log-bin指定的文件，这些记录叫做二进制日志事件(binary log events) 。</li>\n<li>Slave通过I/O线程读取Master中的binary log events并写入到它的中继日志(relay log) 。</li>\n<li>Slave重做中继日志中的事件，把中继日志中的事件信息一条一条的在本地执行一次，完成数据在本地的存储，从而实现将改变反映到它自己的数据(数据重放)。</li>\n</ol>\n<h1 id=\"复制类型\"><a href=\"#复制类型\" class=\"headerlink\" title=\"复制类型\"></a>复制类型</h1><p> 1、<strong>基于语句的复制(statement)</strong></p>\n<blockquote>\n<p>在Master上执行的SQL语句，在Slave上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。</p>\n</blockquote>\n<p> 2、<strong>基于行的复制(row)</strong></p>\n<blockquote>\n<p>把改变的内容复制到Slave，而不是把命令在Slave上执行一遍。从MySQL5.0开始支持。</p>\n</blockquote>\n<p> 3、<strong>混合类型的复制(mixed)</strong></p>\n<blockquote>\n<p>默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</p>\n</blockquote>\n<h1 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h1><ul>\n<li>文件${mysql}/data/auto.cnf里server-uuid不能重复。</li>\n<li>主从服务器操作系统版本和位数一致。</li>\n</ul>\n<ul>\n<li>Master和Slave数据库的版本要一致。</li>\n</ul>\n<ul>\n<li>Master和Slave数据库中的数据要一致。</li>\n</ul>\n<ul>\n<li>Master开启二进制日志，Master和Slave的server_id在局域网内必须唯一。</li>\n</ul>\n<h1 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h1><p>主从复制能保证主SQL（Master）和从SQL（Slave）的数据是一致性的，向Master插入数据后，Slave会自动从Master把修改的数据同步过来（有一定的延迟），通过这种方式来保证数据的一致性，主从复制<strong>基于日志(binlog)</strong>。</p>\n<p>主从复制可解决：</p>\n<ul>\n<li><strong>高可用</strong></li>\n</ul>\n<p>因为数据都是相同的，所以当Master挂掉后，可以指定一台Slave充当Master继续保证服务运行，因为数据是一致性的（如果当插入Master就挂掉，可能不一致，因为同步也需要时间）。</p>\n<ul>\n<li><strong>负载均衡</strong></li>\n</ul>\n<p>因为读写分离也算是负载均衡的一种，一般都是有多台Slave的，所以可以将读操作指定到Slave服务器上（需要代码控制），然后再用负载均衡来选择那台Slave来提供服务，同时也可以吧一些大量计算的查询指定到某台Slave，这样就不会影响Master的写入以及其他查询。</p>\n<ul>\n<li><strong>数据备份</strong></li>\n</ul>\n<p>一般我们都会做数据备份，可能是写定时任务，一些特殊行业可能还需要手动备份，有些行业要求备份和原数据不能在同一个地方，所以主从就能很好的解决这个问题，不仅备份及时，而且还可以多地备份，保证数据的安全。</p>\n<ul>\n<li><strong>业务模块化</strong></li>\n</ul>\n<p>可以一个业务模块读取一个Slave，再针对不同的业务场景进行数据库的索引创建和根据业务选择MySQL存储引擎。</p>\n<h2 id=\"配置Master\"><a href=\"#配置Master\" class=\"headerlink\" title=\"配置Master\"></a>配置Master</h2><h3 id=\"配置my-cnf\"><a href=\"#配置my-cnf\" class=\"headerlink\" title=\"配置my.cnf\"></a>配置my.cnf</h3><p>Linux下MySQL配置文件为my.cnf，windows下为my.ini。在Master添加以下配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\"><span class=\"comment\">## 设置server_id，一般设置为IP,注意要唯一</span></div><div class=\"line\">server_id=1</div><div class=\"line\"><span class=\"comment\">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></div><div class=\"line\">binlog-ignore-db=mysql</div><div class=\"line\"><span class=\"comment\">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span></div><div class=\"line\"><span class=\"built_in\">log</span>-bin=mysql-bin</div><div class=\"line\"><span class=\"comment\">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></div><div class=\"line\">binlog_cache_size=1M</div><div class=\"line\"><span class=\"comment\">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></div><div class=\"line\">binlog_format=mixed</div><div class=\"line\"><span class=\"comment\">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></div><div class=\"line\">expire_logs_days=7</div><div class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></div><div class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></div><div class=\"line\">slave_skip_errors=1062</div></pre></td></tr></table></figure>\n<p>配置完成后重启MySQL。</p>\n<h3 id=\"创建数据同步用户\"><a href=\"#创建数据同步用户\" class=\"headerlink\" title=\"创建数据同步用户\"></a>创建数据同步用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- -- 用户名：slave，密码：slave</span></div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'slave'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'slave'</span>;</div><div class=\"line\"><span class=\"comment\">-- 授予用户REPLICATION SLAVE权限和REPLICATION CLIENT权限</span></div><div class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span>, <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">CLIENT</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'slave'</span>@<span class=\"string\">'%'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"配置Slave\"><a href=\"#配置Slave\" class=\"headerlink\" title=\"配置Slave\"></a>配置Slave</h2><p>Linux下MySQL配置文件为my.cnf，windows下为my.ini。在Slave添加以下配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\"><span class=\"comment\">## 设置server_id，一般设置为IP,注意要唯一</span></div><div class=\"line\">server_id </div><div class=\"line\"><span class=\"comment\">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></div><div class=\"line\">binlog-ignore-db=mysql</div><div class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></div><div class=\"line\"><span class=\"built_in\">log</span>-bin=mysql-slave1-bin</div><div class=\"line\"><span class=\"comment\">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></div><div class=\"line\">binlog_cache_size=1M</div><div class=\"line\"><span class=\"comment\">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></div><div class=\"line\">binlog_format=mixed</div><div class=\"line\"><span class=\"comment\">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></div><div class=\"line\">expire_logs_days=7</div><div class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></div><div class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></div><div class=\"line\">slave_skip_errors=1062</div><div class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></div><div class=\"line\">relay_log=mysql-relay-bin  </div><div class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></div><div class=\"line\">log_slave_updates=1</div><div class=\"line\"><span class=\"comment\">## 防止改变数据(除了特殊的线程)</span></div><div class=\"line\">read_only=1</div></pre></td></tr></table></figure>\n<p><strong>如果Slave为其它Slave的Master时，必须设置bin_log</strong>。配置完成后重启MySQL。</p>\n<h2 id=\"连接Master和Slave\"><a href=\"#连接Master和Slave\" class=\"headerlink\" title=\"连接Master和Slave\"></a>连接Master和Slave</h2><h3 id=\"查询Master状态\"><a href=\"#查询Master状态\" class=\"headerlink\" title=\"查询Master状态\"></a>查询Master状态</h3><p>在master中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">STATUS</span>;</div></pre></td></tr></table></figure>\n<p>记录下返回结果的<strong>File列和Position列</strong>的值。</p>\n<div align=\"center\"><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_status.png\" algin=\"center\"></div>\n\n<h3 id=\"在Slave中设置Master信息\"><a href=\"#在Slave中设置Master信息\" class=\"headerlink\" title=\"在Slave中设置Master信息\"></a>在Slave中设置Master信息</h3><p>在slave中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CHANGE</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">TO</span> MASTER_HOST=<span class=\"string\">'127.0.0.1'</span>, MASTER_USER=<span class=\"string\">'slave'</span>, MASTER_PASSWORD=<span class=\"string\">'slave'</span>, MASTER_PORT=<span class=\"number\">3306</span>, MASTER_LOG_FILE=<span class=\"string\">'mysql-bin.000014'</span>, MASTER_LOG_POS=<span class=\"number\">1122</span>, MASTER_CONNECT_RETRY=<span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"comment\">-- master_host='127.0.0.1' ## Master的IP地址</span></div><div class=\"line\"><span class=\"comment\">-- master_user='slave' ## 用于同步数据的用户（在Master中授权的用户）</span></div><div class=\"line\"><span class=\"comment\">-- master_password='slave' ## 同步数据用户的密码</span></div><div class=\"line\"><span class=\"comment\">-- master_port=3306 ## Master数据库服务的端口</span></div><div class=\"line\"><span class=\"comment\">-- master_log_file='mysql-bin.000014' ##指定Slave从哪个日志文件开始读复制数据（Master上执行命令的结果的File字段）</span></div><div class=\"line\"><span class=\"comment\">-- master_log_pos=1122 ## 从哪个POSITION号开始读（Master上执行命令的结果的Position字段）</span></div><div class=\"line\"><span class=\"comment\">-- masterconnectretry=30 ##当重新建立主从连接时，如果连接建立失败，间隔多久后重试。单位为秒，默认设置为60秒，同步延迟调优参数。</span></div></pre></td></tr></table></figure>\n<h3 id=\"查看主从同步状态\"><a href=\"#查看主从同步状态\" class=\"headerlink\" title=\"查看主从同步状态\"></a>查看主从同步状态</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">STATUS</span>;</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_notok.png\" algin=\"center\"></div>\n\n<p>可看到Slave_IO_State为空， Slave_IO_Running和Slave_SQL_Running是No，表明Slave还没有开始复制过程。相反Slave_IO_Running和Slave_SQL_Running是Yes表明已经开始工作了。</p>\n<h3 id=\"开启-关闭主从\"><a href=\"#开启-关闭主从\" class=\"headerlink\" title=\"开启/关闭主从\"></a>开启/关闭主从</h3><p>在slave中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 停止主从</span></div><div class=\"line\"><span class=\"keyword\">STOP</span> <span class=\"keyword\">SLAVE</span>;</div><div class=\"line\"><span class=\"comment\">-- 开启主从</span></div><div class=\"line\"><span class=\"keyword\">START</span> <span class=\"keyword\">SLAVE</span>;</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_ok.png\" algin=\"center\"></div>\n\n<p>查询查看主从同步状态，会发现<strong>Slave_IO_Running和Slave_SQL_Running是Yes</strong>了，表明开启成功。</p>\n<h1 id=\"主主复制\"><a href=\"#主主复制\" class=\"headerlink\" title=\"主主复制\"></a>主主复制</h1><p>主主复制即在两台MySQL主机内都可以变更数据，而且另外一台主机也会做出相应的变更。其实现就是将两个主从复制有机合并起来就好了。只不过在配置的时候我们需要注意一些问题，例如，主键重复，server-id不能重复等等。</p>\n<h2 id=\"配置Master-1\"><a href=\"#配置Master-1\" class=\"headerlink\" title=\"配置Master\"></a>配置Master</h2><p>接上一案例，在上一案例中的Slave中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 用户名：slave1，密码：slave1</span></div><div class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'slave1'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'slave1'</span>;</div><div class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</div><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">STATUS</span>;</div></pre></td></tr></table></figure>\n<p>同样记录下返回结果的<strong>File列和Position列</strong>的值。</p>\n<div align=\"center\"><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/2-1.png\" algin=\"center\"></div>\n\n<h2 id=\"配置Slave-1\"><a href=\"#配置Slave-1\" class=\"headerlink\" title=\"配置Slave\"></a>配置Slave</h2><p>在上一案例中的Master中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CHANGE</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">TO</span> MASTER_HOST=<span class=\"string\">'127.0.0.1'</span>, MASTER_USER=<span class=\"string\">'slave1'</span>, MASTER_PASSWORD=<span class=\"string\">'slave1'</span>, MASTER_PORT=<span class=\"number\">3308</span>, MASTER_LOG_FILE=<span class=\"string\">'mysql-bin.000017'</span>, MASTER_LOG_POS=<span class=\"number\">1860</span>, MASTER_CONNECT_RETRY=<span class=\"number\">30</span>;</div></pre></td></tr></table></figure>\n<p>分别开启 <strong>START SLAVE;</strong></p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_1.jpg\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_2.png\" algin=\"center\"></div>\n\n<p><strong>当且仅当两个数据库Slave_IO_Running和Slave_SQL_Running都为 YES才表明状态正常。</strong></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>主主复制只能保证主键不重复，却不能保证主键有序。</li>\n<li>当配置完成<strong>Slave_IO_Running、Slave_SQL_Running不全为YES</strong>时，show slave status\\G信息中有错误提示，可根据错误提示进行更正。</li>\n<li>Slave_IO_Running、Slave_SQL_Running不全为YES时，大多数问题都是数据不统一导致。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>MySQL作为世界上最广泛的数据库之一，免费是原因之一，其本身功能的强大也是获得众多用的青睐的重要原因。在实际的生产环境中，单机版MySQL数据库就不能满足实际的需求了，此时数据库集群就很好的解决了这个问题了。采用MySQL分布式集群，能够搭建一个高并发、负载均衡的集群服务器。在此之前必须要保证每台MySQL服务器里的数据同步。数据同步可以通过MySQL内部配置就可以轻松完成，主要有<strong>主从复制</strong>和<strong>主主复制</strong>。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/index.jpg\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<p>在本案例下使用同一台机器安装两个数据库，只是端口不一致，一个为3306，一个为3308。</p>\n<h1 id=\"复制原理\"><a href=\"#复制原理\" class=\"headerlink\" title=\"复制原理\"></a>复制原理</h1><ol>\n<li>Master将数据改变记录到二进制日志(binary log)中，也就是配置文件log-bin指定的文件，这些记录叫做二进制日志事件(binary log events) 。</li>\n<li>Slave通过I/O线程读取Master中的binary log events并写入到它的中继日志(relay log) 。</li>\n<li>Slave重做中继日志中的事件，把中继日志中的事件信息一条一条的在本地执行一次，完成数据在本地的存储，从而实现将改变反映到它自己的数据(数据重放)。</li>\n</ol>\n<h1 id=\"复制类型\"><a href=\"#复制类型\" class=\"headerlink\" title=\"复制类型\"></a>复制类型</h1><p> 1、<strong>基于语句的复制(statement)</strong></p>\n<blockquote>\n<p>在Master上执行的SQL语句，在Slave上执行同样的语句。MySQL默认采用基于语句的复制，效率比较高。</p>\n</blockquote>\n<p> 2、<strong>基于行的复制(row)</strong></p>\n<blockquote>\n<p>把改变的内容复制到Slave，而不是把命令在Slave上执行一遍。从MySQL5.0开始支持。</p>\n</blockquote>\n<p> 3、<strong>混合类型的复制(mixed)</strong></p>\n<blockquote>\n<p>默认采用基于语句的复制，一旦发现基于语句的无法精确的复制时，就会采用基于行的复制。</p>\n</blockquote>\n<h1 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h1><ul>\n<li>文件${mysql}/data/auto.cnf里server-uuid不能重复。</li>\n<li>主从服务器操作系统版本和位数一致。</li>\n</ul>\n<ul>\n<li>Master和Slave数据库的版本要一致。</li>\n</ul>\n<ul>\n<li>Master和Slave数据库中的数据要一致。</li>\n</ul>\n<ul>\n<li>Master开启二进制日志，Master和Slave的server_id在局域网内必须唯一。</li>\n</ul>\n<h1 id=\"主从复制\"><a href=\"#主从复制\" class=\"headerlink\" title=\"主从复制\"></a>主从复制</h1><p>主从复制能保证主SQL（Master）和从SQL（Slave）的数据是一致性的，向Master插入数据后，Slave会自动从Master把修改的数据同步过来（有一定的延迟），通过这种方式来保证数据的一致性，主从复制<strong>基于日志(binlog)</strong>。</p>\n<p>主从复制可解决：</p>\n<ul>\n<li><strong>高可用</strong></li>\n</ul>\n<p>因为数据都是相同的，所以当Master挂掉后，可以指定一台Slave充当Master继续保证服务运行，因为数据是一致性的（如果当插入Master就挂掉，可能不一致，因为同步也需要时间）。</p>\n<ul>\n<li><strong>负载均衡</strong></li>\n</ul>\n<p>因为读写分离也算是负载均衡的一种，一般都是有多台Slave的，所以可以将读操作指定到Slave服务器上（需要代码控制），然后再用负载均衡来选择那台Slave来提供服务，同时也可以吧一些大量计算的查询指定到某台Slave，这样就不会影响Master的写入以及其他查询。</p>\n<ul>\n<li><strong>数据备份</strong></li>\n</ul>\n<p>一般我们都会做数据备份，可能是写定时任务，一些特殊行业可能还需要手动备份，有些行业要求备份和原数据不能在同一个地方，所以主从就能很好的解决这个问题，不仅备份及时，而且还可以多地备份，保证数据的安全。</p>\n<ul>\n<li><strong>业务模块化</strong></li>\n</ul>\n<p>可以一个业务模块读取一个Slave，再针对不同的业务场景进行数据库的索引创建和根据业务选择MySQL存储引擎。</p>\n<h2 id=\"配置Master\"><a href=\"#配置Master\" class=\"headerlink\" title=\"配置Master\"></a>配置Master</h2><h3 id=\"配置my-cnf\"><a href=\"#配置my-cnf\" class=\"headerlink\" title=\"配置my.cnf\"></a>配置my.cnf</h3><p>Linux下MySQL配置文件为my.cnf，windows下为my.ini。在Master添加以下配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\"><span class=\"comment\">## 设置server_id，一般设置为IP,注意要唯一</span></div><div class=\"line\">server_id=1</div><div class=\"line\"><span class=\"comment\">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></div><div class=\"line\">binlog-ignore-db=mysql</div><div class=\"line\"><span class=\"comment\">## 开启二进制日志功能，可以随便取，最好有含义（关键就是这里了）</span></div><div class=\"line\"><span class=\"built_in\">log</span>-bin=mysql-bin</div><div class=\"line\"><span class=\"comment\">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></div><div class=\"line\">binlog_cache_size=1M</div><div class=\"line\"><span class=\"comment\">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></div><div class=\"line\">binlog_format=mixed</div><div class=\"line\"><span class=\"comment\">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></div><div class=\"line\">expire_logs_days=7</div><div class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></div><div class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></div><div class=\"line\">slave_skip_errors=1062</div></pre></td></tr></table></figure>\n<p>配置完成后重启MySQL。</p>\n<h3 id=\"创建数据同步用户\"><a href=\"#创建数据同步用户\" class=\"headerlink\" title=\"创建数据同步用户\"></a>创建数据同步用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- -- 用户名：slave，密码：slave</span></div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">USER</span> <span class=\"string\">'slave'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'slave'</span>;</div><div class=\"line\"><span class=\"comment\">-- 授予用户REPLICATION SLAVE权限和REPLICATION CLIENT权限</span></div><div class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span>, <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">CLIENT</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'slave'</span>@<span class=\"string\">'%'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"配置Slave\"><a href=\"#配置Slave\" class=\"headerlink\" title=\"配置Slave\"></a>配置Slave</h2><p>Linux下MySQL配置文件为my.cnf，windows下为my.ini。在Slave添加以下配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\"><span class=\"comment\">## 设置server_id，一般设置为IP,注意要唯一</span></div><div class=\"line\">server_id </div><div class=\"line\"><span class=\"comment\">## 复制过滤：也就是指定哪个数据库不用同步（mysql库一般不同步）</span></div><div class=\"line\">binlog-ignore-db=mysql</div><div class=\"line\"><span class=\"comment\">## 开启二进制日志功能，以备Slave作为其它Slave的Master时使用</span></div><div class=\"line\"><span class=\"built_in\">log</span>-bin=mysql-slave1-bin</div><div class=\"line\"><span class=\"comment\">## 为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></div><div class=\"line\">binlog_cache_size=1M</div><div class=\"line\"><span class=\"comment\">## 主从复制的格式（mixed,statement,row，默认格式是statement）</span></div><div class=\"line\">binlog_format=mixed</div><div class=\"line\"><span class=\"comment\">## 二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。</span></div><div class=\"line\">expire_logs_days=7</div><div class=\"line\"><span class=\"comment\">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></div><div class=\"line\"><span class=\"comment\">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></div><div class=\"line\">slave_skip_errors=1062</div><div class=\"line\"><span class=\"comment\">## relay_log配置中继日志</span></div><div class=\"line\">relay_log=mysql-relay-bin  </div><div class=\"line\"><span class=\"comment\">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span></div><div class=\"line\">log_slave_updates=1</div><div class=\"line\"><span class=\"comment\">## 防止改变数据(除了特殊的线程)</span></div><div class=\"line\">read_only=1</div></pre></td></tr></table></figure>\n<p><strong>如果Slave为其它Slave的Master时，必须设置bin_log</strong>。配置完成后重启MySQL。</p>\n<h2 id=\"连接Master和Slave\"><a href=\"#连接Master和Slave\" class=\"headerlink\" title=\"连接Master和Slave\"></a>连接Master和Slave</h2><h3 id=\"查询Master状态\"><a href=\"#查询Master状态\" class=\"headerlink\" title=\"查询Master状态\"></a>查询Master状态</h3><p>在master中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">STATUS</span>;</div></pre></td></tr></table></figure>\n<p>记录下返回结果的<strong>File列和Position列</strong>的值。</p>\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_status.png\" algin=\"center\"/></div>\n\n<h3 id=\"在Slave中设置Master信息\"><a href=\"#在Slave中设置Master信息\" class=\"headerlink\" title=\"在Slave中设置Master信息\"></a>在Slave中设置Master信息</h3><p>在slave中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CHANGE</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">TO</span> MASTER_HOST=<span class=\"string\">'127.0.0.1'</span>, MASTER_USER=<span class=\"string\">'slave'</span>, MASTER_PASSWORD=<span class=\"string\">'slave'</span>, MASTER_PORT=<span class=\"number\">3306</span>, MASTER_LOG_FILE=<span class=\"string\">'mysql-bin.000014'</span>, MASTER_LOG_POS=<span class=\"number\">1122</span>, MASTER_CONNECT_RETRY=<span class=\"number\">30</span>;</div><div class=\"line\"><span class=\"comment\">-- master_host='127.0.0.1' ## Master的IP地址</span></div><div class=\"line\"><span class=\"comment\">-- master_user='slave' ## 用于同步数据的用户（在Master中授权的用户）</span></div><div class=\"line\"><span class=\"comment\">-- master_password='slave' ## 同步数据用户的密码</span></div><div class=\"line\"><span class=\"comment\">-- master_port=3306 ## Master数据库服务的端口</span></div><div class=\"line\"><span class=\"comment\">-- master_log_file='mysql-bin.000014' ##指定Slave从哪个日志文件开始读复制数据（Master上执行命令的结果的File字段）</span></div><div class=\"line\"><span class=\"comment\">-- master_log_pos=1122 ## 从哪个POSITION号开始读（Master上执行命令的结果的Position字段）</span></div><div class=\"line\"><span class=\"comment\">-- masterconnectretry=30 ##当重新建立主从连接时，如果连接建立失败，间隔多久后重试。单位为秒，默认设置为60秒，同步延迟调优参数。</span></div></pre></td></tr></table></figure>\n<h3 id=\"查看主从同步状态\"><a href=\"#查看主从同步状态\" class=\"headerlink\" title=\"查看主从同步状态\"></a>查看主从同步状态</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">STATUS</span>;</div></pre></td></tr></table></figure>\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_notok.png\" algin=\"center\"/></div>\n\n<p>可看到Slave_IO_State为空， Slave_IO_Running和Slave_SQL_Running是No，表明Slave还没有开始复制过程。相反Slave_IO_Running和Slave_SQL_Running是Yes表明已经开始工作了。</p>\n<h3 id=\"开启-关闭主从\"><a href=\"#开启-关闭主从\" class=\"headerlink\" title=\"开启/关闭主从\"></a>开启/关闭主从</h3><p>在slave中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 停止主从</span></div><div class=\"line\"><span class=\"keyword\">STOP</span> <span class=\"keyword\">SLAVE</span>;</div><div class=\"line\"><span class=\"comment\">-- 开启主从</span></div><div class=\"line\"><span class=\"keyword\">START</span> <span class=\"keyword\">SLAVE</span>;</div></pre></td></tr></table></figure>\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/master_slave_ok.png\" algin=\"center\"/></div>\n\n<p>查询查看主从同步状态，会发现<strong>Slave_IO_Running和Slave_SQL_Running是Yes</strong>了，表明开启成功。</p>\n<h1 id=\"主主复制\"><a href=\"#主主复制\" class=\"headerlink\" title=\"主主复制\"></a>主主复制</h1><p>主主复制即在两台MySQL主机内都可以变更数据，而且另外一台主机也会做出相应的变更。其实现就是将两个主从复制有机合并起来就好了。只不过在配置的时候我们需要注意一些问题，例如，主键重复，server-id不能重复等等。</p>\n<h2 id=\"配置Master-1\"><a href=\"#配置Master-1\" class=\"headerlink\" title=\"配置Master\"></a>配置Master</h2><p>接上一案例，在上一案例中的Slave中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">-- 用户名：slave1，密码：slave1</span></div><div class=\"line\"><span class=\"keyword\">GRANT</span> <span class=\"keyword\">REPLICATION</span> <span class=\"keyword\">SLAVE</span> <span class=\"keyword\">ON</span> *.* <span class=\"keyword\">TO</span> <span class=\"string\">'slave1'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">'slave1'</span>;</div><div class=\"line\"><span class=\"keyword\">FLUSH</span> <span class=\"keyword\">PRIVILEGES</span>;</div><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">STATUS</span>;</div></pre></td></tr></table></figure>\n<p>同样记录下返回结果的<strong>File列和Position列</strong>的值。</p>\n<div align=center><img width=\"1000\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/2-1.png\" algin=\"center\"/></div>\n\n<h2 id=\"配置Slave-1\"><a href=\"#配置Slave-1\" class=\"headerlink\" title=\"配置Slave\"></a>配置Slave</h2><p>在上一案例中的Master中执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CHANGE</span> <span class=\"keyword\">MASTER</span> <span class=\"keyword\">TO</span> MASTER_HOST=<span class=\"string\">'127.0.0.1'</span>, MASTER_USER=<span class=\"string\">'slave1'</span>, MASTER_PASSWORD=<span class=\"string\">'slave1'</span>, MASTER_PORT=<span class=\"number\">3308</span>, MASTER_LOG_FILE=<span class=\"string\">'mysql-bin.000017'</span>, MASTER_LOG_POS=<span class=\"number\">1860</span>, MASTER_CONNECT_RETRY=<span class=\"number\">30</span>;</div></pre></td></tr></table></figure>\n<p>分别开启 <strong>START SLAVE;</strong></p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_1.jpg\" algin=\"center\"/></div>\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_master_slave/db_2.png\" algin=\"center\"/></div>\n\n<p><strong>当且仅当两个数据库Slave_IO_Running和Slave_SQL_Running都为 YES才表明状态正常。</strong></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>主主复制只能保证主键不重复，却不能保证主键有序。</li>\n<li>当配置完成<strong>Slave_IO_Running、Slave_SQL_Running不全为YES</strong>时，show slave status\\G信息中有错误提示，可根据错误提示进行更正。</li>\n<li>Slave_IO_Running、Slave_SQL_Running不全为YES时，大多数问题都是数据不统一导致。</li>\n</ul>"},{"title":"MySQL执行计划","date":"2018-04-27T01:24:06.000Z","_content":"\n# 前言\n\nMySQL执行计划，简单的来说，是SQL在数据库中执行时的表现情况，通常用于SQL性能分析，优化等场景。在MySQL使用 **explain** 关键字来查看SQL的执行计划。<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/mysql-explain.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 适用场景\n\n适用于 ***select***、***update***、***insert***、***replace***、***delete***语句，在需要分析的语句前加*EXPLAIN*，即可。\n\n# EXPLAIN可得到的信息\n\n- SQL如何使用索引\n- 关联查询的执行顺序\n- 查询扫描的数据行数\n\n# 读懂执行计划\n\n例如以下关联查询：\n\n```sql\nEXPLAIN SELECT * FROM tb_item JOIN tb_item_desc ON tb_item.id=tb_item_desc.item_id WHERE id='679533';\n```\n\n<div align=center><img width=\"900\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/eg.png\" algin=\"center\"/>\n\n</div>根据上图可得到执行计划的列信息，下面分析一下每列所表示的信息。\n\n## ID\n\n- ID列中的数据为一组数字，表示执行Select语句的顺序。\n- ID值相同时，执行顺序由上至下。\n- ID值越大优先级越高，越先被执行。\n\n## SELECT_TYPE\n\n表示查询中每个Select子句的类型（简单 OR 复杂）。\n\n- **SIMPLE**：不包含子查询或是*UNION*操作的查询。\n- **PRIMARY**：查询中如果包含任何子查询，那么最外层的查询则被标记为*PRIMARY*。\n- **SUBQUERY**：*SELECT* 列表中的子查询。\n- **DEPENDENT SUBQUERY**：被别的查询所依赖的子查询。\n- **UNION**：*union*操作的第二个或是之后的查询的值为*union*。\n- **DEPENDENT UNION**：当*union*作为子查询时，第二或者是第二个后的查询的值。\n- **UNION RESULT**：*union*产生的结果集。\n- **DERIVED**：出现在*from*子句中的子查询。\n\n## TABLE\n\n输出数据行所在的表的名称或别名。\n\n- **`<unionM,N>`**：由ID为M,N查询*union*产生的结果集。\n- **`<derivedN>/<subqueryN>`**：由ID为N的查询产生的结果。\n\n## PARTITIONS\n\n- 对于分区表，显示查询的分区ID。\n- 对于非分区表，显示为NULL。\n\n## TYPE（类型性能是依次降低）\n\n该属性表示访问类型,有很多种访问类型。\n\n- **system**：这是const连接类型的一个特例，当查询的表只有一行时使用。\n- **const**：表中有且只有一个匹配的行时使用，如对主键或是唯一索引的查询，这是效率最高的联接方式。\n- **eq_ref**：唯一索引或者是主键索引查找，对于每个索引键，表中只有一条记录与之匹配\n- **ref**：非唯一索引查找，返回匹配某个单独值的所有行。\n- **ref_or_null**：类似于ref类型的查询，但是附加了对NULL值列的查询。\n- **index_merge**：该联接类型表示使用了索引合并优化方法。\n- **range**：索引范围扫描，常见于*between*、>、<、这样的查询条件。\n- **index**：*full index scan* 全索引扫描，同ALL的区别是，遍历的是索引树。\n- **all**：*full table scan* 全表扫描，这是效率最差的联接方式。\n\n## POSSIBLE_KEYS\n\n指出MySQL能使用那些索引来优化查询，**查询列所涉及到的列上的索引都会被列出，但不一定会被使用**。\n\n## KEY\n\n显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL。\n\n> TIPS：查询中若使用了覆盖索引，则该索引仅出现在key列表中。\n\n## KEY_LEN\n\n- 表示索引字段的最大可能长度。\n\n\n- 此值的长度有字段定义计算而来，并非数据的实际长度。\n\n## REF\n\n表示表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。\n\n## ROWS\n\n表示MySQL通过索引统计的信息，估算出的所需读取的行数。是一个不十分准确的值。\n\n## FILTERED\n\n表示返回结果的行数占需读取行数的百分比，越大越好，也并不十分准确。\n\n## EXTRA\n\n1、**Using index**\n\n该值表示相应的*Select*操作中使用了***覆盖索引(Covering Index)***。\n\n> TIPS：覆盖索引（Covering Index）\n>\n> MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件包含所有满足查询需要的数据的索引称为 **覆盖索引**（Covering Index）\n\n注意：如果要使用覆盖索引，一定要注意*Select*列表中只取出需要的列，不可Select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。\n\n2、**Using where**\n\n表示MySQL服务器在存储引擎受到记录后进行“后过滤”（Post-filter），如果查询未能使用索引，*Using where*的作用只是提醒我们MySQL将用*where*子句来过滤结果集。\n\n3、**Using temporary**\n\n表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询。\n\n4、**Using filesort**\n\nMySQL中无法利用索引完成的排序操作称为“文件排序”。\n\n5、**distinct**\n\n优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作。\n\n6、**not exists**\n\n使用*not exists*来优化查询。\n\n7、**select tables optimized away**\n\n直接通过索引来获得数据，不用访问表。\n\n# 执行计划的局限性\n\n- EXPLAIN无法展示关于触发器、存储过程的信息或用户自定义函数对查询的影响情况。\n- EXPLAIN不考虑各种Cache。\n- EXPLAIN不能显示MySQL在执行查询时所作的优化工作。\n- 部分统计信息是估算的，并非精确值。\n- 早期版本的MySQL只支持对*Select*语句进行分析。","source":"_posts/MySQL执行计划.md","raw":"---\ntitle: MySQL执行计划\ndate: 2018-04-27 09:24:06\ntags: [mysql]\ncategories: technology\n---\n\n# 前言\n\nMySQL执行计划，简单的来说，是SQL在数据库中执行时的表现情况，通常用于SQL性能分析，优化等场景。在MySQL使用 **explain** 关键字来查看SQL的执行计划。<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/mysql-explain.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 适用场景\n\n适用于 ***select***、***update***、***insert***、***replace***、***delete***语句，在需要分析的语句前加*EXPLAIN*，即可。\n\n# EXPLAIN可得到的信息\n\n- SQL如何使用索引\n- 关联查询的执行顺序\n- 查询扫描的数据行数\n\n# 读懂执行计划\n\n例如以下关联查询：\n\n```sql\nEXPLAIN SELECT * FROM tb_item JOIN tb_item_desc ON tb_item.id=tb_item_desc.item_id WHERE id='679533';\n```\n\n<div align=center><img width=\"900\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/eg.png\" algin=\"center\"/>\n\n</div>根据上图可得到执行计划的列信息，下面分析一下每列所表示的信息。\n\n## ID\n\n- ID列中的数据为一组数字，表示执行Select语句的顺序。\n- ID值相同时，执行顺序由上至下。\n- ID值越大优先级越高，越先被执行。\n\n## SELECT_TYPE\n\n表示查询中每个Select子句的类型（简单 OR 复杂）。\n\n- **SIMPLE**：不包含子查询或是*UNION*操作的查询。\n- **PRIMARY**：查询中如果包含任何子查询，那么最外层的查询则被标记为*PRIMARY*。\n- **SUBQUERY**：*SELECT* 列表中的子查询。\n- **DEPENDENT SUBQUERY**：被别的查询所依赖的子查询。\n- **UNION**：*union*操作的第二个或是之后的查询的值为*union*。\n- **DEPENDENT UNION**：当*union*作为子查询时，第二或者是第二个后的查询的值。\n- **UNION RESULT**：*union*产生的结果集。\n- **DERIVED**：出现在*from*子句中的子查询。\n\n## TABLE\n\n输出数据行所在的表的名称或别名。\n\n- **`<unionM,N>`**：由ID为M,N查询*union*产生的结果集。\n- **`<derivedN>/<subqueryN>`**：由ID为N的查询产生的结果。\n\n## PARTITIONS\n\n- 对于分区表，显示查询的分区ID。\n- 对于非分区表，显示为NULL。\n\n## TYPE（类型性能是依次降低）\n\n该属性表示访问类型,有很多种访问类型。\n\n- **system**：这是const连接类型的一个特例，当查询的表只有一行时使用。\n- **const**：表中有且只有一个匹配的行时使用，如对主键或是唯一索引的查询，这是效率最高的联接方式。\n- **eq_ref**：唯一索引或者是主键索引查找，对于每个索引键，表中只有一条记录与之匹配\n- **ref**：非唯一索引查找，返回匹配某个单独值的所有行。\n- **ref_or_null**：类似于ref类型的查询，但是附加了对NULL值列的查询。\n- **index_merge**：该联接类型表示使用了索引合并优化方法。\n- **range**：索引范围扫描，常见于*between*、>、<、这样的查询条件。\n- **index**：*full index scan* 全索引扫描，同ALL的区别是，遍历的是索引树。\n- **all**：*full table scan* 全表扫描，这是效率最差的联接方式。\n\n## POSSIBLE_KEYS\n\n指出MySQL能使用那些索引来优化查询，**查询列所涉及到的列上的索引都会被列出，但不一定会被使用**。\n\n## KEY\n\n显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL。\n\n> TIPS：查询中若使用了覆盖索引，则该索引仅出现在key列表中。\n\n## KEY_LEN\n\n- 表示索引字段的最大可能长度。\n\n\n- 此值的长度有字段定义计算而来，并非数据的实际长度。\n\n## REF\n\n表示表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。\n\n## ROWS\n\n表示MySQL通过索引统计的信息，估算出的所需读取的行数。是一个不十分准确的值。\n\n## FILTERED\n\n表示返回结果的行数占需读取行数的百分比，越大越好，也并不十分准确。\n\n## EXTRA\n\n1、**Using index**\n\n该值表示相应的*Select*操作中使用了***覆盖索引(Covering Index)***。\n\n> TIPS：覆盖索引（Covering Index）\n>\n> MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件包含所有满足查询需要的数据的索引称为 **覆盖索引**（Covering Index）\n\n注意：如果要使用覆盖索引，一定要注意*Select*列表中只取出需要的列，不可Select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。\n\n2、**Using where**\n\n表示MySQL服务器在存储引擎受到记录后进行“后过滤”（Post-filter），如果查询未能使用索引，*Using where*的作用只是提醒我们MySQL将用*where*子句来过滤结果集。\n\n3、**Using temporary**\n\n表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询。\n\n4、**Using filesort**\n\nMySQL中无法利用索引完成的排序操作称为“文件排序”。\n\n5、**distinct**\n\n优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作。\n\n6、**not exists**\n\n使用*not exists*来优化查询。\n\n7、**select tables optimized away**\n\n直接通过索引来获得数据，不用访问表。\n\n# 执行计划的局限性\n\n- EXPLAIN无法展示关于触发器、存储过程的信息或用户自定义函数对查询的影响情况。\n- EXPLAIN不考虑各种Cache。\n- EXPLAIN不能显示MySQL在执行查询时所作的优化工作。\n- 部分统计信息是估算的，并非精确值。\n- 早期版本的MySQL只支持对*Select*语句进行分析。","slug":"MySQL执行计划","published":1,"updated":"2018-04-27T02:50:33.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u0y00183gfkbdpl12cs","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>MySQL执行计划，简单的来说，是SQL在数据库中执行时的表现情况，通常用于SQL性能分析，优化等场景。在MySQL使用 <strong>explain</strong> 关键字来查看SQL的执行计划。<div align=\"center\"><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/mysql-explain.png\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h1><p>适用于 <strong><em>select</em></strong>、<strong><em>update</em></strong>、<strong><em>insert</em></strong>、<strong><em>replace</em></strong>、<strong><em>delete</em></strong>语句，在需要分析的语句前加<em>EXPLAIN</em>，即可。</p>\n<h1 id=\"EXPLAIN可得到的信息\"><a href=\"#EXPLAIN可得到的信息\" class=\"headerlink\" title=\"EXPLAIN可得到的信息\"></a>EXPLAIN可得到的信息</h1><ul>\n<li>SQL如何使用索引</li>\n<li>关联查询的执行顺序</li>\n<li>查询扫描的数据行数</li>\n</ul>\n<h1 id=\"读懂执行计划\"><a href=\"#读懂执行计划\" class=\"headerlink\" title=\"读懂执行计划\"></a>读懂执行计划</h1><p>例如以下关联查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">EXPLAIN</span> <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_item <span class=\"keyword\">JOIN</span> tb_item_desc <span class=\"keyword\">ON</span> tb_item.id=tb_item_desc.item_id <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span>=<span class=\"string\">'679533'</span>;</div></pre></td></tr></table></figure>\n<p><div align=\"center\"><img width=\"900\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/eg.png\" algin=\"center\"></div></p>\n<p>根据上图可得到执行计划的列信息，下面分析一下每列所表示的信息。</p>\n<h2 id=\"ID\"><a href=\"#ID\" class=\"headerlink\" title=\"ID\"></a>ID</h2><ul>\n<li>ID列中的数据为一组数字，表示执行Select语句的顺序。</li>\n<li>ID值相同时，执行顺序由上至下。</li>\n<li>ID值越大优先级越高，越先被执行。</li>\n</ul>\n<h2 id=\"SELECT-TYPE\"><a href=\"#SELECT-TYPE\" class=\"headerlink\" title=\"SELECT_TYPE\"></a>SELECT_TYPE</h2><p>表示查询中每个Select子句的类型（简单 OR 复杂）。</p>\n<ul>\n<li><strong>SIMPLE</strong>：不包含子查询或是<em>UNION</em>操作的查询。</li>\n<li><strong>PRIMARY</strong>：查询中如果包含任何子查询，那么最外层的查询则被标记为<em>PRIMARY</em>。</li>\n<li><strong>SUBQUERY</strong>：<em>SELECT</em> 列表中的子查询。</li>\n<li><strong>DEPENDENT SUBQUERY</strong>：被别的查询所依赖的子查询。</li>\n<li><strong>UNION</strong>：<em>union</em>操作的第二个或是之后的查询的值为<em>union</em>。</li>\n<li><strong>DEPENDENT UNION</strong>：当<em>union</em>作为子查询时，第二或者是第二个后的查询的值。</li>\n<li><strong>UNION RESULT</strong>：<em>union</em>产生的结果集。</li>\n<li><strong>DERIVED</strong>：出现在<em>from</em>子句中的子查询。</li>\n</ul>\n<h2 id=\"TABLE\"><a href=\"#TABLE\" class=\"headerlink\" title=\"TABLE\"></a>TABLE</h2><p>输出数据行所在的表的名称或别名。</p>\n<ul>\n<li><strong><code>&lt;unionM,N&gt;</code></strong>：由ID为M,N查询<em>union</em>产生的结果集。</li>\n<li><strong><code>&lt;derivedN&gt;/&lt;subqueryN&gt;</code></strong>：由ID为N的查询产生的结果。</li>\n</ul>\n<h2 id=\"PARTITIONS\"><a href=\"#PARTITIONS\" class=\"headerlink\" title=\"PARTITIONS\"></a>PARTITIONS</h2><ul>\n<li>对于分区表，显示查询的分区ID。</li>\n<li>对于非分区表，显示为NULL。</li>\n</ul>\n<h2 id=\"TYPE（类型性能是依次降低）\"><a href=\"#TYPE（类型性能是依次降低）\" class=\"headerlink\" title=\"TYPE（类型性能是依次降低）\"></a>TYPE（类型性能是依次降低）</h2><p>该属性表示访问类型,有很多种访问类型。</p>\n<ul>\n<li><strong>system</strong>：这是const连接类型的一个特例，当查询的表只有一行时使用。</li>\n<li><strong>const</strong>：表中有且只有一个匹配的行时使用，如对主键或是唯一索引的查询，这是效率最高的联接方式。</li>\n<li><strong>eq_ref</strong>：唯一索引或者是主键索引查找，对于每个索引键，表中只有一条记录与之匹配</li>\n<li><strong>ref</strong>：非唯一索引查找，返回匹配某个单独值的所有行。</li>\n<li><strong>ref_or_null</strong>：类似于ref类型的查询，但是附加了对NULL值列的查询。</li>\n<li><strong>index_merge</strong>：该联接类型表示使用了索引合并优化方法。</li>\n<li><strong>range</strong>：索引范围扫描，常见于<em>between</em>、&gt;、&lt;、这样的查询条件。</li>\n<li><strong>index</strong>：<em>full index scan</em> 全索引扫描，同ALL的区别是，遍历的是索引树。</li>\n<li><strong>all</strong>：<em>full table scan</em> 全表扫描，这是效率最差的联接方式。</li>\n</ul>\n<h2 id=\"POSSIBLE-KEYS\"><a href=\"#POSSIBLE-KEYS\" class=\"headerlink\" title=\"POSSIBLE_KEYS\"></a>POSSIBLE_KEYS</h2><p>指出MySQL能使用那些索引来优化查询，<strong>查询列所涉及到的列上的索引都会被列出，但不一定会被使用</strong>。</p>\n<h2 id=\"KEY\"><a href=\"#KEY\" class=\"headerlink\" title=\"KEY\"></a>KEY</h2><p>显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL。</p>\n<blockquote>\n<p>TIPS：查询中若使用了覆盖索引，则该索引仅出现在key列表中。</p>\n</blockquote>\n<h2 id=\"KEY-LEN\"><a href=\"#KEY-LEN\" class=\"headerlink\" title=\"KEY_LEN\"></a>KEY_LEN</h2><ul>\n<li>表示索引字段的最大可能长度。</li>\n</ul>\n<ul>\n<li>此值的长度有字段定义计算而来，并非数据的实际长度。</li>\n</ul>\n<h2 id=\"REF\"><a href=\"#REF\" class=\"headerlink\" title=\"REF\"></a>REF</h2><p>表示表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。</p>\n<h2 id=\"ROWS\"><a href=\"#ROWS\" class=\"headerlink\" title=\"ROWS\"></a>ROWS</h2><p>表示MySQL通过索引统计的信息，估算出的所需读取的行数。是一个不十分准确的值。</p>\n<h2 id=\"FILTERED\"><a href=\"#FILTERED\" class=\"headerlink\" title=\"FILTERED\"></a>FILTERED</h2><p>表示返回结果的行数占需读取行数的百分比，越大越好，也并不十分准确。</p>\n<h2 id=\"EXTRA\"><a href=\"#EXTRA\" class=\"headerlink\" title=\"EXTRA\"></a>EXTRA</h2><p>1、<strong>Using index</strong></p>\n<p>该值表示相应的<em>Select</em>操作中使用了<strong><em>覆盖索引(Covering Index)</em></strong>。</p>\n<blockquote>\n<p>TIPS：覆盖索引（Covering Index）</p>\n<p>MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件包含所有满足查询需要的数据的索引称为 <strong>覆盖索引</strong>（Covering Index）</p>\n</blockquote>\n<p>注意：如果要使用覆盖索引，一定要注意<em>Select</em>列表中只取出需要的列，不可Select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</p>\n<p>2、<strong>Using where</strong></p>\n<p>表示MySQL服务器在存储引擎受到记录后进行“后过滤”（Post-filter），如果查询未能使用索引，<em>Using where</em>的作用只是提醒我们MySQL将用<em>where</em>子句来过滤结果集。</p>\n<p>3、<strong>Using temporary</strong></p>\n<p>表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询。</p>\n<p>4、<strong>Using filesort</strong></p>\n<p>MySQL中无法利用索引完成的排序操作称为“文件排序”。</p>\n<p>5、<strong>distinct</strong></p>\n<p>优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作。</p>\n<p>6、<strong>not exists</strong></p>\n<p>使用<em>not exists</em>来优化查询。</p>\n<p>7、<strong>select tables optimized away</strong></p>\n<p>直接通过索引来获得数据，不用访问表。</p>\n<h1 id=\"执行计划的局限性\"><a href=\"#执行计划的局限性\" class=\"headerlink\" title=\"执行计划的局限性\"></a>执行计划的局限性</h1><ul>\n<li>EXPLAIN无法展示关于触发器、存储过程的信息或用户自定义函数对查询的影响情况。</li>\n<li>EXPLAIN不考虑各种Cache。</li>\n<li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作。</li>\n<li>部分统计信息是估算的，并非精确值。</li>\n<li>早期版本的MySQL只支持对<em>Select</em>语句进行分析。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>MySQL执行计划，简单的来说，是SQL在数据库中执行时的表现情况，通常用于SQL性能分析，优化等场景。在MySQL使用 <strong>explain</strong> 关键字来查看SQL的执行计划。<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/mysql-explain.png\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h1><p>适用于 <strong><em>select</em></strong>、<strong><em>update</em></strong>、<strong><em>insert</em></strong>、<strong><em>replace</em></strong>、<strong><em>delete</em></strong>语句，在需要分析的语句前加<em>EXPLAIN</em>，即可。</p>\n<h1 id=\"EXPLAIN可得到的信息\"><a href=\"#EXPLAIN可得到的信息\" class=\"headerlink\" title=\"EXPLAIN可得到的信息\"></a>EXPLAIN可得到的信息</h1><ul>\n<li>SQL如何使用索引</li>\n<li>关联查询的执行顺序</li>\n<li>查询扫描的数据行数</li>\n</ul>\n<h1 id=\"读懂执行计划\"><a href=\"#读懂执行计划\" class=\"headerlink\" title=\"读懂执行计划\"></a>读懂执行计划</h1><p>例如以下关联查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">EXPLAIN</span> <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> tb_item <span class=\"keyword\">JOIN</span> tb_item_desc <span class=\"keyword\">ON</span> tb_item.id=tb_item_desc.item_id <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span>=<span class=\"string\">'679533'</span>;</div></pre></td></tr></table></figure>\n<p><div align=center><img width=\"900\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/MySQL_explain/eg.png\" algin=\"center\"/></p>\n<p></div>根据上图可得到执行计划的列信息，下面分析一下每列所表示的信息。</p>\n<h2 id=\"ID\"><a href=\"#ID\" class=\"headerlink\" title=\"ID\"></a>ID</h2><ul>\n<li>ID列中的数据为一组数字，表示执行Select语句的顺序。</li>\n<li>ID值相同时，执行顺序由上至下。</li>\n<li>ID值越大优先级越高，越先被执行。</li>\n</ul>\n<h2 id=\"SELECT-TYPE\"><a href=\"#SELECT-TYPE\" class=\"headerlink\" title=\"SELECT_TYPE\"></a>SELECT_TYPE</h2><p>表示查询中每个Select子句的类型（简单 OR 复杂）。</p>\n<ul>\n<li><strong>SIMPLE</strong>：不包含子查询或是<em>UNION</em>操作的查询。</li>\n<li><strong>PRIMARY</strong>：查询中如果包含任何子查询，那么最外层的查询则被标记为<em>PRIMARY</em>。</li>\n<li><strong>SUBQUERY</strong>：<em>SELECT</em> 列表中的子查询。</li>\n<li><strong>DEPENDENT SUBQUERY</strong>：被别的查询所依赖的子查询。</li>\n<li><strong>UNION</strong>：<em>union</em>操作的第二个或是之后的查询的值为<em>union</em>。</li>\n<li><strong>DEPENDENT UNION</strong>：当<em>union</em>作为子查询时，第二或者是第二个后的查询的值。</li>\n<li><strong>UNION RESULT</strong>：<em>union</em>产生的结果集。</li>\n<li><strong>DERIVED</strong>：出现在<em>from</em>子句中的子查询。</li>\n</ul>\n<h2 id=\"TABLE\"><a href=\"#TABLE\" class=\"headerlink\" title=\"TABLE\"></a>TABLE</h2><p>输出数据行所在的表的名称或别名。</p>\n<ul>\n<li><strong><code>&lt;unionM,N&gt;</code></strong>：由ID为M,N查询<em>union</em>产生的结果集。</li>\n<li><strong><code>&lt;derivedN&gt;/&lt;subqueryN&gt;</code></strong>：由ID为N的查询产生的结果。</li>\n</ul>\n<h2 id=\"PARTITIONS\"><a href=\"#PARTITIONS\" class=\"headerlink\" title=\"PARTITIONS\"></a>PARTITIONS</h2><ul>\n<li>对于分区表，显示查询的分区ID。</li>\n<li>对于非分区表，显示为NULL。</li>\n</ul>\n<h2 id=\"TYPE（类型性能是依次降低）\"><a href=\"#TYPE（类型性能是依次降低）\" class=\"headerlink\" title=\"TYPE（类型性能是依次降低）\"></a>TYPE（类型性能是依次降低）</h2><p>该属性表示访问类型,有很多种访问类型。</p>\n<ul>\n<li><strong>system</strong>：这是const连接类型的一个特例，当查询的表只有一行时使用。</li>\n<li><strong>const</strong>：表中有且只有一个匹配的行时使用，如对主键或是唯一索引的查询，这是效率最高的联接方式。</li>\n<li><strong>eq_ref</strong>：唯一索引或者是主键索引查找，对于每个索引键，表中只有一条记录与之匹配</li>\n<li><strong>ref</strong>：非唯一索引查找，返回匹配某个单独值的所有行。</li>\n<li><strong>ref_or_null</strong>：类似于ref类型的查询，但是附加了对NULL值列的查询。</li>\n<li><strong>index_merge</strong>：该联接类型表示使用了索引合并优化方法。</li>\n<li><strong>range</strong>：索引范围扫描，常见于<em>between</em>、&gt;、&lt;、这样的查询条件。</li>\n<li><strong>index</strong>：<em>full index scan</em> 全索引扫描，同ALL的区别是，遍历的是索引树。</li>\n<li><strong>all</strong>：<em>full table scan</em> 全表扫描，这是效率最差的联接方式。</li>\n</ul>\n<h2 id=\"POSSIBLE-KEYS\"><a href=\"#POSSIBLE-KEYS\" class=\"headerlink\" title=\"POSSIBLE_KEYS\"></a>POSSIBLE_KEYS</h2><p>指出MySQL能使用那些索引来优化查询，<strong>查询列所涉及到的列上的索引都会被列出，但不一定会被使用</strong>。</p>\n<h2 id=\"KEY\"><a href=\"#KEY\" class=\"headerlink\" title=\"KEY\"></a>KEY</h2><p>显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL。</p>\n<blockquote>\n<p>TIPS：查询中若使用了覆盖索引，则该索引仅出现在key列表中。</p>\n</blockquote>\n<h2 id=\"KEY-LEN\"><a href=\"#KEY-LEN\" class=\"headerlink\" title=\"KEY_LEN\"></a>KEY_LEN</h2><ul>\n<li>表示索引字段的最大可能长度。</li>\n</ul>\n<ul>\n<li>此值的长度有字段定义计算而来，并非数据的实际长度。</li>\n</ul>\n<h2 id=\"REF\"><a href=\"#REF\" class=\"headerlink\" title=\"REF\"></a>REF</h2><p>表示表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。</p>\n<h2 id=\"ROWS\"><a href=\"#ROWS\" class=\"headerlink\" title=\"ROWS\"></a>ROWS</h2><p>表示MySQL通过索引统计的信息，估算出的所需读取的行数。是一个不十分准确的值。</p>\n<h2 id=\"FILTERED\"><a href=\"#FILTERED\" class=\"headerlink\" title=\"FILTERED\"></a>FILTERED</h2><p>表示返回结果的行数占需读取行数的百分比，越大越好，也并不十分准确。</p>\n<h2 id=\"EXTRA\"><a href=\"#EXTRA\" class=\"headerlink\" title=\"EXTRA\"></a>EXTRA</h2><p>1、<strong>Using index</strong></p>\n<p>该值表示相应的<em>Select</em>操作中使用了<strong><em>覆盖索引(Covering Index)</em></strong>。</p>\n<blockquote>\n<p>TIPS：覆盖索引（Covering Index）</p>\n<p>MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件包含所有满足查询需要的数据的索引称为 <strong>覆盖索引</strong>（Covering Index）</p>\n</blockquote>\n<p>注意：如果要使用覆盖索引，一定要注意<em>Select</em>列表中只取出需要的列，不可Select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</p>\n<p>2、<strong>Using where</strong></p>\n<p>表示MySQL服务器在存储引擎受到记录后进行“后过滤”（Post-filter），如果查询未能使用索引，<em>Using where</em>的作用只是提醒我们MySQL将用<em>where</em>子句来过滤结果集。</p>\n<p>3、<strong>Using temporary</strong></p>\n<p>表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询。</p>\n<p>4、<strong>Using filesort</strong></p>\n<p>MySQL中无法利用索引完成的排序操作称为“文件排序”。</p>\n<p>5、<strong>distinct</strong></p>\n<p>优化distinct操作，在找到第一匹配的元组后即停止找同样值的动作。</p>\n<p>6、<strong>not exists</strong></p>\n<p>使用<em>not exists</em>来优化查询。</p>\n<p>7、<strong>select tables optimized away</strong></p>\n<p>直接通过索引来获得数据，不用访问表。</p>\n<h1 id=\"执行计划的局限性\"><a href=\"#执行计划的局限性\" class=\"headerlink\" title=\"执行计划的局限性\"></a>执行计划的局限性</h1><ul>\n<li>EXPLAIN无法展示关于触发器、存储过程的信息或用户自定义函数对查询的影响情况。</li>\n<li>EXPLAIN不考虑各种Cache。</li>\n<li>EXPLAIN不能显示MySQL在执行查询时所作的优化工作。</li>\n<li>部分统计信息是估算的，并非精确值。</li>\n<li>早期版本的MySQL只支持对<em>Select</em>语句进行分析。</li>\n</ul>"},{"title":"MySQL优化","date":"2017-04-17T04:31:55.000Z","_content":"\n# 引言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","source":"_posts/MySQL优化.md","raw":"---\ntitle: MySQL优化\ndate: 2017-04-17 12:31:55\ntags: [mysql]\ncategories: technology\n---\n\n# 引言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","slug":"MySQL优化","published":1,"updated":"2018-03-13T05:51:53.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u12001b3gfkqpo17gs8","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\" target=\"_blank\" rel=\"external\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=\"center\"><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>"},{"title":"Mybatis之缓存","date":"2018-03-20T02:43:53.000Z","_content":"\n# 引言\n\nMybatis中有一级缓存和二级缓存，默认情况下一级缓存是开启的，而且是不能关闭的。一级缓存是指SqlSession级别的缓存，当在同一个SqlSession中进行相同的SQL语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存1024条SQL。二级缓存是指可以跨SqlSession的缓存。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache.png\" algin=\"center\"/></div><!-- more -->\n\n# Mybatis缓存\n\n缓存的意义：将用户经常**查询的数据放在缓存（内存）中**，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。\n\n**Mybatis提供一级缓存和二级缓存**\n\n- mybatis一级缓存是一个SqlSession级别，sqlsession只能访问自己的一级缓存的数据。\n- 二级缓存是跨sqlSession，是mapper级别的缓存，对于mapper级别的缓存不同的sqlsession是可以共享的。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-index.png\" algin=\"center\"/></div>\n\n## Mybatis一级缓存\n\nMybatis的一级缓存原理：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-first.png\" algin=\"center\"/></div>\n\n第一次发出一个查询sql，sql查询结果写入sqlsession的一级缓存中，缓存使用的数据结构是一个map`<key,value>`\n\n> key：hashcode + sql + sql输入参数 + 输出参数（sql的唯一标识）\n>\n> value：用户信息\n\n同一个sqlsession再次发出相同的sql，就从缓存中取不走数据库。如果两次中间出现commit操作（修改、添加、删除），本sqlsession中的一级缓存区域全部清空，下次再去缓存中查询不到所以要从数据库查询，从数据库查询到再写入缓存。\n\nMybatis一级缓存值得注意的地方：\n\n1. *Mybatis默认就是支持一级缓存的，并不需要我们配置。*\n2. **mybatis和spring整合后进行mapper代理开发，不支持一级缓存，mybatis和spring整合，spring按照mapper的模板去生成mapper代理对象，模板中在最后统一关闭sqlsession**。\n\n## Mybatis二级缓存\n\n二级缓存原理：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-2.png\" algin=\"center\"/></div>\n\n**二级缓存的范围是mapper级别（mapper同一个命名空间）**，mapper以命名空间为单位创建缓存数据结构，结构是map`<key、value>`。\n\n### 二级缓存配置\n\nMybatis二级缓存需要手动开启，需要在Mybatis的配置文件中配置二级缓存\n\n```xml\n<!-- 全局配置参数 -->\n<settings>\n\t<!-- 开启二级缓存 -->\n\t<setting name=\"cacheEnabled\" value=\"true\"/>\n</settings>\n```\n\n上面已经说了，二级缓存的范围是mapper级别的，因此Mapper如果要使用二级缓存，还需要在对应的映射文件中配置。\n\n```xml\n<mapper namespace=\"com.rainbowhorse.test.dao.TestDataDao\">\n<!-- 在mapper中开启二级缓存 -->\n<cache/>\n```\n\n查询结果映射的pojo序列化\n\nmybatis二级缓存需要将查询结果映射的pojo实现 java.io.serializable接口，如果不实现则抛出异常：\n\n```java\norg.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: com.rainbowhorse.test.po.User\n```\n\n二级缓存可以将内存的数据写到磁盘，存在对象的序列化和反序列化，所以要实现java.io.serializable接口。 如果结果映射的pojo中还包括了pojo，都要实现java.io.serializable接口。\n\n### 禁用二级缓存\n\n对于变化频率较高的sql，需要禁用二级缓存：\n\n在statement中设置useCache=false可以禁用当前select语句的二级缓存，即每次查询都会发出sql去查询，默认情况是true，即该sql使用二级缓存。\n\n```xml\n<select id=\"findOrderListResultMap\" resultMap=\"ordersUserMap\" useCache=\"false\">\n```\n\n### 刷新缓存\n\n我们的缓存都是在查询语句中配置，而使用增删改的时候，缓存默认就会被清空【刷新了】。缓存其实就是为我们的查询服务的，对于增删改而言，如果我们的缓存保存了增删改后的数据，那么再次读取时就会读到脏数据了！\n\n我们在特定的情况下，还可以单独配置刷新缓存【但不建议使用】flushCache，默认是的true。\n\n```xml\n<update id=\"updateUser\" parameterType=\"cn.itcast.mybatis.po.User\" flushCache=\"false\">\n\t\tupdate user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}\n\t</update>\n```\n\n### 缓存参数\n\n**mybatis的cache参数只适用于mybatis维护缓存。**\n\n> flushInterval（刷新间隔）可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。\n> size（引用数目）可以被设置为任意正整数，要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值是1024。\n> readOnly（只读）属性可以被设置为true或false。只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。\n\n如下例子：\n`<cache  eviction=\"FIFO\"  flushInterval=\"60000\"  size=\"512\"  readOnly=\"true\"/>`\n这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会导致冲突。可用的收回策略有, 默认的是 LRU:\n\n1. LRU – 最近最少使用的:移除最长时间不被使用的对象。\n2. FIFO – 先进先出:按对象进入缓存的顺序来移除它们。\n3. SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。\n4. WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。\n\n# Mybatis和Ehcache整合\n\n**Ehcache是专门用于管理缓存的，Mybatis的缓存交由ehcache管理会更加得当。在mybatis中提供一个cache接口，只要实现cache接口就可以把缓存数据灵活的管理起来**。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcache.png\" algin=\"center\"/></div>\n\n## 整合jar包\n\n- mybatis-ehcache-1.0.2.jar\n- ehcache-core-2.6.5.jar\n\nEhcache对cache接口的实现类：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcachecache.png\" algin=\"center\"/></div>\n\n## ehcache.xml配置信息\n\n这个xml配置文件是配置**全局的缓存管理方案**\n\n```xml\n<ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"../config/ehcache.xsd\">\n\t<!--diskStore：缓存数据持久化的目录 地址  -->\n\t<diskStore path=\"F:\\develop\\ehcache\" />\n\t<defaultCache \n\t\tmaxElementsInMemory=\"1000\" \n\t\tmaxElementsOnDisk=\"10000000\"\n\t\teternal=\"false\" \n\t\toverflowToDisk=\"false\" \n\t\tdiskPersistent=\"true\"\n\t\ttimeToIdleSeconds=\"120\"\n\t\ttimeToLiveSeconds=\"120\" \n\t\tdiskExpiryThreadIntervalSeconds=\"120\"\n\t\tmemoryStoreEvictionPolicy=\"LRU\">\n\t</defaultCache>\n</ehcache>\n```\n\n如果我们Mapper想单独拥有一些特性，需要在mapper.xml中单独配置\n\n```xml\n<!-- 单位：毫秒 -->\n<cache type=\"org.mybatis.caches.ehcache.EhcacheCache\">\n\t<property name=\"timeToIdleSeconds\" value=\"12000\"/>\n\t<property name=\"timeToLiveSeconds\" value=\"3600\"/>\n\t<!-- 同ehcache参数maxElementsInMemory -->\n\t<property name=\"maxEntriesLocalHeap\" value=\"1000\"/>\n\t<!-- 同ehcache参数maxElementsOnDisk -->\n\t<property name=\"maxEntriesLocalDisk\" value=\"10000000\"/>\n\t<property name=\"memoryStoreEvictionPolicy\" value=\"LRU\"/>\n</cache>\n```\n\n## 应用场景与局限性\n\n### 应用场景\n\n- **对查询频率高，变化频率低的数据建议使用二级缓存。**\n\n\n- 对于**访问多的查询请求且用户对查询结果实时性要求不高**，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度。\n\n业务场景比如：\n\n- 耗时较高的统计分析sql\n- 电话账单查询sql等。\n\n实现方法如下：**通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval**，比如设置为30分钟、60分钟、24小时等，根据需求而定。\n\n### 局限性\n\nmybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，**因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空**。解决此类问题需要在业务层根据需求对数据有针对性缓存。\n\n# 总结\n\n- Mybatis的一级缓存是SqlSession级别的。只能访问自己的sqlSession内的缓存。如果Mybatis与Spring整合了，Spring会自动关闭sqlSession的。所以一级缓存会失效。\n- 一级缓存的原理是map集合，Mybatis默认就支持一级缓存。\n- **二级缓存是Mapper级别的。只要在Mapper namespace下都可以使用二级缓存。需要自己手动去配置二级缓存。**\n- Mybatis的缓存我们可以使用Ehcache框架来进行管理，Ehcache实现Cache接口就代表使用Ehcache来环境Mybatis缓存。\n\n## 参考\n\n[***Mybatis【逆向工程，缓存，代理】知识要点***](https://juejin.im/post/5aa655d6518825556020924e#comment)","source":"_posts/Mybatis之缓存.md","raw":"---\ntitle: Mybatis之缓存\ndate: 2018-03-20 10:43:53\ntags: [java,mybatis]\ncategories: technology\n---\n\n# 引言\n\nMybatis中有一级缓存和二级缓存，默认情况下一级缓存是开启的，而且是不能关闭的。一级缓存是指SqlSession级别的缓存，当在同一个SqlSession中进行相同的SQL语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存1024条SQL。二级缓存是指可以跨SqlSession的缓存。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache.png\" algin=\"center\"/></div><!-- more -->\n\n# Mybatis缓存\n\n缓存的意义：将用户经常**查询的数据放在缓存（内存）中**，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。\n\n**Mybatis提供一级缓存和二级缓存**\n\n- mybatis一级缓存是一个SqlSession级别，sqlsession只能访问自己的一级缓存的数据。\n- 二级缓存是跨sqlSession，是mapper级别的缓存，对于mapper级别的缓存不同的sqlsession是可以共享的。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-index.png\" algin=\"center\"/></div>\n\n## Mybatis一级缓存\n\nMybatis的一级缓存原理：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-first.png\" algin=\"center\"/></div>\n\n第一次发出一个查询sql，sql查询结果写入sqlsession的一级缓存中，缓存使用的数据结构是一个map`<key,value>`\n\n> key：hashcode + sql + sql输入参数 + 输出参数（sql的唯一标识）\n>\n> value：用户信息\n\n同一个sqlsession再次发出相同的sql，就从缓存中取不走数据库。如果两次中间出现commit操作（修改、添加、删除），本sqlsession中的一级缓存区域全部清空，下次再去缓存中查询不到所以要从数据库查询，从数据库查询到再写入缓存。\n\nMybatis一级缓存值得注意的地方：\n\n1. *Mybatis默认就是支持一级缓存的，并不需要我们配置。*\n2. **mybatis和spring整合后进行mapper代理开发，不支持一级缓存，mybatis和spring整合，spring按照mapper的模板去生成mapper代理对象，模板中在最后统一关闭sqlsession**。\n\n## Mybatis二级缓存\n\n二级缓存原理：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-2.png\" algin=\"center\"/></div>\n\n**二级缓存的范围是mapper级别（mapper同一个命名空间）**，mapper以命名空间为单位创建缓存数据结构，结构是map`<key、value>`。\n\n### 二级缓存配置\n\nMybatis二级缓存需要手动开启，需要在Mybatis的配置文件中配置二级缓存\n\n```xml\n<!-- 全局配置参数 -->\n<settings>\n\t<!-- 开启二级缓存 -->\n\t<setting name=\"cacheEnabled\" value=\"true\"/>\n</settings>\n```\n\n上面已经说了，二级缓存的范围是mapper级别的，因此Mapper如果要使用二级缓存，还需要在对应的映射文件中配置。\n\n```xml\n<mapper namespace=\"com.rainbowhorse.test.dao.TestDataDao\">\n<!-- 在mapper中开启二级缓存 -->\n<cache/>\n```\n\n查询结果映射的pojo序列化\n\nmybatis二级缓存需要将查询结果映射的pojo实现 java.io.serializable接口，如果不实现则抛出异常：\n\n```java\norg.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: com.rainbowhorse.test.po.User\n```\n\n二级缓存可以将内存的数据写到磁盘，存在对象的序列化和反序列化，所以要实现java.io.serializable接口。 如果结果映射的pojo中还包括了pojo，都要实现java.io.serializable接口。\n\n### 禁用二级缓存\n\n对于变化频率较高的sql，需要禁用二级缓存：\n\n在statement中设置useCache=false可以禁用当前select语句的二级缓存，即每次查询都会发出sql去查询，默认情况是true，即该sql使用二级缓存。\n\n```xml\n<select id=\"findOrderListResultMap\" resultMap=\"ordersUserMap\" useCache=\"false\">\n```\n\n### 刷新缓存\n\n我们的缓存都是在查询语句中配置，而使用增删改的时候，缓存默认就会被清空【刷新了】。缓存其实就是为我们的查询服务的，对于增删改而言，如果我们的缓存保存了增删改后的数据，那么再次读取时就会读到脏数据了！\n\n我们在特定的情况下，还可以单独配置刷新缓存【但不建议使用】flushCache，默认是的true。\n\n```xml\n<update id=\"updateUser\" parameterType=\"cn.itcast.mybatis.po.User\" flushCache=\"false\">\n\t\tupdate user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}\n\t</update>\n```\n\n### 缓存参数\n\n**mybatis的cache参数只适用于mybatis维护缓存。**\n\n> flushInterval（刷新间隔）可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。\n> size（引用数目）可以被设置为任意正整数，要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值是1024。\n> readOnly（只读）属性可以被设置为true或false。只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。\n\n如下例子：\n`<cache  eviction=\"FIFO\"  flushInterval=\"60000\"  size=\"512\"  readOnly=\"true\"/>`\n这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会导致冲突。可用的收回策略有, 默认的是 LRU:\n\n1. LRU – 最近最少使用的:移除最长时间不被使用的对象。\n2. FIFO – 先进先出:按对象进入缓存的顺序来移除它们。\n3. SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。\n4. WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。\n\n# Mybatis和Ehcache整合\n\n**Ehcache是专门用于管理缓存的，Mybatis的缓存交由ehcache管理会更加得当。在mybatis中提供一个cache接口，只要实现cache接口就可以把缓存数据灵活的管理起来**。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcache.png\" algin=\"center\"/></div>\n\n## 整合jar包\n\n- mybatis-ehcache-1.0.2.jar\n- ehcache-core-2.6.5.jar\n\nEhcache对cache接口的实现类：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcachecache.png\" algin=\"center\"/></div>\n\n## ehcache.xml配置信息\n\n这个xml配置文件是配置**全局的缓存管理方案**\n\n```xml\n<ehcache xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"../config/ehcache.xsd\">\n\t<!--diskStore：缓存数据持久化的目录 地址  -->\n\t<diskStore path=\"F:\\develop\\ehcache\" />\n\t<defaultCache \n\t\tmaxElementsInMemory=\"1000\" \n\t\tmaxElementsOnDisk=\"10000000\"\n\t\teternal=\"false\" \n\t\toverflowToDisk=\"false\" \n\t\tdiskPersistent=\"true\"\n\t\ttimeToIdleSeconds=\"120\"\n\t\ttimeToLiveSeconds=\"120\" \n\t\tdiskExpiryThreadIntervalSeconds=\"120\"\n\t\tmemoryStoreEvictionPolicy=\"LRU\">\n\t</defaultCache>\n</ehcache>\n```\n\n如果我们Mapper想单独拥有一些特性，需要在mapper.xml中单独配置\n\n```xml\n<!-- 单位：毫秒 -->\n<cache type=\"org.mybatis.caches.ehcache.EhcacheCache\">\n\t<property name=\"timeToIdleSeconds\" value=\"12000\"/>\n\t<property name=\"timeToLiveSeconds\" value=\"3600\"/>\n\t<!-- 同ehcache参数maxElementsInMemory -->\n\t<property name=\"maxEntriesLocalHeap\" value=\"1000\"/>\n\t<!-- 同ehcache参数maxElementsOnDisk -->\n\t<property name=\"maxEntriesLocalDisk\" value=\"10000000\"/>\n\t<property name=\"memoryStoreEvictionPolicy\" value=\"LRU\"/>\n</cache>\n```\n\n## 应用场景与局限性\n\n### 应用场景\n\n- **对查询频率高，变化频率低的数据建议使用二级缓存。**\n\n\n- 对于**访问多的查询请求且用户对查询结果实时性要求不高**，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度。\n\n业务场景比如：\n\n- 耗时较高的统计分析sql\n- 电话账单查询sql等。\n\n实现方法如下：**通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval**，比如设置为30分钟、60分钟、24小时等，根据需求而定。\n\n### 局限性\n\nmybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，**因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空**。解决此类问题需要在业务层根据需求对数据有针对性缓存。\n\n# 总结\n\n- Mybatis的一级缓存是SqlSession级别的。只能访问自己的sqlSession内的缓存。如果Mybatis与Spring整合了，Spring会自动关闭sqlSession的。所以一级缓存会失效。\n- 一级缓存的原理是map集合，Mybatis默认就支持一级缓存。\n- **二级缓存是Mapper级别的。只要在Mapper namespace下都可以使用二级缓存。需要自己手动去配置二级缓存。**\n- Mybatis的缓存我们可以使用Ehcache框架来进行管理，Ehcache实现Cache接口就代表使用Ehcache来环境Mybatis缓存。\n\n## 参考\n\n[***Mybatis【逆向工程，缓存，代理】知识要点***](https://juejin.im/post/5aa655d6518825556020924e#comment)","slug":"Mybatis之缓存","published":1,"updated":"2018-03-20T06:17:57.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u17001f3gfkghxtn5uv","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Mybatis中有一级缓存和二级缓存，默认情况下一级缓存是开启的，而且是不能关闭的。一级缓存是指SqlSession级别的缓存，当在同一个SqlSession中进行相同的SQL语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存1024条SQL。二级缓存是指可以跨SqlSession的缓存。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"Mybatis缓存\"><a href=\"#Mybatis缓存\" class=\"headerlink\" title=\"Mybatis缓存\"></a>Mybatis缓存</h1><p>缓存的意义：将用户经常<strong>查询的数据放在缓存（内存）中</strong>，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p>\n<p><strong>Mybatis提供一级缓存和二级缓存</strong></p>\n<ul>\n<li>mybatis一级缓存是一个SqlSession级别，sqlsession只能访问自己的一级缓存的数据。</li>\n<li>二级缓存是跨sqlSession，是mapper级别的缓存，对于mapper级别的缓存不同的sqlsession是可以共享的。</li>\n</ul>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-index.png\" algin=\"center\"></div>\n\n<h2 id=\"Mybatis一级缓存\"><a href=\"#Mybatis一级缓存\" class=\"headerlink\" title=\"Mybatis一级缓存\"></a>Mybatis一级缓存</h2><p>Mybatis的一级缓存原理：</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-first.png\" algin=\"center\"></div>\n\n<p>第一次发出一个查询sql，sql查询结果写入sqlsession的一级缓存中，缓存使用的数据结构是一个map<code>&lt;key,value&gt;</code></p>\n<blockquote>\n<p>key：hashcode + sql + sql输入参数 + 输出参数（sql的唯一标识）</p>\n<p>value：用户信息</p>\n</blockquote>\n<p>同一个sqlsession再次发出相同的sql，就从缓存中取不走数据库。如果两次中间出现commit操作（修改、添加、删除），本sqlsession中的一级缓存区域全部清空，下次再去缓存中查询不到所以要从数据库查询，从数据库查询到再写入缓存。</p>\n<p>Mybatis一级缓存值得注意的地方：</p>\n<ol>\n<li><em>Mybatis默认就是支持一级缓存的，并不需要我们配置。</em></li>\n<li><strong>mybatis和spring整合后进行mapper代理开发，不支持一级缓存，mybatis和spring整合，spring按照mapper的模板去生成mapper代理对象，模板中在最后统一关闭sqlsession</strong>。</li>\n</ol>\n<h2 id=\"Mybatis二级缓存\"><a href=\"#Mybatis二级缓存\" class=\"headerlink\" title=\"Mybatis二级缓存\"></a>Mybatis二级缓存</h2><p>二级缓存原理：</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-2.png\" algin=\"center\"></div>\n\n<p><strong>二级缓存的范围是mapper级别（mapper同一个命名空间）</strong>，mapper以命名空间为单位创建缓存数据结构，结构是map<code>&lt;key、value&gt;</code>。</p>\n<h3 id=\"二级缓存配置\"><a href=\"#二级缓存配置\" class=\"headerlink\" title=\"二级缓存配置\"></a>二级缓存配置</h3><p>Mybatis二级缓存需要手动开启，需要在Mybatis的配置文件中配置二级缓存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 全局配置参数 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 开启二级缓存 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上面已经说了，二级缓存的范围是mapper级别的，因此Mapper如果要使用二级缓存，还需要在对应的映射文件中配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.rainbowhorse.test.dao.TestDataDao\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 在mapper中开启二级缓存 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>查询结果映射的pojo序列化</p>\n<p>mybatis二级缓存需要将查询结果映射的pojo实现 java.io.serializable接口，如果不实现则抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: com.rainbowhorse.test.po.User</div></pre></td></tr></table></figure>\n<p>二级缓存可以将内存的数据写到磁盘，存在对象的序列化和反序列化，所以要实现java.io.serializable接口。 如果结果映射的pojo中还包括了pojo，都要实现java.io.serializable接口。</p>\n<h3 id=\"禁用二级缓存\"><a href=\"#禁用二级缓存\" class=\"headerlink\" title=\"禁用二级缓存\"></a>禁用二级缓存</h3><p>对于变化频率较高的sql，需要禁用二级缓存：</p>\n<p>在statement中设置useCache=false可以禁用当前select语句的二级缓存，即每次查询都会发出sql去查询，默认情况是true，即该sql使用二级缓存。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findOrderListResultMap\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"ordersUserMap\"</span> <span class=\"attr\">useCache</span>=<span class=\"string\">\"false\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"刷新缓存\"><a href=\"#刷新缓存\" class=\"headerlink\" title=\"刷新缓存\"></a>刷新缓存</h3><p>我们的缓存都是在查询语句中配置，而使用增删改的时候，缓存默认就会被清空【刷新了】。缓存其实就是为我们的查询服务的，对于增删改而言，如果我们的缓存保存了增删改后的数据，那么再次读取时就会读到脏数据了！</p>\n<p>我们在特定的情况下，还可以单独配置刷新缓存【但不建议使用】flushCache，默认是的true。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateUser\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"cn.itcast.mybatis.po.User\"</span> <span class=\"attr\">flushCache</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">\t\tupdate user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"缓存参数\"><a href=\"#缓存参数\" class=\"headerlink\" title=\"缓存参数\"></a>缓存参数</h3><p><strong>mybatis的cache参数只适用于mybatis维护缓存。</strong></p>\n<blockquote>\n<p>flushInterval（刷新间隔）可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。<br>size（引用数目）可以被设置为任意正整数，要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值是1024。<br>readOnly（只读）属性可以被设置为true或false。只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p>\n</blockquote>\n<p>如下例子：<br><code>&lt;cache  eviction=&quot;FIFO&quot;  flushInterval=&quot;60000&quot;  size=&quot;512&quot;  readOnly=&quot;true&quot;/&gt;</code><br>这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会导致冲突。可用的收回策略有, 默认的是 LRU:</p>\n<ol>\n<li>LRU – 最近最少使用的:移除最长时间不被使用的对象。</li>\n<li>FIFO – 先进先出:按对象进入缓存的顺序来移除它们。</li>\n<li>SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。</li>\n<li>WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li>\n</ol>\n<h1 id=\"Mybatis和Ehcache整合\"><a href=\"#Mybatis和Ehcache整合\" class=\"headerlink\" title=\"Mybatis和Ehcache整合\"></a>Mybatis和Ehcache整合</h1><p><strong>Ehcache是专门用于管理缓存的，Mybatis的缓存交由ehcache管理会更加得当。在mybatis中提供一个cache接口，只要实现cache接口就可以把缓存数据灵活的管理起来</strong>。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcache.png\" algin=\"center\"></div>\n\n<h2 id=\"整合jar包\"><a href=\"#整合jar包\" class=\"headerlink\" title=\"整合jar包\"></a>整合jar包</h2><ul>\n<li>mybatis-ehcache-1.0.2.jar</li>\n<li>ehcache-core-2.6.5.jar</li>\n</ul>\n<p>Ehcache对cache接口的实现类：</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcachecache.png\" algin=\"center\"></div>\n\n<h2 id=\"ehcache-xml配置信息\"><a href=\"#ehcache-xml配置信息\" class=\"headerlink\" title=\"ehcache.xml配置信息\"></a>ehcache.xml配置信息</h2><p>这个xml配置文件是配置<strong>全局的缓存管理方案</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ehcache</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xsi:noNamespaceSchemaLocation</span>=<span class=\"string\">\"../config/ehcache.xsd\"</span>&gt;</div><div class=\"line\">\t<span class=\"comment\">&lt;!--diskStore：缓存数据持久化的目录 地址  --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">diskStore</span> <span class=\"attr\">path</span>=<span class=\"string\">\"F:\\develop\\ehcache\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">defaultCache</span> </span></div><div class=\"line\">\t\t<span class=\"attr\">maxElementsInMemory</span>=<span class=\"string\">\"1000\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">maxElementsOnDisk</span>=<span class=\"string\">\"10000000\"</span></div><div class=\"line\">\t\t<span class=\"attr\">eternal</span>=<span class=\"string\">\"false\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">overflowToDisk</span>=<span class=\"string\">\"false\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">diskPersistent</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">\t\t<span class=\"attr\">timeToIdleSeconds</span>=<span class=\"string\">\"120\"</span></div><div class=\"line\">\t\t<span class=\"attr\">timeToLiveSeconds</span>=<span class=\"string\">\"120\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">diskExpiryThreadIntervalSeconds</span>=<span class=\"string\">\"120\"</span></div><div class=\"line\">\t\t<span class=\"attr\">memoryStoreEvictionPolicy</span>=<span class=\"string\">\"LRU\"</span>&gt;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">defaultCache</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ehcache</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果我们Mapper想单独拥有一些特性，需要在mapper.xml中单独配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 单位：毫秒 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.caches.ehcache.EhcacheCache\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeToIdleSeconds\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"12000\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeToLiveSeconds\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3600\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 同ehcache参数maxElementsInMemory --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxEntriesLocalHeap\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1000\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 同ehcache参数maxElementsOnDisk --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxEntriesLocalDisk\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10000000\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"memoryStoreEvictionPolicy\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"LRU\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cache</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"应用场景与局限性\"><a href=\"#应用场景与局限性\" class=\"headerlink\" title=\"应用场景与局限性\"></a>应用场景与局限性</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><strong>对查询频率高，变化频率低的数据建议使用二级缓存。</strong></li>\n</ul>\n<ul>\n<li>对于<strong>访问多的查询请求且用户对查询结果实时性要求不高</strong>，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度。</li>\n</ul>\n<p>业务场景比如：</p>\n<ul>\n<li>耗时较高的统计分析sql</li>\n<li>电话账单查询sql等。</li>\n</ul>\n<p>实现方法如下：<strong>通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval</strong>，比如设置为30分钟、60分钟、24小时等，根据需求而定。</p>\n<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3><p>mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，<strong>因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空</strong>。解决此类问题需要在业务层根据需求对数据有针对性缓存。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>Mybatis的一级缓存是SqlSession级别的。只能访问自己的sqlSession内的缓存。如果Mybatis与Spring整合了，Spring会自动关闭sqlSession的。所以一级缓存会失效。</li>\n<li>一级缓存的原理是map集合，Mybatis默认就支持一级缓存。</li>\n<li><strong>二级缓存是Mapper级别的。只要在Mapper namespace下都可以使用二级缓存。需要自己手动去配置二级缓存。</strong></li>\n<li>Mybatis的缓存我们可以使用Ehcache框架来进行管理，Ehcache实现Cache接口就代表使用Ehcache来环境Mybatis缓存。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.im/post/5aa655d6518825556020924e#comment\" target=\"_blank\" rel=\"external\"><strong><em>Mybatis【逆向工程，缓存，代理】知识要点</em></strong></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Mybatis中有一级缓存和二级缓存，默认情况下一级缓存是开启的，而且是不能关闭的。一级缓存是指SqlSession级别的缓存，当在同一个SqlSession中进行相同的SQL语句查询时，第二次以后的查询不会从数据库查询，而是直接从缓存中获取，一级缓存最多缓存1024条SQL。二级缓存是指可以跨SqlSession的缓存。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"Mybatis缓存\"><a href=\"#Mybatis缓存\" class=\"headerlink\" title=\"Mybatis缓存\"></a>Mybatis缓存</h1><p>缓存的意义：将用户经常<strong>查询的数据放在缓存（内存）中</strong>，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p>\n<p><strong>Mybatis提供一级缓存和二级缓存</strong></p>\n<ul>\n<li>mybatis一级缓存是一个SqlSession级别，sqlsession只能访问自己的一级缓存的数据。</li>\n<li>二级缓存是跨sqlSession，是mapper级别的缓存，对于mapper级别的缓存不同的sqlsession是可以共享的。</li>\n</ul>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-index.png\" algin=\"center\"/></div>\n\n<h2 id=\"Mybatis一级缓存\"><a href=\"#Mybatis一级缓存\" class=\"headerlink\" title=\"Mybatis一级缓存\"></a>Mybatis一级缓存</h2><p>Mybatis的一级缓存原理：</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-first.png\" algin=\"center\"/></div>\n\n<p>第一次发出一个查询sql，sql查询结果写入sqlsession的一级缓存中，缓存使用的数据结构是一个map<code>&lt;key,value&gt;</code></p>\n<blockquote>\n<p>key：hashcode + sql + sql输入参数 + 输出参数（sql的唯一标识）</p>\n<p>value：用户信息</p>\n</blockquote>\n<p>同一个sqlsession再次发出相同的sql，就从缓存中取不走数据库。如果两次中间出现commit操作（修改、添加、删除），本sqlsession中的一级缓存区域全部清空，下次再去缓存中查询不到所以要从数据库查询，从数据库查询到再写入缓存。</p>\n<p>Mybatis一级缓存值得注意的地方：</p>\n<ol>\n<li><em>Mybatis默认就是支持一级缓存的，并不需要我们配置。</em></li>\n<li><strong>mybatis和spring整合后进行mapper代理开发，不支持一级缓存，mybatis和spring整合，spring按照mapper的模板去生成mapper代理对象，模板中在最后统一关闭sqlsession</strong>。</li>\n</ol>\n<h2 id=\"Mybatis二级缓存\"><a href=\"#Mybatis二级缓存\" class=\"headerlink\" title=\"Mybatis二级缓存\"></a>Mybatis二级缓存</h2><p>二级缓存原理：</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/cache-2.png\" algin=\"center\"/></div>\n\n<p><strong>二级缓存的范围是mapper级别（mapper同一个命名空间）</strong>，mapper以命名空间为单位创建缓存数据结构，结构是map<code>&lt;key、value&gt;</code>。</p>\n<h3 id=\"二级缓存配置\"><a href=\"#二级缓存配置\" class=\"headerlink\" title=\"二级缓存配置\"></a>二级缓存配置</h3><p>Mybatis二级缓存需要手动开启，需要在Mybatis的配置文件中配置二级缓存</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 全局配置参数 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 开启二级缓存 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheEnabled\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上面已经说了，二级缓存的范围是mapper级别的，因此Mapper如果要使用二级缓存，还需要在对应的映射文件中配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.rainbowhorse.test.dao.TestDataDao\"</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 在mapper中开启二级缓存 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>查询结果映射的pojo序列化</p>\n<p>mybatis二级缓存需要将查询结果映射的pojo实现 java.io.serializable接口，如果不实现则抛出异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: com.rainbowhorse.test.po.User</div></pre></td></tr></table></figure>\n<p>二级缓存可以将内存的数据写到磁盘，存在对象的序列化和反序列化，所以要实现java.io.serializable接口。 如果结果映射的pojo中还包括了pojo，都要实现java.io.serializable接口。</p>\n<h3 id=\"禁用二级缓存\"><a href=\"#禁用二级缓存\" class=\"headerlink\" title=\"禁用二级缓存\"></a>禁用二级缓存</h3><p>对于变化频率较高的sql，需要禁用二级缓存：</p>\n<p>在statement中设置useCache=false可以禁用当前select语句的二级缓存，即每次查询都会发出sql去查询，默认情况是true，即该sql使用二级缓存。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findOrderListResultMap\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"ordersUserMap\"</span> <span class=\"attr\">useCache</span>=<span class=\"string\">\"false\"</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"刷新缓存\"><a href=\"#刷新缓存\" class=\"headerlink\" title=\"刷新缓存\"></a>刷新缓存</h3><p>我们的缓存都是在查询语句中配置，而使用增删改的时候，缓存默认就会被清空【刷新了】。缓存其实就是为我们的查询服务的，对于增删改而言，如果我们的缓存保存了增删改后的数据，那么再次读取时就会读到脏数据了！</p>\n<p>我们在特定的情况下，还可以单独配置刷新缓存【但不建议使用】flushCache，默认是的true。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateUser\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"cn.itcast.mybatis.po.User\"</span> <span class=\"attr\">flushCache</span>=<span class=\"string\">\"false\"</span>&gt;</span></div><div class=\"line\">\t\tupdate user set username=#&#123;username&#125;,birthday=#&#123;birthday&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id=#&#123;id&#125;</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"缓存参数\"><a href=\"#缓存参数\" class=\"headerlink\" title=\"缓存参数\"></a>缓存参数</h3><p><strong>mybatis的cache参数只适用于mybatis维护缓存。</strong></p>\n<blockquote>\n<p>flushInterval（刷新间隔）可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。<br>size（引用数目）可以被设置为任意正整数，要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值是1024。<br>readOnly（只读）属性可以被设置为true或false。只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。</p>\n</blockquote>\n<p>如下例子：<br><code>&lt;cache  eviction=&quot;FIFO&quot;  flushInterval=&quot;60000&quot;  size=&quot;512&quot;  readOnly=&quot;true&quot;/&gt;</code><br>这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会导致冲突。可用的收回策略有, 默认的是 LRU:</p>\n<ol>\n<li>LRU – 最近最少使用的:移除最长时间不被使用的对象。</li>\n<li>FIFO – 先进先出:按对象进入缓存的顺序来移除它们。</li>\n<li>SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。</li>\n<li>WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li>\n</ol>\n<h1 id=\"Mybatis和Ehcache整合\"><a href=\"#Mybatis和Ehcache整合\" class=\"headerlink\" title=\"Mybatis和Ehcache整合\"></a>Mybatis和Ehcache整合</h1><p><strong>Ehcache是专门用于管理缓存的，Mybatis的缓存交由ehcache管理会更加得当。在mybatis中提供一个cache接口，只要实现cache接口就可以把缓存数据灵活的管理起来</strong>。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcache.png\" algin=\"center\"/></div>\n\n<h2 id=\"整合jar包\"><a href=\"#整合jar包\" class=\"headerlink\" title=\"整合jar包\"></a>整合jar包</h2><ul>\n<li>mybatis-ehcache-1.0.2.jar</li>\n<li>ehcache-core-2.6.5.jar</li>\n</ul>\n<p>Ehcache对cache接口的实现类：</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/Mybatis/ehcachecache.png\" algin=\"center\"/></div>\n\n<h2 id=\"ehcache-xml配置信息\"><a href=\"#ehcache-xml配置信息\" class=\"headerlink\" title=\"ehcache.xml配置信息\"></a>ehcache.xml配置信息</h2><p>这个xml配置文件是配置<strong>全局的缓存管理方案</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ehcache</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:noNamespaceSchemaLocation</span>=<span class=\"string\">\"../config/ehcache.xsd\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!--diskStore：缓存数据持久化的目录 地址  --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">diskStore</span> <span class=\"attr\">path</span>=<span class=\"string\">\"F:\\develop\\ehcache\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">defaultCache</span> </div><div class=\"line\">\t\t<span class=\"attr\">maxElementsInMemory</span>=<span class=\"string\">\"1000\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">maxElementsOnDisk</span>=<span class=\"string\">\"10000000\"</span></div><div class=\"line\">\t\t<span class=\"attr\">eternal</span>=<span class=\"string\">\"false\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">overflowToDisk</span>=<span class=\"string\">\"false\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">diskPersistent</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">\t\t<span class=\"attr\">timeToIdleSeconds</span>=<span class=\"string\">\"120\"</span></div><div class=\"line\">\t\t<span class=\"attr\">timeToLiveSeconds</span>=<span class=\"string\">\"120\"</span> </div><div class=\"line\">\t\t<span class=\"attr\">diskExpiryThreadIntervalSeconds</span>=<span class=\"string\">\"120\"</span></div><div class=\"line\">\t\t<span class=\"attr\">memoryStoreEvictionPolicy</span>=<span class=\"string\">\"LRU\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">defaultCache</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ehcache</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如果我们Mapper想单独拥有一些特性，需要在mapper.xml中单独配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 单位：毫秒 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">cache</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.mybatis.caches.ehcache.EhcacheCache\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeToIdleSeconds\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"12000\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeToLiveSeconds\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3600\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 同ehcache参数maxElementsInMemory --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxEntriesLocalHeap\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1000\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 同ehcache参数maxElementsOnDisk --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxEntriesLocalDisk\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10000000\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"memoryStoreEvictionPolicy\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"LRU\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">cache</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"应用场景与局限性\"><a href=\"#应用场景与局限性\" class=\"headerlink\" title=\"应用场景与局限性\"></a>应用场景与局限性</h2><h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><strong>对查询频率高，变化频率低的数据建议使用二级缓存。</strong></li>\n</ul>\n<ul>\n<li>对于<strong>访问多的查询请求且用户对查询结果实时性要求不高</strong>，此时可采用mybatis二级缓存技术降低数据库访问量，提高访问速度。</li>\n</ul>\n<p>业务场景比如：</p>\n<ul>\n<li>耗时较高的统计分析sql</li>\n<li>电话账单查询sql等。</li>\n</ul>\n<p>实现方法如下：<strong>通过设置刷新间隔时间，由mybatis每隔一段时间自动清空缓存，根据数据变化频率设置缓存刷新间隔flushInterval</strong>，比如设置为30分钟、60分钟、24小时等，根据需求而定。</p>\n<h3 id=\"局限性\"><a href=\"#局限性\" class=\"headerlink\" title=\"局限性\"></a>局限性</h3><p>mybatis二级缓存对细粒度的数据级别的缓存实现不好，比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，<strong>因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空</strong>。解决此类问题需要在业务层根据需求对数据有针对性缓存。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>Mybatis的一级缓存是SqlSession级别的。只能访问自己的sqlSession内的缓存。如果Mybatis与Spring整合了，Spring会自动关闭sqlSession的。所以一级缓存会失效。</li>\n<li>一级缓存的原理是map集合，Mybatis默认就支持一级缓存。</li>\n<li><strong>二级缓存是Mapper级别的。只要在Mapper namespace下都可以使用二级缓存。需要自己手动去配置二级缓存。</strong></li>\n<li>Mybatis的缓存我们可以使用Ehcache框架来进行管理，Ehcache实现Cache接口就代表使用Ehcache来环境Mybatis缓存。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.im/post/5aa655d6518825556020924e#comment\"><strong><em>Mybatis【逆向工程，缓存，代理】知识要点</em></strong></a></p>"},{"title":"Nginx配置文件详解","date":"2018-01-24T06:12:52.000Z","_content":"\n# 引言\n\n之前介绍了Linux下安装Nginx，Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 。它支持内核 Poll 模型，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。<div align=center>\n\n<img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/index.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# Nginx特点\n\nNginx 具有很高的稳定性。其它 HTTP 服务器，当遇到访问的峰值，或者有人恶意发起慢速连接时，也很可能会导致服务器物理内存耗尽频繁交换，失去响应，只能重启服务器。例如当前 apache 一旦上到 200 个以上进程，web响应速度就明显非常缓慢了。而 Nginx 采取了分阶段资源分配技术，使得它的 CPU 与内存占用率非常低。Nginx 官方表示保持 10,000 个没有活动的连接，它只占 2.5M 内存，所以类似 DOS 这样的攻击对 Nginx 来说基本上是毫无用处的。就稳定性而言,Nginx 比 lighthttpd 更胜一筹。\n\nNginx 支持热部署。它的启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。\n\n# Nginx的用处\n\n说了这么多Nginx的优点，Nginx在开发中最常用作反向代理服务器，但是Nginx的用处可不止这一点。\n\n## Nginx配置虚拟主机\n\n虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供www服务，这样就可以实现一台主机对外提供多个web服务，每个虚拟主机之间是独立的，互不影响的。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/1.png\" algin=\"center\"/>\n\n</div>\n\n1、 基于ip的虚拟主机\n\n2、基于端口的虚拟主机\n\n3、基于域名的虚拟主机\n\n## Nginx反向代理\n\n通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的。\n\n​\t而反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/2.png\" algin=\"center\"/>\n\n</div>\n\n# Nginx配置详解\n\n```nginx\n#用户\nuser nginx ;\n\n#工作进程，根据硬件调整，大于等于cpu核数\nworker_processes 8;\n\n#错误日志\nerror_log logs/nginx_error.log crit;\n#pid放置的位置\npid logs/nginx.pid;\n\n#指定进程可以打开的最大描述符\nworker_rlimit_nofile 204800;\n这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文\n件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。\n现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。\n这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。\n\nevents\n{\n  \t#使用epoll的I/O 模型\n\tuse epoll;\n    补充说明:\n    与apache相类，nginx针对不同的操作系统，有不同的事件模型\n    A）标准事件模型\n    Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll\n    B）高效事件模型\n    Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。\n    Epoll:使用于Linux内核2.6版本及以后的系统。\n    /dev/poll：使用于Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。\n    Eventport：使用于Solaris 10. 为了防止出现内核崩溃的问题， 有必要安装安全补丁\n\n    #工作进程的最大连接数量，根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行\n\tworker_connections 204800;\n\t每个进程允许的最多连接数， 理论上每台nginx服务器的最大连接数为worker_processes*worker_connections\n    \n\t#keepalive超时时间。\n\tkeepalive_timeout 60;\n\n  \t#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。\n\topen_file_cache max=65535 inactive=60s;\n\n  \t#这个是指多长时间检查一次缓存的有效信息。\n\topen_file_cache_valid 80s;\n  \n\t#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。\n\topen_file_cache_min_uses 1;\n}\n\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp\n{\n  \t#设定mime类型,类型由mime.type文件定义\n\tinclude mime.types;\n\tdefault_type application/octet-stream;\n\n\n\tlog_format main '$host $status [$time_local] $remote_addr [$time_local] $request_uri '\n'\"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\" ''$bytes_sent $request_time $sent_http_x_cache_hit';\nlog_format log404 '$status [$time_local] $remote_addr $host$request_uri $sent_http_location';\n\n$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；\n$remote_user：用来记录客户端用户名称；\n$time_local： 用来记录访问时间与时区；\n$request： 用来记录请求的url与http协议；\n$status： 用来记录请求状态；成功是200，\n$body_bytes_s ent ：记录发送给客户端文件主体内容大小；\n$http_referer：用来记录从那个页面链接访问过来的；\n$http_user_agent：记录客户毒啊浏览器的相关信息；\n通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址；\n\n\t#用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径；\n    # access_log /usr/local/nginx/logs/access_log main;\n\taccess_log /dev/null;\n\t\n  \t#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.\n\tserver_names_hash_bucket_size 128;\n\n  \t#客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。\n\tclient_header_buffer_size 128k;\n\n  #客户请求头缓冲大小\n  n#ginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取如果设置过小HTTP头/Cookie过大 会报400 错误nginx 400 bad request求行如果超过buffer，就会报HTTP 414错误(URI Too Long)nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的\n\tlarge_client_header_buffers 8 128k;\n\nHTTP错误(Bad Request)。\n#使用字段:http, server, location 这个指令指定缓存是否启用,如果启用,将记录文件以下信息: ·打开的文件描述符,大小信息和修改时间. ·存在的目录信息. ·在搜索文件过程中的错误信息 --没有这个文件,无法正确读取,参考open_file_cache_errors指令选项:·max -指定缓存的最大数目,如果缓存溢出,最长使用过的文件(LRU)将被移除\n#例: open_file_cache max=1000 inactive=20s; open_file_cache_valid 30s; open_file_cache_min_uses 2; open_file_cache_errors on;\n\topen_file_cache max 102400\n\n\t#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.\n\topen_file_cache_errors\n\n\t#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如 果使用更大的值,文件描述符在cache中总是打开状态.\n\topen_file_cache_min_uses\n\t\n    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.\n\topen_file_cache_valid\n    \n\t#设定通过nginx上传文件的大小\n\tclient_max_body_size 300m;\n\t\n  \t#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，\n#对于普通应用，必须设为on。\n#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。\n\tsendfile on;\n\t\n  \t#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n\ttcp_nopush on;\n  \n\ttcp_nodelay on;\n  \t\n\t#后端服务器连接的超时时间_发起握手等候响应超时时间\n\tproxy_connect_timeout 90; \n\t\n  \t#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n\tproxy_read_timeout 180;\n\n\t#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n\tproxy_send_timeout 180;\n\n  \t#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小\n\tproxy_buffer_size 256k;\n\t\n  \t#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k\n\tproxy_buffers 8 256k;\n\n\tproxy_busy_buffers_size 256k;\n\n\t#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长\n\tproxy_temp_file_write_size 256k;\n\t\n  \t#proxy_temp_path和proxy_cache_path指定的路径必须在同一分区\n\tproxy_temp_path /data0/proxy_temp_dir;\n\t#设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。\n\tproxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;\n\t\n    client_header_timeout 5;\n    client_body_timeout 5;\n    send_timeout 5;\n  \n\t#keepalive超时时间。\n\tkeepalive_timeout 120;\n\n\t#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\n#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误\n\tclient_body_buffer_size 512k;\n  \n\t#表示使nginx阻止HTTP应答代码为400或者更高的应答。\n\tproxy_intercept_errors on;\n\n  \t #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n  \n  \t#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n  \n  \t#开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n    upstream img_relay {\n       server 127.0.0.1:8027;\n       server 127.0.0.1:8028;\n       server 127.0.0.1:8029;\n       hash $request_uri;\n    }\n  \n \t#如果请求为img_relay:80,则交给名称为img_relay的Nginx集群来处理\n\tserver{\n         listen  80;\n         server_name  img_relay;\n#\t\t limit_req   zone=req_one  burst=5 nodelay;\n\n\t\t  location ~ .*.jsp$  {\n\t\t\t\t   proxy_ignore_client_abort   on;\n\t\t\t\t   proxy_pass\t\thttp://img_relay;\t#http:// + upstream名称\n\t\t\t\t   proxy_set_header   Host             $host;\n\t\t\t\t   proxy_set_header   X-Real-IP        $remote_addr;\n\t\t\t\t   proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n\t\t\t\t   proxy_connect_timeout       60; \t #nginx跟后端服务器连接超时时间(代理连接超时)\n\t\t\t\t   proxy_read_timeout          600;  #连接成功后，后端服务器响应时间(代理接收超时)\n\t\t\t\t   proxy_send_timeout          60;\t #后端服务器数据回传时间(代理发送超时)\n\t\t\t\t   proxy_buffer_size 128k;          #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n\t\t\t\t   proxy_buffers   32 128k;           #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n\t\t\t\t   proxy_busy_buffers_size 128k;   #高负荷下缓冲大小（proxy_buffers*2）\n\t\t  }\n      }\n\nnginx的upstream目前支持4种方式的分配\n1、轮询（默认）\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n    \n2、weight\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n例如：\nupstream bakend {\nserver 192.168.0.14 weight=10;\nserver 192.168.0.15 weight=10;\n}\n\n3、ip_hash\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n例如：\nupstream bakend {\nip_hash;\nserver 192.168.0.14:88;\nserver 192.168.0.15:80;\n}\n\n4、fair（第三方）\n按后端服务器的响应时间来分配请求，响应时间短的优先分配。\nupstream backend {\nserver server1;\nserver server2;\nfair;\n}\n\n5、url_hash（第三方）\n按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n\n\n例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\nupstream backend {\n\tserver squid1:3128;\n\tserver squid2:3128;\n\thash $request_uri;\n\thash_method crc32;\n}\n\ntips:\nupstream bakend{#定义负载均衡设备的Ip及设备状态\n    ip_hash;\n    server 127.0.0.1:9090 down;\n    server 127.0.0.1:8080 weight=2;\n    server 127.0.0.1:6060;\n    server 127.0.0.1:7070 backup;\n}\n在需要使用负载均衡的server中增加\nproxy_pass http://bakend/;\n\n每个设备的状态设置为:\n1.down表示单前的server暂时不参与负载\n2.weight默认为1.weight越大，负载的权重就越大。\n3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误\n4.fail_timeout:max_fails次失败后，暂停的时间。\n5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\nnginx支持同时设置多组的负载均衡，用来给不用的server来使用。\n\nclient_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug\nclient_body_temp_path设置记录文件的目录 可以设置最多3层目录\n\nlocation对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡\n```","source":"_posts/Nginx配置文件详解.md","raw":"---\ntitle: Nginx配置文件详解\ndate: 2018-01-24 14:12:52\ntags: [nginx]\ncategories: technology\n---\n\n# 引言\n\n之前介绍了Linux下安装Nginx，Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 。它支持内核 Poll 模型，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。<div align=center>\n\n<img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/index.png\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# Nginx特点\n\nNginx 具有很高的稳定性。其它 HTTP 服务器，当遇到访问的峰值，或者有人恶意发起慢速连接时，也很可能会导致服务器物理内存耗尽频繁交换，失去响应，只能重启服务器。例如当前 apache 一旦上到 200 个以上进程，web响应速度就明显非常缓慢了。而 Nginx 采取了分阶段资源分配技术，使得它的 CPU 与内存占用率非常低。Nginx 官方表示保持 10,000 个没有活动的连接，它只占 2.5M 内存，所以类似 DOS 这样的攻击对 Nginx 来说基本上是毫无用处的。就稳定性而言,Nginx 比 lighthttpd 更胜一筹。\n\nNginx 支持热部署。它的启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。\n\n# Nginx的用处\n\n说了这么多Nginx的优点，Nginx在开发中最常用作反向代理服务器，但是Nginx的用处可不止这一点。\n\n## Nginx配置虚拟主机\n\n虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供www服务，这样就可以实现一台主机对外提供多个web服务，每个虚拟主机之间是独立的，互不影响的。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/1.png\" algin=\"center\"/>\n\n</div>\n\n1、 基于ip的虚拟主机\n\n2、基于端口的虚拟主机\n\n3、基于域名的虚拟主机\n\n## Nginx反向代理\n\n通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的。\n\n​\t而反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/2.png\" algin=\"center\"/>\n\n</div>\n\n# Nginx配置详解\n\n```nginx\n#用户\nuser nginx ;\n\n#工作进程，根据硬件调整，大于等于cpu核数\nworker_processes 8;\n\n#错误日志\nerror_log logs/nginx_error.log crit;\n#pid放置的位置\npid logs/nginx.pid;\n\n#指定进程可以打开的最大描述符\nworker_rlimit_nofile 204800;\n这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文\n件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。\n现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。\n这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。\n\nevents\n{\n  \t#使用epoll的I/O 模型\n\tuse epoll;\n    补充说明:\n    与apache相类，nginx针对不同的操作系统，有不同的事件模型\n    A）标准事件模型\n    Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll\n    B）高效事件模型\n    Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。\n    Epoll:使用于Linux内核2.6版本及以后的系统。\n    /dev/poll：使用于Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。\n    Eventport：使用于Solaris 10. 为了防止出现内核崩溃的问题， 有必要安装安全补丁\n\n    #工作进程的最大连接数量，根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行\n\tworker_connections 204800;\n\t每个进程允许的最多连接数， 理论上每台nginx服务器的最大连接数为worker_processes*worker_connections\n    \n\t#keepalive超时时间。\n\tkeepalive_timeout 60;\n\n  \t#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。\n\topen_file_cache max=65535 inactive=60s;\n\n  \t#这个是指多长时间检查一次缓存的有效信息。\n\topen_file_cache_valid 80s;\n  \n\t#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。\n\topen_file_cache_min_uses 1;\n}\n\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp\n{\n  \t#设定mime类型,类型由mime.type文件定义\n\tinclude mime.types;\n\tdefault_type application/octet-stream;\n\n\n\tlog_format main '$host $status [$time_local] $remote_addr [$time_local] $request_uri '\n'\"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\" ''$bytes_sent $request_time $sent_http_x_cache_hit';\nlog_format log404 '$status [$time_local] $remote_addr $host$request_uri $sent_http_location';\n\n$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；\n$remote_user：用来记录客户端用户名称；\n$time_local： 用来记录访问时间与时区；\n$request： 用来记录请求的url与http协议；\n$status： 用来记录请求状态；成功是200，\n$body_bytes_s ent ：记录发送给客户端文件主体内容大小；\n$http_referer：用来记录从那个页面链接访问过来的；\n$http_user_agent：记录客户毒啊浏览器的相关信息；\n通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址；\n\n\t#用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径；\n    # access_log /usr/local/nginx/logs/access_log main;\n\taccess_log /dev/null;\n\t\n  \t#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.\n\tserver_names_hash_bucket_size 128;\n\n  \t#客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。\n\tclient_header_buffer_size 128k;\n\n  #客户请求头缓冲大小\n  n#ginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取如果设置过小HTTP头/Cookie过大 会报400 错误nginx 400 bad request求行如果超过buffer，就会报HTTP 414错误(URI Too Long)nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的\n\tlarge_client_header_buffers 8 128k;\n\nHTTP错误(Bad Request)。\n#使用字段:http, server, location 这个指令指定缓存是否启用,如果启用,将记录文件以下信息: ·打开的文件描述符,大小信息和修改时间. ·存在的目录信息. ·在搜索文件过程中的错误信息 --没有这个文件,无法正确读取,参考open_file_cache_errors指令选项:·max -指定缓存的最大数目,如果缓存溢出,最长使用过的文件(LRU)将被移除\n#例: open_file_cache max=1000 inactive=20s; open_file_cache_valid 30s; open_file_cache_min_uses 2; open_file_cache_errors on;\n\topen_file_cache max 102400\n\n\t#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.\n\topen_file_cache_errors\n\n\t#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如 果使用更大的值,文件描述符在cache中总是打开状态.\n\topen_file_cache_min_uses\n\t\n    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.\n\topen_file_cache_valid\n    \n\t#设定通过nginx上传文件的大小\n\tclient_max_body_size 300m;\n\t\n  \t#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，\n#对于普通应用，必须设为on。\n#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。\n\tsendfile on;\n\t\n  \t#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用\n\ttcp_nopush on;\n  \n\ttcp_nodelay on;\n  \t\n\t#后端服务器连接的超时时间_发起握手等候响应超时时间\n\tproxy_connect_timeout 90; \n\t\n  \t#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）\n\tproxy_read_timeout 180;\n\n\t#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据\n\tproxy_send_timeout 180;\n\n  \t#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小\n\tproxy_buffer_size 256k;\n\t\n  \t#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k\n\tproxy_buffers 8 256k;\n\n\tproxy_busy_buffers_size 256k;\n\n\t#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长\n\tproxy_temp_file_write_size 256k;\n\t\n  \t#proxy_temp_path和proxy_cache_path指定的路径必须在同一分区\n\tproxy_temp_path /data0/proxy_temp_dir;\n\t#设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。\n\tproxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;\n\t\n    client_header_timeout 5;\n    client_body_timeout 5;\n    send_timeout 5;\n  \n\t#keepalive超时时间。\n\tkeepalive_timeout 120;\n\n\t#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。\n#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误\n\tclient_body_buffer_size 512k;\n  \n\t#表示使nginx阻止HTTP应答代码为400或者更高的应答。\n\tproxy_intercept_errors on;\n\n  \t #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。\n    fastcgi_connect_timeout 300;\n    fastcgi_send_timeout 300;\n    fastcgi_read_timeout 300;\n    fastcgi_buffer_size 64k;\n    fastcgi_buffers 4 64k;\n    fastcgi_busy_buffers_size 128k;\n    fastcgi_temp_file_write_size 128k;\n  \n  \t#gzip模块设置\n    gzip on; #开启gzip压缩输出\n    gzip_min_length 1k;    #最小压缩文件大小\n    gzip_buffers 4 16k;    #压缩缓冲区\n    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）\n    gzip_comp_level 2;    #压缩等级\n    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n    gzip_vary on;\n  \n  \t#开启限制IP连接数的时候需要使用\n    #limit_zone crawler $binary_remote_addr 10m;\n\n    upstream img_relay {\n       server 127.0.0.1:8027;\n       server 127.0.0.1:8028;\n       server 127.0.0.1:8029;\n       hash $request_uri;\n    }\n  \n \t#如果请求为img_relay:80,则交给名称为img_relay的Nginx集群来处理\n\tserver{\n         listen  80;\n         server_name  img_relay;\n#\t\t limit_req   zone=req_one  burst=5 nodelay;\n\n\t\t  location ~ .*.jsp$  {\n\t\t\t\t   proxy_ignore_client_abort   on;\n\t\t\t\t   proxy_pass\t\thttp://img_relay;\t#http:// + upstream名称\n\t\t\t\t   proxy_set_header   Host             $host;\n\t\t\t\t   proxy_set_header   X-Real-IP        $remote_addr;\n\t\t\t\t   proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\n\t\t\t\t   proxy_connect_timeout       60; \t #nginx跟后端服务器连接超时时间(代理连接超时)\n\t\t\t\t   proxy_read_timeout          600;  #连接成功后，后端服务器响应时间(代理接收超时)\n\t\t\t\t   proxy_send_timeout          60;\t #后端服务器数据回传时间(代理发送超时)\n\t\t\t\t   proxy_buffer_size 128k;          #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n\t\t\t\t   proxy_buffers   32 128k;           #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n\t\t\t\t   proxy_busy_buffers_size 128k;   #高负荷下缓冲大小（proxy_buffers*2）\n\t\t  }\n      }\n\nnginx的upstream目前支持4种方式的分配\n1、轮询（默认）\n每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。\n    \n2、weight\n指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。\n例如：\nupstream bakend {\nserver 192.168.0.14 weight=10;\nserver 192.168.0.15 weight=10;\n}\n\n3、ip_hash\n每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。\n例如：\nupstream bakend {\nip_hash;\nserver 192.168.0.14:88;\nserver 192.168.0.15:80;\n}\n\n4、fair（第三方）\n按后端服务器的响应时间来分配请求，响应时间短的优先分配。\nupstream backend {\nserver server1;\nserver server2;\nfair;\n}\n\n5、url_hash（第三方）\n按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。\n\n\n例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法\nupstream backend {\n\tserver squid1:3128;\n\tserver squid2:3128;\n\thash $request_uri;\n\thash_method crc32;\n}\n\ntips:\nupstream bakend{#定义负载均衡设备的Ip及设备状态\n    ip_hash;\n    server 127.0.0.1:9090 down;\n    server 127.0.0.1:8080 weight=2;\n    server 127.0.0.1:6060;\n    server 127.0.0.1:7070 backup;\n}\n在需要使用负载均衡的server中增加\nproxy_pass http://bakend/;\n\n每个设备的状态设置为:\n1.down表示单前的server暂时不参与负载\n2.weight默认为1.weight越大，负载的权重就越大。\n3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误\n4.fail_timeout:max_fails次失败后，暂停的时间。\n5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。\n\nnginx支持同时设置多组的负载均衡，用来给不用的server来使用。\n\nclient_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug\nclient_body_temp_path设置记录文件的目录 可以设置最多3层目录\n\nlocation对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡\n```","slug":"Nginx配置文件详解","published":1,"updated":"2018-03-13T05:48:20.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u1a001i3gfke1jo39xq","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>之前介绍了Linux下安装Nginx，Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 。它支持内核 Poll 模型，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。<div align=\"center\"></div></p>\n<p><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/index.png\" algin=\"center\"></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"Nginx特点\"><a href=\"#Nginx特点\" class=\"headerlink\" title=\"Nginx特点\"></a>Nginx特点</h1><p>Nginx 具有很高的稳定性。其它 HTTP 服务器，当遇到访问的峰值，或者有人恶意发起慢速连接时，也很可能会导致服务器物理内存耗尽频繁交换，失去响应，只能重启服务器。例如当前 apache 一旦上到 200 个以上进程，web响应速度就明显非常缓慢了。而 Nginx 采取了分阶段资源分配技术，使得它的 CPU 与内存占用率非常低。Nginx 官方表示保持 10,000 个没有活动的连接，它只占 2.5M 内存，所以类似 DOS 这样的攻击对 Nginx 来说基本上是毫无用处的。就稳定性而言,Nginx 比 lighthttpd 更胜一筹。</p>\n<p>Nginx 支持热部署。它的启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。</p>\n<h1 id=\"Nginx的用处\"><a href=\"#Nginx的用处\" class=\"headerlink\" title=\"Nginx的用处\"></a>Nginx的用处</h1><p>说了这么多Nginx的优点，Nginx在开发中最常用作反向代理服务器，但是Nginx的用处可不止这一点。</p>\n<h2 id=\"Nginx配置虚拟主机\"><a href=\"#Nginx配置虚拟主机\" class=\"headerlink\" title=\"Nginx配置虚拟主机\"></a>Nginx配置虚拟主机</h2><p>虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供www服务，这样就可以实现一台主机对外提供多个web服务，每个虚拟主机之间是独立的，互不影响的。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/1.png\" algin=\"center\"><br><br></div>\n\n<p>1、 基于ip的虚拟主机</p>\n<p>2、基于端口的虚拟主机</p>\n<p>3、基于域名的虚拟主机</p>\n<h2 id=\"Nginx反向代理\"><a href=\"#Nginx反向代理\" class=\"headerlink\" title=\"Nginx反向代理\"></a>Nginx反向代理</h2><p>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的。</p>\n<p>​    而反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/2.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"Nginx配置详解\"><a href=\"#Nginx配置详解\" class=\"headerlink\" title=\"Nginx配置详解\"></a>Nginx配置详解</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div></pre></td><td class=\"code\"><pre><div class=\"line\">#用户</div><div class=\"line\">user nginx ;</div><div class=\"line\"></div><div class=\"line\">#工作进程，根据硬件调整，大于等于cpu核数</div><div class=\"line\">worker_processes 8;</div><div class=\"line\"></div><div class=\"line\">#错误日志</div><div class=\"line\">error_log logs/nginx_error.log crit;</div><div class=\"line\">#pid放置的位置</div><div class=\"line\">pid logs/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">#指定进程可以打开的最大描述符</div><div class=\"line\">worker_rlimit_nofile 204800;</div><div class=\"line\">这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文</div><div class=\"line\">件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</div><div class=\"line\">现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</div><div class=\"line\">这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</div><div class=\"line\"></div><div class=\"line\">events</div><div class=\"line\">&#123;</div><div class=\"line\">  \t#使用epoll的I/O 模型</div><div class=\"line\">\tuse epoll;</div><div class=\"line\">    补充说明:</div><div class=\"line\">    与apache相类，nginx针对不同的操作系统，有不同的事件模型</div><div class=\"line\">    A）标准事件模型</div><div class=\"line\">    Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</div><div class=\"line\">    B）高效事件模型</div><div class=\"line\">    Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</div><div class=\"line\">    Epoll:使用于Linux内核2.6版本及以后的系统。</div><div class=\"line\">    /dev/poll：使用于Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</div><div class=\"line\">    Eventport：使用于Solaris 10. 为了防止出现内核崩溃的问题， 有必要安装安全补丁</div><div class=\"line\"></div><div class=\"line\">    #工作进程的最大连接数量，根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行</div><div class=\"line\">\tworker_connections 204800;</div><div class=\"line\">\t每个进程允许的最多连接数， 理论上每台nginx服务器的最大连接数为worker_processes*worker_connections</div><div class=\"line\">    </div><div class=\"line\">\t#keepalive超时时间。</div><div class=\"line\">\tkeepalive_timeout 60;</div><div class=\"line\"></div><div class=\"line\">  \t#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</div><div class=\"line\">\topen_file_cache max=65535 inactive=60s;</div><div class=\"line\"></div><div class=\"line\">  \t#这个是指多长时间检查一次缓存的有效信息。</div><div class=\"line\">\topen_file_cache_valid 80s;</div><div class=\"line\">  </div><div class=\"line\">\t#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</div><div class=\"line\">\topen_file_cache_min_uses 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class=\"line\">http</div><div class=\"line\">&#123;</div><div class=\"line\">  \t#设定mime类型,类型由mime.type文件定义</div><div class=\"line\">\tinclude mime.types;</div><div class=\"line\">\tdefault_type application/octet-stream;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tlog_format main '$host $status [$time_local] $remote_addr [$time_local] $request_uri '</div><div class=\"line\">'\"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\" ''$bytes_sent $request_time $sent_http_x_cache_hit';</div><div class=\"line\">log_format log404 '$status [$time_local] $remote_addr $host$request_uri $sent_http_location';</div><div class=\"line\"></div><div class=\"line\">$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</div><div class=\"line\">$remote_user：用来记录客户端用户名称；</div><div class=\"line\">$time_local： 用来记录访问时间与时区；</div><div class=\"line\">$request： 用来记录请求的url与http协议；</div><div class=\"line\">$status： 用来记录请求状态；成功是200，</div><div class=\"line\">$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</div><div class=\"line\">$http_referer：用来记录从那个页面链接访问过来的；</div><div class=\"line\">$http_user_agent：记录客户毒啊浏览器的相关信息；</div><div class=\"line\">通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址；</div><div class=\"line\"></div><div class=\"line\">\t#用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径；</div><div class=\"line\">    # access_log /usr/local/nginx/logs/access_log main;</div><div class=\"line\">\taccess_log /dev/null;</div><div class=\"line\">\t</div><div class=\"line\">  \t#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</div><div class=\"line\">\tserver_names_hash_bucket_size 128;</div><div class=\"line\"></div><div class=\"line\">  \t#客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</div><div class=\"line\">\tclient_header_buffer_size 128k;</div><div class=\"line\"></div><div class=\"line\">  #客户请求头缓冲大小</div><div class=\"line\">  n#ginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取如果设置过小HTTP头/Cookie过大 会报400 错误nginx 400 bad request求行如果超过buffer，就会报HTTP 414错误(URI Too Long)nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的</div><div class=\"line\">\tlarge_client_header_buffers 8 128k;</div><div class=\"line\"></div><div class=\"line\">HTTP错误(Bad Request)。</div><div class=\"line\">#使用字段:http, server, location 这个指令指定缓存是否启用,如果启用,将记录文件以下信息: ·打开的文件描述符,大小信息和修改时间. ·存在的目录信息. ·在搜索文件过程中的错误信息 --没有这个文件,无法正确读取,参考open_file_cache_errors指令选项:·max -指定缓存的最大数目,如果缓存溢出,最长使用过的文件(LRU)将被移除</div><div class=\"line\">#例: open_file_cache max=1000 inactive=20s; open_file_cache_valid 30s; open_file_cache_min_uses 2; open_file_cache_errors on;</div><div class=\"line\">\topen_file_cache max 102400</div><div class=\"line\"></div><div class=\"line\">\t#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</div><div class=\"line\">\topen_file_cache_errors</div><div class=\"line\"></div><div class=\"line\">\t#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如 果使用更大的值,文件描述符在cache中总是打开状态.</div><div class=\"line\">\topen_file_cache_min_uses</div><div class=\"line\">\t</div><div class=\"line\">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</div><div class=\"line\">\topen_file_cache_valid</div><div class=\"line\">    </div><div class=\"line\">\t#设定通过nginx上传文件的大小</div><div class=\"line\">\tclient_max_body_size 300m;</div><div class=\"line\">\t</div><div class=\"line\">  \t#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，</div><div class=\"line\">#对于普通应用，必须设为on。</div><div class=\"line\">#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</div><div class=\"line\">\tsendfile on;</div><div class=\"line\">\t</div><div class=\"line\">  \t#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</div><div class=\"line\">\ttcp_nopush on;</div><div class=\"line\">  </div><div class=\"line\">\ttcp_nodelay on;</div><div class=\"line\">  \t</div><div class=\"line\">\t#后端服务器连接的超时时间_发起握手等候响应超时时间</div><div class=\"line\">\tproxy_connect_timeout 90; </div><div class=\"line\">\t</div><div class=\"line\">  \t#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</div><div class=\"line\">\tproxy_read_timeout 180;</div><div class=\"line\"></div><div class=\"line\">\t#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</div><div class=\"line\">\tproxy_send_timeout 180;</div><div class=\"line\"></div><div class=\"line\">  \t#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</div><div class=\"line\">\tproxy_buffer_size 256k;</div><div class=\"line\">\t</div><div class=\"line\">  \t#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</div><div class=\"line\">\tproxy_buffers 8 256k;</div><div class=\"line\"></div><div class=\"line\">\tproxy_busy_buffers_size 256k;</div><div class=\"line\"></div><div class=\"line\">\t#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</div><div class=\"line\">\tproxy_temp_file_write_size 256k;</div><div class=\"line\">\t</div><div class=\"line\">  \t#proxy_temp_path和proxy_cache_path指定的路径必须在同一分区</div><div class=\"line\">\tproxy_temp_path /data0/proxy_temp_dir;</div><div class=\"line\">\t#设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。</div><div class=\"line\">\tproxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;</div><div class=\"line\">\t</div><div class=\"line\">    client_header_timeout 5;</div><div class=\"line\">    client_body_timeout 5;</div><div class=\"line\">    send_timeout 5;</div><div class=\"line\">  </div><div class=\"line\">\t#keepalive超时时间。</div><div class=\"line\">\tkeepalive_timeout 120;</div><div class=\"line\"></div><div class=\"line\">\t#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</div><div class=\"line\">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</div><div class=\"line\">\tclient_body_buffer_size 512k;</div><div class=\"line\">  </div><div class=\"line\">\t#表示使nginx阻止HTTP应答代码为400或者更高的应答。</div><div class=\"line\">\tproxy_intercept_errors on;</div><div class=\"line\"></div><div class=\"line\">  \t #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</div><div class=\"line\">    fastcgi_connect_timeout 300;</div><div class=\"line\">    fastcgi_send_timeout 300;</div><div class=\"line\">    fastcgi_read_timeout 300;</div><div class=\"line\">    fastcgi_buffer_size 64k;</div><div class=\"line\">    fastcgi_buffers 4 64k;</div><div class=\"line\">    fastcgi_busy_buffers_size 128k;</div><div class=\"line\">    fastcgi_temp_file_write_size 128k;</div><div class=\"line\">  </div><div class=\"line\">  \t#gzip模块设置</div><div class=\"line\">    gzip on; #开启gzip压缩输出</div><div class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</div><div class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</div><div class=\"line\">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</div><div class=\"line\">    gzip_comp_level 2;    #压缩等级</div><div class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</div><div class=\"line\">    gzip_vary on;</div><div class=\"line\">  </div><div class=\"line\">  \t#开启限制IP连接数的时候需要使用</div><div class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</div><div class=\"line\"></div><div class=\"line\">    upstream img_relay &#123;</div><div class=\"line\">       server 127.0.0.1:8027;</div><div class=\"line\">       server 127.0.0.1:8028;</div><div class=\"line\">       server 127.0.0.1:8029;</div><div class=\"line\">       hash $request_uri;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\"> \t#如果请求为img_relay:80,则交给名称为img_relay的Nginx集群来处理</div><div class=\"line\">\tserver&#123;</div><div class=\"line\">         listen  80;</div><div class=\"line\">         server_name  img_relay;</div><div class=\"line\">#\t\t limit_req   zone=req_one  burst=5 nodelay;</div><div class=\"line\"></div><div class=\"line\">\t\t  location ~ .*.jsp$  &#123;</div><div class=\"line\">\t\t\t\t   proxy_ignore_client_abort   on;</div><div class=\"line\">\t\t\t\t   proxy_pass\t\thttp://img_relay;\t#http:// + upstream名称</div><div class=\"line\">\t\t\t\t   proxy_set_header   Host             $host;</div><div class=\"line\">\t\t\t\t   proxy_set_header   X-Real-IP        $remote_addr;</div><div class=\"line\">\t\t\t\t   proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</div><div class=\"line\">\t\t\t\t   proxy_connect_timeout       60; \t #nginx跟后端服务器连接超时时间(代理连接超时)</div><div class=\"line\">\t\t\t\t   proxy_read_timeout          600;  #连接成功后，后端服务器响应时间(代理接收超时)</div><div class=\"line\">\t\t\t\t   proxy_send_timeout          60;\t #后端服务器数据回传时间(代理发送超时)</div><div class=\"line\">\t\t\t\t   proxy_buffer_size 128k;          #设置代理服务器（nginx）保存用户头信息的缓冲区大小</div><div class=\"line\">\t\t\t\t   proxy_buffers   32 128k;           #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</div><div class=\"line\">\t\t\t\t   proxy_busy_buffers_size 128k;   #高负荷下缓冲大小（proxy_buffers*2）</div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">nginx的upstream目前支持4种方式的分配</div><div class=\"line\">1、轮询（默认）</div><div class=\"line\">每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</div><div class=\"line\">    </div><div class=\"line\">2、weight</div><div class=\"line\">指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</div><div class=\"line\">例如：</div><div class=\"line\">upstream bakend &#123;</div><div class=\"line\">server 192.168.0.14 weight=10;</div><div class=\"line\">server 192.168.0.15 weight=10;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">3、ip_hash</div><div class=\"line\">每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</div><div class=\"line\">例如：</div><div class=\"line\">upstream bakend &#123;</div><div class=\"line\">ip_hash;</div><div class=\"line\">server 192.168.0.14:88;</div><div class=\"line\">server 192.168.0.15:80;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">4、fair（第三方）</div><div class=\"line\">按后端服务器的响应时间来分配请求，响应时间短的优先分配。</div><div class=\"line\">upstream backend &#123;</div><div class=\"line\">server server1;</div><div class=\"line\">server server2;</div><div class=\"line\">fair;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">5、url_hash（第三方）</div><div class=\"line\">按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</div><div class=\"line\">upstream backend &#123;</div><div class=\"line\">\tserver squid1:3128;</div><div class=\"line\">\tserver squid2:3128;</div><div class=\"line\">\thash $request_uri;</div><div class=\"line\">\thash_method crc32;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tips:</div><div class=\"line\">upstream bakend&#123;#定义负载均衡设备的Ip及设备状态</div><div class=\"line\">    ip_hash;</div><div class=\"line\">    server 127.0.0.1:9090 down;</div><div class=\"line\">    server 127.0.0.1:8080 weight=2;</div><div class=\"line\">    server 127.0.0.1:6060;</div><div class=\"line\">    server 127.0.0.1:7070 backup;</div><div class=\"line\">&#125;</div><div class=\"line\">在需要使用负载均衡的server中增加</div><div class=\"line\">proxy_pass http://bakend/;</div><div class=\"line\"></div><div class=\"line\">每个设备的状态设置为:</div><div class=\"line\">1.down表示单前的server暂时不参与负载</div><div class=\"line\">2.weight默认为1.weight越大，负载的权重就越大。</div><div class=\"line\">3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</div><div class=\"line\">4.fail_timeout:max_fails次失败后，暂停的时间。</div><div class=\"line\">5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</div><div class=\"line\"></div><div class=\"line\">nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</div><div class=\"line\"></div><div class=\"line\">client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</div><div class=\"line\">client_body_temp_path设置记录文件的目录 可以设置最多3层目录</div><div class=\"line\"></div><div class=\"line\">location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>之前介绍了Linux下安装Nginx，Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 。它支持内核 Poll 模型，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。<div align=center></p>\n<p><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/index.png\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"Nginx特点\"><a href=\"#Nginx特点\" class=\"headerlink\" title=\"Nginx特点\"></a>Nginx特点</h1><p>Nginx 具有很高的稳定性。其它 HTTP 服务器，当遇到访问的峰值，或者有人恶意发起慢速连接时，也很可能会导致服务器物理内存耗尽频繁交换，失去响应，只能重启服务器。例如当前 apache 一旦上到 200 个以上进程，web响应速度就明显非常缓慢了。而 Nginx 采取了分阶段资源分配技术，使得它的 CPU 与内存占用率非常低。Nginx 官方表示保持 10,000 个没有活动的连接，它只占 2.5M 内存，所以类似 DOS 这样的攻击对 Nginx 来说基本上是毫无用处的。就稳定性而言,Nginx 比 lighthttpd 更胜一筹。</p>\n<p>Nginx 支持热部署。它的启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动。你还能够在不间断服务的情况下，对软件版本进行进行升级。</p>\n<h1 id=\"Nginx的用处\"><a href=\"#Nginx的用处\" class=\"headerlink\" title=\"Nginx的用处\"></a>Nginx的用处</h1><p>说了这么多Nginx的优点，Nginx在开发中最常用作反向代理服务器，但是Nginx的用处可不止这一点。</p>\n<h2 id=\"Nginx配置虚拟主机\"><a href=\"#Nginx配置虚拟主机\" class=\"headerlink\" title=\"Nginx配置虚拟主机\"></a>Nginx配置虚拟主机</h2><p>虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供www服务，这样就可以实现一台主机对外提供多个web服务，每个虚拟主机之间是独立的，互不影响的。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/1.png\" algin=\"center\"/><br><br></div>\n\n<p>1、 基于ip的虚拟主机</p>\n<p>2、基于端口的虚拟主机</p>\n<p>3、基于域名的虚拟主机</p>\n<h2 id=\"Nginx反向代理\"><a href=\"#Nginx反向代理\" class=\"headerlink\" title=\"Nginx反向代理\"></a>Nginx反向代理</h2><p>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中由代理服务器向Internet上的web服务器发起请求，最终达到客户机上网的目的。</p>\n<p>​    而反向代理（Reverse Proxy）方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/nginx/2.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"Nginx配置详解\"><a href=\"#Nginx配置详解\" class=\"headerlink\" title=\"Nginx配置详解\"></a>Nginx配置详解</h1><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div></pre></td><td class=\"code\"><pre><div class=\"line\">#用户</div><div class=\"line\">user nginx ;</div><div class=\"line\"></div><div class=\"line\">#工作进程，根据硬件调整，大于等于cpu核数</div><div class=\"line\">worker_processes 8;</div><div class=\"line\"></div><div class=\"line\">#错误日志</div><div class=\"line\">error_log logs/nginx_error.log crit;</div><div class=\"line\">#pid放置的位置</div><div class=\"line\">pid logs/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">#指定进程可以打开的最大描述符</div><div class=\"line\">worker_rlimit_nofile 204800;</div><div class=\"line\">这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文</div><div class=\"line\">件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</div><div class=\"line\">现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</div><div class=\"line\">这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</div><div class=\"line\"></div><div class=\"line\">events</div><div class=\"line\">&#123;</div><div class=\"line\">  \t#使用epoll的I/O 模型</div><div class=\"line\">\tuse epoll;</div><div class=\"line\">    补充说明:</div><div class=\"line\">    与apache相类，nginx针对不同的操作系统，有不同的事件模型</div><div class=\"line\">    A）标准事件模型</div><div class=\"line\">    Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</div><div class=\"line\">    B）高效事件模型</div><div class=\"line\">    Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</div><div class=\"line\">    Epoll:使用于Linux内核2.6版本及以后的系统。</div><div class=\"line\">    /dev/poll：使用于Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</div><div class=\"line\">    Eventport：使用于Solaris 10. 为了防止出现内核崩溃的问题， 有必要安装安全补丁</div><div class=\"line\"></div><div class=\"line\">    #工作进程的最大连接数量，根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行</div><div class=\"line\">\tworker_connections 204800;</div><div class=\"line\">\t每个进程允许的最多连接数， 理论上每台nginx服务器的最大连接数为worker_processes*worker_connections</div><div class=\"line\">    </div><div class=\"line\">\t#keepalive超时时间。</div><div class=\"line\">\tkeepalive_timeout 60;</div><div class=\"line\"></div><div class=\"line\">  \t#这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</div><div class=\"line\">\topen_file_cache max=65535 inactive=60s;</div><div class=\"line\"></div><div class=\"line\">  \t#这个是指多长时间检查一次缓存的有效信息。</div><div class=\"line\">\topen_file_cache_valid 80s;</div><div class=\"line\">  </div><div class=\"line\">\t#open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</div><div class=\"line\">\topen_file_cache_min_uses 1;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class=\"line\">http</div><div class=\"line\">&#123;</div><div class=\"line\">  \t#设定mime类型,类型由mime.type文件定义</div><div class=\"line\">\tinclude mime.types;</div><div class=\"line\">\tdefault_type application/octet-stream;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tlog_format main '$host $status [$time_local] $remote_addr [$time_local] $request_uri '</div><div class=\"line\">'\"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\" ''$bytes_sent $request_time $sent_http_x_cache_hit';</div><div class=\"line\">log_format log404 '$status [$time_local] $remote_addr $host$request_uri $sent_http_location';</div><div class=\"line\"></div><div class=\"line\">$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</div><div class=\"line\">$remote_user：用来记录客户端用户名称；</div><div class=\"line\">$time_local： 用来记录访问时间与时区；</div><div class=\"line\">$request： 用来记录请求的url与http协议；</div><div class=\"line\">$status： 用来记录请求状态；成功是200，</div><div class=\"line\">$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</div><div class=\"line\">$http_referer：用来记录从那个页面链接访问过来的；</div><div class=\"line\">$http_user_agent：记录客户毒啊浏览器的相关信息；</div><div class=\"line\">通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址；</div><div class=\"line\"></div><div class=\"line\">\t#用了log_format指令设置了日志格式之后，需要用access_log指令指定日志文件的存放路径；</div><div class=\"line\">    # access_log /usr/local/nginx/logs/access_log main;</div><div class=\"line\">\taccess_log /dev/null;</div><div class=\"line\">\t</div><div class=\"line\">  \t#保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</div><div class=\"line\">\tserver_names_hash_bucket_size 128;</div><div class=\"line\"></div><div class=\"line\">  \t#客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</div><div class=\"line\">\tclient_header_buffer_size 128k;</div><div class=\"line\"></div><div class=\"line\">  #客户请求头缓冲大小</div><div class=\"line\">  n#ginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取如果设置过小HTTP头/Cookie过大 会报400 错误nginx 400 bad request求行如果超过buffer，就会报HTTP 414错误(URI Too Long)nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的</div><div class=\"line\">\tlarge_client_header_buffers 8 128k;</div><div class=\"line\"></div><div class=\"line\">HTTP错误(Bad Request)。</div><div class=\"line\">#使用字段:http, server, location 这个指令指定缓存是否启用,如果启用,将记录文件以下信息: ·打开的文件描述符,大小信息和修改时间. ·存在的目录信息. ·在搜索文件过程中的错误信息 --没有这个文件,无法正确读取,参考open_file_cache_errors指令选项:·max -指定缓存的最大数目,如果缓存溢出,最长使用过的文件(LRU)将被移除</div><div class=\"line\">#例: open_file_cache max=1000 inactive=20s; open_file_cache_valid 30s; open_file_cache_min_uses 2; open_file_cache_errors on;</div><div class=\"line\">\topen_file_cache max 102400</div><div class=\"line\"></div><div class=\"line\">\t#语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</div><div class=\"line\">\topen_file_cache_errors</div><div class=\"line\"></div><div class=\"line\">\t#语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location 这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如 果使用更大的值,文件描述符在cache中总是打开状态.</div><div class=\"line\">\topen_file_cache_min_uses</div><div class=\"line\">\t</div><div class=\"line\">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</div><div class=\"line\">\topen_file_cache_valid</div><div class=\"line\">    </div><div class=\"line\">\t#设定通过nginx上传文件的大小</div><div class=\"line\">\tclient_max_body_size 300m;</div><div class=\"line\">\t</div><div class=\"line\">  \t#sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，</div><div class=\"line\">#对于普通应用，必须设为on。</div><div class=\"line\">#如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</div><div class=\"line\">\tsendfile on;</div><div class=\"line\">\t</div><div class=\"line\">  \t#此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</div><div class=\"line\">\ttcp_nopush on;</div><div class=\"line\">  </div><div class=\"line\">\ttcp_nodelay on;</div><div class=\"line\">  \t</div><div class=\"line\">\t#后端服务器连接的超时时间_发起握手等候响应超时时间</div><div class=\"line\">\tproxy_connect_timeout 90; </div><div class=\"line\">\t</div><div class=\"line\">  \t#连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</div><div class=\"line\">\tproxy_read_timeout 180;</div><div class=\"line\"></div><div class=\"line\">\t#后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</div><div class=\"line\">\tproxy_send_timeout 180;</div><div class=\"line\"></div><div class=\"line\">  \t#设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</div><div class=\"line\">\tproxy_buffer_size 256k;</div><div class=\"line\">\t</div><div class=\"line\">  \t#设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</div><div class=\"line\">\tproxy_buffers 8 256k;</div><div class=\"line\"></div><div class=\"line\">\tproxy_busy_buffers_size 256k;</div><div class=\"line\"></div><div class=\"line\">\t#设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</div><div class=\"line\">\tproxy_temp_file_write_size 256k;</div><div class=\"line\">\t</div><div class=\"line\">  \t#proxy_temp_path和proxy_cache_path指定的路径必须在同一分区</div><div class=\"line\">\tproxy_temp_path /data0/proxy_temp_dir;</div><div class=\"line\">\t#设置内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。</div><div class=\"line\">\tproxy_cache_path /data0/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;</div><div class=\"line\">\t</div><div class=\"line\">    client_header_timeout 5;</div><div class=\"line\">    client_body_timeout 5;</div><div class=\"line\">    send_timeout 5;</div><div class=\"line\">  </div><div class=\"line\">\t#keepalive超时时间。</div><div class=\"line\">\tkeepalive_timeout 120;</div><div class=\"line\"></div><div class=\"line\">\t#如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</div><div class=\"line\">#无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</div><div class=\"line\">\tclient_body_buffer_size 512k;</div><div class=\"line\">  </div><div class=\"line\">\t#表示使nginx阻止HTTP应答代码为400或者更高的应答。</div><div class=\"line\">\tproxy_intercept_errors on;</div><div class=\"line\"></div><div class=\"line\">  \t #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</div><div class=\"line\">    fastcgi_connect_timeout 300;</div><div class=\"line\">    fastcgi_send_timeout 300;</div><div class=\"line\">    fastcgi_read_timeout 300;</div><div class=\"line\">    fastcgi_buffer_size 64k;</div><div class=\"line\">    fastcgi_buffers 4 64k;</div><div class=\"line\">    fastcgi_busy_buffers_size 128k;</div><div class=\"line\">    fastcgi_temp_file_write_size 128k;</div><div class=\"line\">  </div><div class=\"line\">  \t#gzip模块设置</div><div class=\"line\">    gzip on; #开启gzip压缩输出</div><div class=\"line\">    gzip_min_length 1k;    #最小压缩文件大小</div><div class=\"line\">    gzip_buffers 4 16k;    #压缩缓冲区</div><div class=\"line\">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</div><div class=\"line\">    gzip_comp_level 2;    #压缩等级</div><div class=\"line\">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</div><div class=\"line\">    gzip_vary on;</div><div class=\"line\">  </div><div class=\"line\">  \t#开启限制IP连接数的时候需要使用</div><div class=\"line\">    #limit_zone crawler $binary_remote_addr 10m;</div><div class=\"line\"></div><div class=\"line\">    upstream img_relay &#123;</div><div class=\"line\">       server 127.0.0.1:8027;</div><div class=\"line\">       server 127.0.0.1:8028;</div><div class=\"line\">       server 127.0.0.1:8029;</div><div class=\"line\">       hash $request_uri;</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\"> \t#如果请求为img_relay:80,则交给名称为img_relay的Nginx集群来处理</div><div class=\"line\">\tserver&#123;</div><div class=\"line\">         listen  80;</div><div class=\"line\">         server_name  img_relay;</div><div class=\"line\">#\t\t limit_req   zone=req_one  burst=5 nodelay;</div><div class=\"line\"></div><div class=\"line\">\t\t  location ~ .*.jsp$  &#123;</div><div class=\"line\">\t\t\t\t   proxy_ignore_client_abort   on;</div><div class=\"line\">\t\t\t\t   proxy_pass\t\thttp://img_relay;\t#http:// + upstream名称</div><div class=\"line\">\t\t\t\t   proxy_set_header   Host             $host;</div><div class=\"line\">\t\t\t\t   proxy_set_header   X-Real-IP        $remote_addr;</div><div class=\"line\">\t\t\t\t   proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</div><div class=\"line\">\t\t\t\t   proxy_connect_timeout       60; \t #nginx跟后端服务器连接超时时间(代理连接超时)</div><div class=\"line\">\t\t\t\t   proxy_read_timeout          600;  #连接成功后，后端服务器响应时间(代理接收超时)</div><div class=\"line\">\t\t\t\t   proxy_send_timeout          60;\t #后端服务器数据回传时间(代理发送超时)</div><div class=\"line\">\t\t\t\t   proxy_buffer_size 128k;          #设置代理服务器（nginx）保存用户头信息的缓冲区大小</div><div class=\"line\">\t\t\t\t   proxy_buffers   32 128k;           #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</div><div class=\"line\">\t\t\t\t   proxy_busy_buffers_size 128k;   #高负荷下缓冲大小（proxy_buffers*2）</div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">nginx的upstream目前支持4种方式的分配</div><div class=\"line\">1、轮询（默认）</div><div class=\"line\">每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</div><div class=\"line\">    </div><div class=\"line\">2、weight</div><div class=\"line\">指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</div><div class=\"line\">例如：</div><div class=\"line\">upstream bakend &#123;</div><div class=\"line\">server 192.168.0.14 weight=10;</div><div class=\"line\">server 192.168.0.15 weight=10;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">3、ip_hash</div><div class=\"line\">每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</div><div class=\"line\">例如：</div><div class=\"line\">upstream bakend &#123;</div><div class=\"line\">ip_hash;</div><div class=\"line\">server 192.168.0.14:88;</div><div class=\"line\">server 192.168.0.15:80;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">4、fair（第三方）</div><div class=\"line\">按后端服务器的响应时间来分配请求，响应时间短的优先分配。</div><div class=\"line\">upstream backend &#123;</div><div class=\"line\">server server1;</div><div class=\"line\">server server2;</div><div class=\"line\">fair;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">5、url_hash（第三方）</div><div class=\"line\">按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</div><div class=\"line\">upstream backend &#123;</div><div class=\"line\">\tserver squid1:3128;</div><div class=\"line\">\tserver squid2:3128;</div><div class=\"line\">\thash $request_uri;</div><div class=\"line\">\thash_method crc32;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">tips:</div><div class=\"line\">upstream bakend&#123;#定义负载均衡设备的Ip及设备状态</div><div class=\"line\">    ip_hash;</div><div class=\"line\">    server 127.0.0.1:9090 down;</div><div class=\"line\">    server 127.0.0.1:8080 weight=2;</div><div class=\"line\">    server 127.0.0.1:6060;</div><div class=\"line\">    server 127.0.0.1:7070 backup;</div><div class=\"line\">&#125;</div><div class=\"line\">在需要使用负载均衡的server中增加</div><div class=\"line\">proxy_pass http://bakend/;</div><div class=\"line\"></div><div class=\"line\">每个设备的状态设置为:</div><div class=\"line\">1.down表示单前的server暂时不参与负载</div><div class=\"line\">2.weight默认为1.weight越大，负载的权重就越大。</div><div class=\"line\">3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</div><div class=\"line\">4.fail_timeout:max_fails次失败后，暂停的时间。</div><div class=\"line\">5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</div><div class=\"line\"></div><div class=\"line\">nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</div><div class=\"line\"></div><div class=\"line\">client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</div><div class=\"line\">client_body_temp_path设置记录文件的目录 可以设置最多3层目录</div><div class=\"line\"></div><div class=\"line\">location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</div></pre></td></tr></table></figure>"},{"title":"Redis数据过期策略","date":"2018-04-09T08:18:12.000Z","_content":"\n# 前言\n\nRedis作为一个高性能的内存NoSQL数据库，其容量受到最大内存限制的限制。为了防止一次性清理大量过期Key导致Redis服务受影响，Redis只在空闲时清理过期Key。<div align=center>\n\n> <img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/redis.jpg\"/>\n\n</div><!-- more -->\n\n# Redis过期时间\n\n## 设置过期时间\n\nredis有四种命令可以用于设置键的生存时间和过期时间：\n\n```xml\nEXPIRE <KEY> <TTL> : \t\t将键的生存时间设为 ttl 秒\nPEXPIRE <KEY> <TTL> :\t\t将键的生存时间设为 ttl 毫秒\nEXPIREAT <KEY> <timestamp> :\t将键的过期时间设为 timestamp 所指定的秒数时间戳\nPEXPIREAT <KEY> <timestamp>: \t将键的过期时间设为 timestamp 所指定的毫秒数时间戳.\n```\n\n**返回值**\n\n一个整数值**1或0**，如下：\n\n- 如果**成功**地为该键设置了超时时间，**返回 1**\n- 如果键**不存在或无法设置**超时时间，**返回 0**\n\n## 保存过期时间\n\n**redis中key的过期时间和生存时间保存方式**：在数据库结构redisDb中的expires字典中保存了数据库中所有键的过期时间，称expire这个字典为过期字典。\n（1）过期字典是一个指针，指向键空间的某个键对象。\n（2）过期字典的值是一个longlong类型的整数，这个整数保存了键所指向的数据库键的过期时间–一个毫秒级的 UNIX 时间戳。\n\n下图是一个带过期字典的数据库例子：<div align=center>\n\n> <img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e1.png\"/>\n\n</div>\n\n从以上结构中可以看到expire字典(过期字典)和dict字典（数据库键空间，保存着数据库中所有键值对）是并列的，由此可见expire字典的重要性。\n\n## 移除过期时间\n\n**PERSIST**命令可以移除一个键的过期时间：\n\n```powershell\n127.0.0.1:6379> set message \"hello\"\nOK\n127.0.0.1:6379> expire message 60\n(integer) 1\n127.0.0.1:6379> ttl message\n(integer) 54\n127.0.0.1:6379> persist message\n(integer) 1\n127.0.0.1:6379> ttl message\n(integer) -1\n```\n\npersist命令就是expire命令的反命令，这个函数在过期字典中查找给定的键,并从过期字典中移除。\n比如在数据库当前状态(如上图所示)，当给book这个key移除过期时间：\n\n```powershell\nredis> persist book\n(integer) 1\n```\n\n数据库将更新成如下状态：<div align=center>\n\n> <img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e2.png\"/>\n\n</div>\n\n可以从图中看到,当PERSIST book命令执行之后,过期字典中的 book 键消失了。\n\n## 计算并返回剩余生存时间\n\n**ttl**命令以**秒为单位**返回指定键的剩余生存时间。**pttl**以**毫秒**返回。两个命令都是通过计算当前时间和过期时间的差值得到剩余生存期的。\n\n```powershell\n127.0.0.1:6379> set name rainbowhorse\nOK\n127.0.0.1:6379> expire name 60\n(integer) 1\n127.0.0.1:6379> ttl name\n(integer) 57\n127.0.0.1:6379> ttl name\n(integer) 27\n127.0.0.1:6379> pttl name\n(integer) 23839\n127.0.0.1:6379>\n```\n\n# 过期键的删除策略\n\n如果一个键是过期的，它的怎么从内存中消失的，是什么时候被删除的？\n\nredis有三种不同的删除策略：\n\n- **定时删除**。每隔一段时间，对expires字典进行检查，删除里面的过期键。\n\n\n- **立即删除**。在设置键的过期时间时，创建一个回调事件，当过期时间达到时，由时间处理器自动执行键的删除操作。\n- **惰性删除**。键过期了就过期了，不管。每次从dict字典中按key取值时，先检查此key是否已经过期，如果过期了就删除它，并返回nil，如果没过期，就返回键值。\n\n由此可见，第二种为被动删除，第一种和第三种为主动删除，且第一种实时性更高。下面对这三种删除策略进行具体分析。\n\n## 定时删除\n\n- 含义：在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除\n- 优点：保证内存被尽快释放\n- 缺点：\n  - 若过期key很多，删除这些key会占用很多的CPU时间，在CPU时间紧张的情况下，CPU不能把所有的时间用来做要紧的事儿，还需要去花时间删除这些key\n  - 定时器的创建耗时，若为每一个设置过期时间的key创建一个定时器（将会有大量的定时器产生），性能影响严重\n  - 没人用\n\n## 定期删除\n\n- 含义：每隔一段时间执行一次删除(在redis.conf配置文件设置hz，1s刷新的频率)过期key操作\n- 优点：\n  - 通过限制删除操作的时长和频率，来减少删除操作对CPU时间的占用--处理\"定时删除\"的缺点\n  - 定期删除过期key--处理\"惰性删除\"的缺点\n- 缺点\n  - 在内存友好方面，不如\"定时删除\"\n  - 在CPU时间友好方面，不如\"惰性删除\"\n- 难点\n  - 合理设置删除操作的执行时长（每次删除执行多长时间）和执行频率（每隔多长时间做一次删除）（这个要根据服务器运行情况来定了）\n\n定期删除可以通过：\n\n- 第一、配置redis.conf 的hz选项，默认为10 （即1秒执行10次，100ms一次，值越大说明刷新频率越快，最Redis性能损耗也越大） \n- 第二、配置redis.conf的maxmemory最大值，当已用内存超过maxmemory限定时，就会触发主动清理策略\n\n## 惰性删除\n\n- 含义：key过期的时候不删除，每次从数据库获取key的时候去检查是否过期，若过期，则删除，返回null。\n- 优点：删除操作只发生在从数据库取出key的时候发生，而且只删除当前key，所以对CPU时间的占用是比较少的，而且此时的删除是已经到了非做不可的地步（如果此时还不删除的话，我们就会获取到了已经过期的key了）\n- 缺点：若大量的key在超出超时时间后，很久一段时间内，都没有被获取过，那么可能发生内存泄露（无用的垃圾占用了大量的内存）\n\n**定时删除和定期删除为主动删除**：Redis会定期主动淘汰一批已过去的key。\n\n**惰性删除为被动删除**：用到的时候才会去检验key是不是已过期，过期就删除。\n\n## redis使用的策略\n\nredis使用的过期键值删除策略是：**惰性删除加上定期删除，两者配合使用**。\n\n## 最佳实践\n\n- 不要放垃圾数据，及时清理无用数据。实验性的数据和下线的业务数据及时删除。\n- key尽量都设置过期时间。对具有时效性的key设置过期时间，通过redis自身的过期key清理策略来降低过期key对于内存的占用，同时也能够减少业务的麻烦，不需要定期手动清理了。\n- 单Key不要过大。给用户排查问题时遇到过单个string的value有43M的，也有一个list 100多万个大成员占了1G多内存的。这种key在get的时候网络传输延迟会比较大，需要分配的输出缓冲区也比较大，在定期清理的时候也容易造成比较高的延迟. 最好能通过业务拆分，数据压缩等方式避免这种过大的key的产生。\n- 不同业务如果公用一个业务的话，最好使用不同的逻辑db分开。从上面的分析可以看出，Redis的过期Key清理策略和强制淘汰策略都会遍历各个db。将key分布在不同的db有助于过期Key的及时清理。另外不同业务使用不同db也有助于问题排查和无用数据的及时下线。\n\n## 参考\n\n[***redis的过期时间和过期删除机制***](https://www.jianshu.com/p/9352d20fb2e0?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)","source":"_posts/Redis数据过期策略.md","raw":"---\ntitle: Redis数据过期策略\ndate: 2018-04-09 16:18:12\ntags: [redis]\ncategories: technology\n---\n\n# 前言\n\nRedis作为一个高性能的内存NoSQL数据库，其容量受到最大内存限制的限制。为了防止一次性清理大量过期Key导致Redis服务受影响，Redis只在空闲时清理过期Key。<div align=center>\n\n> <img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/redis.jpg\"/>\n\n</div><!-- more -->\n\n# Redis过期时间\n\n## 设置过期时间\n\nredis有四种命令可以用于设置键的生存时间和过期时间：\n\n```xml\nEXPIRE <KEY> <TTL> : \t\t将键的生存时间设为 ttl 秒\nPEXPIRE <KEY> <TTL> :\t\t将键的生存时间设为 ttl 毫秒\nEXPIREAT <KEY> <timestamp> :\t将键的过期时间设为 timestamp 所指定的秒数时间戳\nPEXPIREAT <KEY> <timestamp>: \t将键的过期时间设为 timestamp 所指定的毫秒数时间戳.\n```\n\n**返回值**\n\n一个整数值**1或0**，如下：\n\n- 如果**成功**地为该键设置了超时时间，**返回 1**\n- 如果键**不存在或无法设置**超时时间，**返回 0**\n\n## 保存过期时间\n\n**redis中key的过期时间和生存时间保存方式**：在数据库结构redisDb中的expires字典中保存了数据库中所有键的过期时间，称expire这个字典为过期字典。\n（1）过期字典是一个指针，指向键空间的某个键对象。\n（2）过期字典的值是一个longlong类型的整数，这个整数保存了键所指向的数据库键的过期时间–一个毫秒级的 UNIX 时间戳。\n\n下图是一个带过期字典的数据库例子：<div align=center>\n\n> <img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e1.png\"/>\n\n</div>\n\n从以上结构中可以看到expire字典(过期字典)和dict字典（数据库键空间，保存着数据库中所有键值对）是并列的，由此可见expire字典的重要性。\n\n## 移除过期时间\n\n**PERSIST**命令可以移除一个键的过期时间：\n\n```powershell\n127.0.0.1:6379> set message \"hello\"\nOK\n127.0.0.1:6379> expire message 60\n(integer) 1\n127.0.0.1:6379> ttl message\n(integer) 54\n127.0.0.1:6379> persist message\n(integer) 1\n127.0.0.1:6379> ttl message\n(integer) -1\n```\n\npersist命令就是expire命令的反命令，这个函数在过期字典中查找给定的键,并从过期字典中移除。\n比如在数据库当前状态(如上图所示)，当给book这个key移除过期时间：\n\n```powershell\nredis> persist book\n(integer) 1\n```\n\n数据库将更新成如下状态：<div align=center>\n\n> <img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e2.png\"/>\n\n</div>\n\n可以从图中看到,当PERSIST book命令执行之后,过期字典中的 book 键消失了。\n\n## 计算并返回剩余生存时间\n\n**ttl**命令以**秒为单位**返回指定键的剩余生存时间。**pttl**以**毫秒**返回。两个命令都是通过计算当前时间和过期时间的差值得到剩余生存期的。\n\n```powershell\n127.0.0.1:6379> set name rainbowhorse\nOK\n127.0.0.1:6379> expire name 60\n(integer) 1\n127.0.0.1:6379> ttl name\n(integer) 57\n127.0.0.1:6379> ttl name\n(integer) 27\n127.0.0.1:6379> pttl name\n(integer) 23839\n127.0.0.1:6379>\n```\n\n# 过期键的删除策略\n\n如果一个键是过期的，它的怎么从内存中消失的，是什么时候被删除的？\n\nredis有三种不同的删除策略：\n\n- **定时删除**。每隔一段时间，对expires字典进行检查，删除里面的过期键。\n\n\n- **立即删除**。在设置键的过期时间时，创建一个回调事件，当过期时间达到时，由时间处理器自动执行键的删除操作。\n- **惰性删除**。键过期了就过期了，不管。每次从dict字典中按key取值时，先检查此key是否已经过期，如果过期了就删除它，并返回nil，如果没过期，就返回键值。\n\n由此可见，第二种为被动删除，第一种和第三种为主动删除，且第一种实时性更高。下面对这三种删除策略进行具体分析。\n\n## 定时删除\n\n- 含义：在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除\n- 优点：保证内存被尽快释放\n- 缺点：\n  - 若过期key很多，删除这些key会占用很多的CPU时间，在CPU时间紧张的情况下，CPU不能把所有的时间用来做要紧的事儿，还需要去花时间删除这些key\n  - 定时器的创建耗时，若为每一个设置过期时间的key创建一个定时器（将会有大量的定时器产生），性能影响严重\n  - 没人用\n\n## 定期删除\n\n- 含义：每隔一段时间执行一次删除(在redis.conf配置文件设置hz，1s刷新的频率)过期key操作\n- 优点：\n  - 通过限制删除操作的时长和频率，来减少删除操作对CPU时间的占用--处理\"定时删除\"的缺点\n  - 定期删除过期key--处理\"惰性删除\"的缺点\n- 缺点\n  - 在内存友好方面，不如\"定时删除\"\n  - 在CPU时间友好方面，不如\"惰性删除\"\n- 难点\n  - 合理设置删除操作的执行时长（每次删除执行多长时间）和执行频率（每隔多长时间做一次删除）（这个要根据服务器运行情况来定了）\n\n定期删除可以通过：\n\n- 第一、配置redis.conf 的hz选项，默认为10 （即1秒执行10次，100ms一次，值越大说明刷新频率越快，最Redis性能损耗也越大） \n- 第二、配置redis.conf的maxmemory最大值，当已用内存超过maxmemory限定时，就会触发主动清理策略\n\n## 惰性删除\n\n- 含义：key过期的时候不删除，每次从数据库获取key的时候去检查是否过期，若过期，则删除，返回null。\n- 优点：删除操作只发生在从数据库取出key的时候发生，而且只删除当前key，所以对CPU时间的占用是比较少的，而且此时的删除是已经到了非做不可的地步（如果此时还不删除的话，我们就会获取到了已经过期的key了）\n- 缺点：若大量的key在超出超时时间后，很久一段时间内，都没有被获取过，那么可能发生内存泄露（无用的垃圾占用了大量的内存）\n\n**定时删除和定期删除为主动删除**：Redis会定期主动淘汰一批已过去的key。\n\n**惰性删除为被动删除**：用到的时候才会去检验key是不是已过期，过期就删除。\n\n## redis使用的策略\n\nredis使用的过期键值删除策略是：**惰性删除加上定期删除，两者配合使用**。\n\n## 最佳实践\n\n- 不要放垃圾数据，及时清理无用数据。实验性的数据和下线的业务数据及时删除。\n- key尽量都设置过期时间。对具有时效性的key设置过期时间，通过redis自身的过期key清理策略来降低过期key对于内存的占用，同时也能够减少业务的麻烦，不需要定期手动清理了。\n- 单Key不要过大。给用户排查问题时遇到过单个string的value有43M的，也有一个list 100多万个大成员占了1G多内存的。这种key在get的时候网络传输延迟会比较大，需要分配的输出缓冲区也比较大，在定期清理的时候也容易造成比较高的延迟. 最好能通过业务拆分，数据压缩等方式避免这种过大的key的产生。\n- 不同业务如果公用一个业务的话，最好使用不同的逻辑db分开。从上面的分析可以看出，Redis的过期Key清理策略和强制淘汰策略都会遍历各个db。将key分布在不同的db有助于过期Key的及时清理。另外不同业务使用不同db也有助于问题排查和无用数据的及时下线。\n\n## 参考\n\n[***redis的过期时间和过期删除机制***](https://www.jianshu.com/p/9352d20fb2e0?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation)","slug":"Redis数据过期策略","published":1,"updated":"2018-04-10T10:12:39.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u1e001m3gfkdls1qdbu","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Redis作为一个高性能的内存NoSQL数据库，其容量受到最大内存限制的限制。为了防止一次性清理大量过期Key导致Redis服务受影响，Redis只在空闲时清理过期Key。<div align=\"center\"></div></p>\n<blockquote>\n<p><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/redis.jpg\"></p>\n</blockquote>\n<p><a id=\"more\"></a></p>\n<h1 id=\"Redis过期时间\"><a href=\"#Redis过期时间\" class=\"headerlink\" title=\"Redis过期时间\"></a>Redis过期时间</h1><h2 id=\"设置过期时间\"><a href=\"#设置过期时间\" class=\"headerlink\" title=\"设置过期时间\"></a>设置过期时间</h2><p>redis有四种命令可以用于设置键的生存时间和过期时间：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">EXPIRE <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">TTL</span>&gt;</span> : \t\t将键的生存时间设为 ttl 秒</div><div class=\"line\">PEXPIRE <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">TTL</span>&gt;</span> :\t\t将键的生存时间设为 ttl 毫秒</div><div class=\"line\">EXPIREAT <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">timestamp</span>&gt;</span> :\t将键的过期时间设为 timestamp 所指定的秒数时间戳</div><div class=\"line\">PEXPIREAT <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">timestamp</span>&gt;</span>: \t将键的过期时间设为 timestamp 所指定的毫秒数时间戳.</div></pre></td></tr></table></figure>\n<p><strong>返回值</strong></p>\n<p>一个整数值<strong>1或0</strong>，如下：</p>\n<ul>\n<li>如果<strong>成功</strong>地为该键设置了超时时间，<strong>返回 1</strong></li>\n<li>如果键<strong>不存在或无法设置</strong>超时时间，<strong>返回 0</strong></li>\n</ul>\n<h2 id=\"保存过期时间\"><a href=\"#保存过期时间\" class=\"headerlink\" title=\"保存过期时间\"></a>保存过期时间</h2><p><strong>redis中key的过期时间和生存时间保存方式</strong>：在数据库结构redisDb中的expires字典中保存了数据库中所有键的过期时间，称expire这个字典为过期字典。<br>（1）过期字典是一个指针，指向键空间的某个键对象。<br>（2）过期字典的值是一个longlong类型的整数，这个整数保存了键所指向的数据库键的过期时间–一个毫秒级的 UNIX 时间戳。</p>\n<p>下图是一个带过期字典的数据库例子：<div align=\"center\"></div></p>\n<blockquote>\n<p><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e1.png\"></p>\n</blockquote>\n<p></p>\n<p>从以上结构中可以看到expire字典(过期字典)和dict字典（数据库键空间，保存着数据库中所有键值对）是并列的，由此可见expire字典的重要性。</p>\n<h2 id=\"移除过期时间\"><a href=\"#移除过期时间\" class=\"headerlink\" title=\"移除过期时间\"></a>移除过期时间</h2><p><strong>PERSIST</strong>命令可以移除一个键的过期时间：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; set message <span class=\"string\">\"hello\"</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; expire message <span class=\"number\">60</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl message</div><div class=\"line\">(integer) <span class=\"number\">54</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; persist message</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl message</div><div class=\"line\">(integer) -<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>persist命令就是expire命令的反命令，这个函数在过期字典中查找给定的键,并从过期字典中移除。<br>比如在数据库当前状态(如上图所示)，当给book这个key移除过期时间：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis&gt; persist book</div><div class=\"line\">(integer) <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>数据库将更新成如下状态：<div align=\"center\"></div></p>\n<blockquote>\n<p><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e2.png\"></p>\n</blockquote>\n<p></p>\n<p>可以从图中看到,当PERSIST book命令执行之后,过期字典中的 book 键消失了。</p>\n<h2 id=\"计算并返回剩余生存时间\"><a href=\"#计算并返回剩余生存时间\" class=\"headerlink\" title=\"计算并返回剩余生存时间\"></a>计算并返回剩余生存时间</h2><p><strong>ttl</strong>命令以<strong>秒为单位</strong>返回指定键的剩余生存时间。<strong>pttl</strong>以<strong>毫秒</strong>返回。两个命令都是通过计算当前时间和过期时间的差值得到剩余生存期的。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; set name rainbowhorse</div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; expire name <span class=\"number\">60</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl name</div><div class=\"line\">(integer) <span class=\"number\">57</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl name</div><div class=\"line\">(integer) <span class=\"number\">27</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; pttl name</div><div class=\"line\">(integer) <span class=\"number\">23839</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"过期键的删除策略\"><a href=\"#过期键的删除策略\" class=\"headerlink\" title=\"过期键的删除策略\"></a>过期键的删除策略</h1><p>如果一个键是过期的，它的怎么从内存中消失的，是什么时候被删除的？</p>\n<p>redis有三种不同的删除策略：</p>\n<ul>\n<li><strong>定时删除</strong>。每隔一段时间，对expires字典进行检查，删除里面的过期键。</li>\n</ul>\n<ul>\n<li><strong>立即删除</strong>。在设置键的过期时间时，创建一个回调事件，当过期时间达到时，由时间处理器自动执行键的删除操作。</li>\n<li><strong>惰性删除</strong>。键过期了就过期了，不管。每次从dict字典中按key取值时，先检查此key是否已经过期，如果过期了就删除它，并返回nil，如果没过期，就返回键值。</li>\n</ul>\n<p>由此可见，第二种为被动删除，第一种和第三种为主动删除，且第一种实时性更高。下面对这三种删除策略进行具体分析。</p>\n<h2 id=\"定时删除\"><a href=\"#定时删除\" class=\"headerlink\" title=\"定时删除\"></a>定时删除</h2><ul>\n<li>含义：在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除</li>\n<li>优点：保证内存被尽快释放</li>\n<li>缺点：<ul>\n<li>若过期key很多，删除这些key会占用很多的CPU时间，在CPU时间紧张的情况下，CPU不能把所有的时间用来做要紧的事儿，还需要去花时间删除这些key</li>\n<li>定时器的创建耗时，若为每一个设置过期时间的key创建一个定时器（将会有大量的定时器产生），性能影响严重</li>\n<li>没人用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"定期删除\"><a href=\"#定期删除\" class=\"headerlink\" title=\"定期删除\"></a>定期删除</h2><ul>\n<li>含义：每隔一段时间执行一次删除(在redis.conf配置文件设置hz，1s刷新的频率)过期key操作</li>\n<li>优点：<ul>\n<li>通过限制删除操作的时长和频率，来减少删除操作对CPU时间的占用–处理”定时删除”的缺点</li>\n<li>定期删除过期key–处理”惰性删除”的缺点</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>在内存友好方面，不如”定时删除”</li>\n<li>在CPU时间友好方面，不如”惰性删除”</li>\n</ul>\n</li>\n<li>难点<ul>\n<li>合理设置删除操作的执行时长（每次删除执行多长时间）和执行频率（每隔多长时间做一次删除）（这个要根据服务器运行情况来定了）</li>\n</ul>\n</li>\n</ul>\n<p>定期删除可以通过：</p>\n<ul>\n<li>第一、配置redis.conf 的hz选项，默认为10 （即1秒执行10次，100ms一次，值越大说明刷新频率越快，最Redis性能损耗也越大） </li>\n<li>第二、配置redis.conf的maxmemory最大值，当已用内存超过maxmemory限定时，就会触发主动清理策略</li>\n</ul>\n<h2 id=\"惰性删除\"><a href=\"#惰性删除\" class=\"headerlink\" title=\"惰性删除\"></a>惰性删除</h2><ul>\n<li>含义：key过期的时候不删除，每次从数据库获取key的时候去检查是否过期，若过期，则删除，返回null。</li>\n<li>优点：删除操作只发生在从数据库取出key的时候发生，而且只删除当前key，所以对CPU时间的占用是比较少的，而且此时的删除是已经到了非做不可的地步（如果此时还不删除的话，我们就会获取到了已经过期的key了）</li>\n<li>缺点：若大量的key在超出超时时间后，很久一段时间内，都没有被获取过，那么可能发生内存泄露（无用的垃圾占用了大量的内存）</li>\n</ul>\n<p><strong>定时删除和定期删除为主动删除</strong>：Redis会定期主动淘汰一批已过去的key。</p>\n<p><strong>惰性删除为被动删除</strong>：用到的时候才会去检验key是不是已过期，过期就删除。</p>\n<h2 id=\"redis使用的策略\"><a href=\"#redis使用的策略\" class=\"headerlink\" title=\"redis使用的策略\"></a>redis使用的策略</h2><p>redis使用的过期键值删除策略是：<strong>惰性删除加上定期删除，两者配合使用</strong>。</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>不要放垃圾数据，及时清理无用数据。实验性的数据和下线的业务数据及时删除。</li>\n<li>key尽量都设置过期时间。对具有时效性的key设置过期时间，通过redis自身的过期key清理策略来降低过期key对于内存的占用，同时也能够减少业务的麻烦，不需要定期手动清理了。</li>\n<li>单Key不要过大。给用户排查问题时遇到过单个string的value有43M的，也有一个list 100多万个大成员占了1G多内存的。这种key在get的时候网络传输延迟会比较大，需要分配的输出缓冲区也比较大，在定期清理的时候也容易造成比较高的延迟. 最好能通过业务拆分，数据压缩等方式避免这种过大的key的产生。</li>\n<li>不同业务如果公用一个业务的话，最好使用不同的逻辑db分开。从上面的分析可以看出，Redis的过期Key清理策略和强制淘汰策略都会遍历各个db。将key分布在不同的db有助于过期Key的及时清理。另外不同业务使用不同db也有助于问题排查和无用数据的及时下线。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/9352d20fb2e0?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\" target=\"_blank\" rel=\"external\"><strong><em>redis的过期时间和过期删除机制</em></strong></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Redis作为一个高性能的内存NoSQL数据库，其容量受到最大内存限制的限制。为了防止一次性清理大量过期Key导致Redis服务受影响，Redis只在空闲时清理过期Key。<div align=center></p>\n<blockquote>\n<p><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/redis.jpg\"/></p>\n</blockquote>\n<p></div>","more":"</p>\n<h1 id=\"Redis过期时间\"><a href=\"#Redis过期时间\" class=\"headerlink\" title=\"Redis过期时间\"></a>Redis过期时间</h1><h2 id=\"设置过期时间\"><a href=\"#设置过期时间\" class=\"headerlink\" title=\"设置过期时间\"></a>设置过期时间</h2><p>redis有四种命令可以用于设置键的生存时间和过期时间：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">EXPIRE <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">TTL</span>&gt;</span> : \t\t将键的生存时间设为 ttl 秒</div><div class=\"line\">PEXPIRE <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">TTL</span>&gt;</span> :\t\t将键的生存时间设为 ttl 毫秒</div><div class=\"line\">EXPIREAT <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">timestamp</span>&gt;</span> :\t将键的过期时间设为 timestamp 所指定的秒数时间戳</div><div class=\"line\">PEXPIREAT <span class=\"tag\">&lt;<span class=\"name\">KEY</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">timestamp</span>&gt;</span>: \t将键的过期时间设为 timestamp 所指定的毫秒数时间戳.</div></pre></td></tr></table></figure>\n<p><strong>返回值</strong></p>\n<p>一个整数值<strong>1或0</strong>，如下：</p>\n<ul>\n<li>如果<strong>成功</strong>地为该键设置了超时时间，<strong>返回 1</strong></li>\n<li>如果键<strong>不存在或无法设置</strong>超时时间，<strong>返回 0</strong></li>\n</ul>\n<h2 id=\"保存过期时间\"><a href=\"#保存过期时间\" class=\"headerlink\" title=\"保存过期时间\"></a>保存过期时间</h2><p><strong>redis中key的过期时间和生存时间保存方式</strong>：在数据库结构redisDb中的expires字典中保存了数据库中所有键的过期时间，称expire这个字典为过期字典。<br>（1）过期字典是一个指针，指向键空间的某个键对象。<br>（2）过期字典的值是一个longlong类型的整数，这个整数保存了键所指向的数据库键的过期时间–一个毫秒级的 UNIX 时间戳。</p>\n<p>下图是一个带过期字典的数据库例子：<div align=center></p>\n<blockquote>\n<p><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e1.png\"/></p>\n</blockquote>\n<p></div></p>\n<p>从以上结构中可以看到expire字典(过期字典)和dict字典（数据库键空间，保存着数据库中所有键值对）是并列的，由此可见expire字典的重要性。</p>\n<h2 id=\"移除过期时间\"><a href=\"#移除过期时间\" class=\"headerlink\" title=\"移除过期时间\"></a>移除过期时间</h2><p><strong>PERSIST</strong>命令可以移除一个键的过期时间：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; set message <span class=\"string\">\"hello\"</span></div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; expire message <span class=\"number\">60</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl message</div><div class=\"line\">(integer) <span class=\"number\">54</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; persist message</div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl message</div><div class=\"line\">(integer) -<span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>persist命令就是expire命令的反命令，这个函数在过期字典中查找给定的键,并从过期字典中移除。<br>比如在数据库当前状态(如上图所示)，当给book这个key移除过期时间：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">redis&gt; persist book</div><div class=\"line\">(integer) <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>数据库将更新成如下状态：<div align=center></p>\n<blockquote>\n<p><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/redisKeyExpire/e2.png\"/></p>\n</blockquote>\n<p></div></p>\n<p>可以从图中看到,当PERSIST book命令执行之后,过期字典中的 book 键消失了。</p>\n<h2 id=\"计算并返回剩余生存时间\"><a href=\"#计算并返回剩余生存时间\" class=\"headerlink\" title=\"计算并返回剩余生存时间\"></a>计算并返回剩余生存时间</h2><p><strong>ttl</strong>命令以<strong>秒为单位</strong>返回指定键的剩余生存时间。<strong>pttl</strong>以<strong>毫秒</strong>返回。两个命令都是通过计算当前时间和过期时间的差值得到剩余生存期的。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; set name rainbowhorse</div><div class=\"line\">OK</div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; expire name <span class=\"number\">60</span></div><div class=\"line\">(integer) <span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl name</div><div class=\"line\">(integer) <span class=\"number\">57</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; ttl name</div><div class=\"line\">(integer) <span class=\"number\">27</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt; pttl name</div><div class=\"line\">(integer) <span class=\"number\">23839</span></div><div class=\"line\"><span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">6379</span>&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"过期键的删除策略\"><a href=\"#过期键的删除策略\" class=\"headerlink\" title=\"过期键的删除策略\"></a>过期键的删除策略</h1><p>如果一个键是过期的，它的怎么从内存中消失的，是什么时候被删除的？</p>\n<p>redis有三种不同的删除策略：</p>\n<ul>\n<li><strong>定时删除</strong>。每隔一段时间，对expires字典进行检查，删除里面的过期键。</li>\n</ul>\n<ul>\n<li><strong>立即删除</strong>。在设置键的过期时间时，创建一个回调事件，当过期时间达到时，由时间处理器自动执行键的删除操作。</li>\n<li><strong>惰性删除</strong>。键过期了就过期了，不管。每次从dict字典中按key取值时，先检查此key是否已经过期，如果过期了就删除它，并返回nil，如果没过期，就返回键值。</li>\n</ul>\n<p>由此可见，第二种为被动删除，第一种和第三种为主动删除，且第一种实时性更高。下面对这三种删除策略进行具体分析。</p>\n<h2 id=\"定时删除\"><a href=\"#定时删除\" class=\"headerlink\" title=\"定时删除\"></a>定时删除</h2><ul>\n<li>含义：在设置key的过期时间的同时，为该key创建一个定时器，让定时器在key的过期时间来临时，对key进行删除</li>\n<li>优点：保证内存被尽快释放</li>\n<li>缺点：<ul>\n<li>若过期key很多，删除这些key会占用很多的CPU时间，在CPU时间紧张的情况下，CPU不能把所有的时间用来做要紧的事儿，还需要去花时间删除这些key</li>\n<li>定时器的创建耗时，若为每一个设置过期时间的key创建一个定时器（将会有大量的定时器产生），性能影响严重</li>\n<li>没人用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"定期删除\"><a href=\"#定期删除\" class=\"headerlink\" title=\"定期删除\"></a>定期删除</h2><ul>\n<li>含义：每隔一段时间执行一次删除(在redis.conf配置文件设置hz，1s刷新的频率)过期key操作</li>\n<li>优点：<ul>\n<li>通过限制删除操作的时长和频率，来减少删除操作对CPU时间的占用–处理”定时删除”的缺点</li>\n<li>定期删除过期key–处理”惰性删除”的缺点</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>在内存友好方面，不如”定时删除”</li>\n<li>在CPU时间友好方面，不如”惰性删除”</li>\n</ul>\n</li>\n<li>难点<ul>\n<li>合理设置删除操作的执行时长（每次删除执行多长时间）和执行频率（每隔多长时间做一次删除）（这个要根据服务器运行情况来定了）</li>\n</ul>\n</li>\n</ul>\n<p>定期删除可以通过：</p>\n<ul>\n<li>第一、配置redis.conf 的hz选项，默认为10 （即1秒执行10次，100ms一次，值越大说明刷新频率越快，最Redis性能损耗也越大） </li>\n<li>第二、配置redis.conf的maxmemory最大值，当已用内存超过maxmemory限定时，就会触发主动清理策略</li>\n</ul>\n<h2 id=\"惰性删除\"><a href=\"#惰性删除\" class=\"headerlink\" title=\"惰性删除\"></a>惰性删除</h2><ul>\n<li>含义：key过期的时候不删除，每次从数据库获取key的时候去检查是否过期，若过期，则删除，返回null。</li>\n<li>优点：删除操作只发生在从数据库取出key的时候发生，而且只删除当前key，所以对CPU时间的占用是比较少的，而且此时的删除是已经到了非做不可的地步（如果此时还不删除的话，我们就会获取到了已经过期的key了）</li>\n<li>缺点：若大量的key在超出超时时间后，很久一段时间内，都没有被获取过，那么可能发生内存泄露（无用的垃圾占用了大量的内存）</li>\n</ul>\n<p><strong>定时删除和定期删除为主动删除</strong>：Redis会定期主动淘汰一批已过去的key。</p>\n<p><strong>惰性删除为被动删除</strong>：用到的时候才会去检验key是不是已过期，过期就删除。</p>\n<h2 id=\"redis使用的策略\"><a href=\"#redis使用的策略\" class=\"headerlink\" title=\"redis使用的策略\"></a>redis使用的策略</h2><p>redis使用的过期键值删除策略是：<strong>惰性删除加上定期删除，两者配合使用</strong>。</p>\n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2><ul>\n<li>不要放垃圾数据，及时清理无用数据。实验性的数据和下线的业务数据及时删除。</li>\n<li>key尽量都设置过期时间。对具有时效性的key设置过期时间，通过redis自身的过期key清理策略来降低过期key对于内存的占用，同时也能够减少业务的麻烦，不需要定期手动清理了。</li>\n<li>单Key不要过大。给用户排查问题时遇到过单个string的value有43M的，也有一个list 100多万个大成员占了1G多内存的。这种key在get的时候网络传输延迟会比较大，需要分配的输出缓冲区也比较大，在定期清理的时候也容易造成比较高的延迟. 最好能通过业务拆分，数据压缩等方式避免这种过大的key的产生。</li>\n<li>不同业务如果公用一个业务的话，最好使用不同的逻辑db分开。从上面的分析可以看出，Redis的过期Key清理策略和强制淘汰策略都会遍历各个db。将key分布在不同的db有助于过期Key的及时清理。另外不同业务使用不同db也有助于问题排查和无用数据的及时下线。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/9352d20fb2e0?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation\"><strong><em>redis的过期时间和过期删除机制</em></strong></a></p>"},{"title":"Sping定时任务","date":"2018-03-07T09:09:22.000Z","_content":"\n# 引言\n\n在企业开发中，经常会遇到时间任务调度的需求，比如每天凌晨生成前天报表、数据汇总等动态配置是否开启定时的任务。在Java领域中，定时任务的开源工具也非常多，小到一个Timer类，大到Quartz框架。在Spring中最常见的定时任务方式属**Spring schedule注解的方式**和利用**Quartz动态管理定时任务**。总体来说，个人比较喜欢的还是Quartz，功能强大而且使用方便。<div align=center>\n\n> <img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/index.png\"/>\n\n</div><!-- more -->\n\n# Spring-@scheduled \n\n对于较简单的任务可以使用Spring内置的定时任务方法@scheduled注解进行配置达到自己的需求。\n\n## spring配置文件\n\n配置spring项目的基础文件spring.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns:task=\"http://www.springframework.org/schema/task\"  \n    xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xsi:schemaLocation=\"  \nhttp://www.springframework.org/schema/beans  \nhttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd  \nhttp://www.springframework.org/schema/context  \nhttp://www.springframework.org/schema/context/spring-context-3.0.xsd  \nhttp://www.springframework.org/schema/task  \nhttp://www.springframework.org/schema/task/spring-task-3.1.xsd\">  \n  \n  \t<!-- 开启定时任务 spring的定时任务默认是单线程，多个任务执行起来时间会有问题，所以这里配置了线程池--> \n    <task:executor id=\"executor\" pool-size=\"5\" />\n\t<task:scheduler id=\"scheduler\" pool-size=\"10\" />\n\t<task:annotation-driven executor=\"executor\" scheduler=\"scheduler\" />  \n  \n</beans>  \n```\n\n## Task任务类\n\n定义了一个任务类ATask，里面有两个定时任务aTask和bTask。编写java业务代码，需要在类声明上边添加**@Component注解**，并在需要定时任务执行的方法声明上添加**@Scheduled**注解以及cron表达式和相关的参数。\n\n```java\n// 定时器的任务方法不能有返回值\n@Component\npublic class ATask {\n\n\t@Scheduled(cron = \"0/10 * *  * * ? \") // 每10秒执行一次\n\tpublic void aTask() {\n\t\tDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + \"*********A任务每10秒执行一次进入测试\");\n\t}\n\n\t@Scheduled(cron = \"0/5 * *  * * ? \") // 每5秒执行一次\n\tpublic void bTask() {\n\t\tDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + \"*********B任务每5秒执行一次进入测试\");\n\t}\n}\n```\n\n## 运行结果\n\n启动项目会发现定时任务已经开启。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/taskCode.png\" algin=\"center\"/>\n\n</div>\n\n# Spring-Quartz\n\n@scheduled固然可以实现定时任务，但是仔细想想并不灵活，任务随着应用的启动而执行，并不能动态的进行管理，很是不方便，然而Quartz很好的解决了这一问题。\n\n## 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.quartz-scheduler</groupId>\n        <artifactId>quartz</artifactId>\n    <version>2.2.1</version>\n</dependency>\n```\n\n## 任务管理类QuartzManager\n\n```java\npublic class QuartzManager {\n\n\tprivate static SchedulerFactory schedulerFactory = new StdSchedulerFactory();\n\n\t/**\n\t * @Description: 添加一个定时任务\n\t * \n\t * @param jobName\n\t *            任务名\n\t * @param jobGroupName\n\t *            任务组名\n\t * @param triggerName\n\t *            触发器名\n\t * @param triggerGroupName\n\t *            触发器组名\n\t * @param jobClass\n\t *            任务\n\t * @param cron\n\t *            时间设置，参考quartz说明文档\n\t */\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic static void addJob(String jobName, String jobGroupName, String triggerName, String triggerGroupName,\n\t\t\tClass jobClass, String cron) {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\t// 任务名，任务组，任务执行类\n\t\t\tJobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();\n\n\t\t\t// 触发器\n\t\t\tTriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger();\n\t\t\t// 触发器名,触发器组\n\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);\n\t\t\ttriggerBuilder.startNow();\n\t\t\t// 触发器时间设定\n\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));\n\t\t\t// 创建Trigger对象\n\t\t\tCronTrigger trigger = (CronTrigger) triggerBuilder.build();\n\n\t\t\t// 调度容器设置JobDetail和Trigger\n\t\t\tsched.scheduleJob(jobDetail, trigger);\n\n\t\t\t// 启动\n\t\t\tif (!sched.isShutdown()) {\n\t\t\t\tsched.start();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description: 修改一个任务的触发时间\n\t * \n\t * @param jobName\n\t * @param jobGroupName\n\t * @param triggerName\n\t *            触发器名\n\t * @param triggerGroupName\n\t *            触发器组名\n\t * @param cron\n\t *            时间设置，参考quartz说明文档\n\t */\n\tpublic static void modifyJobTime(String jobName, String jobGroupName, String triggerName, String triggerGroupName,\n\t\t\tString cron) {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);\n\t\t\tCronTrigger trigger = (CronTrigger) sched.getTrigger(triggerKey);\n\t\t\tif (trigger == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString oldTime = trigger.getCronExpression();\n\t\t\tif (!oldTime.equalsIgnoreCase(cron)) {\n\t\t\t\t/** 方式一 ：调用 rescheduleJob 开始 */\n\t\t\t\t// 触发器\n\t\t\t\tTriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger();\n\t\t\t\t// 触发器名,触发器组\n\t\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);\n\t\t\t\ttriggerBuilder.startNow();\n\t\t\t\t// 触发器时间设定\n\t\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));\n\t\t\t\t// 创建Trigger对象\n\t\t\t\ttrigger = (CronTrigger) triggerBuilder.build();\n\t\t\t\t// 方式一 ：修改一个任务的触发时间\n\t\t\t\tsched.rescheduleJob(triggerKey, trigger);\n\t\t\t\t/** 方式一 ：调用 rescheduleJob 结束 */\n\n\t\t\t\t/** 方式二：先删除，然后在创建一个新的Job */\n\t\t\t\t// JobDetail jobDetail =\n\t\t\t\t// sched.getJobDetail(JobKey.jobKey(jobName, jobGroupName));\n\t\t\t\t// Class<? extends Job> jobClass = jobDetail.getJobClass();\n\t\t\t\t// removeJob(jobName, jobGroupName, triggerName,\n\t\t\t\t// triggerGroupName);\n\t\t\t\t// addJob(jobName, jobGroupName, triggerName, triggerGroupName,\n\t\t\t\t// jobClass, cron);\n\t\t\t\t/** 方式二 ：先删除，然后在创建一个新的Job */\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description: 移除一个任务\n\t * \n\t * @param jobName\n\t * @param jobGroupName\n\t * @param triggerName\n\t * @param triggerGroupName\n\t */\n\tpublic static void removeJob(String jobName, String jobGroupName, String triggerName, String triggerGroupName) {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\n\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);\n\n\t\t\tsched.pauseTrigger(triggerKey);// 停止触发器\n\t\t\tsched.unscheduleJob(triggerKey);// 移除触发器\n\t\t\tsched.deleteJob(JobKey.jobKey(jobName, jobGroupName));// 删除任务\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description:启动所有定时任务\n\t */\n\tpublic static void startJobs() {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\tsched.start();\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description:关闭所有定时任务\n\t */\n\tpublic static void shutdownJobs() {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\tif (!sched.isShutdown()) {\n\t\t\t\tsched.shutdown();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}\n```\n\n## 任务执行业务\n\n这里做一个简单的演示，只实现Job接口打印当前时间。\n\n```java\npublic class MyJob implements Job{\n\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n\t\tDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(sdf.format(DateTime.now().toDate()));\n\t}\n}\n```\n\n## 测试动态定时任务\n\n新建QuartzTest.Java 测试类\n\n```java\npublic class QuartzTest {\n\tpublic static String JOB_NAME = \"动态任务调度\";\n\tpublic static String TRIGGER_NAME = \"动态任务触发器\";\n\tpublic static String JOB_GROUP_NAME = \"XLXXCC_JOB_GROUP\";\n\tpublic static String TRIGGER_GROUP_NAME = \"XLXXCC_JOB_GROUP\";\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tSystem.out.println(\"【系统启动】开始(每1秒输出一次)...\");\n\t\t\tQuartzManager.addJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, MyJob.class,\"0/1 * * * * ?\");\n\n\t\t\tThread.sleep(5000);\n\t\t\tSystem.out.println(\"【修改时间】开始(每5秒输出一次)...\");\n\t\t\tQuartzManager.modifyJobTime(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, \"0/5 * * * * ?\");\n\n\t\t\tThread.sleep(15000);\n\t\t\tSystem.out.println(\"【移除定时】开始...\");\n\t\t\tQuartzManager.removeJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME);\n\t\t\tSystem.out.println(\"【移除定时】成功\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n输出如下：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/quartzResult.png\" algin=\"center\"/>\n\n</div>\n\n# 总结\n\n通过以上测试可以明显的看出两者的优劣，Quartz足够灵活强大，单Spring scheduled 在简单任务下也是一个不错的选择。","source":"_posts/Sping定时任务.md","raw":"---\ntitle: Sping定时任务\ndate: 2018-03-07 17:09:22\ntags: [java,spring]\ncategories: technology\n---\n\n# 引言\n\n在企业开发中，经常会遇到时间任务调度的需求，比如每天凌晨生成前天报表、数据汇总等动态配置是否开启定时的任务。在Java领域中，定时任务的开源工具也非常多，小到一个Timer类，大到Quartz框架。在Spring中最常见的定时任务方式属**Spring schedule注解的方式**和利用**Quartz动态管理定时任务**。总体来说，个人比较喜欢的还是Quartz，功能强大而且使用方便。<div align=center>\n\n> <img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/index.png\"/>\n\n</div><!-- more -->\n\n# Spring-@scheduled \n\n对于较简单的任务可以使用Spring内置的定时任务方法@scheduled注解进行配置达到自己的需求。\n\n## spring配置文件\n\n配置spring项目的基础文件spring.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns:task=\"http://www.springframework.org/schema/task\"  \n    xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n    xmlns:context=\"http://www.springframework.org/schema/context\"  \n    xsi:schemaLocation=\"  \nhttp://www.springframework.org/schema/beans  \nhttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd  \nhttp://www.springframework.org/schema/context  \nhttp://www.springframework.org/schema/context/spring-context-3.0.xsd  \nhttp://www.springframework.org/schema/task  \nhttp://www.springframework.org/schema/task/spring-task-3.1.xsd\">  \n  \n  \t<!-- 开启定时任务 spring的定时任务默认是单线程，多个任务执行起来时间会有问题，所以这里配置了线程池--> \n    <task:executor id=\"executor\" pool-size=\"5\" />\n\t<task:scheduler id=\"scheduler\" pool-size=\"10\" />\n\t<task:annotation-driven executor=\"executor\" scheduler=\"scheduler\" />  \n  \n</beans>  \n```\n\n## Task任务类\n\n定义了一个任务类ATask，里面有两个定时任务aTask和bTask。编写java业务代码，需要在类声明上边添加**@Component注解**，并在需要定时任务执行的方法声明上添加**@Scheduled**注解以及cron表达式和相关的参数。\n\n```java\n// 定时器的任务方法不能有返回值\n@Component\npublic class ATask {\n\n\t@Scheduled(cron = \"0/10 * *  * * ? \") // 每10秒执行一次\n\tpublic void aTask() {\n\t\tDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + \"*********A任务每10秒执行一次进入测试\");\n\t}\n\n\t@Scheduled(cron = \"0/5 * *  * * ? \") // 每5秒执行一次\n\tpublic void bTask() {\n\t\tDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + \"*********B任务每5秒执行一次进入测试\");\n\t}\n}\n```\n\n## 运行结果\n\n启动项目会发现定时任务已经开启。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/taskCode.png\" algin=\"center\"/>\n\n</div>\n\n# Spring-Quartz\n\n@scheduled固然可以实现定时任务，但是仔细想想并不灵活，任务随着应用的启动而执行，并不能动态的进行管理，很是不方便，然而Quartz很好的解决了这一问题。\n\n## 引入依赖\n\n```xml\n<dependency>\n    <groupId>org.quartz-scheduler</groupId>\n        <artifactId>quartz</artifactId>\n    <version>2.2.1</version>\n</dependency>\n```\n\n## 任务管理类QuartzManager\n\n```java\npublic class QuartzManager {\n\n\tprivate static SchedulerFactory schedulerFactory = new StdSchedulerFactory();\n\n\t/**\n\t * @Description: 添加一个定时任务\n\t * \n\t * @param jobName\n\t *            任务名\n\t * @param jobGroupName\n\t *            任务组名\n\t * @param triggerName\n\t *            触发器名\n\t * @param triggerGroupName\n\t *            触发器组名\n\t * @param jobClass\n\t *            任务\n\t * @param cron\n\t *            时间设置，参考quartz说明文档\n\t */\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic static void addJob(String jobName, String jobGroupName, String triggerName, String triggerGroupName,\n\t\t\tClass jobClass, String cron) {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\t// 任务名，任务组，任务执行类\n\t\t\tJobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();\n\n\t\t\t// 触发器\n\t\t\tTriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger();\n\t\t\t// 触发器名,触发器组\n\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);\n\t\t\ttriggerBuilder.startNow();\n\t\t\t// 触发器时间设定\n\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));\n\t\t\t// 创建Trigger对象\n\t\t\tCronTrigger trigger = (CronTrigger) triggerBuilder.build();\n\n\t\t\t// 调度容器设置JobDetail和Trigger\n\t\t\tsched.scheduleJob(jobDetail, trigger);\n\n\t\t\t// 启动\n\t\t\tif (!sched.isShutdown()) {\n\t\t\t\tsched.start();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description: 修改一个任务的触发时间\n\t * \n\t * @param jobName\n\t * @param jobGroupName\n\t * @param triggerName\n\t *            触发器名\n\t * @param triggerGroupName\n\t *            触发器组名\n\t * @param cron\n\t *            时间设置，参考quartz说明文档\n\t */\n\tpublic static void modifyJobTime(String jobName, String jobGroupName, String triggerName, String triggerGroupName,\n\t\t\tString cron) {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);\n\t\t\tCronTrigger trigger = (CronTrigger) sched.getTrigger(triggerKey);\n\t\t\tif (trigger == null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString oldTime = trigger.getCronExpression();\n\t\t\tif (!oldTime.equalsIgnoreCase(cron)) {\n\t\t\t\t/** 方式一 ：调用 rescheduleJob 开始 */\n\t\t\t\t// 触发器\n\t\t\t\tTriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger();\n\t\t\t\t// 触发器名,触发器组\n\t\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);\n\t\t\t\ttriggerBuilder.startNow();\n\t\t\t\t// 触发器时间设定\n\t\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));\n\t\t\t\t// 创建Trigger对象\n\t\t\t\ttrigger = (CronTrigger) triggerBuilder.build();\n\t\t\t\t// 方式一 ：修改一个任务的触发时间\n\t\t\t\tsched.rescheduleJob(triggerKey, trigger);\n\t\t\t\t/** 方式一 ：调用 rescheduleJob 结束 */\n\n\t\t\t\t/** 方式二：先删除，然后在创建一个新的Job */\n\t\t\t\t// JobDetail jobDetail =\n\t\t\t\t// sched.getJobDetail(JobKey.jobKey(jobName, jobGroupName));\n\t\t\t\t// Class<? extends Job> jobClass = jobDetail.getJobClass();\n\t\t\t\t// removeJob(jobName, jobGroupName, triggerName,\n\t\t\t\t// triggerGroupName);\n\t\t\t\t// addJob(jobName, jobGroupName, triggerName, triggerGroupName,\n\t\t\t\t// jobClass, cron);\n\t\t\t\t/** 方式二 ：先删除，然后在创建一个新的Job */\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description: 移除一个任务\n\t * \n\t * @param jobName\n\t * @param jobGroupName\n\t * @param triggerName\n\t * @param triggerGroupName\n\t */\n\tpublic static void removeJob(String jobName, String jobGroupName, String triggerName, String triggerGroupName) {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\n\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);\n\n\t\t\tsched.pauseTrigger(triggerKey);// 停止触发器\n\t\t\tsched.unscheduleJob(triggerKey);// 移除触发器\n\t\t\tsched.deleteJob(JobKey.jobKey(jobName, jobGroupName));// 删除任务\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description:启动所有定时任务\n\t */\n\tpublic static void startJobs() {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\tsched.start();\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\t/**\n\t * @Description:关闭所有定时任务\n\t */\n\tpublic static void shutdownJobs() {\n\t\ttry {\n\t\t\tScheduler sched = schedulerFactory.getScheduler();\n\t\t\tif (!sched.isShutdown()) {\n\t\t\t\tsched.shutdown();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n}\n```\n\n## 任务执行业务\n\n这里做一个简单的演示，只实现Job接口打印当前时间。\n\n```java\npublic class MyJob implements Job{\n\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n\t\tDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n\t\tSystem.out.println(sdf.format(DateTime.now().toDate()));\n\t}\n}\n```\n\n## 测试动态定时任务\n\n新建QuartzTest.Java 测试类\n\n```java\npublic class QuartzTest {\n\tpublic static String JOB_NAME = \"动态任务调度\";\n\tpublic static String TRIGGER_NAME = \"动态任务触发器\";\n\tpublic static String JOB_GROUP_NAME = \"XLXXCC_JOB_GROUP\";\n\tpublic static String TRIGGER_GROUP_NAME = \"XLXXCC_JOB_GROUP\";\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tSystem.out.println(\"【系统启动】开始(每1秒输出一次)...\");\n\t\t\tQuartzManager.addJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, MyJob.class,\"0/1 * * * * ?\");\n\n\t\t\tThread.sleep(5000);\n\t\t\tSystem.out.println(\"【修改时间】开始(每5秒输出一次)...\");\n\t\t\tQuartzManager.modifyJobTime(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, \"0/5 * * * * ?\");\n\n\t\t\tThread.sleep(15000);\n\t\t\tSystem.out.println(\"【移除定时】开始...\");\n\t\t\tQuartzManager.removeJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME);\n\t\t\tSystem.out.println(\"【移除定时】成功\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n输出如下：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/quartzResult.png\" algin=\"center\"/>\n\n</div>\n\n# 总结\n\n通过以上测试可以明显的看出两者的优劣，Quartz足够灵活强大，单Spring scheduled 在简单任务下也是一个不错的选择。","slug":"Sping定时任务","published":1,"updated":"2018-03-13T05:46:53.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u1j001p3gfk6dxpop69","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在企业开发中，经常会遇到时间任务调度的需求，比如每天凌晨生成前天报表、数据汇总等动态配置是否开启定时的任务。在Java领域中，定时任务的开源工具也非常多，小到一个Timer类，大到Quartz框架。在Spring中最常见的定时任务方式属<strong>Spring schedule注解的方式</strong>和利用<strong>Quartz动态管理定时任务</strong>。总体来说，个人比较喜欢的还是Quartz，功能强大而且使用方便。<div align=\"center\"></div></p>\n<blockquote>\n<p><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/index.png\"></p>\n</blockquote>\n<p><a id=\"more\"></a></p>\n<h1 id=\"Spring-scheduled\"><a href=\"#Spring-scheduled\" class=\"headerlink\" title=\"Spring-@scheduled\"></a>Spring-@scheduled</h1><p>对于较简单的任务可以使用Spring内置的定时任务方法@scheduled注解进行配置达到自己的需求。</p>\n<h2 id=\"spring配置文件\"><a href=\"#spring配置文件\" class=\"headerlink\" title=\"spring配置文件\"></a>spring配置文件</h2><p>配置spring项目的基础文件spring.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns:task</span>=<span class=\"string\">\"http://www.springframework.org/schema/task\"</span>  </span></div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"  </span></div><div class=\"line\">http://www.springframework.org/schema/beans  </div><div class=\"line\">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </div><div class=\"line\">http://www.springframework.org/schema/context  </div><div class=\"line\">http://www.springframework.org/schema/context/spring-context-3.0.xsd  </div><div class=\"line\">http://www.springframework.org/schema/task  </div><div class=\"line\">http://www.springframework.org/schema/task/spring-task-3.1.xsd\"&gt;  </div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- 开启定时任务 spring的定时任务默认是单线程，多个任务执行起来时间会有问题，所以这里配置了线程池--&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">task:executor</span> <span class=\"attr\">id</span>=<span class=\"string\">\"executor\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"5\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">task:scheduler</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scheduler\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"10\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">task:annotation-driven</span> <span class=\"attr\">executor</span>=<span class=\"string\">\"executor\"</span> <span class=\"attr\">scheduler</span>=<span class=\"string\">\"scheduler\"</span> /&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Task任务类\"><a href=\"#Task任务类\" class=\"headerlink\" title=\"Task任务类\"></a>Task任务类</h2><p>定义了一个任务类ATask，里面有两个定时任务aTask和bTask。编写java业务代码，需要在类声明上边添加<strong>@Component注解</strong>，并在需要定时任务执行的方法声明上添加<strong>@Scheduled</strong>注解以及cron表达式和相关的参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定时器的任务方法不能有返回值</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ATask</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0/10 * *  * * ? \"</span>) <span class=\"comment\">// 每10秒执行一次</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + <span class=\"string\">\"*********A任务每10秒执行一次进入测试\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0/5 * *  * * ? \"</span>) <span class=\"comment\">// 每5秒执行一次</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + <span class=\"string\">\"*********B任务每5秒执行一次进入测试\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p>启动项目会发现定时任务已经开启。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/taskCode.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"Spring-Quartz\"><a href=\"#Spring-Quartz\" class=\"headerlink\" title=\"Spring-Quartz\"></a>Spring-Quartz</h1><p>@scheduled固然可以实现定时任务，但是仔细想想并不灵活，任务随着应用的启动而执行，并不能动态的进行管理，很是不方便，然而Quartz很好的解决了这一问题。</p>\n<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"任务管理类QuartzManager\"><a href=\"#任务管理类QuartzManager\" class=\"headerlink\" title=\"任务管理类QuartzManager\"></a>任务管理类QuartzManager</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuartzManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SchedulerFactory schedulerFactory = <span class=\"keyword\">new</span> StdSchedulerFactory();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 添加一个定时任务</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobName</div><div class=\"line\">\t *            任务名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobGroupName</div><div class=\"line\">\t *            任务组名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerName</div><div class=\"line\">\t *            触发器名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerGroupName</div><div class=\"line\">\t *            触发器组名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobClass</div><div class=\"line\">\t *            任务</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> cron</div><div class=\"line\">\t *            时间设置，参考quartz说明文档</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span> &#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(String jobName, String jobGroupName, String triggerName, String triggerGroupName,</span></span></div><div class=\"line\">\t\t\tClass jobClass, String cron) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 任务名，任务组，任务执行类</span></div><div class=\"line\">\t\t\tJobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 触发器</span></div><div class=\"line\">\t\t\tTriggerBuilder&lt;Trigger&gt; triggerBuilder = TriggerBuilder.newTrigger();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 触发器名,触发器组</span></div><div class=\"line\">\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);</div><div class=\"line\">\t\t\ttriggerBuilder.startNow();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 触发器时间设定</span></div><div class=\"line\">\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建Trigger对象</span></div><div class=\"line\">\t\t\tCronTrigger trigger = (CronTrigger) triggerBuilder.build();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 调度容器设置JobDetail和Trigger</span></div><div class=\"line\">\t\t\tsched.scheduleJob(jobDetail, trigger);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 启动</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!sched.isShutdown()) &#123;</div><div class=\"line\">\t\t\t\tsched.start();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 修改一个任务的触发时间</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobGroupName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerName</div><div class=\"line\">\t *            触发器名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerGroupName</div><div class=\"line\">\t *            触发器组名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> cron</div><div class=\"line\">\t *            时间设置，参考quartz说明文档</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyJobTime</span><span class=\"params\">(String jobName, String jobGroupName, String triggerName, String triggerGroupName,</span></span></div><div class=\"line\">\t\t\tString cron) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);</div><div class=\"line\">\t\t\tCronTrigger trigger = (CronTrigger) sched.getTrigger(triggerKey);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (trigger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tString oldTime = trigger.getCronExpression();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!oldTime.equalsIgnoreCase(cron)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式一 ：调用 rescheduleJob 开始 */</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 触发器</span></div><div class=\"line\">\t\t\t\tTriggerBuilder&lt;Trigger&gt; triggerBuilder = TriggerBuilder.newTrigger();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 触发器名,触发器组</span></div><div class=\"line\">\t\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);</div><div class=\"line\">\t\t\t\ttriggerBuilder.startNow();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 触发器时间设定</span></div><div class=\"line\">\t\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 创建Trigger对象</span></div><div class=\"line\">\t\t\t\ttrigger = (CronTrigger) triggerBuilder.build();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 方式一 ：修改一个任务的触发时间</span></div><div class=\"line\">\t\t\t\tsched.rescheduleJob(triggerKey, trigger);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式一 ：调用 rescheduleJob 结束 */</span></div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式二：先删除，然后在创建一个新的Job */</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// JobDetail jobDetail =</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// sched.getJobDetail(JobKey.jobKey(jobName, jobGroupName));</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// Class&lt;? extends Job&gt; jobClass = jobDetail.getJobClass();</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// removeJob(jobName, jobGroupName, triggerName,</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// triggerGroupName);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// addJob(jobName, jobGroupName, triggerName, triggerGroupName,</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// jobClass, cron);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式二 ：先删除，然后在创建一个新的Job */</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 移除一个任务</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobGroupName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerGroupName</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">removeJob</span><span class=\"params\">(String jobName, String jobGroupName, String triggerName, String triggerGroupName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\"></div><div class=\"line\">\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);</div><div class=\"line\"></div><div class=\"line\">\t\t\tsched.pauseTrigger(triggerKey);<span class=\"comment\">// 停止触发器</span></div><div class=\"line\">\t\t\tsched.unscheduleJob(triggerKey);<span class=\"comment\">// 移除触发器</span></div><div class=\"line\">\t\t\tsched.deleteJob(JobKey.jobKey(jobName, jobGroupName));<span class=\"comment\">// 删除任务</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>:启动所有定时任务</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startJobs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\tsched.start();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>:关闭所有定时任务</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdownJobs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!sched.isShutdown()) &#123;</div><div class=\"line\">\t\t\t\tsched.shutdown();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"任务执行业务\"><a href=\"#任务执行业务\" class=\"headerlink\" title=\"任务执行业务\"></a>任务执行业务</h2><p>这里做一个简单的演示，只实现Job接口打印当前时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyJob</span> <span class=\"keyword\">implements</span> <span class=\"title\">Job</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</div><div class=\"line\">\t\tDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\tSystem.out.println(sdf.format(DateTime.now().toDate()));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"测试动态定时任务\"><a href=\"#测试动态定时任务\" class=\"headerlink\" title=\"测试动态定时任务\"></a>测试动态定时任务</h2><p>新建QuartzTest.Java 测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuartzTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String JOB_NAME = <span class=\"string\">\"动态任务调度\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String TRIGGER_NAME = <span class=\"string\">\"动态任务触发器\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String JOB_GROUP_NAME = <span class=\"string\">\"XLXXCC_JOB_GROUP\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String TRIGGER_GROUP_NAME = <span class=\"string\">\"XLXXCC_JOB_GROUP\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【系统启动】开始(每1秒输出一次)...\"</span>);</div><div class=\"line\">\t\t\tQuartzManager.addJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, MyJob.class,<span class=\"string\">\"0/1 * * * * ?\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【修改时间】开始(每5秒输出一次)...\"</span>);</div><div class=\"line\">\t\t\tQuartzManager.modifyJobTime(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, <span class=\"string\">\"0/5 * * * * ?\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">15000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【移除定时】开始...\"</span>);</div><div class=\"line\">\t\t\tQuartzManager.removeJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【移除定时】成功\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/quartzResult.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过以上测试可以明显的看出两者的优劣，Quartz足够灵活强大，单Spring scheduled 在简单任务下也是一个不错的选择。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在企业开发中，经常会遇到时间任务调度的需求，比如每天凌晨生成前天报表、数据汇总等动态配置是否开启定时的任务。在Java领域中，定时任务的开源工具也非常多，小到一个Timer类，大到Quartz框架。在Spring中最常见的定时任务方式属<strong>Spring schedule注解的方式</strong>和利用<strong>Quartz动态管理定时任务</strong>。总体来说，个人比较喜欢的还是Quartz，功能强大而且使用方便。<div align=center></p>\n<blockquote>\n<p><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/index.png\"/></p>\n</blockquote>\n<p></div>","more":"</p>\n<h1 id=\"Spring-scheduled\"><a href=\"#Spring-scheduled\" class=\"headerlink\" title=\"Spring-@scheduled\"></a>Spring-@scheduled</h1><p>对于较简单的任务可以使用Spring内置的定时任务方法@scheduled注解进行配置达到自己的需求。</p>\n<h2 id=\"spring配置文件\"><a href=\"#spring配置文件\" class=\"headerlink\" title=\"spring配置文件\"></a>spring配置文件</h2><p>配置spring项目的基础文件spring.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns:task</span>=<span class=\"string\">\"http://www.springframework.org/schema/task\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </div><div class=\"line\">    <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </div><div class=\"line\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"  </div><div class=\"line\">http://www.springframework.org/schema/beans  </div><div class=\"line\">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  </div><div class=\"line\">http://www.springframework.org/schema/context  </div><div class=\"line\">http://www.springframework.org/schema/context/spring-context-3.0.xsd  </div><div class=\"line\">http://www.springframework.org/schema/task  </div><div class=\"line\">http://www.springframework.org/schema/task/spring-task-3.1.xsd\"</span>&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- 开启定时任务 spring的定时任务默认是单线程，多个任务执行起来时间会有问题，所以这里配置了线程池--&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">task:executor</span> <span class=\"attr\">id</span>=<span class=\"string\">\"executor\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"5\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">task:scheduler</span> <span class=\"attr\">id</span>=<span class=\"string\">\"scheduler\"</span> <span class=\"attr\">pool-size</span>=<span class=\"string\">\"10\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">task:annotation-driven</span> <span class=\"attr\">executor</span>=<span class=\"string\">\"executor\"</span> <span class=\"attr\">scheduler</span>=<span class=\"string\">\"scheduler\"</span> /&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Task任务类\"><a href=\"#Task任务类\" class=\"headerlink\" title=\"Task任务类\"></a>Task任务类</h2><p>定义了一个任务类ATask，里面有两个定时任务aTask和bTask。编写java业务代码，需要在类声明上边添加<strong>@Component注解</strong>，并在需要定时任务执行的方法声明上添加<strong>@Scheduled</strong>注解以及cron表达式和相关的参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定时器的任务方法不能有返回值</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ATask</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0/10 * *  * * ? \"</span>) <span class=\"comment\">// 每10秒执行一次</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + <span class=\"string\">\"*********A任务每10秒执行一次进入测试\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Scheduled</span>(cron = <span class=\"string\">\"0/5 * *  * * ? \"</span>) <span class=\"comment\">// 每5秒执行一次</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\tSystem.out.println(sdf.format(DateTime.now().toDate()) + <span class=\"string\">\"*********B任务每5秒执行一次进入测试\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p>启动项目会发现定时任务已经开启。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/taskCode.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"Spring-Quartz\"><a href=\"#Spring-Quartz\" class=\"headerlink\" title=\"Spring-Quartz\"></a>Spring-Quartz</h1><p>@scheduled固然可以实现定时任务，但是仔细想想并不灵活，任务随着应用的启动而执行，并不能动态的进行管理，很是不方便，然而Quartz很好的解决了这一问题。</p>\n<h2 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.quartz-scheduler<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quartz<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"任务管理类QuartzManager\"><a href=\"#任务管理类QuartzManager\" class=\"headerlink\" title=\"任务管理类QuartzManager\"></a>任务管理类QuartzManager</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuartzManager</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SchedulerFactory schedulerFactory = <span class=\"keyword\">new</span> StdSchedulerFactory();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 添加一个定时任务</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobName</div><div class=\"line\">\t *            任务名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobGroupName</div><div class=\"line\">\t *            任务组名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerName</div><div class=\"line\">\t *            触发器名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerGroupName</div><div class=\"line\">\t *            触发器组名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobClass</div><div class=\"line\">\t *            任务</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> cron</div><div class=\"line\">\t *            时间设置，参考quartz说明文档</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"rawtypes\"</span> &#125;)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">addJob</span><span class=\"params\">(String jobName, String jobGroupName, String triggerName, String triggerGroupName,</div><div class=\"line\">\t\t\tClass jobClass, String cron)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 任务名，任务组，任务执行类</span></div><div class=\"line\">\t\t\tJobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroupName).build();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 触发器</span></div><div class=\"line\">\t\t\tTriggerBuilder&lt;Trigger&gt; triggerBuilder = TriggerBuilder.newTrigger();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 触发器名,触发器组</span></div><div class=\"line\">\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);</div><div class=\"line\">\t\t\ttriggerBuilder.startNow();</div><div class=\"line\">\t\t\t<span class=\"comment\">// 触发器时间设定</span></div><div class=\"line\">\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));</div><div class=\"line\">\t\t\t<span class=\"comment\">// 创建Trigger对象</span></div><div class=\"line\">\t\t\tCronTrigger trigger = (CronTrigger) triggerBuilder.build();</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 调度容器设置JobDetail和Trigger</span></div><div class=\"line\">\t\t\tsched.scheduleJob(jobDetail, trigger);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">// 启动</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!sched.isShutdown()) &#123;</div><div class=\"line\">\t\t\t\tsched.start();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 修改一个任务的触发时间</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobGroupName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerName</div><div class=\"line\">\t *            触发器名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerGroupName</div><div class=\"line\">\t *            触发器组名</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> cron</div><div class=\"line\">\t *            时间设置，参考quartz说明文档</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">modifyJobTime</span><span class=\"params\">(String jobName, String jobGroupName, String triggerName, String triggerGroupName,</div><div class=\"line\">\t\t\tString cron)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);</div><div class=\"line\">\t\t\tCronTrigger trigger = (CronTrigger) sched.getTrigger(triggerKey);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (trigger == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\tString oldTime = trigger.getCronExpression();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!oldTime.equalsIgnoreCase(cron)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式一 ：调用 rescheduleJob 开始 */</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 触发器</span></div><div class=\"line\">\t\t\t\tTriggerBuilder&lt;Trigger&gt; triggerBuilder = TriggerBuilder.newTrigger();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 触发器名,触发器组</span></div><div class=\"line\">\t\t\t\ttriggerBuilder.withIdentity(triggerName, triggerGroupName);</div><div class=\"line\">\t\t\t\ttriggerBuilder.startNow();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 触发器时间设定</span></div><div class=\"line\">\t\t\t\ttriggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cron));</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 创建Trigger对象</span></div><div class=\"line\">\t\t\t\ttrigger = (CronTrigger) triggerBuilder.build();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 方式一 ：修改一个任务的触发时间</span></div><div class=\"line\">\t\t\t\tsched.rescheduleJob(triggerKey, trigger);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式一 ：调用 rescheduleJob 结束 */</span></div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式二：先删除，然后在创建一个新的Job */</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// JobDetail jobDetail =</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// sched.getJobDetail(JobKey.jobKey(jobName, jobGroupName));</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// Class&lt;? extends Job&gt; jobClass = jobDetail.getJobClass();</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// removeJob(jobName, jobGroupName, triggerName,</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// triggerGroupName);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// addJob(jobName, jobGroupName, triggerName, triggerGroupName,</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// jobClass, cron);</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/** 方式二 ：先删除，然后在创建一个新的Job */</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>: 移除一个任务</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> jobGroupName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerName</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> triggerGroupName</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">removeJob</span><span class=\"params\">(String jobName, String jobGroupName, String triggerName, String triggerGroupName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\"></div><div class=\"line\">\t\t\tTriggerKey triggerKey = TriggerKey.triggerKey(triggerName, triggerGroupName);</div><div class=\"line\"></div><div class=\"line\">\t\t\tsched.pauseTrigger(triggerKey);<span class=\"comment\">// 停止触发器</span></div><div class=\"line\">\t\t\tsched.unscheduleJob(triggerKey);<span class=\"comment\">// 移除触发器</span></div><div class=\"line\">\t\t\tsched.deleteJob(JobKey.jobKey(jobName, jobGroupName));<span class=\"comment\">// 删除任务</span></div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>:启动所有定时任务</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">startJobs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\tsched.start();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * <span class=\"doctag\">@Description</span>:关闭所有定时任务</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shutdownJobs</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tScheduler sched = schedulerFactory.getScheduler();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!sched.isShutdown()) &#123;</div><div class=\"line\">\t\t\t\tsched.shutdown();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"任务执行业务\"><a href=\"#任务执行业务\" class=\"headerlink\" title=\"任务执行业务\"></a>任务执行业务</h2><p>这里做一个简单的演示，只实现Job接口打印当前时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyJob</span> <span class=\"keyword\">implements</span> <span class=\"title\">Job</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext jobExecutionContext)</span> <span class=\"keyword\">throws</span> JobExecutionException </span>&#123;</div><div class=\"line\">\t\tDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</div><div class=\"line\">\t\tSystem.out.println(sdf.format(DateTime.now().toDate()));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"测试动态定时任务\"><a href=\"#测试动态定时任务\" class=\"headerlink\" title=\"测试动态定时任务\"></a>测试动态定时任务</h2><p>新建QuartzTest.Java 测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuartzTest</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String JOB_NAME = <span class=\"string\">\"动态任务调度\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String TRIGGER_NAME = <span class=\"string\">\"动态任务触发器\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String JOB_GROUP_NAME = <span class=\"string\">\"XLXXCC_JOB_GROUP\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String TRIGGER_GROUP_NAME = <span class=\"string\">\"XLXXCC_JOB_GROUP\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【系统启动】开始(每1秒输出一次)...\"</span>);</div><div class=\"line\">\t\t\tQuartzManager.addJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, MyJob.class,<span class=\"string\">\"0/1 * * * * ?\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【修改时间】开始(每5秒输出一次)...\"</span>);</div><div class=\"line\">\t\t\tQuartzManager.modifyJobTime(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME, <span class=\"string\">\"0/5 * * * * ?\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\tThread.sleep(<span class=\"number\">15000</span>);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【移除定时】开始...\"</span>);</div><div class=\"line\">\t\t\tQuartzManager.removeJob(JOB_NAME, JOB_GROUP_NAME, TRIGGER_NAME, TRIGGER_GROUP_NAME);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"【移除定时】成功\"</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/quartz/quartzResult.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>通过以上测试可以明显的看出两者的优劣，Quartz足够灵活强大，单Spring scheduled 在简单任务下也是一个不错的选择。</p>"},{"title":"Spring-AOP两种配置方式","date":"2017-09-09T11:44:46.000Z","_content":"\n# 引言\n\n## AOP\n\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/></div><!-- more -->\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：**核心关注点**和**横切关注点**。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如`权限认证`、`日志`、`事务`。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n## AOP核心概念\n\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（Aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（Joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（Pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（Advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（Weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（Introduction）\n\n在不修改代码的前提下，引入可以在**运行期**为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\n**Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理**。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、**默认使用Java动态代理来创建AOP代理**，这样就可以为任何接口实例创建代理了\n\n2、**当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理**，也可强制使用CGLIB\n\nAOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：**代理对象的方法=增强处理+被代理对象**的方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/>\n\n</div>\n\n# Spring配置AOP的两种方式\n\n## 注解配置AOP\n\n注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： \n\n1. 使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). \n2. 开发需要被拦截的类。 \n3. 将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 \n\n\napplicationContext的配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n  \n  \t<!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->\n     <!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->\n\t<!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能-->\n\t<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\t\n  \t<!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 -->\n\t<context:component-scan base-package=\"com.spring.aop\"/>\n  \n\t<!-- 切面 -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\" />\n\n</beans>\n```\n\n为Aspect`切面`类添加注解\n\n```java\npackage com.spring.aop.aspect;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n/**\n * 系统服务组件Aspect切面Bean\n */\n\n//声明这是一个组件\n@Component\n//声明这是一个切面Bean\n@Aspect\npublic class ServiceAspect {\n\n\tprivate final static Log log = LogFactory.getLog(ServiceAspect.class);\n\t\n\t//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点\n\t@Pointcut(\"execution(* com.spring.aop.service..*(..))\")\n\tpublic void aspect(){\t}\n\t\n\t/*\n\t * 配置前置通知,使用在方法aspect()上注册的切入点\n\t * 同时接受JoinPoint切入点对象,可以没有该参数\n\t */\n\t@Before(\"aspect()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"before \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置后置通知,使用在方法aspect()上注册的切入点\n\t@After(\"aspect()\")\n\tpublic void after(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"after \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置环绕通知,使用在方法aspect()上注册的切入点\n\t@Around(\"aspect()\")\n\tpublic void around(JoinPoint joinPoint){\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t((ProceedingJoinPoint) joinPoint).proceed();\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms!\");\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms with exception : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//配置后置返回通知,使用在方法aspect()上注册的切入点\n\t@AfterReturning(\"aspect()\")\n\tpublic void afterReturn(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterReturn \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置抛出异常后通知,使用在方法aspect()上注册的切入点\n\t@AfterThrowing(pointcut=\"aspect()\", throwing=\"ex\")\n\tpublic void afterThrow(JoinPoint joinPoint, Exception ex){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterThrow \" + joinPoint + \"\\t\" + ex.getMessage());\n\t\t}\n\t}\n\t\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n测试代码\n\n```java\npackage com.spring.aop;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.aop.service.UserService;\nimport com.spring.mvc.bean.User;\n\n/**\n * Spring AOP测试\n */\npublic class Tester {\n\n\tprivate final static Log log = LogFactory.getLog(Tester.class);\n\t\n\tpublic static void main(String[] args) {\n\t\t//启动Spring容器\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取service组件\n\t\tUserService service = (UserService) context.getBean(\"userService\");\n\t\t//以普通的方式调用UserService对象的三个方法\n\t\tUser user = service.get(1L);\n\t\tservice.save(user);\n\t\ttry {\n\t\t\tservice.delete(1L);\n\t\t} catch (Exception e) {\n\t\t\tif(log.isWarnEnabled()){\n\t\t\t\tlog.warn(\"Delete user : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n控制台输出如下：\n\n```java\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.service.UserService:19] getUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(User com.spring.aop.service.UserService.get(long))\tUse time : 42 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.service.UserService:26] saveUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(void com.spring.aop.service.UserService.save(User))\tUse time : 2 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.service.UserService:32] delete method . . .\n INFO [spring.aop.aspect.ServiceAspect:65] around execution(boolean com.spring.aop.service.UserService.delete(long))\tUse time : 5 ms with exception : spring aop ThrowAdvice演示\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(boolean com.spring.aop.service.UserService.delete(long))\n WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type for: public boolean com.spring.aop.service.UserService.delete(long) throws java.lang.Exception\n```\n\n可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。\n\n## XML配置AOP\n\nXML配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 系统服务组件的切面Bean -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\"/>\n\t<!-- AOP配置 -->\n\t<aop:config>\n\t\t<!-- 声明一个切面,并注入切面Bean,相当于@Aspect -->\n\t\t<aop:aspect id=\"simpleAspect\" ref=\"serviceAspect\">\n\t\t\t<!-- 配置一个切入点,相当于@Pointcut -->\n\t\t\t<aop:pointcut expression=\"execution(* com.spring.aop.service..*(..))\" id=\"simplePointcut\"/>\n\t\t\t<!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing -->\n\t\t\t<aop:before pointcut-ref=\"simplePointcut\" method=\"before\"/>\n\t\t\t<aop:after pointcut-ref=\"simplePointcut\" method=\"after\"/>\n\t\t\t<aop:after-returning pointcut-ref=\"simplePointcut\" method=\"afterReturn\"/>\n\t\t\t<aop:after-throwing pointcut-ref=\"simplePointcut\" method=\"afterThrow\" throwing=\"ex\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n```\n\nServiceAspect.java\n\n```java\n//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法\n@Before(\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\")\npublic void beforeReturnUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeReturnUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法\n@Before(\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\")\npublic void beforeArgUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中\n@Before(\"aspect()&&args(id)\")\npublic void beforeArgId(JoinPoint joinPoint, long id){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgId \" + joinPoint + \"\\tID:\" + id);\n\t}\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n# 总结\n\nSpringAop可以用来：\n\n1. Spring声明式事务管理配置。\n2. 在执行方法前,判断是否具有权限。\n3. 对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。\n4. 使用Spring AOP实现MySQL数据库读写分离。\n5. 信息过滤\n6. ......","source":"_posts/Spring-AOP两种配置方式.md","raw":"---\ntitle: Spring-AOP两种配置方式\ndate: 2017-09-09 19:44:46\ntags: [java,spring]\ncategories: technology\n---\n\n# 引言\n\n## AOP\n\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/></div><!-- more -->\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：**核心关注点**和**横切关注点**。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如`权限认证`、`日志`、`事务`。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n## AOP核心概念\n\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（Aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（Joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（Pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（Advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（Weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（Introduction）\n\n在不修改代码的前提下，引入可以在**运行期**为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\n**Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理**。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、**默认使用Java动态代理来创建AOP代理**，这样就可以为任何接口实例创建代理了\n\n2、**当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理**，也可强制使用CGLIB\n\nAOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：**代理对象的方法=增强处理+被代理对象**的方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/>\n\n</div>\n\n# Spring配置AOP的两种方式\n\n## 注解配置AOP\n\n注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： \n\n1. 使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). \n2. 开发需要被拦截的类。 \n3. 将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 \n\n\napplicationContext的配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n  \n  \t<!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->\n     <!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->\n\t<!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能-->\n\t<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\t\n  \t<!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 -->\n\t<context:component-scan base-package=\"com.spring.aop\"/>\n  \n\t<!-- 切面 -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\" />\n\n</beans>\n```\n\n为Aspect`切面`类添加注解\n\n```java\npackage com.spring.aop.aspect;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n/**\n * 系统服务组件Aspect切面Bean\n */\n\n//声明这是一个组件\n@Component\n//声明这是一个切面Bean\n@Aspect\npublic class ServiceAspect {\n\n\tprivate final static Log log = LogFactory.getLog(ServiceAspect.class);\n\t\n\t//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点\n\t@Pointcut(\"execution(* com.spring.aop.service..*(..))\")\n\tpublic void aspect(){\t}\n\t\n\t/*\n\t * 配置前置通知,使用在方法aspect()上注册的切入点\n\t * 同时接受JoinPoint切入点对象,可以没有该参数\n\t */\n\t@Before(\"aspect()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"before \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置后置通知,使用在方法aspect()上注册的切入点\n\t@After(\"aspect()\")\n\tpublic void after(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"after \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置环绕通知,使用在方法aspect()上注册的切入点\n\t@Around(\"aspect()\")\n\tpublic void around(JoinPoint joinPoint){\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t((ProceedingJoinPoint) joinPoint).proceed();\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms!\");\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms with exception : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//配置后置返回通知,使用在方法aspect()上注册的切入点\n\t@AfterReturning(\"aspect()\")\n\tpublic void afterReturn(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterReturn \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置抛出异常后通知,使用在方法aspect()上注册的切入点\n\t@AfterThrowing(pointcut=\"aspect()\", throwing=\"ex\")\n\tpublic void afterThrow(JoinPoint joinPoint, Exception ex){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterThrow \" + joinPoint + \"\\t\" + ex.getMessage());\n\t\t}\n\t}\n\t\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n测试代码\n\n```java\npackage com.spring.aop;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.aop.service.UserService;\nimport com.spring.mvc.bean.User;\n\n/**\n * Spring AOP测试\n */\npublic class Tester {\n\n\tprivate final static Log log = LogFactory.getLog(Tester.class);\n\t\n\tpublic static void main(String[] args) {\n\t\t//启动Spring容器\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取service组件\n\t\tUserService service = (UserService) context.getBean(\"userService\");\n\t\t//以普通的方式调用UserService对象的三个方法\n\t\tUser user = service.get(1L);\n\t\tservice.save(user);\n\t\ttry {\n\t\t\tservice.delete(1L);\n\t\t} catch (Exception e) {\n\t\t\tif(log.isWarnEnabled()){\n\t\t\t\tlog.warn(\"Delete user : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n控制台输出如下：\n\n```java\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.service.UserService:19] getUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(User com.spring.aop.service.UserService.get(long))\tUse time : 42 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.service.UserService:26] saveUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(void com.spring.aop.service.UserService.save(User))\tUse time : 2 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.service.UserService:32] delete method . . .\n INFO [spring.aop.aspect.ServiceAspect:65] around execution(boolean com.spring.aop.service.UserService.delete(long))\tUse time : 5 ms with exception : spring aop ThrowAdvice演示\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(boolean com.spring.aop.service.UserService.delete(long))\n WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type for: public boolean com.spring.aop.service.UserService.delete(long) throws java.lang.Exception\n```\n\n可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。\n\n## XML配置AOP\n\nXML配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 系统服务组件的切面Bean -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\"/>\n\t<!-- AOP配置 -->\n\t<aop:config>\n\t\t<!-- 声明一个切面,并注入切面Bean,相当于@Aspect -->\n\t\t<aop:aspect id=\"simpleAspect\" ref=\"serviceAspect\">\n\t\t\t<!-- 配置一个切入点,相当于@Pointcut -->\n\t\t\t<aop:pointcut expression=\"execution(* com.spring.aop.service..*(..))\" id=\"simplePointcut\"/>\n\t\t\t<!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing -->\n\t\t\t<aop:before pointcut-ref=\"simplePointcut\" method=\"before\"/>\n\t\t\t<aop:after pointcut-ref=\"simplePointcut\" method=\"after\"/>\n\t\t\t<aop:after-returning pointcut-ref=\"simplePointcut\" method=\"afterReturn\"/>\n\t\t\t<aop:after-throwing pointcut-ref=\"simplePointcut\" method=\"afterThrow\" throwing=\"ex\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n```\n\nServiceAspect.java\n\n```java\n//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法\n@Before(\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\")\npublic void beforeReturnUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeReturnUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法\n@Before(\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\")\npublic void beforeArgUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中\n@Before(\"aspect()&&args(id)\")\npublic void beforeArgId(JoinPoint joinPoint, long id){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgId \" + joinPoint + \"\\tID:\" + id);\n\t}\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n# 总结\n\nSpringAop可以用来：\n\n1. Spring声明式事务管理配置。\n2. 在执行方法前,判断是否具有权限。\n3. 对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。\n4. 使用Spring AOP实现MySQL数据库读写分离。\n5. 信息过滤\n6. ......","slug":"Spring-AOP两种配置方式","published":1,"updated":"2018-03-13T05:52:30.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u1q001t3gfk7dm5d529","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如<code>权限认证</code>、<code>日志</code>、<code>事务</code>。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（Aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（Joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（Pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（Advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（Weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（Introduction）</p>\n<p>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p><strong>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</strong>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、<strong>默认使用Java动态代理来创建AOP代理</strong>，这样就可以为任何接口实例创建代理了</p>\n<p>2、<strong>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</strong>，也可强制使用CGLIB</p>\n<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<strong>代理对象的方法=增强处理+被代理对象</strong>的方法。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"Spring配置AOP的两种方式\"><a href=\"#Spring配置AOP的两种方式\" class=\"headerlink\" title=\"Spring配置AOP的两种方式\"></a>Spring配置AOP的两种方式</h1><h2 id=\"注解配置AOP\"><a href=\"#注解配置AOP\" class=\"headerlink\" title=\"注解配置AOP\"></a>注解配置AOP</h2><p>注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： </p>\n<ol>\n<li>使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). </li>\n<li>开发需要被拦截的类。 </li>\n<li>将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 </li>\n</ol>\n<p>applicationContext的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;</div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  --&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib --&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.spring.aop\"</span>/&gt;</span></div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 切面 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>为Aspect<code>切面</code>类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.aspect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 系统服务组件Aspect切面Bean</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明这是一个组件</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"comment\">//声明这是一个切面Bean</span></div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceAspect</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(ServiceAspect.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span></span>&#123;\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/*</span></div><div class=\"line\">\t * 配置前置通知,使用在方法aspect()上注册的切入点</div><div class=\"line\">\t * 同时接受JoinPoint切入点对象,可以没有该参数</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"before \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"after \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置环绕通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t((ProceedingJoinPoint) joinPoint).proceed();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置返回通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterReturn \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置抛出异常后通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterThrowing</span>(pointcut=<span class=\"string\">\"aspect()\"</span>, throwing=<span class=\"string\">\"ex\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterThrow \"</span> + joinPoint + <span class=\"string\">\"\\t\"</span> + ex.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.aop.service.UserService;</div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Spring AOP测试</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tester</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(Tester.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//启动Spring容器</span></div><div class=\"line\">\t\tApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//获取service组件</span></div><div class=\"line\">\t\tUserService service = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//以普通的方式调用UserService对象的三个方法</span></div><div class=\"line\">\t\tUser user = service.get(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\tservice.save(user);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tservice.delete(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isWarnEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.warn(<span class=\"string\">\"Delete user : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:<span class=\"number\">40</span>] <span class=\"function\">before <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</span></div><div class=\"line\">INFO [spring.aop.service.UserService:19] getUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)\tUse time : 42 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:26] saveUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)\tUse time : 2 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:32] delete method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:65] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)\tUse time : 5 ms with exception : spring aop ThrowAdvice演示</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type <span class=\"keyword\">for</span>: <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.<span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span>)</span> <span class=\"keyword\">throws</span> java.lang.Exception</div></pre></td></tr></table></figure>\n<p>可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。</p>\n<h2 id=\"XML配置AOP\"><a href=\"#XML配置AOP\" class=\"headerlink\" title=\"XML配置AOP\"></a>XML配置AOP</h2><p>XML配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 系统服务组件的切面Bean --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- AOP配置 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simpleAspect\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"serviceAspect\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置一个切入点,相当于@Pointcut --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simplePointcut\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"after\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterReturn\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterThrow\"</span> <span class=\"attr\">throwing</span>=<span class=\"string\">\"ex\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ServiceAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeReturnUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeReturnUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()&amp;&amp;args(id)\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgId</span><span class=\"params\">(JoinPoint joinPoint, <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgId \"</span> + joinPoint + <span class=\"string\">\"\\tID:\"</span> + id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>SpringAop可以用来：</p>\n<ol>\n<li>Spring声明式事务管理配置。</li>\n<li>在执行方法前,判断是否具有权限。</li>\n<li>对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。</li>\n<li>使用Spring AOP实现MySQL数据库读写分离。</li>\n<li>信息过滤</li>\n<li>……</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/></div>","more":"</p>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如<code>权限认证</code>、<code>日志</code>、<code>事务</code>。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（Aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（Joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（Pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（Advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（Weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（Introduction）</p>\n<p>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p><strong>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</strong>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、<strong>默认使用Java动态代理来创建AOP代理</strong>，这样就可以为任何接口实例创建代理了</p>\n<p>2、<strong>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</strong>，也可强制使用CGLIB</p>\n<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<strong>代理对象的方法=增强处理+被代理对象</strong>的方法。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"Spring配置AOP的两种方式\"><a href=\"#Spring配置AOP的两种方式\" class=\"headerlink\" title=\"Spring配置AOP的两种方式\"></a>Spring配置AOP的两种方式</h1><h2 id=\"注解配置AOP\"><a href=\"#注解配置AOP\" class=\"headerlink\" title=\"注解配置AOP\"></a>注解配置AOP</h2><p>注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： </p>\n<ol>\n<li>使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). </li>\n<li>开发需要被拦截的类。 </li>\n<li>将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 </li>\n</ol>\n<p>applicationContext的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  --&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib --&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.spring.aop\"</span>/&gt;</span></div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 切面 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>为Aspect<code>切面</code>类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.aspect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 系统服务组件Aspect切面Bean</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明这是一个组件</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"comment\">//声明这是一个切面Bean</span></div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceAspect</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(ServiceAspect.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span></span>&#123;\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/*</div><div class=\"line\">\t * 配置前置通知,使用在方法aspect()上注册的切入点</div><div class=\"line\">\t * 同时接受JoinPoint切入点对象,可以没有该参数</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"before \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"after \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置环绕通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t((ProceedingJoinPoint) joinPoint).proceed();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置返回通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterReturn \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置抛出异常后通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterThrowing</span>(pointcut=<span class=\"string\">\"aspect()\"</span>, throwing=<span class=\"string\">\"ex\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterThrow \"</span> + joinPoint + <span class=\"string\">\"\\t\"</span> + ex.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.aop.service.UserService;</div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Spring AOP测试</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tester</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(Tester.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//启动Spring容器</span></div><div class=\"line\">\t\tApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//获取service组件</span></div><div class=\"line\">\t\tUserService service = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//以普通的方式调用UserService对象的三个方法</span></div><div class=\"line\">\t\tUser user = service.get(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\tservice.save(user);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tservice.delete(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isWarnEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.warn(<span class=\"string\">\"Delete user : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:<span class=\"number\">40</span>] <span class=\"function\">before <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:19] getUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)\tUse time : 42 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:26] saveUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)\tUse time : 2 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:32] delete method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:65] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)\tUse time : 5 ms with exception : spring aop ThrowAdvice演示</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type <span class=\"keyword\">for</span>: <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.<span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span>)</span> <span class=\"keyword\">throws</span> java.lang.Exception</span></div></pre></td></tr></table></figure>\n<p>可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。</p>\n<h2 id=\"XML配置AOP\"><a href=\"#XML配置AOP\" class=\"headerlink\" title=\"XML配置AOP\"></a>XML配置AOP</h2><p>XML配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 系统服务组件的切面Bean --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- AOP配置 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simpleAspect\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"serviceAspect\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置一个切入点,相当于@Pointcut --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simplePointcut\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"after\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterReturn\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterThrow\"</span> <span class=\"attr\">throwing</span>=<span class=\"string\">\"ex\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ServiceAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeReturnUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeReturnUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()&amp;&amp;args(id)\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgId</span><span class=\"params\">(JoinPoint joinPoint, <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgId \"</span> + joinPoint + <span class=\"string\">\"\\tID:\"</span> + id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>SpringAop可以用来：</p>\n<ol>\n<li>Spring声明式事务管理配置。</li>\n<li>在执行方法前,判断是否具有权限。</li>\n<li>对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。</li>\n<li>使用Spring AOP实现MySQL数据库读写分离。</li>\n<li>信息过滤</li>\n<li>……</li>\n</ol>"},{"title":"Spring+Mybatis之Mapper热部署","date":"2017-09-15T08:52:07.000Z","_content":"\n# 引言\n\n​\tSpring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。\n\n​\t功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且**只加载被修改的mapper文件**！这个可省事了，效率又高，简直爽到爆。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"/></div><!-- more -->\n\n# 创建MapperRefresh刷新类\n\n在src下创建一个util包，包下面创建一个类，类名为：**MapperRefresh**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"/>\n\n</div>\n\n代码为下面的一串，注意修改下**mybatis-refresh.properties** 的路径。\n\n```java\npackage com.talkweb.nets.netsTestLib.data.util;\n\nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileNotFoundException;  \nimport java.io.InputStream;  \nimport java.lang.reflect.Field;  \nimport java.util.ArrayList;  \nimport java.util.HashMap;  \nimport java.util.List;  \nimport java.util.Map;  \nimport java.util.Properties;  \nimport java.util.Set;  \n\nimport org.apache.commons.lang3.StringUtils;  \nimport org.apache.ibatis.builder.xml.XMLMapperBuilder;  \nimport org.apache.ibatis.executor.ErrorContext;  \nimport org.apache.ibatis.session.Configuration;  \nimport org.apache.log4j.Logger;  \nimport org.springframework.core.NestedIOException;  \nimport org.springframework.core.io.Resource;  \n\nimport com.google.common.collect.Sets;  \n\n/** \n * 刷新MyBatis Mapper XML 线程 \n * @author ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪\n * @version 2016-5-29 \n */  \npublic class MapperRefresh implements java.lang.Runnable {  \n\n    public static Logger log = Logger.getLogger(MapperRefresh.class);  \n\n    private static String filename = \"mybatis-refresh.properties\";  //注意修改路径\n    private static Properties prop = new Properties();  \n\n    private static boolean enabled;         // 是否启用Mapper刷新线程功能  \n    private static boolean refresh;         // 刷新启用后，是否启动了刷新线程  \n\n    private Set<String> location;         // Mapper实际资源路径  \n\n    private Resource[] mapperLocations;     // Mapper资源路径  \n    private Configuration configuration;        // MyBatis配置对象  \n\n    private Long beforeTime = 0L;           // 上一次刷新时间  \n    private static int delaySeconds;        // 延迟刷新秒数  \n    private static int sleepSeconds;        // 休眠时间  \n    private static String mappingPath;      // xml文件夹匹配字符串，需要根据需要修改  \n\n    static {  \n\n        try {  \n            prop.load(MapperRefresh.class.getResourceAsStream(filename));  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n            System.out.println(\"Load mybatis-refresh “\"+filename+\"” file error.\");  \n        }  \n\n        enabled = \"true\".equalsIgnoreCase(getPropString(\"enabled\"));  \n\n        delaySeconds = getPropInt(\"delaySeconds\");  \n        sleepSeconds = getPropInt(\"sleepSeconds\");  \n        mappingPath = getPropString(\"mappingPath\");  \n\n        delaySeconds = delaySeconds == 0 ? 50 : delaySeconds;  \n        sleepSeconds = sleepSeconds == 0 ? 3 : sleepSeconds;  \n        mappingPath = StringUtils.isBlank(mappingPath) ? \"mappings\" : mappingPath;  \n\n        log.debug(\"[enabled] \" + enabled);  \n        log.debug(\"[delaySeconds] \" + delaySeconds);  \n        log.debug(\"[sleepSeconds] \" + sleepSeconds);  \n        log.debug(\"[mappingPath] \" + mappingPath);  \n    }  \n\n    public static boolean isRefresh() {  \n        return refresh;  \n    }  \n\n    public MapperRefresh(Resource[] mapperLocations, Configuration configuration) {  \n        this.mapperLocations = mapperLocations;  \n        this.configuration = configuration;  \n    }  \n\n    @Override  \n    public void run() {  \n\n        beforeTime = System.currentTimeMillis();  \n\n        log.debug(\"[location] \" + location);  \n        log.debug(\"[configuration] \" + configuration);  \n\n        if (enabled) {  \n            // 启动刷新线程  \n            final MapperRefresh runnable = this;  \n            new Thread(new java.lang.Runnable() {  \n                @Override  \n                public void run() {  \n\n                    if (location == null){  \n                        location = Sets.newHashSet();  \n                        log.debug(\"MapperLocation's length:\" + mapperLocations.length);  \n                        for (Resource mapperLocation : mapperLocations) {  \n                            String s = mapperLocation.toString().replaceAll(\"\\\\\\\\\", \"/\");  \n                            s = s.substring(\"file [\".length(), s.lastIndexOf(mappingPath) + mappingPath.length());  \n                            if (!location.contains(s)) {  \n                                location.add(s);  \n                                log.debug(\"Location:\" + s);  \n                            }  \n                        }  \n                        log.debug(\"Locarion's size:\" + location.size());  \n                    }  \n\n                    try {  \n                        Thread.sleep(delaySeconds * 1000);  \n                    } catch (InterruptedException e2) {  \n                        e2.printStackTrace();  \n                    }  \n                    refresh = true;  \n\n                    System.out.println(\"========= Enabled refresh mybatis mapper =========\");  \n\n                    while (true) {  \n                        try {  \n                            for (String s : location) {  \n                                runnable.refresh(s, beforeTime);  \n                            }  \n                        } catch (Exception e1) {  \n                            e1.printStackTrace();  \n                        }  \n                        try {  \n                            Thread.sleep(sleepSeconds * 1000);  \n                        } catch (InterruptedException e) {  \n                            e.printStackTrace();  \n                        }  \n\n                    }  \n                }  \n            }, \"MyBatis-Mapper-Refresh\").start();  \n        }  \n    }  \n\n    /** \n     * 执行刷新 \n     * @param filePath 刷新目录 \n     * @param beforeTime 上次刷新时间 \n     * @throws NestedIOException 解析异常 \n     * @throws FileNotFoundException 文件未找到 \n     * @author ThinkGem \n     */  \n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })  \n    private void refresh(String filePath, Long beforeTime) throws Exception {  \n\n        // 本次刷新时间  \n        Long refrehTime = System.currentTimeMillis();  \n\n        // 获取需要刷新的Mapper文件列表  \n        List<File> fileList = this.getRefreshFile(new File(filePath), beforeTime);  \n        if (fileList.size() > 0) {  \n            log.debug(\"Refresh file: \" + fileList.size());  \n        }  \n        for (int i = 0; i < fileList.size(); i++) {  \n            InputStream inputStream = new FileInputStream(fileList.get(i));  \n            String resource = fileList.get(i).getAbsolutePath();  \n            try {  \n\n                // 清理原有资源，更新为自己的StrictMap方便，增量重新加载  \n                String[] mapFieldNames = new String[]{  \n                    \"mappedStatements\", \"caches\",  \n                    \"resultMaps\", \"parameterMaps\",  \n                    \"keyGenerators\", \"sqlFragments\"  \n                };  \n                for (String fieldName : mapFieldNames){  \n                    Field field = configuration.getClass().getDeclaredField(fieldName);  \n                    field.setAccessible(true);  \n                    Map map = ((Map)field.get(configuration));  \n                    if (!(map instanceof StrictMap)){  \n                        Map newMap = new StrictMap(StringUtils.capitalize(fieldName) + \"collection\");  \n                        for (Object key : map.keySet()){  \n                            try {  \n                                newMap.put(key, map.get(key));  \n                            }catch(IllegalArgumentException ex){  \n                                newMap.put(key, ex.getMessage());  \n                            }  \n                        }  \n                        field.set(configuration, newMap);  \n                    }  \n                }  \n\n                // 清理已加载的资源标识，方便让它重新加载。  \n                Field loadedResourcesField = configuration.getClass().getDeclaredField(\"loadedResources\");  \n                loadedResourcesField.setAccessible(true);  \n                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  \n                loadedResourcesSet.remove(resource);  \n\n                //重新编译加载资源文件。  \n                XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(inputStream, configuration,   \n                        resource, configuration.getSqlFragments());  \n                xmlMapperBuilder.parse();  \n            } catch (Exception e) {  \n                throw new NestedIOException(\"Failed to parse mapping resource: '\" + resource + \"'\", e);  \n            } finally {  \n                ErrorContext.instance().reset();  \n            }  \n            System.out.println(\"Refresh file: \" + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  \n            if (log.isDebugEnabled()) {  \n                log.debug(\"Refresh file: \" + fileList.get(i).getAbsolutePath());  \n                log.debug(\"Refresh filename: \" + fileList.get(i).getName());  \n            }  \n        }  \n        // 如果刷新了文件，则修改刷新时间，否则不修改  \n        if (fileList.size() > 0) {  \n            this.beforeTime = refrehTime;  \n        }  \n    }  \n\n    /** \n     * 获取需要刷新的文件列表 \n     * @param dir 目录 \n     * @param beforeTime 上次刷新时间 \n     * @return 刷新文件列表 \n     */  \n    private List<File> getRefreshFile(File dir, Long beforeTime) {  \n        List<File> fileList = new ArrayList<File>();  \n\n        File[] files = dir.listFiles();  \n        if (files != null) {  \n            for (int i = 0; i < files.length; i++) {  \n                File file = files[i];  \n                if (file.isDirectory()) {  \n                    fileList.addAll(this.getRefreshFile(file, beforeTime));  \n                } else if (file.isFile()) {  \n                    if (this.checkFile(file, beforeTime)) {  \n                        fileList.add(file);  \n                    }  \n                } else {  \n                    System.out.println(\"Error file.\" + file.getName());  \n                }  \n            }  \n        }  \n        return fileList;  \n    }  \n\n    /** \n     * 判断文件是否需要刷新 \n     * @param file 文件 \n     * @param beforeTime 上次刷新时间 \n     * @return 需要刷新返回true，否则返回false \n     */  \n    private boolean checkFile(File file, Long beforeTime) {  \n        if (file.lastModified() > beforeTime) {  \n            return true;  \n        }  \n        return false;  \n    }  \n\n    /** \n     * 获取整数属性 \n     * @param key \n     * @return \n     */  \n    private static int getPropInt(String key) {  \n        int i = 0;  \n        try {  \n            i = Integer.parseInt(getPropString(key));  \n        } catch (Exception e) {  \n        }  \n        return i;  \n    }  \n\n    /** \n     * 获取字符串属性 \n     * @param key \n     * @return \n     */  \n    private static String getPropString(String key) {  \n        return prop == null ? null : prop.getProperty(key);  \n    }  \n\n    /** \n     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 \n     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 \n     */  \n    public static class StrictMap<V> extends HashMap<String, V> {  \n\n        private static final long serialVersionUID = -4950446264854982944L;  \n        private String name;  \n\n        public StrictMap(String name, int initialCapacity, float loadFactor) {  \n            super(initialCapacity, loadFactor);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, int initialCapacity) {  \n            super(initialCapacity);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name) {  \n            super();  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, Map<String, ? extends V> m) {  \n            super(m);  \n            this.name = name;  \n        }  \n\n        @SuppressWarnings(\"unchecked\")  \n        public V put(String key, V value) {  \n            // ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  \n            if (MapperRefresh.isRefresh()) {  \n                remove(key);  \n                MapperRefresh.log.debug(\"refresh key:\" + key.substring(key.lastIndexOf(\".\") + 1));  \n            }  \n            // ThinkGem end  \n            if (containsKey(key)) {  \n                throw new IllegalArgumentException(name + \" already contains value for \" + key);  \n            }  \n            if (key.contains(\".\")) {  \n                final String shortKey = getShortName(key);  \n                if (super.get(shortKey) == null) {  \n                    super.put(shortKey, value);  \n                } else {  \n                    super.put(shortKey, (V) new Ambiguity(shortKey));  \n                }  \n            }  \n            return super.put(key, value);  \n        }  \n\n        public V get(Object key) {  \n            V value = super.get(key);  \n            if (value == null) {  \n                throw new IllegalArgumentException(name + \" does not contain value for \" + key);  \n            }  \n            if (value instanceof Ambiguity) {  \n                throw new IllegalArgumentException(((Ambiguity) value).getSubject() + \" is ambiguous in \" + name  \n                        + \" (try using the full name including the namespace, or rename one of the entries)\");  \n            }  \n            return value;  \n        }  \n\n        private String getShortName(String key) {  \n            final String[] keyparts = key.split(\"\\\\.\");  \n            return keyparts[keyparts.length - 1];  \n        }  \n\n        protected static class Ambiguity {  \n            private String subject;  \n\n            public Ambiguity(String subject) {  \n                this.subject = subject;  \n            }  \n\n            public String getSubject() {  \n                return subject;  \n            }  \n        }  \n    }  \n}\n```\n\n# 重写SqlSessionFactoryBean\n\nMyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：\n\n1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n3、加入启动MapperRefresh.java线程服务。\n\n思路就是用我们**自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class**。\n\n1. 在当前项目下新建一个包：右键 *src > new Package >* *org.mybatis.spring*，创建SqlSessionFactoryBean.java类。\n\n   <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"/>\n\n   </div>\n\n2. 复制下面一串代码到SqlSessionFactoryBean.java，注意导入`MapperRefresh`正确的包。\n\n   ```java\n   package org.mybatis.spring;\n\n   import java.io.IOException;\n   import java.sql.SQLException;\n   import java.util.Properties;\n\n   import javax.sql.DataSource;\n\n   import org.apache.ibatis.builder.xml.XMLConfigBuilder;\n   import org.apache.ibatis.builder.xml.XMLMapperBuilder;\n   import org.apache.ibatis.executor.ErrorContext;\n   import org.apache.ibatis.logging.Log;\n   import org.apache.ibatis.logging.LogFactory;\n   import org.apache.ibatis.mapping.DatabaseIdProvider;\n   import org.apache.ibatis.mapping.Environment;\n   import org.apache.ibatis.plugin.Interceptor;\n   import org.apache.ibatis.reflection.factory.ObjectFactory;\n   import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\n   import org.apache.ibatis.session.Configuration;\n   import org.apache.ibatis.session.SqlSessionFactory;\n   import org.apache.ibatis.session.SqlSessionFactoryBuilder;\n   import org.apache.ibatis.transaction.TransactionFactory;\n   import org.apache.ibatis.type.TypeAliasRegistry;\n   import org.apache.ibatis.type.TypeHandler;\n   import org.apache.ibatis.type.TypeHandlerRegistry;\n   import org.mybatis.spring.transaction.SpringManagedTransactionFactory;\n   import org.springframework.beans.factory.FactoryBean;\n   import org.springframework.beans.factory.InitializingBean;\n   import org.springframework.context.ApplicationEvent;\n   import org.springframework.context.ApplicationListener;\n   import org.springframework.context.event.ContextRefreshedEvent;\n   import org.springframework.core.NestedIOException;\n   import org.springframework.core.io.Resource;\n   import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\n   import org.springframework.util.Assert;\n   import org.springframework.util.ObjectUtils;\n   import org.springframework.util.StringUtils;\n\n   import com.talkweb.nets.netsTestLib.data.util.MapperRefresh;\n\n   public class SqlSessionFactoryBean\n           implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n       private static final Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);\n       private Resource configLocation;\n       private Resource[] mapperLocations;\n       private DataSource dataSource;\n       private TransactionFactory transactionFactory;\n       private Properties configurationProperties;\n       private SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n       private SqlSessionFactory sqlSessionFactory;\n       private String environment = SqlSessionFactoryBean.class.getSimpleName();\n       private boolean failFast;\n       private Interceptor[] plugins;\n       private TypeHandler<?>[] typeHandlers;\n       private String typeHandlersPackage;\n       private Class<?>[] typeAliases;\n       private String typeAliasesPackage;\n       private Class<?> typeAliasesSuperType;\n       private DatabaseIdProvider databaseIdProvider;\n       private ObjectFactory objectFactory;\n       private ObjectWrapperFactory objectWrapperFactory;\n\n       public void setObjectFactory(ObjectFactory objectFactory) {\n           this.objectFactory = objectFactory;\n       }\n\n       public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n           this.objectWrapperFactory = objectWrapperFactory;\n       }\n\n       public DatabaseIdProvider getDatabaseIdProvider() {\n           return this.databaseIdProvider;\n       }\n\n       public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {\n           this.databaseIdProvider = databaseIdProvider;\n       }\n\n       public void setPlugins(Interceptor[] plugins) {\n           this.plugins = plugins;\n       }\n\n       public void setTypeAliasesPackage(String typeAliasesPackage) {\n           this.typeAliasesPackage = typeAliasesPackage;\n       }\n\n       public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {\n           this.typeAliasesSuperType = typeAliasesSuperType;\n       }\n\n       public void setTypeHandlersPackage(String typeHandlersPackage) {\n           this.typeHandlersPackage = typeHandlersPackage;\n       }\n\n       public void setTypeHandlers(TypeHandler<?>[] typeHandlers) {\n           this.typeHandlers = typeHandlers;\n       }\n\n       public void setTypeAliases(Class<?>[] typeAliases) {\n           this.typeAliases = typeAliases;\n       }\n\n       public void setFailFast(boolean failFast) {\n           this.failFast = failFast;\n       }\n\n       public void setConfigLocation(Resource configLocation) {\n           this.configLocation = configLocation;\n       }\n\n       public void setMapperLocations(Resource[] mapperLocations) {\n           this.mapperLocations = mapperLocations;\n       }\n\n       public void setConfigurationProperties(Properties sqlSessionFactoryProperties) {\n           this.configurationProperties = sqlSessionFactoryProperties;\n       }\n\n       public void setDataSource(DataSource dataSource) {\n           if ((dataSource instanceof TransactionAwareDataSourceProxy)) {\n               this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();\n           } else\n               this.dataSource = dataSource;\n       }\n\n       public void setSqlSessionFactoryBuilder(SqlSessionFactoryBuilder sqlSessionFactoryBuilder) {\n           this.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;\n       }\n\n       public void setTransactionFactory(TransactionFactory transactionFactory) {\n           this.transactionFactory = transactionFactory;\n       }\n\n       public void setEnvironment(String environment) {\n           this.environment = environment;\n       }\n\n       public void afterPropertiesSet() throws Exception {\n           Assert.notNull(this.dataSource, \"Property 'dataSource' is required\");\n           Assert.notNull(this.sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n\n           this.sqlSessionFactory = buildSqlSessionFactory();\n       }\n\n       protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n           XMLConfigBuilder xmlConfigBuilder = null;\n           Configuration configuration;\n           if (this.configLocation != null) {\n               xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null,\n                       this.configurationProperties);\n               configuration = xmlConfigBuilder.getConfiguration();\n           } else {\n               if (logger.isDebugEnabled()) {\n                   logger.debug(\"Property 'configLocation' not specified, using default MyBatis Configuration\");\n               }\n               configuration = new Configuration();\n               configuration.setVariables(this.configurationProperties);\n           }\n\n           if (this.objectFactory != null) {\n               configuration.setObjectFactory(this.objectFactory);\n           }\n\n           if (this.objectWrapperFactory != null) {\n               configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n           }\n\n           if (StringUtils.hasLength(this.typeAliasesPackage)) {\n               String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(this.typeAliasesPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeAliasPackageArray) {\n\n                   // 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                   try {\n                       configuration.getTypeAliasRegistry().registerAliases(packageToScan,\n                               typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n                   } catch (Exception ex) {\n                       logger.error(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                       throw new NestedIOException(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n                   // 修改处：ThinkGem end\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeAliases)) {\n               for (Class typeAlias : this.typeAliases) {\n                   configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.plugins)) {\n               for (Interceptor plugin : this.plugins) {\n                   configuration.addInterceptor(plugin);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered plugin: '\" + plugin + \"'\");\n                   }\n               }\n           }\n\n           if (StringUtils.hasLength(this.typeHandlersPackage)) {\n               String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(this.typeHandlersPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeHandlersPackageArray) {\n                   configuration.getTypeHandlerRegistry().register(packageToScan);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeHandlers)) {\n               for (TypeHandler typeHandler : this.typeHandlers) {\n                   configuration.getTypeHandlerRegistry().register(typeHandler);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n                   }\n               }\n           }\n\n           if (xmlConfigBuilder != null) {\n               try {\n                   xmlConfigBuilder.parse();\n\n                   if (logger.isDebugEnabled())\n                       logger.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n               } catch (Exception ex) {\n                   throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n               } finally {\n                   ErrorContext.instance().reset();\n               }\n           }\n\n           if (this.transactionFactory == null) {\n               this.transactionFactory = new SpringManagedTransactionFactory();\n           }\n\n           Environment environment = new Environment(this.environment, this.transactionFactory, this.dataSource);\n           configuration.setEnvironment(environment);\n\n           if (this.databaseIdProvider != null) {\n               try {\n                   configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n               } catch (SQLException e) {\n                   throw new NestedIOException(\"Failed getting a databaseId\", e);\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.mapperLocations)) {\n               for (Resource mapperLocation : this.mapperLocations) {\n                   if (mapperLocation == null) {\n                       continue;\n                   }\n                   try {\n                       XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n                               configuration, mapperLocation.toString(), configuration.getSqlFragments());\n\n                       xmlMapperBuilder.parse();\n                   } catch (Exception e) {\n\n                       // 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                       logger.error(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n\n                       throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n                   }\n               }\n\n               // 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。\n               new MapperRefresh(this.mapperLocations, configuration).run();\n\n           } else if (logger.isDebugEnabled()) {\n               logger.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n           }\n\n           return this.sqlSessionFactoryBuilder.build(configuration);\n       }\n\n       public SqlSessionFactory getObject() throws Exception {\n           if (this.sqlSessionFactory == null) {\n               afterPropertiesSet();\n           }\n\n           return this.sqlSessionFactory;\n       }\n\n       public Class<? extends SqlSessionFactory> getObjectType() {\n           return this.sqlSessionFactory == null ? SqlSessionFactory.class : this.sqlSessionFactory.getClass();\n       }\n\n       public boolean isSingleton() {\n           return true;\n       }\n\n       public void onApplicationEvent(ApplicationEvent event) {\n           if ((this.failFast) && ((event instanceof ContextRefreshedEvent))) {\n               this.sqlSessionFactory.getConfiguration().getMappedStatementNames();\n           }\n       }\n   }\n   ```\n\n   3. 接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。**重新部署当前项目** Servers > Tomcat 8.x > 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。\n\n   4. 去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"/>\n\n      </div>\n\n   5. 这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用[*jd-gui.exe(一款JAVA反编译工具)*](http://pan.baidu.com/s/1skKW2st)比较是不是和上面写的代码对应！！！！\n\n      **检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      ​\n\n      # 创建mybatis-refresh.properties文件\n\n      一切准备就绪，还剩下最后一个属性文件， 创建**mybatis-refresh.properties**文件，记得把文件格式改成**UTF-8**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      **mybatis-refresh.properties文件内容为：**\n\n      ```javascript\n      #是否开启刷新线程\n      enabled=true\n      #延迟启动刷新程序的秒数\n      delaySeconds=60  \n      #刷新扫描间隔的时长秒数\n      sleepSeconds=3\n      #扫描Mapper文件的资源路径\n      mappingPath=mapper\n      ```\n\n      # 测试\n\n      1. 删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。\n\n      2. 启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！**这样就不用重启项目，也能加载到你修改的mapper.xml文件了** 。\n\n         <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"/>\n\n         </div>\n\n      # 注意\n\n      1. 注意各个文件的位置和名称。\n      2. 注意**MapperRefresh.java**文件中**mybatis-refresh.properties**的路径。\n      3. 注意用jd-gui.exe**检查编译后的SqlSessionFactoryBean.class文件**。","source":"_posts/Spring-Mybatis之Mapper热部署.md","raw":"---\ntitle: Spring+Mybatis之Mapper热部署\ndate: 2017-09-15 16:52:07\ntags: [java,tips,mybatis]\ncategories: technology\n---\n\n# 引言\n\n​\tSpring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。\n\n​\t功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且**只加载被修改的mapper文件**！这个可省事了，效率又高，简直爽到爆。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"/></div><!-- more -->\n\n# 创建MapperRefresh刷新类\n\n在src下创建一个util包，包下面创建一个类，类名为：**MapperRefresh**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"/>\n\n</div>\n\n代码为下面的一串，注意修改下**mybatis-refresh.properties** 的路径。\n\n```java\npackage com.talkweb.nets.netsTestLib.data.util;\n\nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileNotFoundException;  \nimport java.io.InputStream;  \nimport java.lang.reflect.Field;  \nimport java.util.ArrayList;  \nimport java.util.HashMap;  \nimport java.util.List;  \nimport java.util.Map;  \nimport java.util.Properties;  \nimport java.util.Set;  \n\nimport org.apache.commons.lang3.StringUtils;  \nimport org.apache.ibatis.builder.xml.XMLMapperBuilder;  \nimport org.apache.ibatis.executor.ErrorContext;  \nimport org.apache.ibatis.session.Configuration;  \nimport org.apache.log4j.Logger;  \nimport org.springframework.core.NestedIOException;  \nimport org.springframework.core.io.Resource;  \n\nimport com.google.common.collect.Sets;  \n\n/** \n * 刷新MyBatis Mapper XML 线程 \n * @author ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪\n * @version 2016-5-29 \n */  \npublic class MapperRefresh implements java.lang.Runnable {  \n\n    public static Logger log = Logger.getLogger(MapperRefresh.class);  \n\n    private static String filename = \"mybatis-refresh.properties\";  //注意修改路径\n    private static Properties prop = new Properties();  \n\n    private static boolean enabled;         // 是否启用Mapper刷新线程功能  \n    private static boolean refresh;         // 刷新启用后，是否启动了刷新线程  \n\n    private Set<String> location;         // Mapper实际资源路径  \n\n    private Resource[] mapperLocations;     // Mapper资源路径  \n    private Configuration configuration;        // MyBatis配置对象  \n\n    private Long beforeTime = 0L;           // 上一次刷新时间  \n    private static int delaySeconds;        // 延迟刷新秒数  \n    private static int sleepSeconds;        // 休眠时间  \n    private static String mappingPath;      // xml文件夹匹配字符串，需要根据需要修改  \n\n    static {  \n\n        try {  \n            prop.load(MapperRefresh.class.getResourceAsStream(filename));  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n            System.out.println(\"Load mybatis-refresh “\"+filename+\"” file error.\");  \n        }  \n\n        enabled = \"true\".equalsIgnoreCase(getPropString(\"enabled\"));  \n\n        delaySeconds = getPropInt(\"delaySeconds\");  \n        sleepSeconds = getPropInt(\"sleepSeconds\");  \n        mappingPath = getPropString(\"mappingPath\");  \n\n        delaySeconds = delaySeconds == 0 ? 50 : delaySeconds;  \n        sleepSeconds = sleepSeconds == 0 ? 3 : sleepSeconds;  \n        mappingPath = StringUtils.isBlank(mappingPath) ? \"mappings\" : mappingPath;  \n\n        log.debug(\"[enabled] \" + enabled);  \n        log.debug(\"[delaySeconds] \" + delaySeconds);  \n        log.debug(\"[sleepSeconds] \" + sleepSeconds);  \n        log.debug(\"[mappingPath] \" + mappingPath);  \n    }  \n\n    public static boolean isRefresh() {  \n        return refresh;  \n    }  \n\n    public MapperRefresh(Resource[] mapperLocations, Configuration configuration) {  \n        this.mapperLocations = mapperLocations;  \n        this.configuration = configuration;  \n    }  \n\n    @Override  \n    public void run() {  \n\n        beforeTime = System.currentTimeMillis();  \n\n        log.debug(\"[location] \" + location);  \n        log.debug(\"[configuration] \" + configuration);  \n\n        if (enabled) {  \n            // 启动刷新线程  \n            final MapperRefresh runnable = this;  \n            new Thread(new java.lang.Runnable() {  \n                @Override  \n                public void run() {  \n\n                    if (location == null){  \n                        location = Sets.newHashSet();  \n                        log.debug(\"MapperLocation's length:\" + mapperLocations.length);  \n                        for (Resource mapperLocation : mapperLocations) {  \n                            String s = mapperLocation.toString().replaceAll(\"\\\\\\\\\", \"/\");  \n                            s = s.substring(\"file [\".length(), s.lastIndexOf(mappingPath) + mappingPath.length());  \n                            if (!location.contains(s)) {  \n                                location.add(s);  \n                                log.debug(\"Location:\" + s);  \n                            }  \n                        }  \n                        log.debug(\"Locarion's size:\" + location.size());  \n                    }  \n\n                    try {  \n                        Thread.sleep(delaySeconds * 1000);  \n                    } catch (InterruptedException e2) {  \n                        e2.printStackTrace();  \n                    }  \n                    refresh = true;  \n\n                    System.out.println(\"========= Enabled refresh mybatis mapper =========\");  \n\n                    while (true) {  \n                        try {  \n                            for (String s : location) {  \n                                runnable.refresh(s, beforeTime);  \n                            }  \n                        } catch (Exception e1) {  \n                            e1.printStackTrace();  \n                        }  \n                        try {  \n                            Thread.sleep(sleepSeconds * 1000);  \n                        } catch (InterruptedException e) {  \n                            e.printStackTrace();  \n                        }  \n\n                    }  \n                }  \n            }, \"MyBatis-Mapper-Refresh\").start();  \n        }  \n    }  \n\n    /** \n     * 执行刷新 \n     * @param filePath 刷新目录 \n     * @param beforeTime 上次刷新时间 \n     * @throws NestedIOException 解析异常 \n     * @throws FileNotFoundException 文件未找到 \n     * @author ThinkGem \n     */  \n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })  \n    private void refresh(String filePath, Long beforeTime) throws Exception {  \n\n        // 本次刷新时间  \n        Long refrehTime = System.currentTimeMillis();  \n\n        // 获取需要刷新的Mapper文件列表  \n        List<File> fileList = this.getRefreshFile(new File(filePath), beforeTime);  \n        if (fileList.size() > 0) {  \n            log.debug(\"Refresh file: \" + fileList.size());  \n        }  \n        for (int i = 0; i < fileList.size(); i++) {  \n            InputStream inputStream = new FileInputStream(fileList.get(i));  \n            String resource = fileList.get(i).getAbsolutePath();  \n            try {  \n\n                // 清理原有资源，更新为自己的StrictMap方便，增量重新加载  \n                String[] mapFieldNames = new String[]{  \n                    \"mappedStatements\", \"caches\",  \n                    \"resultMaps\", \"parameterMaps\",  \n                    \"keyGenerators\", \"sqlFragments\"  \n                };  \n                for (String fieldName : mapFieldNames){  \n                    Field field = configuration.getClass().getDeclaredField(fieldName);  \n                    field.setAccessible(true);  \n                    Map map = ((Map)field.get(configuration));  \n                    if (!(map instanceof StrictMap)){  \n                        Map newMap = new StrictMap(StringUtils.capitalize(fieldName) + \"collection\");  \n                        for (Object key : map.keySet()){  \n                            try {  \n                                newMap.put(key, map.get(key));  \n                            }catch(IllegalArgumentException ex){  \n                                newMap.put(key, ex.getMessage());  \n                            }  \n                        }  \n                        field.set(configuration, newMap);  \n                    }  \n                }  \n\n                // 清理已加载的资源标识，方便让它重新加载。  \n                Field loadedResourcesField = configuration.getClass().getDeclaredField(\"loadedResources\");  \n                loadedResourcesField.setAccessible(true);  \n                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  \n                loadedResourcesSet.remove(resource);  \n\n                //重新编译加载资源文件。  \n                XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(inputStream, configuration,   \n                        resource, configuration.getSqlFragments());  \n                xmlMapperBuilder.parse();  \n            } catch (Exception e) {  \n                throw new NestedIOException(\"Failed to parse mapping resource: '\" + resource + \"'\", e);  \n            } finally {  \n                ErrorContext.instance().reset();  \n            }  \n            System.out.println(\"Refresh file: \" + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  \n            if (log.isDebugEnabled()) {  \n                log.debug(\"Refresh file: \" + fileList.get(i).getAbsolutePath());  \n                log.debug(\"Refresh filename: \" + fileList.get(i).getName());  \n            }  \n        }  \n        // 如果刷新了文件，则修改刷新时间，否则不修改  \n        if (fileList.size() > 0) {  \n            this.beforeTime = refrehTime;  \n        }  \n    }  \n\n    /** \n     * 获取需要刷新的文件列表 \n     * @param dir 目录 \n     * @param beforeTime 上次刷新时间 \n     * @return 刷新文件列表 \n     */  \n    private List<File> getRefreshFile(File dir, Long beforeTime) {  \n        List<File> fileList = new ArrayList<File>();  \n\n        File[] files = dir.listFiles();  \n        if (files != null) {  \n            for (int i = 0; i < files.length; i++) {  \n                File file = files[i];  \n                if (file.isDirectory()) {  \n                    fileList.addAll(this.getRefreshFile(file, beforeTime));  \n                } else if (file.isFile()) {  \n                    if (this.checkFile(file, beforeTime)) {  \n                        fileList.add(file);  \n                    }  \n                } else {  \n                    System.out.println(\"Error file.\" + file.getName());  \n                }  \n            }  \n        }  \n        return fileList;  \n    }  \n\n    /** \n     * 判断文件是否需要刷新 \n     * @param file 文件 \n     * @param beforeTime 上次刷新时间 \n     * @return 需要刷新返回true，否则返回false \n     */  \n    private boolean checkFile(File file, Long beforeTime) {  \n        if (file.lastModified() > beforeTime) {  \n            return true;  \n        }  \n        return false;  \n    }  \n\n    /** \n     * 获取整数属性 \n     * @param key \n     * @return \n     */  \n    private static int getPropInt(String key) {  \n        int i = 0;  \n        try {  \n            i = Integer.parseInt(getPropString(key));  \n        } catch (Exception e) {  \n        }  \n        return i;  \n    }  \n\n    /** \n     * 获取字符串属性 \n     * @param key \n     * @return \n     */  \n    private static String getPropString(String key) {  \n        return prop == null ? null : prop.getProperty(key);  \n    }  \n\n    /** \n     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 \n     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 \n     */  \n    public static class StrictMap<V> extends HashMap<String, V> {  \n\n        private static final long serialVersionUID = -4950446264854982944L;  \n        private String name;  \n\n        public StrictMap(String name, int initialCapacity, float loadFactor) {  \n            super(initialCapacity, loadFactor);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, int initialCapacity) {  \n            super(initialCapacity);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name) {  \n            super();  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, Map<String, ? extends V> m) {  \n            super(m);  \n            this.name = name;  \n        }  \n\n        @SuppressWarnings(\"unchecked\")  \n        public V put(String key, V value) {  \n            // ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  \n            if (MapperRefresh.isRefresh()) {  \n                remove(key);  \n                MapperRefresh.log.debug(\"refresh key:\" + key.substring(key.lastIndexOf(\".\") + 1));  \n            }  \n            // ThinkGem end  \n            if (containsKey(key)) {  \n                throw new IllegalArgumentException(name + \" already contains value for \" + key);  \n            }  \n            if (key.contains(\".\")) {  \n                final String shortKey = getShortName(key);  \n                if (super.get(shortKey) == null) {  \n                    super.put(shortKey, value);  \n                } else {  \n                    super.put(shortKey, (V) new Ambiguity(shortKey));  \n                }  \n            }  \n            return super.put(key, value);  \n        }  \n\n        public V get(Object key) {  \n            V value = super.get(key);  \n            if (value == null) {  \n                throw new IllegalArgumentException(name + \" does not contain value for \" + key);  \n            }  \n            if (value instanceof Ambiguity) {  \n                throw new IllegalArgumentException(((Ambiguity) value).getSubject() + \" is ambiguous in \" + name  \n                        + \" (try using the full name including the namespace, or rename one of the entries)\");  \n            }  \n            return value;  \n        }  \n\n        private String getShortName(String key) {  \n            final String[] keyparts = key.split(\"\\\\.\");  \n            return keyparts[keyparts.length - 1];  \n        }  \n\n        protected static class Ambiguity {  \n            private String subject;  \n\n            public Ambiguity(String subject) {  \n                this.subject = subject;  \n            }  \n\n            public String getSubject() {  \n                return subject;  \n            }  \n        }  \n    }  \n}\n```\n\n# 重写SqlSessionFactoryBean\n\nMyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：\n\n1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n3、加入启动MapperRefresh.java线程服务。\n\n思路就是用我们**自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class**。\n\n1. 在当前项目下新建一个包：右键 *src > new Package >* *org.mybatis.spring*，创建SqlSessionFactoryBean.java类。\n\n   <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"/>\n\n   </div>\n\n2. 复制下面一串代码到SqlSessionFactoryBean.java，注意导入`MapperRefresh`正确的包。\n\n   ```java\n   package org.mybatis.spring;\n\n   import java.io.IOException;\n   import java.sql.SQLException;\n   import java.util.Properties;\n\n   import javax.sql.DataSource;\n\n   import org.apache.ibatis.builder.xml.XMLConfigBuilder;\n   import org.apache.ibatis.builder.xml.XMLMapperBuilder;\n   import org.apache.ibatis.executor.ErrorContext;\n   import org.apache.ibatis.logging.Log;\n   import org.apache.ibatis.logging.LogFactory;\n   import org.apache.ibatis.mapping.DatabaseIdProvider;\n   import org.apache.ibatis.mapping.Environment;\n   import org.apache.ibatis.plugin.Interceptor;\n   import org.apache.ibatis.reflection.factory.ObjectFactory;\n   import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\n   import org.apache.ibatis.session.Configuration;\n   import org.apache.ibatis.session.SqlSessionFactory;\n   import org.apache.ibatis.session.SqlSessionFactoryBuilder;\n   import org.apache.ibatis.transaction.TransactionFactory;\n   import org.apache.ibatis.type.TypeAliasRegistry;\n   import org.apache.ibatis.type.TypeHandler;\n   import org.apache.ibatis.type.TypeHandlerRegistry;\n   import org.mybatis.spring.transaction.SpringManagedTransactionFactory;\n   import org.springframework.beans.factory.FactoryBean;\n   import org.springframework.beans.factory.InitializingBean;\n   import org.springframework.context.ApplicationEvent;\n   import org.springframework.context.ApplicationListener;\n   import org.springframework.context.event.ContextRefreshedEvent;\n   import org.springframework.core.NestedIOException;\n   import org.springframework.core.io.Resource;\n   import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\n   import org.springframework.util.Assert;\n   import org.springframework.util.ObjectUtils;\n   import org.springframework.util.StringUtils;\n\n   import com.talkweb.nets.netsTestLib.data.util.MapperRefresh;\n\n   public class SqlSessionFactoryBean\n           implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n       private static final Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);\n       private Resource configLocation;\n       private Resource[] mapperLocations;\n       private DataSource dataSource;\n       private TransactionFactory transactionFactory;\n       private Properties configurationProperties;\n       private SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n       private SqlSessionFactory sqlSessionFactory;\n       private String environment = SqlSessionFactoryBean.class.getSimpleName();\n       private boolean failFast;\n       private Interceptor[] plugins;\n       private TypeHandler<?>[] typeHandlers;\n       private String typeHandlersPackage;\n       private Class<?>[] typeAliases;\n       private String typeAliasesPackage;\n       private Class<?> typeAliasesSuperType;\n       private DatabaseIdProvider databaseIdProvider;\n       private ObjectFactory objectFactory;\n       private ObjectWrapperFactory objectWrapperFactory;\n\n       public void setObjectFactory(ObjectFactory objectFactory) {\n           this.objectFactory = objectFactory;\n       }\n\n       public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n           this.objectWrapperFactory = objectWrapperFactory;\n       }\n\n       public DatabaseIdProvider getDatabaseIdProvider() {\n           return this.databaseIdProvider;\n       }\n\n       public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {\n           this.databaseIdProvider = databaseIdProvider;\n       }\n\n       public void setPlugins(Interceptor[] plugins) {\n           this.plugins = plugins;\n       }\n\n       public void setTypeAliasesPackage(String typeAliasesPackage) {\n           this.typeAliasesPackage = typeAliasesPackage;\n       }\n\n       public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {\n           this.typeAliasesSuperType = typeAliasesSuperType;\n       }\n\n       public void setTypeHandlersPackage(String typeHandlersPackage) {\n           this.typeHandlersPackage = typeHandlersPackage;\n       }\n\n       public void setTypeHandlers(TypeHandler<?>[] typeHandlers) {\n           this.typeHandlers = typeHandlers;\n       }\n\n       public void setTypeAliases(Class<?>[] typeAliases) {\n           this.typeAliases = typeAliases;\n       }\n\n       public void setFailFast(boolean failFast) {\n           this.failFast = failFast;\n       }\n\n       public void setConfigLocation(Resource configLocation) {\n           this.configLocation = configLocation;\n       }\n\n       public void setMapperLocations(Resource[] mapperLocations) {\n           this.mapperLocations = mapperLocations;\n       }\n\n       public void setConfigurationProperties(Properties sqlSessionFactoryProperties) {\n           this.configurationProperties = sqlSessionFactoryProperties;\n       }\n\n       public void setDataSource(DataSource dataSource) {\n           if ((dataSource instanceof TransactionAwareDataSourceProxy)) {\n               this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();\n           } else\n               this.dataSource = dataSource;\n       }\n\n       public void setSqlSessionFactoryBuilder(SqlSessionFactoryBuilder sqlSessionFactoryBuilder) {\n           this.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;\n       }\n\n       public void setTransactionFactory(TransactionFactory transactionFactory) {\n           this.transactionFactory = transactionFactory;\n       }\n\n       public void setEnvironment(String environment) {\n           this.environment = environment;\n       }\n\n       public void afterPropertiesSet() throws Exception {\n           Assert.notNull(this.dataSource, \"Property 'dataSource' is required\");\n           Assert.notNull(this.sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n\n           this.sqlSessionFactory = buildSqlSessionFactory();\n       }\n\n       protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n           XMLConfigBuilder xmlConfigBuilder = null;\n           Configuration configuration;\n           if (this.configLocation != null) {\n               xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null,\n                       this.configurationProperties);\n               configuration = xmlConfigBuilder.getConfiguration();\n           } else {\n               if (logger.isDebugEnabled()) {\n                   logger.debug(\"Property 'configLocation' not specified, using default MyBatis Configuration\");\n               }\n               configuration = new Configuration();\n               configuration.setVariables(this.configurationProperties);\n           }\n\n           if (this.objectFactory != null) {\n               configuration.setObjectFactory(this.objectFactory);\n           }\n\n           if (this.objectWrapperFactory != null) {\n               configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n           }\n\n           if (StringUtils.hasLength(this.typeAliasesPackage)) {\n               String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(this.typeAliasesPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeAliasPackageArray) {\n\n                   // 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                   try {\n                       configuration.getTypeAliasRegistry().registerAliases(packageToScan,\n                               typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n                   } catch (Exception ex) {\n                       logger.error(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                       throw new NestedIOException(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n                   // 修改处：ThinkGem end\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeAliases)) {\n               for (Class typeAlias : this.typeAliases) {\n                   configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.plugins)) {\n               for (Interceptor plugin : this.plugins) {\n                   configuration.addInterceptor(plugin);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered plugin: '\" + plugin + \"'\");\n                   }\n               }\n           }\n\n           if (StringUtils.hasLength(this.typeHandlersPackage)) {\n               String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(this.typeHandlersPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeHandlersPackageArray) {\n                   configuration.getTypeHandlerRegistry().register(packageToScan);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeHandlers)) {\n               for (TypeHandler typeHandler : this.typeHandlers) {\n                   configuration.getTypeHandlerRegistry().register(typeHandler);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n                   }\n               }\n           }\n\n           if (xmlConfigBuilder != null) {\n               try {\n                   xmlConfigBuilder.parse();\n\n                   if (logger.isDebugEnabled())\n                       logger.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n               } catch (Exception ex) {\n                   throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n               } finally {\n                   ErrorContext.instance().reset();\n               }\n           }\n\n           if (this.transactionFactory == null) {\n               this.transactionFactory = new SpringManagedTransactionFactory();\n           }\n\n           Environment environment = new Environment(this.environment, this.transactionFactory, this.dataSource);\n           configuration.setEnvironment(environment);\n\n           if (this.databaseIdProvider != null) {\n               try {\n                   configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n               } catch (SQLException e) {\n                   throw new NestedIOException(\"Failed getting a databaseId\", e);\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.mapperLocations)) {\n               for (Resource mapperLocation : this.mapperLocations) {\n                   if (mapperLocation == null) {\n                       continue;\n                   }\n                   try {\n                       XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n                               configuration, mapperLocation.toString(), configuration.getSqlFragments());\n\n                       xmlMapperBuilder.parse();\n                   } catch (Exception e) {\n\n                       // 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                       logger.error(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n\n                       throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n                   }\n               }\n\n               // 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。\n               new MapperRefresh(this.mapperLocations, configuration).run();\n\n           } else if (logger.isDebugEnabled()) {\n               logger.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n           }\n\n           return this.sqlSessionFactoryBuilder.build(configuration);\n       }\n\n       public SqlSessionFactory getObject() throws Exception {\n           if (this.sqlSessionFactory == null) {\n               afterPropertiesSet();\n           }\n\n           return this.sqlSessionFactory;\n       }\n\n       public Class<? extends SqlSessionFactory> getObjectType() {\n           return this.sqlSessionFactory == null ? SqlSessionFactory.class : this.sqlSessionFactory.getClass();\n       }\n\n       public boolean isSingleton() {\n           return true;\n       }\n\n       public void onApplicationEvent(ApplicationEvent event) {\n           if ((this.failFast) && ((event instanceof ContextRefreshedEvent))) {\n               this.sqlSessionFactory.getConfiguration().getMappedStatementNames();\n           }\n       }\n   }\n   ```\n\n   3. 接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。**重新部署当前项目** Servers > Tomcat 8.x > 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。\n\n   4. 去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"/>\n\n      </div>\n\n   5. 这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用[*jd-gui.exe(一款JAVA反编译工具)*](http://pan.baidu.com/s/1skKW2st)比较是不是和上面写的代码对应！！！！\n\n      **检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      ​\n\n      # 创建mybatis-refresh.properties文件\n\n      一切准备就绪，还剩下最后一个属性文件， 创建**mybatis-refresh.properties**文件，记得把文件格式改成**UTF-8**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      **mybatis-refresh.properties文件内容为：**\n\n      ```javascript\n      #是否开启刷新线程\n      enabled=true\n      #延迟启动刷新程序的秒数\n      delaySeconds=60  \n      #刷新扫描间隔的时长秒数\n      sleepSeconds=3\n      #扫描Mapper文件的资源路径\n      mappingPath=mapper\n      ```\n\n      # 测试\n\n      1. 删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。\n\n      2. 启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！**这样就不用重启项目，也能加载到你修改的mapper.xml文件了** 。\n\n         <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"/>\n\n         </div>\n\n      # 注意\n\n      1. 注意各个文件的位置和名称。\n      2. 注意**MapperRefresh.java**文件中**mybatis-refresh.properties**的路径。\n      3. 注意用jd-gui.exe**检查编译后的SqlSessionFactoryBean.class文件**。","slug":"Spring-Mybatis之Mapper热部署","published":1,"updated":"2018-03-20T02:45:12.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u20001w3gfkoktudvf6","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    Spring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。</p>\n<p>​    功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且<strong>只加载被修改的mapper文件</strong>！这个可省事了，效率又高，简直爽到爆。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"创建MapperRefresh刷新类\"><a href=\"#创建MapperRefresh刷新类\" class=\"headerlink\" title=\"创建MapperRefresh刷新类\"></a>创建MapperRefresh刷新类</h1><p>在src下创建一个util包，包下面创建一个类，类名为：<strong>MapperRefresh</strong></p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"><br><br></div>\n\n<p>代码为下面的一串，注意修改下<strong>mybatis-refresh.properties</strong> 的路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.talkweb.nets.netsTestLib.data.util;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.Sets;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\"> * 刷新MyBatis Mapper XML 线程 </div><div class=\"line\"> * <span class=\"doctag\">@author</span> ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 2016-5-29 </div><div class=\"line\"> */  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapperRefresh</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Runnable</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Logger log = Logger.getLogger(MapperRefresh.class);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String filename = <span class=\"string\">\"mybatis-refresh.properties\"</span>;  <span class=\"comment\">//注意修改路径</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Properties prop = <span class=\"keyword\">new</span> Properties();  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> enabled;         <span class=\"comment\">// 是否启用Mapper刷新线程功能  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> refresh;         <span class=\"comment\">// 刷新启用后，是否启动了刷新线程  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; location;         <span class=\"comment\">// Mapper实际资源路径  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;     <span class=\"comment\">// Mapper资源路径  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> Configuration configuration;        <span class=\"comment\">// MyBatis配置对象  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Long beforeTime = <span class=\"number\">0L</span>;           <span class=\"comment\">// 上一次刷新时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> delaySeconds;        <span class=\"comment\">// 延迟刷新秒数  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sleepSeconds;        <span class=\"comment\">// 休眠时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String mappingPath;      <span class=\"comment\">// xml文件夹匹配字符串，需要根据需要修改  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            prop.load(MapperRefresh.class.getResourceAsStream(filename));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Load mybatis-refresh “\"</span>+filename+<span class=\"string\">\"” file error.\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        enabled = <span class=\"string\">\"true\"</span>.equalsIgnoreCase(getPropString(<span class=\"string\">\"enabled\"</span>));  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = getPropInt(<span class=\"string\">\"delaySeconds\"</span>);  </div><div class=\"line\">        sleepSeconds = getPropInt(<span class=\"string\">\"sleepSeconds\"</span>);  </div><div class=\"line\">        mappingPath = getPropString(<span class=\"string\">\"mappingPath\"</span>);  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = delaySeconds == <span class=\"number\">0</span> ? <span class=\"number\">50</span> : delaySeconds;  </div><div class=\"line\">        sleepSeconds = sleepSeconds == <span class=\"number\">0</span> ? <span class=\"number\">3</span> : sleepSeconds;  </div><div class=\"line\">        mappingPath = StringUtils.isBlank(mappingPath) ? <span class=\"string\">\"mappings\"</span> : mappingPath;  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[enabled] \"</span> + enabled);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[delaySeconds] \"</span> + delaySeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[sleepSeconds] \"</span> + sleepSeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[mappingPath] \"</span> + mappingPath);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRefresh</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> refresh;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapperRefresh</span><span class=\"params\">(Resource[] mapperLocations, Configuration configuration)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.configuration = configuration;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        beforeTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[location] \"</span> + location);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[configuration] \"</span> + configuration);  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (enabled) &#123;  </div><div class=\"line\">            <span class=\"comment\">// 启动刷新线程  </span></div><div class=\"line\">            <span class=\"keyword\">final</span> MapperRefresh runnable = <span class=\"keyword\">this</span>;  </div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> java.lang.Runnable() &#123;  </div><div class=\"line\">                <span class=\"meta\">@Override</span>  </div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (location == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">                        location = Sets.newHashSet();  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"MapperLocation's length:\"</span> + mapperLocations.length);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Resource mapperLocation : mapperLocations) &#123;  </div><div class=\"line\">                            String s = mapperLocation.toString().replaceAll(<span class=\"string\">\"\\\\\\\\\"</span>, <span class=\"string\">\"/\"</span>);  </div><div class=\"line\">                            s = s.substring(<span class=\"string\">\"file [\"</span>.length(), s.lastIndexOf(mappingPath) + mappingPath.length());  </div><div class=\"line\">                            <span class=\"keyword\">if</span> (!location.contains(s)) &#123;  </div><div class=\"line\">                                location.add(s);  </div><div class=\"line\">                                log.debug(<span class=\"string\">\"Location:\"</span> + s);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"Locarion's size:\"</span> + location.size());  </div><div class=\"line\">                    &#125;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(delaySeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e2) &#123;  </div><div class=\"line\">                        e2.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                    refresh = <span class=\"keyword\">true</span>;  </div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"========= Enabled refresh mybatis mapper =========\"</span>);  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            <span class=\"keyword\">for</span> (String s : location) &#123;  </div><div class=\"line\">                                runnable.refresh(s, beforeTime);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;  </div><div class=\"line\">                            e1.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            Thread.sleep(sleepSeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                            e.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\"></div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;, <span class=\"string\">\"MyBatis-Mapper-Refresh\"</span>).start();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 执行刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath 刷新目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> NestedIOException 解析异常 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> FileNotFoundException 文件未找到 </div><div class=\"line\">     * <span class=\"doctag\">@author</span> ThinkGem </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(String filePath, Long beforeTime)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 本次刷新时间  </span></div><div class=\"line\">        Long refrehTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取需要刷新的Mapper文件列表  </span></div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">this</span>.getRefreshFile(<span class=\"keyword\">new</span> File(filePath), beforeTime);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.size());  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileList.size(); i++) &#123;  </div><div class=\"line\">            InputStream inputStream = <span class=\"keyword\">new</span> FileInputStream(fileList.get(i));  </div><div class=\"line\">            String resource = fileList.get(i).getAbsolutePath();  </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理原有资源，更新为自己的StrictMap方便，增量重新加载  </span></div><div class=\"line\">                String[] mapFieldNames = <span class=\"keyword\">new</span> String[]&#123;  </div><div class=\"line\">                    <span class=\"string\">\"mappedStatements\"</span>, <span class=\"string\">\"caches\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"resultMaps\"</span>, <span class=\"string\">\"parameterMaps\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"keyGenerators\"</span>, <span class=\"string\">\"sqlFragments\"</span>  </div><div class=\"line\">                &#125;;  </div><div class=\"line\">                <span class=\"keyword\">for</span> (String fieldName : mapFieldNames)&#123;  </div><div class=\"line\">                    Field field = configuration.getClass().getDeclaredField(fieldName);  </div><div class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                    Map map = ((Map)field.get(configuration));  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (!(map <span class=\"keyword\">instanceof</span> StrictMap))&#123;  </div><div class=\"line\">                        Map newMap = <span class=\"keyword\">new</span> StrictMap(StringUtils.capitalize(fieldName) + <span class=\"string\">\"collection\"</span>);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Object key : map.keySet())&#123;  </div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                                newMap.put(key, map.get(key));  </div><div class=\"line\">                            &#125;<span class=\"keyword\">catch</span>(IllegalArgumentException ex)&#123;  </div><div class=\"line\">                                newMap.put(key, ex.getMessage());  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        field.set(configuration, newMap);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理已加载的资源标识，方便让它重新加载。  </span></div><div class=\"line\">                Field loadedResourcesField = configuration.getClass().getDeclaredField(<span class=\"string\">\"loadedResources\"</span>);  </div><div class=\"line\">                loadedResourcesField.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  </div><div class=\"line\">                loadedResourcesSet.remove(resource);  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//重新编译加载资源文件。  </span></div><div class=\"line\">                XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(inputStream, configuration,   </div><div class=\"line\">                        resource, configuration.getSqlFragments());  </div><div class=\"line\">                xmlMapperBuilder.parse();  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + resource + <span class=\"string\">\"'\"</span>, e);  </div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;  </div><div class=\"line\">                ErrorContext.instance().reset();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Refresh file: \"</span> + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  </div><div class=\"line\">            <span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.get(i).getAbsolutePath());  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh filename: \"</span> + fileList.get(i).getName());  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"comment\">// 如果刷新了文件，则修改刷新时间，否则不修改  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.beforeTime = refrehTime;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 获取需要刷新的文件列表 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> dir 目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 刷新文件列表 </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;File&gt; <span class=\"title\">getRefreshFile</span><span class=\"params\">(File dir, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">new</span> ArrayList&lt;File&gt;();  </div><div class=\"line\"></div><div class=\"line\">        File[] files = dir.listFiles();  </div><div class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;  </div><div class=\"line\">                File file = files[i];  </div><div class=\"line\">                <span class=\"keyword\">if</span> (file.isDirectory()) &#123;  </div><div class=\"line\">                    fileList.addAll(<span class=\"keyword\">this</span>.getRefreshFile(file, beforeTime));  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (file.isFile()) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.checkFile(file, beforeTime)) &#123;  </div><div class=\"line\">                        fileList.add(file);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Error file.\"</span> + file.getName());  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> fileList;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 判断文件是否需要刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> file 文件 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 需要刷新返回true，否则返回false </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkFile</span><span class=\"params\">(File file, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (file.lastModified() &gt; beforeTime) &#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 获取整数属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getPropInt</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            i = Integer.parseInt(getPropString(key));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> i;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 获取字符串属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getPropString</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> prop == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : prop.getProperty(key);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 </div><div class=\"line\">     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrictMap</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">V</span>&gt; </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">4950446264854982944L</span>;  </div><div class=\"line\">        <span class=\"keyword\">private</span> String name;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity, loadFactor);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>();  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, Map&lt;String, ? extends V&gt; m)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(m);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(String key, V value)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (MapperRefresh.isRefresh()) &#123;  </div><div class=\"line\">                remove(key);  </div><div class=\"line\">                MapperRefresh.log.debug(<span class=\"string\">\"refresh key:\"</span> + key.substring(key.lastIndexOf(<span class=\"string\">\".\"</span>) + <span class=\"number\">1</span>));  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem end  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (containsKey(key)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" already contains value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (key.contains(<span class=\"string\">\".\"</span>)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">final</span> String shortKey = getShortName(key);  </div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">super</span>.get(shortKey) == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, value);  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, (V) <span class=\"keyword\">new</span> Ambiguity(shortKey));  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.put(key, value);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;  </div><div class=\"line\">            V value = <span class=\"keyword\">super</span>.get(key);  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" does not contain value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Ambiguity) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(((Ambiguity) value).getSubject() + <span class=\"string\">\" is ambiguous in \"</span> + name  </div><div class=\"line\">                        + <span class=\"string\">\" (try using the full name including the namespace, or rename one of the entries)\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> value;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getShortName</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">final</span> String[] keyparts = key.split(<span class=\"string\">\"\\\\.\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> keyparts[keyparts.length - <span class=\"number\">1</span>];  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ambiguity</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">private</span> String subject;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Ambiguity</span><span class=\"params\">(String subject)</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">this</span>.subject = subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">return</span> subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"重写SqlSessionFactoryBean\"><a href=\"#重写SqlSessionFactoryBean\" class=\"headerlink\" title=\"重写SqlSessionFactoryBean\"></a>重写SqlSessionFactoryBean</h1><p>MyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：</p>\n<p>1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>3、加入启动MapperRefresh.java线程服务。</p>\n<p>思路就是用我们<strong>自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class</strong>。</p>\n<ol>\n<li><p>在当前项目下新建一个包：右键 <em>src &gt; new Package &gt;</em> <em>org.mybatis.spring</em>，创建SqlSessionFactoryBean.java类。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"><br><br></div>\n</li>\n<li><p>复制下面一串代码到SqlSessionFactoryBean.java，注意导入<code>MapperRefresh</code>正确的包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.mybatis.spring;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLConfigBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.DatabaseIdProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.plugin.Interceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.factory.ObjectFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.transaction.TransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeAliasRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.InitializingBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.event.ContextRefreshedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.ObjectUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.talkweb.nets.netsTestLib.data.util.MapperRefresh;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlSessionFactoryBean</span></span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">SqlSessionFactory</span>&gt;, <span class=\"title\">InitializingBean</span>, <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ApplicationEvent</span>&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource configLocation;</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;</div><div class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</div><div class=\"line\">    <span class=\"keyword\">private</span> TransactionFactory transactionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties configurationProperties;</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> String environment = SqlSessionFactoryBean.class.getSimpleName();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> failFast;</div><div class=\"line\">    <span class=\"keyword\">private</span> Interceptor[] plugins;</div><div class=\"line\">    <span class=\"keyword\">private</span> TypeHandler&lt;?&gt;[] typeHandlers;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeHandlersPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt;[] typeAliases;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeAliasesPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt; typeAliasesSuperType;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabaseIdProvider databaseIdProvider;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory objectFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectWrapperFactory objectWrapperFactory;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectFactory</span><span class=\"params\">(ObjectFactory objectFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectFactory = objectFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectWrapperFactory</span><span class=\"params\">(ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectWrapperFactory = objectWrapperFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DatabaseIdProvider <span class=\"title\">getDatabaseIdProvider</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDatabaseIdProvider</span><span class=\"params\">(DatabaseIdProvider databaseIdProvider)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.databaseIdProvider = databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPlugins</span><span class=\"params\">(Interceptor[] plugins)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.plugins = plugins;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesPackage</span><span class=\"params\">(String typeAliasesPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesPackage = typeAliasesPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesSuperType</span><span class=\"params\">(Class&lt;?&gt; typeAliasesSuperType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesSuperType = typeAliasesSuperType;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlersPackage</span><span class=\"params\">(String typeHandlersPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlersPackage = typeHandlersPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlers</span><span class=\"params\">(TypeHandler&lt;?&gt;[] typeHandlers)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlers = typeHandlers;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliases</span><span class=\"params\">(Class&lt;?&gt;[] typeAliases)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliases = typeAliases;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFailFast</span><span class=\"params\">(<span class=\"keyword\">boolean</span> failFast)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.failFast = failFast;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigLocation</span><span class=\"params\">(Resource configLocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configLocation = configLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMapperLocations</span><span class=\"params\">(Resource[] mapperLocations)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurationProperties</span><span class=\"params\">(Properties sqlSessionFactoryProperties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configurationProperties = sqlSessionFactoryProperties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((dataSource <span class=\"keyword\">instanceof</span> TransactionAwareDataSourceProxy)) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = dataSource;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSqlSessionFactoryBuilder</span><span class=\"params\">(SqlSessionFactoryBuilder sqlSessionFactoryBuilder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTransactionFactory</span><span class=\"params\">(TransactionFactory transactionFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.transactionFactory = transactionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEnvironment</span><span class=\"params\">(String environment)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.dataSource, <span class=\"string\">\"Property 'dataSource' is required\"</span>);</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.sqlSessionFactoryBuilder, <span class=\"string\">\"Property 'sqlSessionFactoryBuilder' is required\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactory = buildSqlSessionFactory();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SqlSessionFactory <span class=\"title\">buildSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        XMLConfigBuilder xmlConfigBuilder = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Configuration configuration;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.configLocation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            xmlConfigBuilder = <span class=\"keyword\">new</span> XMLConfigBuilder(<span class=\"keyword\">this</span>.configLocation.getInputStream(), <span class=\"keyword\">null</span>,</div><div class=\"line\">                    <span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">            configuration = xmlConfigBuilder.getConfiguration();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                logger.debug(<span class=\"string\">\"Property 'configLocation' not specified, using default MyBatis Configuration\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            configuration = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">            configuration.setVariables(<span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectFactory(<span class=\"keyword\">this</span>.objectFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectWrapperFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectWrapperFactory(<span class=\"keyword\">this</span>.objectWrapperFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeAliasesPackage)) &#123;</div><div class=\"line\">            String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeAliasesPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeAliasPackageArray) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    configuration.getTypeAliasRegistry().registerAliases(packageToScan,</div><div class=\"line\">                            typeAliasesSuperType == <span class=\"keyword\">null</span> ? Object.class : typeAliasesSuperType);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                    logger.error(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem end</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeAliases)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Class typeAlias : <span class=\"keyword\">this</span>.typeAliases) &#123;</div><div class=\"line\">                configuration.getTypeAliasRegistry().registerAlias(typeAlias);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type alias: '\"</span> + typeAlias + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.plugins)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Interceptor plugin : <span class=\"keyword\">this</span>.plugins) &#123;</div><div class=\"line\">                configuration.addInterceptor(plugin);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered plugin: '\"</span> + plugin + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeHandlersPackage)) &#123;</div><div class=\"line\">            String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeHandlersPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeHandlersPackageArray) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(packageToScan);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for type handlers\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeHandlers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (TypeHandler typeHandler : <span class=\"keyword\">this</span>.typeHandlers) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(typeHandler);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type handler: '\"</span> + typeHandler + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlConfigBuilder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlConfigBuilder.parse();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled())</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed configuration file: '\"</span> + <span class=\"keyword\">this</span>.configLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse config resource: \"</span> + <span class=\"keyword\">this</span>.configLocation, ex);</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                ErrorContext.instance().reset();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.transactionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.transactionFactory = <span class=\"keyword\">new</span> SpringManagedTransactionFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Environment environment = <span class=\"keyword\">new</span> Environment(<span class=\"keyword\">this</span>.environment, <span class=\"keyword\">this</span>.transactionFactory, <span class=\"keyword\">this</span>.dataSource);</div><div class=\"line\">        configuration.setEnvironment(environment);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.databaseIdProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                configuration.setDatabaseId(<span class=\"keyword\">this</span>.databaseIdProvider.getDatabaseId(<span class=\"keyword\">this</span>.dataSource));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed getting a databaseId\"</span>, e);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.mapperLocations)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Resource mapperLocation : <span class=\"keyword\">this</span>.mapperLocations) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mapperLocation == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(mapperLocation.getInputStream(),</div><div class=\"line\">                            configuration, mapperLocation.toString(), configuration.getSqlFragments());</div><div class=\"line\"></div><div class=\"line\">                    xmlMapperBuilder.parse();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                    logger.error(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed mapper file: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。</span></div><div class=\"line\">            <span class=\"keyword\">new</span> MapperRefresh(<span class=\"keyword\">this</span>.mapperLocations, configuration).run();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">            logger.debug(<span class=\"string\">\"Property 'mapperLocations' was not specified or no matching resources found\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder.build(configuration);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            afterPropertiesSet();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends SqlSessionFactory&gt; getObjectType() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span> ? SqlSessionFactory.class : <span class=\"keyword\">this</span>.sqlSessionFactory.getClass();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.failFast) &amp;&amp; ((event <span class=\"keyword\">instanceof</span> ContextRefreshedEvent))) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sqlSessionFactory.getConfiguration().getMappedStatementNames();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。<strong>重新部署当前项目</strong> Servers &gt; Tomcat 8.x &gt; 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。</p>\n</li>\n<li><p>去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"><br><br></div>\n</li>\n<li><p>这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用<a href=\"http://pan.baidu.com/s/1skKW2st\" target=\"_blank\" rel=\"external\"><em>jd-gui.exe(一款JAVA反编译工具)</em></a>比较是不是和上面写的代码对应！！！！</p>\n<p><strong>检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件</strong>。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"><br><br></div>\n\n<p>​</p>\n<h1 id=\"创建mybatis-refresh-properties文件\"><a href=\"#创建mybatis-refresh-properties文件\" class=\"headerlink\" title=\"创建mybatis-refresh.properties文件\"></a>创建mybatis-refresh.properties文件</h1><p>一切准备就绪，还剩下最后一个属性文件， 创建<strong>mybatis-refresh.properties</strong>文件，记得把文件格式改成<strong>UTF-8</strong>。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"><br><br></div>\n\n<p><strong>mybatis-refresh.properties文件内容为：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#是否开启刷新线程</div><div class=\"line\">enabled=true</div><div class=\"line\">#延迟启动刷新程序的秒数</div><div class=\"line\">delaySeconds=60  </div><div class=\"line\">#刷新扫描间隔的时长秒数</div><div class=\"line\">sleepSeconds=3</div><div class=\"line\">#扫描Mapper文件的资源路径</div><div class=\"line\">mappingPath=mapper</div></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ol>\n<li><p>删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。</p>\n</li>\n<li><p>启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！<strong>这样就不用重启项目，也能加载到你修改的mapper.xml文件了</strong> 。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"><br><br></div>\n\n</li>\n</ol>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>注意各个文件的位置和名称。</li>\n<li>注意<strong>MapperRefresh.java</strong>文件中<strong>mybatis-refresh.properties</strong>的路径。</li>\n<li>注意用jd-gui.exe<strong>检查编译后的SqlSessionFactoryBean.class文件</strong>。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    Spring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。</p>\n<p>​    功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且<strong>只加载被修改的mapper文件</strong>！这个可省事了，效率又高，简直爽到爆。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"创建MapperRefresh刷新类\"><a href=\"#创建MapperRefresh刷新类\" class=\"headerlink\" title=\"创建MapperRefresh刷新类\"></a>创建MapperRefresh刷新类</h1><p>在src下创建一个util包，包下面创建一个类，类名为：<strong>MapperRefresh</strong></p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"/><br><br></div>\n\n<p>代码为下面的一串，注意修改下<strong>mybatis-refresh.properties</strong> 的路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.talkweb.nets.netsTestLib.data.util;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.Sets;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\"> * 刷新MyBatis Mapper XML 线程 </div><div class=\"line\"> * <span class=\"doctag\">@author</span> ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 2016-5-29 </div><div class=\"line\"> */</span>  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapperRefresh</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Runnable</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Logger log = Logger.getLogger(MapperRefresh.class);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String filename = <span class=\"string\">\"mybatis-refresh.properties\"</span>;  <span class=\"comment\">//注意修改路径</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Properties prop = <span class=\"keyword\">new</span> Properties();  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> enabled;         <span class=\"comment\">// 是否启用Mapper刷新线程功能  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> refresh;         <span class=\"comment\">// 刷新启用后，是否启动了刷新线程  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; location;         <span class=\"comment\">// Mapper实际资源路径  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;     <span class=\"comment\">// Mapper资源路径  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> Configuration configuration;        <span class=\"comment\">// MyBatis配置对象  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Long beforeTime = <span class=\"number\">0L</span>;           <span class=\"comment\">// 上一次刷新时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> delaySeconds;        <span class=\"comment\">// 延迟刷新秒数  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sleepSeconds;        <span class=\"comment\">// 休眠时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String mappingPath;      <span class=\"comment\">// xml文件夹匹配字符串，需要根据需要修改  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            prop.load(MapperRefresh.class.getResourceAsStream(filename));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Load mybatis-refresh “\"</span>+filename+<span class=\"string\">\"” file error.\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        enabled = <span class=\"string\">\"true\"</span>.equalsIgnoreCase(getPropString(<span class=\"string\">\"enabled\"</span>));  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = getPropInt(<span class=\"string\">\"delaySeconds\"</span>);  </div><div class=\"line\">        sleepSeconds = getPropInt(<span class=\"string\">\"sleepSeconds\"</span>);  </div><div class=\"line\">        mappingPath = getPropString(<span class=\"string\">\"mappingPath\"</span>);  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = delaySeconds == <span class=\"number\">0</span> ? <span class=\"number\">50</span> : delaySeconds;  </div><div class=\"line\">        sleepSeconds = sleepSeconds == <span class=\"number\">0</span> ? <span class=\"number\">3</span> : sleepSeconds;  </div><div class=\"line\">        mappingPath = StringUtils.isBlank(mappingPath) ? <span class=\"string\">\"mappings\"</span> : mappingPath;  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[enabled] \"</span> + enabled);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[delaySeconds] \"</span> + delaySeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[sleepSeconds] \"</span> + sleepSeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[mappingPath] \"</span> + mappingPath);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRefresh</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> refresh;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapperRefresh</span><span class=\"params\">(Resource[] mapperLocations, Configuration configuration)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.configuration = configuration;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        beforeTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[location] \"</span> + location);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[configuration] \"</span> + configuration);  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (enabled) &#123;  </div><div class=\"line\">            <span class=\"comment\">// 启动刷新线程  </span></div><div class=\"line\">            <span class=\"keyword\">final</span> MapperRefresh runnable = <span class=\"keyword\">this</span>;  </div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> java.lang.Runnable() &#123;  </div><div class=\"line\">                <span class=\"meta\">@Override</span>  </div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (location == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">                        location = Sets.newHashSet();  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"MapperLocation's length:\"</span> + mapperLocations.length);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Resource mapperLocation : mapperLocations) &#123;  </div><div class=\"line\">                            String s = mapperLocation.toString().replaceAll(<span class=\"string\">\"\\\\\\\\\"</span>, <span class=\"string\">\"/\"</span>);  </div><div class=\"line\">                            s = s.substring(<span class=\"string\">\"file [\"</span>.length(), s.lastIndexOf(mappingPath) + mappingPath.length());  </div><div class=\"line\">                            <span class=\"keyword\">if</span> (!location.contains(s)) &#123;  </div><div class=\"line\">                                location.add(s);  </div><div class=\"line\">                                log.debug(<span class=\"string\">\"Location:\"</span> + s);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"Locarion's size:\"</span> + location.size());  </div><div class=\"line\">                    &#125;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(delaySeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e2) &#123;  </div><div class=\"line\">                        e2.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                    refresh = <span class=\"keyword\">true</span>;  </div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"========= Enabled refresh mybatis mapper =========\"</span>);  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            <span class=\"keyword\">for</span> (String s : location) &#123;  </div><div class=\"line\">                                runnable.refresh(s, beforeTime);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;  </div><div class=\"line\">                            e1.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            Thread.sleep(sleepSeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                            e.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\"></div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;, <span class=\"string\">\"MyBatis-Mapper-Refresh\"</span>).start();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 执行刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath 刷新目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> NestedIOException 解析异常 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> FileNotFoundException 文件未找到 </div><div class=\"line\">     * <span class=\"doctag\">@author</span> ThinkGem </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(String filePath, Long beforeTime)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 本次刷新时间  </span></div><div class=\"line\">        Long refrehTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取需要刷新的Mapper文件列表  </span></div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">this</span>.getRefreshFile(<span class=\"keyword\">new</span> File(filePath), beforeTime);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.size());  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileList.size(); i++) &#123;  </div><div class=\"line\">            InputStream inputStream = <span class=\"keyword\">new</span> FileInputStream(fileList.get(i));  </div><div class=\"line\">            String resource = fileList.get(i).getAbsolutePath();  </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理原有资源，更新为自己的StrictMap方便，增量重新加载  </span></div><div class=\"line\">                String[] mapFieldNames = <span class=\"keyword\">new</span> String[]&#123;  </div><div class=\"line\">                    <span class=\"string\">\"mappedStatements\"</span>, <span class=\"string\">\"caches\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"resultMaps\"</span>, <span class=\"string\">\"parameterMaps\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"keyGenerators\"</span>, <span class=\"string\">\"sqlFragments\"</span>  </div><div class=\"line\">                &#125;;  </div><div class=\"line\">                <span class=\"keyword\">for</span> (String fieldName : mapFieldNames)&#123;  </div><div class=\"line\">                    Field field = configuration.getClass().getDeclaredField(fieldName);  </div><div class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                    Map map = ((Map)field.get(configuration));  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (!(map <span class=\"keyword\">instanceof</span> StrictMap))&#123;  </div><div class=\"line\">                        Map newMap = <span class=\"keyword\">new</span> StrictMap(StringUtils.capitalize(fieldName) + <span class=\"string\">\"collection\"</span>);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Object key : map.keySet())&#123;  </div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                                newMap.put(key, map.get(key));  </div><div class=\"line\">                            &#125;<span class=\"keyword\">catch</span>(IllegalArgumentException ex)&#123;  </div><div class=\"line\">                                newMap.put(key, ex.getMessage());  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        field.set(configuration, newMap);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理已加载的资源标识，方便让它重新加载。  </span></div><div class=\"line\">                Field loadedResourcesField = configuration.getClass().getDeclaredField(<span class=\"string\">\"loadedResources\"</span>);  </div><div class=\"line\">                loadedResourcesField.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  </div><div class=\"line\">                loadedResourcesSet.remove(resource);  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//重新编译加载资源文件。  </span></div><div class=\"line\">                XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(inputStream, configuration,   </div><div class=\"line\">                        resource, configuration.getSqlFragments());  </div><div class=\"line\">                xmlMapperBuilder.parse();  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + resource + <span class=\"string\">\"'\"</span>, e);  </div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;  </div><div class=\"line\">                ErrorContext.instance().reset();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Refresh file: \"</span> + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  </div><div class=\"line\">            <span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.get(i).getAbsolutePath());  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh filename: \"</span> + fileList.get(i).getName());  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"comment\">// 如果刷新了文件，则修改刷新时间，否则不修改  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.beforeTime = refrehTime;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 获取需要刷新的文件列表 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> dir 目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 刷新文件列表 </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;File&gt; <span class=\"title\">getRefreshFile</span><span class=\"params\">(File dir, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">new</span> ArrayList&lt;File&gt;();  </div><div class=\"line\"></div><div class=\"line\">        File[] files = dir.listFiles();  </div><div class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;  </div><div class=\"line\">                File file = files[i];  </div><div class=\"line\">                <span class=\"keyword\">if</span> (file.isDirectory()) &#123;  </div><div class=\"line\">                    fileList.addAll(<span class=\"keyword\">this</span>.getRefreshFile(file, beforeTime));  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (file.isFile()) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.checkFile(file, beforeTime)) &#123;  </div><div class=\"line\">                        fileList.add(file);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Error file.\"</span> + file.getName());  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> fileList;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 判断文件是否需要刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> file 文件 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 需要刷新返回true，否则返回false </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkFile</span><span class=\"params\">(File file, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (file.lastModified() &gt; beforeTime) &#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 获取整数属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getPropInt</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            i = Integer.parseInt(getPropString(key));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> i;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 获取字符串属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getPropString</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> prop == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : prop.getProperty(key);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 </div><div class=\"line\">     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrictMap</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">V</span>&gt; </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">4950446264854982944L</span>;  </div><div class=\"line\">        <span class=\"keyword\">private</span> String name;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity, loadFactor);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>();  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, Map&lt;String, ? extends V&gt; m)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(m);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(String key, V value)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (MapperRefresh.isRefresh()) &#123;  </div><div class=\"line\">                remove(key);  </div><div class=\"line\">                MapperRefresh.log.debug(<span class=\"string\">\"refresh key:\"</span> + key.substring(key.lastIndexOf(<span class=\"string\">\".\"</span>) + <span class=\"number\">1</span>));  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem end  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (containsKey(key)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" already contains value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (key.contains(<span class=\"string\">\".\"</span>)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">final</span> String shortKey = getShortName(key);  </div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">super</span>.get(shortKey) == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, value);  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, (V) <span class=\"keyword\">new</span> Ambiguity(shortKey));  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.put(key, value);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;  </div><div class=\"line\">            V value = <span class=\"keyword\">super</span>.get(key);  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" does not contain value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Ambiguity) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(((Ambiguity) value).getSubject() + <span class=\"string\">\" is ambiguous in \"</span> + name  </div><div class=\"line\">                        + <span class=\"string\">\" (try using the full name including the namespace, or rename one of the entries)\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> value;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getShortName</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">final</span> String[] keyparts = key.split(<span class=\"string\">\"\\\\.\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> keyparts[keyparts.length - <span class=\"number\">1</span>];  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ambiguity</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">private</span> String subject;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Ambiguity</span><span class=\"params\">(String subject)</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">this</span>.subject = subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">return</span> subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"重写SqlSessionFactoryBean\"><a href=\"#重写SqlSessionFactoryBean\" class=\"headerlink\" title=\"重写SqlSessionFactoryBean\"></a>重写SqlSessionFactoryBean</h1><p>MyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：</p>\n<p>1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>3、加入启动MapperRefresh.java线程服务。</p>\n<p>思路就是用我们<strong>自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class</strong>。</p>\n<ol>\n<li><p>在当前项目下新建一个包：右键 <em>src &gt; new Package &gt;</em> <em>org.mybatis.spring</em>，创建SqlSessionFactoryBean.java类。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"/><br><br></div>\n</li>\n<li><p>复制下面一串代码到SqlSessionFactoryBean.java，注意导入<code>MapperRefresh</code>正确的包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.mybatis.spring;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLConfigBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.DatabaseIdProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.plugin.Interceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.factory.ObjectFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.transaction.TransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeAliasRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.InitializingBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.event.ContextRefreshedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.ObjectUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.talkweb.nets.netsTestLib.data.util.MapperRefresh;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlSessionFactoryBean</span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">SqlSessionFactory</span>&gt;, <span class=\"title\">InitializingBean</span>, <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ApplicationEvent</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource configLocation;</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;</div><div class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</div><div class=\"line\">    <span class=\"keyword\">private</span> TransactionFactory transactionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties configurationProperties;</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> String environment = SqlSessionFactoryBean.class.getSimpleName();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> failFast;</div><div class=\"line\">    <span class=\"keyword\">private</span> Interceptor[] plugins;</div><div class=\"line\">    <span class=\"keyword\">private</span> TypeHandler&lt;?&gt;[] typeHandlers;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeHandlersPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt;[] typeAliases;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeAliasesPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt; typeAliasesSuperType;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabaseIdProvider databaseIdProvider;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory objectFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectWrapperFactory objectWrapperFactory;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectFactory</span><span class=\"params\">(ObjectFactory objectFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectFactory = objectFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectWrapperFactory</span><span class=\"params\">(ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectWrapperFactory = objectWrapperFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DatabaseIdProvider <span class=\"title\">getDatabaseIdProvider</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDatabaseIdProvider</span><span class=\"params\">(DatabaseIdProvider databaseIdProvider)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.databaseIdProvider = databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPlugins</span><span class=\"params\">(Interceptor[] plugins)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.plugins = plugins;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesPackage</span><span class=\"params\">(String typeAliasesPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesPackage = typeAliasesPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesSuperType</span><span class=\"params\">(Class&lt;?&gt; typeAliasesSuperType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesSuperType = typeAliasesSuperType;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlersPackage</span><span class=\"params\">(String typeHandlersPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlersPackage = typeHandlersPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlers</span><span class=\"params\">(TypeHandler&lt;?&gt;[] typeHandlers)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlers = typeHandlers;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliases</span><span class=\"params\">(Class&lt;?&gt;[] typeAliases)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliases = typeAliases;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFailFast</span><span class=\"params\">(<span class=\"keyword\">boolean</span> failFast)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.failFast = failFast;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigLocation</span><span class=\"params\">(Resource configLocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configLocation = configLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMapperLocations</span><span class=\"params\">(Resource[] mapperLocations)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurationProperties</span><span class=\"params\">(Properties sqlSessionFactoryProperties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configurationProperties = sqlSessionFactoryProperties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((dataSource <span class=\"keyword\">instanceof</span> TransactionAwareDataSourceProxy)) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = dataSource;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSqlSessionFactoryBuilder</span><span class=\"params\">(SqlSessionFactoryBuilder sqlSessionFactoryBuilder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTransactionFactory</span><span class=\"params\">(TransactionFactory transactionFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.transactionFactory = transactionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEnvironment</span><span class=\"params\">(String environment)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.dataSource, <span class=\"string\">\"Property 'dataSource' is required\"</span>);</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.sqlSessionFactoryBuilder, <span class=\"string\">\"Property 'sqlSessionFactoryBuilder' is required\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactory = buildSqlSessionFactory();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SqlSessionFactory <span class=\"title\">buildSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        XMLConfigBuilder xmlConfigBuilder = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Configuration configuration;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.configLocation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            xmlConfigBuilder = <span class=\"keyword\">new</span> XMLConfigBuilder(<span class=\"keyword\">this</span>.configLocation.getInputStream(), <span class=\"keyword\">null</span>,</div><div class=\"line\">                    <span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">            configuration = xmlConfigBuilder.getConfiguration();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                logger.debug(<span class=\"string\">\"Property 'configLocation' not specified, using default MyBatis Configuration\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            configuration = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">            configuration.setVariables(<span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectFactory(<span class=\"keyword\">this</span>.objectFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectWrapperFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectWrapperFactory(<span class=\"keyword\">this</span>.objectWrapperFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeAliasesPackage)) &#123;</div><div class=\"line\">            String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeAliasesPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeAliasPackageArray) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    configuration.getTypeAliasRegistry().registerAliases(packageToScan,</div><div class=\"line\">                            typeAliasesSuperType == <span class=\"keyword\">null</span> ? Object.class : typeAliasesSuperType);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                    logger.error(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem end</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeAliases)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Class typeAlias : <span class=\"keyword\">this</span>.typeAliases) &#123;</div><div class=\"line\">                configuration.getTypeAliasRegistry().registerAlias(typeAlias);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type alias: '\"</span> + typeAlias + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.plugins)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Interceptor plugin : <span class=\"keyword\">this</span>.plugins) &#123;</div><div class=\"line\">                configuration.addInterceptor(plugin);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered plugin: '\"</span> + plugin + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeHandlersPackage)) &#123;</div><div class=\"line\">            String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeHandlersPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeHandlersPackageArray) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(packageToScan);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for type handlers\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeHandlers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (TypeHandler typeHandler : <span class=\"keyword\">this</span>.typeHandlers) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(typeHandler);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type handler: '\"</span> + typeHandler + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlConfigBuilder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlConfigBuilder.parse();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled())</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed configuration file: '\"</span> + <span class=\"keyword\">this</span>.configLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse config resource: \"</span> + <span class=\"keyword\">this</span>.configLocation, ex);</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                ErrorContext.instance().reset();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.transactionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.transactionFactory = <span class=\"keyword\">new</span> SpringManagedTransactionFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Environment environment = <span class=\"keyword\">new</span> Environment(<span class=\"keyword\">this</span>.environment, <span class=\"keyword\">this</span>.transactionFactory, <span class=\"keyword\">this</span>.dataSource);</div><div class=\"line\">        configuration.setEnvironment(environment);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.databaseIdProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                configuration.setDatabaseId(<span class=\"keyword\">this</span>.databaseIdProvider.getDatabaseId(<span class=\"keyword\">this</span>.dataSource));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed getting a databaseId\"</span>, e);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.mapperLocations)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Resource mapperLocation : <span class=\"keyword\">this</span>.mapperLocations) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mapperLocation == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(mapperLocation.getInputStream(),</div><div class=\"line\">                            configuration, mapperLocation.toString(), configuration.getSqlFragments());</div><div class=\"line\"></div><div class=\"line\">                    xmlMapperBuilder.parse();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                    logger.error(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed mapper file: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。</span></div><div class=\"line\">            <span class=\"keyword\">new</span> MapperRefresh(<span class=\"keyword\">this</span>.mapperLocations, configuration).run();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">            logger.debug(<span class=\"string\">\"Property 'mapperLocations' was not specified or no matching resources found\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder.build(configuration);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            afterPropertiesSet();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends SqlSessionFactory&gt; getObjectType() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span> ? SqlSessionFactory.class : <span class=\"keyword\">this</span>.sqlSessionFactory.getClass();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.failFast) &amp;&amp; ((event <span class=\"keyword\">instanceof</span> ContextRefreshedEvent))) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sqlSessionFactory.getConfiguration().getMappedStatementNames();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。<strong>重新部署当前项目</strong> Servers &gt; Tomcat 8.x &gt; 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。</p>\n</li>\n<li><p>去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"/><br><br></div>\n</li>\n<li><p>这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用<a href=\"http://pan.baidu.com/s/1skKW2st\"><em>jd-gui.exe(一款JAVA反编译工具)</em></a>比较是不是和上面写的代码对应！！！！</p>\n<p><strong>检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件</strong>。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"/><br><br></div>\n\n<p>​</p>\n<h1 id=\"创建mybatis-refresh-properties文件\"><a href=\"#创建mybatis-refresh-properties文件\" class=\"headerlink\" title=\"创建mybatis-refresh.properties文件\"></a>创建mybatis-refresh.properties文件</h1><p>一切准备就绪，还剩下最后一个属性文件， 创建<strong>mybatis-refresh.properties</strong>文件，记得把文件格式改成<strong>UTF-8</strong>。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"/><br><br></div>\n\n<p><strong>mybatis-refresh.properties文件内容为：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#是否开启刷新线程</div><div class=\"line\">enabled=true</div><div class=\"line\">#延迟启动刷新程序的秒数</div><div class=\"line\">delaySeconds=60  </div><div class=\"line\">#刷新扫描间隔的时长秒数</div><div class=\"line\">sleepSeconds=3</div><div class=\"line\">#扫描Mapper文件的资源路径</div><div class=\"line\">mappingPath=mapper</div></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ol>\n<li><p>删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。</p>\n</li>\n<li><p>启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！<strong>这样就不用重启项目，也能加载到你修改的mapper.xml文件了</strong> 。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"/><br><br></div>\n\n</li>\n</ol>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>注意各个文件的位置和名称。</li>\n<li>注意<strong>MapperRefresh.java</strong>文件中<strong>mybatis-refresh.properties</strong>的路径。</li>\n<li>注意用jd-gui.exe<strong>检查编译后的SqlSessionFactoryBean.class文件</strong>。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>"},{"title":"Spring之动态代理","date":"2018-04-02T01:55:03.000Z","_content":"\n# 引言\n\nSpring主要有两大思想，一个是AOP，一个是IOC。对于Spring的核心AOP来说，动态代理机制是其核心，想要明白AOP原理，一定要了解动态代理机制。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/proxy-index.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n# 代理模式\n\n> 给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即操作者不直接操控原对象，而是通过代理对象简介地操控原对象。\n\n## 实现\n\n代理模式分为静态代理和动态代理：\n\n- 静态代理：代理类是在编译时就实现好。也就是说 Java 编译完成后代理类是一个实际的 class 文件。\n- 动态代理：动态代理类的字节码是在程序运行时由Java反射机制动态生成。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。\n\n# Spring静态代理\n\n> 由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。\n\n静态代理之前已经说过 [***Spring-AOP两种配置方式***](http://rainbowhorse.site/2017/09/09/Spring-AOP%E4%B8%A4%E7%A7%8D%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/)\n\n# Spring动态代理\n\n## JDK动态代理(对有实现接口的对象做代理)\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/yuanli.png\" algin=\"center\"/></div>\n\n### 实现方式说明\n\nJDK动态代理中 需要了解的两个重要的类或接口 [**InvocationHandler** 和 **Proxy**]\n\n1. InvocationHandler接口\n\n```java\npublic interface InvocationHandler {\n    // 参数说明：\n    // Object proxy：指被代理的对象\n    // Method method：所要调用被代理对象的某个方法的Method对象\n    // Object[] args：被代理对象某个方法调用时所需要的参数\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;   \n} \n```\n\n可以将InvocationHandler接口的子类想象成一个代理的最终操作类。\n\n说明：**每一个动态代理对象都必须要实现InvocationHandler这个接口**，并且每个代理类（Proxy）的实例都关联到了一个handle，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为InvocationHandler这个接口的invoke方法来进行调用。同时在invoke的方法里，可以对被代理对象的方法调用做增强处理(如添加事务、日志、权限认证等操作)。\n\n2. Proxy类\n\nProxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，该类常用的调用方法为**newProxyInstance**\n\n<div align=center><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/interfere.png\" algin=\"center\"/></div>\n\nnewProxyInstance方法参数说明如下：\n\n- ClassLoader loader：类加载器，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n- Class<?>[] interfaces：得到被代理类全部的接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口，这样我就能调用这组接口中的方法了\n- InvocationHandler h：得到InvocationHandler接口的子类实例\n\n### 实现实例\n\n一、首先定义了一个Subject类型的接口：Subject.java\n\n```java\npublic interface Subject {\n\t\n\t// 学习\n\tvoid study();\n\t\n\t// 说话\n\tString say(String words);\n}\n```\n\n二、接着定义一个接口的实现类，这个类就是我们示例中的被代理对象：RealSubject.java\n\n```java\n/**\n * 被代理类\n * ClassName: RealSubject \n * @author rainbowhorse\n */\npublic class RealSubject implements Subject {\n\n\t@Override\n\tpublic void study() {\n\t\tSystem.out.println(\"I am study now.\");\n\t}\n\n\t@Override\n\tpublic String say(String words) {\n\t\treturn \"I say \" + words;\n\t}\n}\n```\n\n三、定义一个动态代理类（必须要实现 InvocationHandler 接口）：DynamicProxy.java\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\n\n/**\n * JDK动态代理类\n * ClassName: DynamicProxy \n * @author rainbowhorse\n */\npublic class DynamicProxy implements InvocationHandler {\n\t// 这个就是要代理的真实对象\n\tprivate Object subject;\n\n\t// 构造方法，给要代理的真实对象赋初值\n\tpublic DynamicProxy(Object subject) {\n\t\tthis.subject = subject;\n\t}\n\n\t@Override\n\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t// 在代理真实对象前可以添加一些自己的操作\n\t\tSystem.out.println(\"before method\");\n\n\t\tSystem.out.println(\"Method:\" + method);\n\n\t\t// 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n\t\tObject invoke = method.invoke(subject, args);\n\n\t\t// 在代理真实对象后也可以添加一些自己的操作\n\t\tSystem.out.println(\"after method\");\n\n\t\treturn invoke;\n\t}\n}\n```\n\n四、代理测试类：Client.java\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Proxy;\n\npublic class Client {\n\n\tpublic static void main(String[] args) {\n\t\t// 要代理的真实对象\n\t\tSubject realSubject = new RealSubject();\n\n\t\t// 要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n\t\tInvocationHandler handler = new DynamicProxy(realSubject);\n\n\t\t/*\n\t\t * 通过Proxy的newProxyInstance方法来动态创建我们的代理对象\n\t\t * 参数一：这里使用handler这个类的ClassLoader对象来加载代理对象\n\t\t * 参数二：这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样就能调用这组接口中的方法了\n\t\t * 参数三：这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n\t\t */\n\t\tSubject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(),\n\t\t\t\trealSubject.getClass().getInterfaces(), handler);\n\n\t\tSystem.out.println(subject.getClass().getName());\n\t\tsubject.study();\n\t\tSystem.out.println();\n\t\t\n\t\tString string = subject.say(\"Hello World.\");\n\t\tSystem.out.println(string);\n\t}\n}\n```\n\n运行->控制台输出结果如下\n\n<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/JDKProxy.png\" algin=\"center\"/></div>\n\n## CGLib动态代理[对没有实现接口的普通类做代理]\n\n### 说明\n\n#### 概述\n\n CGLib（Code Generation Library）是一个优秀的动态代理框架，它的底层使用ASM（JAVA字节码处理框架）在内存中动态的生成被代理类的子类。使用CGLib即使被代理类没有实现任何接口也可以实现动态代理功能。但是不能对final修饰的类进行代理。\n\n#### 原理\n\n  通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用。**JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。**\n\n### 实现实例\n\n一、定义一个没有实现接口的代理委托类：CGLibRealSubject.java\n\n```java\n/**\n * 没有实现接口的代理委托类 \n * ClassName: CGLibRealSubject \n * @author rainbowhorse\n */\npublic class CGLibRealSubject {\n\t\n\tpublic void study() {\n\t\tSystem.out.println(\"I am study now.\");\n\t}\n\n\tpublic String say(String words) {\n\t\treturn \"I say \" + words;\n\t}\n}\n```\n\n二、定义一个CGLib动态代理类: CGLibDynamicProxy.java\n\n```java\nimport java.lang.reflect.Method;\nimport net.sf.cglib.proxy.Enhancer;\nimport net.sf.cglib.proxy.MethodInterceptor;\nimport net.sf.cglib.proxy.MethodProxy;\n\npublic class CGLibDynamicProxy implements MethodInterceptor {\n\n\tprivate Object target;\n\n\t/**\n\t * 创建代理对象\n\t * \n\t * @param target\n\t *            被代理的对象\n\t * @return\n\t */\n\tpublic Object getProxyInstance(Object target) {\n\t\tthis.target = target;\n\t\t// 声明增强类实例\n\t\tEnhancer enhancer = new Enhancer();\n\t\t// 设置被代理类字节码，CGLIB根据字节码生成被代理类的子类\n\t\tenhancer.setSuperclass(this.target.getClass());\n\t\t// 设置要代理的拦截器，回调函数，即一个方法拦截 new MethodInterceptor()\n\t\tenhancer.setCallback(this);\n\t\t// 创建代理对象 实例\n\t\treturn enhancer.create();\n\t}\n\n\t@Override\n\tpublic Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n\n\t\t// 在代理真实对象操作前 我们可以添加一些自己的操作\n\t\tSystem.out.println(\"before method\");\n\n\t\tObject object = proxy.invokeSuper(obj, args);\n\n\t\t// 在代理真实对象操作后 我们也可以添加一些自己的操作\n\t\tSystem.out.println(\"after method\");\n\n\t\treturn object;\n\t}\n}\n```\n\n三、创建测试客户端类：CGLibClient.java\n\n```java\n/**\n *  CGLib动态代理测试类\n * ClassName: CGLibClient \n * @author rainbowhorse\n */\npublic class CGLibClient {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tCGLibDynamicProxy cglib = new CGLibDynamicProxy();\n\t\tCGLibRealSubject realSubject = (CGLibRealSubject) cglib.getProxyInstance(new CGLibRealSubject());\n\t\t\n\t\trealSubject.study();\n\t\tSystem.out.println();\n\t\t\n\t\tSystem.out.println(realSubject.say(\"Hello World.\"));\n\t}\n}\n```\n\n运行->控制台输出结果如下\n\n<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/cglibResult.png\" algin=\"center\"/></div>\n\n# 总结\n\nSpirng的AOP的动态代理实现机制有两种，分别是:\n\n**1）JDK动态代理**\n\n**具体实现原理：**\n\n1. 通过实现InvocationHandlet接口创建自己的调用处理器\n2. 通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理\n3. 通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型\n4. 通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入\n\n**JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力**\n\n**Spring通过java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。**\n\n**2）CGLib动态代理**\n\n**CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程。**\n\n## 对比\n\n- JDK动态代理是面向接口，在创建代理实现类时比CGLib要快，创建代理速度快。\n\n\n- CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么会失败），在创建代理这一块没有JDK动态代理快，但是运行速度比JDK动态代理要快。\n\n## 注意\n\n- 如果要被代理的对象是个**实现类**，那么Spring会使用**JDK动态代理**来完成操作（**Spirng默认采用JDK动态代理实现机制**）\n\n\n- 如果要被代理的对象**不是个实现类**，那么Spring会**强制使用CGLib来实现动态代理**。\n\n## Spring中配置动态代理方式\n\n通过配置Spring的中**<aop:config>**标签来显示的指定使用动态代理机制 **proxy-target-class=true表示使用CGLib代理，如果为false就是默认使用JDK动态代理**。","source":"_posts/Spring之动态代理.md","raw":"---\ntitle: Spring之动态代理\ndate: 2018-04-02 09:55:03\ntags: [java,spring]\ncategories: technology\n---\n\n# 引言\n\nSpring主要有两大思想，一个是AOP，一个是IOC。对于Spring的核心AOP来说，动态代理机制是其核心，想要明白AOP原理，一定要了解动态代理机制。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/proxy-index.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n# 代理模式\n\n> 给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即操作者不直接操控原对象，而是通过代理对象简介地操控原对象。\n\n## 实现\n\n代理模式分为静态代理和动态代理：\n\n- 静态代理：代理类是在编译时就实现好。也就是说 Java 编译完成后代理类是一个实际的 class 文件。\n- 动态代理：动态代理类的字节码是在程序运行时由Java反射机制动态生成。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。\n\n# Spring静态代理\n\n> 由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。\n\n静态代理之前已经说过 [***Spring-AOP两种配置方式***](http://rainbowhorse.site/2017/09/09/Spring-AOP%E4%B8%A4%E7%A7%8D%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/)\n\n# Spring动态代理\n\n## JDK动态代理(对有实现接口的对象做代理)\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/yuanli.png\" algin=\"center\"/></div>\n\n### 实现方式说明\n\nJDK动态代理中 需要了解的两个重要的类或接口 [**InvocationHandler** 和 **Proxy**]\n\n1. InvocationHandler接口\n\n```java\npublic interface InvocationHandler {\n    // 参数说明：\n    // Object proxy：指被代理的对象\n    // Method method：所要调用被代理对象的某个方法的Method对象\n    // Object[] args：被代理对象某个方法调用时所需要的参数\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable;   \n} \n```\n\n可以将InvocationHandler接口的子类想象成一个代理的最终操作类。\n\n说明：**每一个动态代理对象都必须要实现InvocationHandler这个接口**，并且每个代理类（Proxy）的实例都关联到了一个handle，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为InvocationHandler这个接口的invoke方法来进行调用。同时在invoke的方法里，可以对被代理对象的方法调用做增强处理(如添加事务、日志、权限认证等操作)。\n\n2. Proxy类\n\nProxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，该类常用的调用方法为**newProxyInstance**\n\n<div align=center><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/interfere.png\" algin=\"center\"/></div>\n\nnewProxyInstance方法参数说明如下：\n\n- ClassLoader loader：类加载器，定义了由哪个ClassLoader对象来对生成的代理对象进行加载\n- Class<?>[] interfaces：得到被代理类全部的接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口，这样我就能调用这组接口中的方法了\n- InvocationHandler h：得到InvocationHandler接口的子类实例\n\n### 实现实例\n\n一、首先定义了一个Subject类型的接口：Subject.java\n\n```java\npublic interface Subject {\n\t\n\t// 学习\n\tvoid study();\n\t\n\t// 说话\n\tString say(String words);\n}\n```\n\n二、接着定义一个接口的实现类，这个类就是我们示例中的被代理对象：RealSubject.java\n\n```java\n/**\n * 被代理类\n * ClassName: RealSubject \n * @author rainbowhorse\n */\npublic class RealSubject implements Subject {\n\n\t@Override\n\tpublic void study() {\n\t\tSystem.out.println(\"I am study now.\");\n\t}\n\n\t@Override\n\tpublic String say(String words) {\n\t\treturn \"I say \" + words;\n\t}\n}\n```\n\n三、定义一个动态代理类（必须要实现 InvocationHandler 接口）：DynamicProxy.java\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\n\n/**\n * JDK动态代理类\n * ClassName: DynamicProxy \n * @author rainbowhorse\n */\npublic class DynamicProxy implements InvocationHandler {\n\t// 这个就是要代理的真实对象\n\tprivate Object subject;\n\n\t// 构造方法，给要代理的真实对象赋初值\n\tpublic DynamicProxy(Object subject) {\n\t\tthis.subject = subject;\n\t}\n\n\t@Override\n\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t// 在代理真实对象前可以添加一些自己的操作\n\t\tSystem.out.println(\"before method\");\n\n\t\tSystem.out.println(\"Method:\" + method);\n\n\t\t// 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用\n\t\tObject invoke = method.invoke(subject, args);\n\n\t\t// 在代理真实对象后也可以添加一些自己的操作\n\t\tSystem.out.println(\"after method\");\n\n\t\treturn invoke;\n\t}\n}\n```\n\n四、代理测试类：Client.java\n\n```java\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Proxy;\n\npublic class Client {\n\n\tpublic static void main(String[] args) {\n\t\t// 要代理的真实对象\n\t\tSubject realSubject = new RealSubject();\n\n\t\t// 要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的\n\t\tInvocationHandler handler = new DynamicProxy(realSubject);\n\n\t\t/*\n\t\t * 通过Proxy的newProxyInstance方法来动态创建我们的代理对象\n\t\t * 参数一：这里使用handler这个类的ClassLoader对象来加载代理对象\n\t\t * 参数二：这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样就能调用这组接口中的方法了\n\t\t * 参数三：这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上\n\t\t */\n\t\tSubject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(),\n\t\t\t\trealSubject.getClass().getInterfaces(), handler);\n\n\t\tSystem.out.println(subject.getClass().getName());\n\t\tsubject.study();\n\t\tSystem.out.println();\n\t\t\n\t\tString string = subject.say(\"Hello World.\");\n\t\tSystem.out.println(string);\n\t}\n}\n```\n\n运行->控制台输出结果如下\n\n<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/JDKProxy.png\" algin=\"center\"/></div>\n\n## CGLib动态代理[对没有实现接口的普通类做代理]\n\n### 说明\n\n#### 概述\n\n CGLib（Code Generation Library）是一个优秀的动态代理框架，它的底层使用ASM（JAVA字节码处理框架）在内存中动态的生成被代理类的子类。使用CGLib即使被代理类没有实现任何接口也可以实现动态代理功能。但是不能对final修饰的类进行代理。\n\n#### 原理\n\n  通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用。**JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。**\n\n### 实现实例\n\n一、定义一个没有实现接口的代理委托类：CGLibRealSubject.java\n\n```java\n/**\n * 没有实现接口的代理委托类 \n * ClassName: CGLibRealSubject \n * @author rainbowhorse\n */\npublic class CGLibRealSubject {\n\t\n\tpublic void study() {\n\t\tSystem.out.println(\"I am study now.\");\n\t}\n\n\tpublic String say(String words) {\n\t\treturn \"I say \" + words;\n\t}\n}\n```\n\n二、定义一个CGLib动态代理类: CGLibDynamicProxy.java\n\n```java\nimport java.lang.reflect.Method;\nimport net.sf.cglib.proxy.Enhancer;\nimport net.sf.cglib.proxy.MethodInterceptor;\nimport net.sf.cglib.proxy.MethodProxy;\n\npublic class CGLibDynamicProxy implements MethodInterceptor {\n\n\tprivate Object target;\n\n\t/**\n\t * 创建代理对象\n\t * \n\t * @param target\n\t *            被代理的对象\n\t * @return\n\t */\n\tpublic Object getProxyInstance(Object target) {\n\t\tthis.target = target;\n\t\t// 声明增强类实例\n\t\tEnhancer enhancer = new Enhancer();\n\t\t// 设置被代理类字节码，CGLIB根据字节码生成被代理类的子类\n\t\tenhancer.setSuperclass(this.target.getClass());\n\t\t// 设置要代理的拦截器，回调函数，即一个方法拦截 new MethodInterceptor()\n\t\tenhancer.setCallback(this);\n\t\t// 创建代理对象 实例\n\t\treturn enhancer.create();\n\t}\n\n\t@Override\n\tpublic Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {\n\n\t\t// 在代理真实对象操作前 我们可以添加一些自己的操作\n\t\tSystem.out.println(\"before method\");\n\n\t\tObject object = proxy.invokeSuper(obj, args);\n\n\t\t// 在代理真实对象操作后 我们也可以添加一些自己的操作\n\t\tSystem.out.println(\"after method\");\n\n\t\treturn object;\n\t}\n}\n```\n\n三、创建测试客户端类：CGLibClient.java\n\n```java\n/**\n *  CGLib动态代理测试类\n * ClassName: CGLibClient \n * @author rainbowhorse\n */\npublic class CGLibClient {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tCGLibDynamicProxy cglib = new CGLibDynamicProxy();\n\t\tCGLibRealSubject realSubject = (CGLibRealSubject) cglib.getProxyInstance(new CGLibRealSubject());\n\t\t\n\t\trealSubject.study();\n\t\tSystem.out.println();\n\t\t\n\t\tSystem.out.println(realSubject.say(\"Hello World.\"));\n\t}\n}\n```\n\n运行->控制台输出结果如下\n\n<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/cglibResult.png\" algin=\"center\"/></div>\n\n# 总结\n\nSpirng的AOP的动态代理实现机制有两种，分别是:\n\n**1）JDK动态代理**\n\n**具体实现原理：**\n\n1. 通过实现InvocationHandlet接口创建自己的调用处理器\n2. 通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理\n3. 通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型\n4. 通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入\n\n**JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力**\n\n**Spring通过java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。**\n\n**2）CGLib动态代理**\n\n**CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程。**\n\n## 对比\n\n- JDK动态代理是面向接口，在创建代理实现类时比CGLib要快，创建代理速度快。\n\n\n- CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么会失败），在创建代理这一块没有JDK动态代理快，但是运行速度比JDK动态代理要快。\n\n## 注意\n\n- 如果要被代理的对象是个**实现类**，那么Spring会使用**JDK动态代理**来完成操作（**Spirng默认采用JDK动态代理实现机制**）\n\n\n- 如果要被代理的对象**不是个实现类**，那么Spring会**强制使用CGLib来实现动态代理**。\n\n## Spring中配置动态代理方式\n\n通过配置Spring的中**<aop:config>**标签来显示的指定使用动态代理机制 **proxy-target-class=true表示使用CGLib代理，如果为false就是默认使用JDK动态代理**。","slug":"Spring之动态代理","published":1,"updated":"2018-04-03T01:46:16.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u2900203gfkcm39j5s7","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Spring主要有两大思想，一个是AOP，一个是IOC。对于Spring的核心AOP来说，动态代理机制是其核心，想要明白AOP原理，一定要了解动态代理机制。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/proxy-index.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><blockquote>\n<p>给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即操作者不直接操控原对象，而是通过代理对象简介地操控原对象。</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>代理模式分为静态代理和动态代理：</p>\n<ul>\n<li>静态代理：代理类是在编译时就实现好。也就是说 Java 编译完成后代理类是一个实际的 class 文件。</li>\n<li>动态代理：动态代理类的字节码是在程序运行时由Java反射机制动态生成。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。</li>\n</ul>\n<h1 id=\"Spring静态代理\"><a href=\"#Spring静态代理\" class=\"headerlink\" title=\"Spring静态代理\"></a>Spring静态代理</h1><blockquote>\n<p>由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</p>\n</blockquote>\n<p>静态代理之前已经说过 <a href=\"http://rainbowhorse.site/2017/09/09/Spring-AOP%E4%B8%A4%E7%A7%8D%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/\" target=\"_blank\" rel=\"external\"><strong><em>Spring-AOP两种配置方式</em></strong></a></p>\n<h1 id=\"Spring动态代理\"><a href=\"#Spring动态代理\" class=\"headerlink\" title=\"Spring动态代理\"></a>Spring动态代理</h1><h2 id=\"JDK动态代理-对有实现接口的对象做代理\"><a href=\"#JDK动态代理-对有实现接口的对象做代理\" class=\"headerlink\" title=\"JDK动态代理(对有实现接口的对象做代理)\"></a>JDK动态代理(对有实现接口的对象做代理)</h2><div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/yuanli.png\" algin=\"center\"></div>\n\n<h3 id=\"实现方式说明\"><a href=\"#实现方式说明\" class=\"headerlink\" title=\"实现方式说明\"></a>实现方式说明</h3><p>JDK动态代理中 需要了解的两个重要的类或接口 [<strong>InvocationHandler</strong> 和 <strong>Proxy</strong>]</p>\n<ol>\n<li>InvocationHandler接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 参数说明：</span></div><div class=\"line\">    <span class=\"comment\">// Object proxy：指被代理的对象</span></div><div class=\"line\">    <span class=\"comment\">// Method method：所要调用被代理对象的某个方法的Method对象</span></div><div class=\"line\">    <span class=\"comment\">// Object[] args：被代理对象某个方法调用时所需要的参数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span>;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以将InvocationHandler接口的子类想象成一个代理的最终操作类。</p>\n<p>说明：<strong>每一个动态代理对象都必须要实现InvocationHandler这个接口</strong>，并且每个代理类（Proxy）的实例都关联到了一个handle，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为InvocationHandler这个接口的invoke方法来进行调用。同时在invoke的方法里，可以对被代理对象的方法调用做增强处理(如添加事务、日志、权限认证等操作)。</p>\n<ol>\n<li>Proxy类</li>\n</ol>\n<p>Proxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，该类常用的调用方法为<strong>newProxyInstance</strong></p>\n<div align=\"center\"><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/interfere.png\" algin=\"center\"></div>\n\n<p>newProxyInstance方法参数说明如下：</p>\n<ul>\n<li>ClassLoader loader：类加载器，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</li>\n<li>Class&lt;?&gt;[] interfaces：得到被代理类全部的接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口，这样我就能调用这组接口中的方法了</li>\n<li>InvocationHandler h：得到InvocationHandler接口的子类实例</li>\n</ul>\n<h3 id=\"实现实例\"><a href=\"#实现实例\" class=\"headerlink\" title=\"实现实例\"></a>实现实例</h3><p>一、首先定义了一个Subject类型的接口：Subject.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 学习</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 说话</span></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">say</span><span class=\"params\">(String words)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>二、接着定义一个接口的实现类，这个类就是我们示例中的被代理对象：RealSubject.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 被代理类</div><div class=\"line\"> * ClassName: RealSubject </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am study now.\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say</span><span class=\"params\">(String words)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"I say \"</span> + words;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>三、定义一个动态代理类（必须要实现 InvocationHandler 接口）：DynamicProxy.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * JDK动态代理类</div><div class=\"line\"> * ClassName: DynamicProxy </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 这个就是要代理的真实对象</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object subject;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 构造方法，给要代理的真实对象赋初值</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxy</span><span class=\"params\">(Object subject)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象前可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"before method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Method:\"</span> + method);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span></div><div class=\"line\">\t\tObject invoke = method.invoke(subject, args);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象后也可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"after method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> invoke;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>四、代理测试类：Client.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 要代理的真实对象</span></div><div class=\"line\">\t\tSubject realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span></div><div class=\"line\">\t\tInvocationHandler handler = <span class=\"keyword\">new</span> DynamicProxy(realSubject);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/*</span></div><div class=\"line\">\t\t * 通过Proxy的newProxyInstance方法来动态创建我们的代理对象</div><div class=\"line\">\t\t * 参数一：这里使用handler这个类的ClassLoader对象来加载代理对象</div><div class=\"line\">\t\t * 参数二：这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样就能调用这组接口中的方法了</div><div class=\"line\">\t\t * 参数三：这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</div><div class=\"line\">\t\t */</div><div class=\"line\">\t\tSubject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(),</div><div class=\"line\">\t\t\t\trealSubject.getClass().getInterfaces(), handler);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(subject.getClass().getName());</div><div class=\"line\">\t\tsubject.study();</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString string = subject.say(<span class=\"string\">\"Hello World.\"</span>);</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行-&gt;控制台输出结果如下</p>\n<div align=\"center\"><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/JDKProxy.png\" algin=\"center\"></div>\n\n<h2 id=\"CGLib动态代理-对没有实现接口的普通类做代理\"><a href=\"#CGLib动态代理-对没有实现接口的普通类做代理\" class=\"headerlink\" title=\"CGLib动态代理[对没有实现接口的普通类做代理]\"></a>CGLib动态代理[对没有实现接口的普通类做代理]</h2><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p> CGLib（Code Generation Library）是一个优秀的动态代理框架，它的底层使用ASM（JAVA字节码处理框架）在内存中动态的生成被代理类的子类。使用CGLib即使被代理类没有实现任何接口也可以实现动态代理功能。但是不能对final修饰的类进行代理。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>  通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用。<strong>JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。</strong></p>\n<h3 id=\"实现实例-1\"><a href=\"#实现实例-1\" class=\"headerlink\" title=\"实现实例\"></a>实现实例</h3><p>一、定义一个没有实现接口的代理委托类：CGLibRealSubject.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 没有实现接口的代理委托类 </div><div class=\"line\"> * ClassName: CGLibRealSubject </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibRealSubject</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am study now.\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say</span><span class=\"params\">(String words)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"I say \"</span> + words;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>二、定义一个CGLib动态代理类: CGLibDynamicProxy.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</div><div class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibDynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object target;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 创建代理对象</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> target</div><div class=\"line\">\t *            被代理的对象</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxyInstance</span><span class=\"params\">(Object target)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">\t\t<span class=\"comment\">// 声明增强类实例</span></div><div class=\"line\">\t\tEnhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</div><div class=\"line\">\t\t<span class=\"comment\">// 设置被代理类字节码，CGLIB根据字节码生成被代理类的子类</span></div><div class=\"line\">\t\tenhancer.setSuperclass(<span class=\"keyword\">this</span>.target.getClass());</div><div class=\"line\">\t\t<span class=\"comment\">// 设置要代理的拦截器，回调函数，即一个方法拦截 new MethodInterceptor()</span></div><div class=\"line\">\t\tenhancer.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 创建代理对象 实例</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> enhancer.create();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象操作前 我们可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"before method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tObject object = proxy.invokeSuper(obj, args);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象操作后 我们也可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"after method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> object;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>三、创建测试客户端类：CGLibClient.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  CGLib动态代理测试类</div><div class=\"line\"> * ClassName: CGLibClient </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tCGLibDynamicProxy cglib = <span class=\"keyword\">new</span> CGLibDynamicProxy();</div><div class=\"line\">\t\tCGLibRealSubject realSubject = (CGLibRealSubject) cglib.getProxyInstance(<span class=\"keyword\">new</span> CGLibRealSubject());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\trealSubject.study();</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(realSubject.say(<span class=\"string\">\"Hello World.\"</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行-&gt;控制台输出结果如下</p>\n<div align=\"center\"><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/cglibResult.png\" algin=\"center\"></div>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spirng的AOP的动态代理实现机制有两种，分别是:</p>\n<p><strong>1）JDK动态代理</strong></p>\n<p><strong>具体实现原理：</strong></p>\n<ol>\n<li>通过实现InvocationHandlet接口创建自己的调用处理器</li>\n<li>通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理</li>\n<li>通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型</li>\n<li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入</li>\n</ol>\n<p><strong>JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力</strong></p>\n<p><strong>Spring通过java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。</strong></p>\n<p><strong>2）CGLib动态代理</strong></p>\n<p><strong>CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程。</strong></p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><ul>\n<li>JDK动态代理是面向接口，在创建代理实现类时比CGLib要快，创建代理速度快。</li>\n</ul>\n<ul>\n<li>CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么会失败），在创建代理这一块没有JDK动态代理快，但是运行速度比JDK动态代理要快。</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>如果要被代理的对象是个<strong>实现类</strong>，那么Spring会使用<strong>JDK动态代理</strong>来完成操作（<strong>Spirng默认采用JDK动态代理实现机制</strong>）</li>\n</ul>\n<ul>\n<li>如果要被代理的对象<strong>不是个实现类</strong>，那么Spring会<strong>强制使用CGLib来实现动态代理</strong>。</li>\n</ul>\n<h2 id=\"Spring中配置动态代理方式\"><a href=\"#Spring中配置动态代理方式\" class=\"headerlink\" title=\"Spring中配置动态代理方式\"></a>Spring中配置动态代理方式</h2><p>通过配置Spring的中<strong><aop:config></aop:config></strong>标签来显示的指定使用动态代理机制 <strong>proxy-target-class=true表示使用CGLib代理，如果为false就是默认使用JDK动态代理</strong>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Spring主要有两大思想，一个是AOP，一个是IOC。对于Spring的核心AOP来说，动态代理机制是其核心，想要明白AOP原理，一定要了解动态代理机制。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/proxy-index.jpg\" algin=\"center\"/></div>","more":"<h1 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h1><blockquote>\n<p>给某个对象提供一个代理对象，并由代理对象控制对于原对象的访问，即操作者不直接操控原对象，而是通过代理对象简介地操控原对象。</p>\n</blockquote>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>代理模式分为静态代理和动态代理：</p>\n<ul>\n<li>静态代理：代理类是在编译时就实现好。也就是说 Java 编译完成后代理类是一个实际的 class 文件。</li>\n<li>动态代理：动态代理类的字节码是在程序运行时由Java反射机制动态生成。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到JVM中。</li>\n</ul>\n<h1 id=\"Spring静态代理\"><a href=\"#Spring静态代理\" class=\"headerlink\" title=\"Spring静态代理\"></a>Spring静态代理</h1><blockquote>\n<p>由程序员创建或工具生成代理类的源码，再编译代理类。所谓静态也就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。</p>\n</blockquote>\n<p>静态代理之前已经说过 <a href=\"http://rainbowhorse.site/2017/09/09/Spring-AOP%E4%B8%A4%E7%A7%8D%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F/\"><strong><em>Spring-AOP两种配置方式</em></strong></a></p>\n<h1 id=\"Spring动态代理\"><a href=\"#Spring动态代理\" class=\"headerlink\" title=\"Spring动态代理\"></a>Spring动态代理</h1><h2 id=\"JDK动态代理-对有实现接口的对象做代理\"><a href=\"#JDK动态代理-对有实现接口的对象做代理\" class=\"headerlink\" title=\"JDK动态代理(对有实现接口的对象做代理)\"></a>JDK动态代理(对有实现接口的对象做代理)</h2><div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/yuanli.png\" algin=\"center\"/></div>\n\n<h3 id=\"实现方式说明\"><a href=\"#实现方式说明\" class=\"headerlink\" title=\"实现方式说明\"></a>实现方式说明</h3><p>JDK动态代理中 需要了解的两个重要的类或接口 [<strong>InvocationHandler</strong> 和 <strong>Proxy</strong>]</p>\n<ol>\n<li>InvocationHandler接口</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 参数说明：</span></div><div class=\"line\">    <span class=\"comment\">// Object proxy：指被代理的对象</span></div><div class=\"line\">    <span class=\"comment\">// Method method：所要调用被代理对象的某个方法的Method对象</span></div><div class=\"line\">    <span class=\"comment\">// Object[] args：被代理对象某个方法调用时所需要的参数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable</span>;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以将InvocationHandler接口的子类想象成一个代理的最终操作类。</p>\n<p>说明：<strong>每一个动态代理对象都必须要实现InvocationHandler这个接口</strong>，并且每个代理类（Proxy）的实例都关联到了一个handle，当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为InvocationHandler这个接口的invoke方法来进行调用。同时在invoke的方法里，可以对被代理对象的方法调用做增强处理(如添加事务、日志、权限认证等操作)。</p>\n<ol>\n<li>Proxy类</li>\n</ol>\n<p>Proxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，该类常用的调用方法为<strong>newProxyInstance</strong></p>\n<div align=center><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/interfere.png\" algin=\"center\"/></div>\n\n<p>newProxyInstance方法参数说明如下：</p>\n<ul>\n<li>ClassLoader loader：类加载器，定义了由哪个ClassLoader对象来对生成的代理对象进行加载</li>\n<li>Class&lt;?&gt;[] interfaces：得到被代理类全部的接口，如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口，这样我就能调用这组接口中的方法了</li>\n<li>InvocationHandler h：得到InvocationHandler接口的子类实例</li>\n</ul>\n<h3 id=\"实现实例\"><a href=\"#实现实例\" class=\"headerlink\" title=\"实现实例\"></a>实现实例</h3><p>一、首先定义了一个Subject类型的接口：Subject.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 学习</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span></span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// 说话</span></div><div class=\"line\">\t<span class=\"function\">String <span class=\"title\">say</span><span class=\"params\">(String words)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>二、接着定义一个接口的实现类，这个类就是我们示例中的被代理对象：RealSubject.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 被代理类</div><div class=\"line\"> * ClassName: RealSubject </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealSubject</span> <span class=\"keyword\">implements</span> <span class=\"title\">Subject</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am study now.\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say</span><span class=\"params\">(String words)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"I say \"</span> + words;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>三、定义一个动态代理类（必须要实现 InvocationHandler 接口）：DynamicProxy.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * JDK动态代理类</div><div class=\"line\"> * ClassName: DynamicProxy </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 这个就是要代理的真实对象</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object subject;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 构造方法，给要代理的真实对象赋初值</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DynamicProxy</span><span class=\"params\">(Object subject)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.subject = subject;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象前可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"before method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Method:\"</span> + method);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 当代理对象调用真实对象的方法时，其会自动的跳转到代理对象关联的handler对象的invoke方法来进行调用</span></div><div class=\"line\">\t\tObject invoke = method.invoke(subject, args);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象后也可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"after method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> invoke;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>四、代理测试类：Client.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.InvocationHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Client</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 要代理的真实对象</span></div><div class=\"line\">\t\tSubject realSubject = <span class=\"keyword\">new</span> RealSubject();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span></div><div class=\"line\">\t\tInvocationHandler handler = <span class=\"keyword\">new</span> DynamicProxy(realSubject);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/*</div><div class=\"line\">\t\t * 通过Proxy的newProxyInstance方法来动态创建我们的代理对象</div><div class=\"line\">\t\t * 参数一：这里使用handler这个类的ClassLoader对象来加载代理对象</div><div class=\"line\">\t\t * 参数二：这里为代理对象提供的接口是真实对象所实行的接口，表示我要代理的是该真实对象，这样就能调用这组接口中的方法了</div><div class=\"line\">\t\t * 参数三：这里将这个代理对象关联到了上方的 InvocationHandler 这个对象上</div><div class=\"line\">\t\t */</span></div><div class=\"line\">\t\tSubject subject = (Subject) Proxy.newProxyInstance(handler.getClass().getClassLoader(),</div><div class=\"line\">\t\t\t\trealSubject.getClass().getInterfaces(), handler);</div><div class=\"line\"></div><div class=\"line\">\t\tSystem.out.println(subject.getClass().getName());</div><div class=\"line\">\t\tsubject.study();</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tString string = subject.say(<span class=\"string\">\"Hello World.\"</span>);</div><div class=\"line\">\t\tSystem.out.println(string);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行-&gt;控制台输出结果如下</p>\n<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/JDKProxy.png\" algin=\"center\"/></div>\n\n<h2 id=\"CGLib动态代理-对没有实现接口的普通类做代理\"><a href=\"#CGLib动态代理-对没有实现接口的普通类做代理\" class=\"headerlink\" title=\"CGLib动态代理[对没有实现接口的普通类做代理]\"></a>CGLib动态代理[对没有实现接口的普通类做代理]</h2><h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p> CGLib（Code Generation Library）是一个优秀的动态代理框架，它的底层使用ASM（JAVA字节码处理框架）在内存中动态的生成被代理类的子类。使用CGLib即使被代理类没有实现任何接口也可以实现动态代理功能。但是不能对final修饰的类进行代理。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>  通过字节码技术为一个类创建子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用。<strong>JDK动态代理与CGLib动态代理均是实现Spring AOP的基础。</strong></p>\n<h3 id=\"实现实例-1\"><a href=\"#实现实例-1\" class=\"headerlink\" title=\"实现实例\"></a>实现实例</h3><p>一、定义一个没有实现接口的代理委托类：CGLibRealSubject.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 没有实现接口的代理委托类 </div><div class=\"line\"> * ClassName: CGLibRealSubject </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibRealSubject</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"I am study now.\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say</span><span class=\"params\">(String words)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"I say \"</span> + words;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>二、定义一个CGLib动态代理类: CGLibDynamicProxy.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</div><div class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.Enhancer;</div><div class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibDynamicProxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">MethodInterceptor</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> Object target;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 创建代理对象</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> target</div><div class=\"line\">\t *            被代理的对象</div><div class=\"line\">\t * <span class=\"doctag\">@return</span></div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getProxyInstance</span><span class=\"params\">(Object target)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.target = target;</div><div class=\"line\">\t\t<span class=\"comment\">// 声明增强类实例</span></div><div class=\"line\">\t\tEnhancer enhancer = <span class=\"keyword\">new</span> Enhancer();</div><div class=\"line\">\t\t<span class=\"comment\">// 设置被代理类字节码，CGLIB根据字节码生成被代理类的子类</span></div><div class=\"line\">\t\tenhancer.setSuperclass(<span class=\"keyword\">this</span>.target.getClass());</div><div class=\"line\">\t\t<span class=\"comment\">// 设置要代理的拦截器，回调函数，即一个方法拦截 new MethodInterceptor()</span></div><div class=\"line\">\t\tenhancer.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">\t\t<span class=\"comment\">// 创建代理对象 实例</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> enhancer.create();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象操作前 我们可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"before method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tObject object = proxy.invokeSuper(obj, args);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 在代理真实对象操作后 我们也可以添加一些自己的操作</span></div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"after method\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> object;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>三、创建测试客户端类：CGLibClient.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  CGLib动态代理测试类</div><div class=\"line\"> * ClassName: CGLibClient </div><div class=\"line\"> * <span class=\"doctag\">@author</span> rainbowhorse</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CGLibClient</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tCGLibDynamicProxy cglib = <span class=\"keyword\">new</span> CGLibDynamicProxy();</div><div class=\"line\">\t\tCGLibRealSubject realSubject = (CGLibRealSubject) cglib.getProxyInstance(<span class=\"keyword\">new</span> CGLibRealSubject());</div><div class=\"line\">\t\t</div><div class=\"line\">\t\trealSubject.study();</div><div class=\"line\">\t\tSystem.out.println();</div><div class=\"line\">\t\t</div><div class=\"line\">\t\tSystem.out.println(realSubject.say(<span class=\"string\">\"Hello World.\"</span>));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行-&gt;控制台输出结果如下</p>\n<div align=center><img width=\"800\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-4/DynamicProxy/cglibResult.png\" algin=\"center\"/></div>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Spirng的AOP的动态代理实现机制有两种，分别是:</p>\n<p><strong>1）JDK动态代理</strong></p>\n<p><strong>具体实现原理：</strong></p>\n<ol>\n<li>通过实现InvocationHandlet接口创建自己的调用处理器</li>\n<li>通过为Proxy类指定ClassLoader对象和一组interface来创建动态代理</li>\n<li>通过反射机制获取动态代理类的构造函数，其唯一参数类型就是调用处理器接口类型</li>\n<li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数参入</li>\n</ol>\n<p><strong>JDK动态代理是面向接口的代理模式，如果被代理目标没有接口那么Spring也无能为力</strong></p>\n<p><strong>Spring通过java的反射机制生产被代理接口的新的匿名实现类，重写了其中AOP的增强方法。</strong></p>\n<p><strong>2）CGLib动态代理</strong></p>\n<p><strong>CGLib是一个强大、高性能的Code生产类库，可以实现运行期动态扩展java类，Spring在运行期间通过CGlib继承要被动态代理的类，重写父类的方法，实现AOP面向切面编程。</strong></p>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><ul>\n<li>JDK动态代理是面向接口，在创建代理实现类时比CGLib要快，创建代理速度快。</li>\n</ul>\n<ul>\n<li>CGLib动态代理是通过字节码底层继承要代理类来实现（如果被代理类被final关键字所修饰，那么会失败），在创建代理这一块没有JDK动态代理快，但是运行速度比JDK动态代理要快。</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>如果要被代理的对象是个<strong>实现类</strong>，那么Spring会使用<strong>JDK动态代理</strong>来完成操作（<strong>Spirng默认采用JDK动态代理实现机制</strong>）</li>\n</ul>\n<ul>\n<li>如果要被代理的对象<strong>不是个实现类</strong>，那么Spring会<strong>强制使用CGLib来实现动态代理</strong>。</li>\n</ul>\n<h2 id=\"Spring中配置动态代理方式\"><a href=\"#Spring中配置动态代理方式\" class=\"headerlink\" title=\"Spring中配置动态代理方式\"></a>Spring中配置动态代理方式</h2><p>通过配置Spring的中<strong><aop:config></strong>标签来显示的指定使用动态代理机制 <strong>proxy-target-class=true表示使用CGLib代理，如果为false就是默认使用JDK动态代理</strong>。</p>"},{"title":"Spring+webSocket","date":"2018-03-16T06:00:11.000Z","_content":"\n# 引言\n\nwebsocket 是 HTML5新增加特性之一，目的是浏览器与服务端建立全双工的通信方式，解决 HTTP请求-响应带来过多的资源消耗，同时对特殊场景应用提供了全新的实现方式，比如聊天、股票交易、游戏等对对实时性要求较高的行业领域。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/websocket-java.jpg\" algin=\"center\"/></div><!-- more -->\n\n# STOMP\n\nSTOMP(Simple Text-Orientated Messaging Protocol) 面向消息的简单文本协议。\n\nWebSocket是一个消息架构，不强制使用任何特定的消息协议，它依赖于应用层解释消息的含义；\n\n与处在应用层的HTTP不同，WebSocket处在TCP上非常薄的一层，会将字节流转换为文本/二进制消息，因此，对于实际应用来说，WebSocket的通信形式层级过低，因此，可以在 WebSocket 之上使用 STOMP协议，来为浏览器 和 server间的 通信增加适当的消息语义。\n\n如何理解 STOMP 与 WebSocket 的关系： \n1) HTTP协议解决了 web 浏览器发起请求以及 web 服务器响应请求的细节，假设 HTTP 协议 并不存在，只能使用 TCP 套接字来 编写 web 应用，你可能认为这是一件疯狂的事情； \n2) 直接使用 WebSocket（SockJS） 就很类似于 使用 TCP 套接字来编写 web 应用，因为没有高层协议，就需要我们定义应用间所发送消息的语义，还需要确保连接的两端都能遵循这些语义； \n3) 同 HTTP 在 TCP 套接字上添加请求-响应模型层一样，STOMP 在 WebSocket 之上提供了一个基于帧的线路格式层，用来定义消息语义；\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.jpg\" algin=\"center\"/></div>\n\n# Spring+websocket\n\n## 添加依赖\n\n需要添加spring-websocket和spring-messaging依赖，注意和spring-core的版本保持一致。\n\n```xml\n<!-- spring-websocket -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-websocket</artifactId>\n    <version>4.1.9.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-messaging</artifactId>\n    <version>4.1.9.RELEASE</version>\n</dependency>\n```\n\n## 服务端代码\n\n服务端的初始化，只需要两个类：**WebsocketConfig**（stomp节点配置）和**WebSocketController**。\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.simp.config.MessageBrokerRegistry;\nimport org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;\nimport org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n\n/**\n * 通过EnableWebSocketMessageBroker 开启使用STOMP协议来传输基于代理(message broker)的消息,此时浏览器支持使用@MessageMapping 就像支持@RequestMapping一样。\n */\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) { \n        //endPoint 注册协议节点,并映射指定的URl\n        //注册一个名字为\"endpointChat\" 的endpoint,并指定 SockJS协议，客户端就可以通过这个端点来进行连接；withSockJS作用是添加SockJS支持。\n        registry.addEndpoint(\"/endpointChat\").withSockJS();\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        //配置消息代理(message broker)，定义了两个客户端订阅地址的前缀信息，也就是客户端接收服务端发送消息的前缀信息\n        //点对点式增加一个/queue 消息代理\n        registry.enableSimpleBroker(\"/queue\", \"/topic\");\n        //定义了服务端接收地址的前缀，也即客户端给服务端发消息的地址前缀\n        //registry.setApplicationDestinationPrefixes(“/user”);\t\n    }\n}\n```\n\n**对以上代码分析：**\n\n- EnableWebSocketMessageBroker 注解表明： 这个配置类不仅配置了 WebSocket，还配置了基于代理的 STOMP 消息；\n- 它复写了 registerStompEndpoints() 方法：添加一个服务端点，来接收客户端的连接。将 “/endpointChat” 路径注册为 STOMP 端点。这个路径与之前发送和接收消息的目的路径有所不同， 这是一个端点，客户端在订阅或发布消息到目的地址前，要连接该端点，即用户发送请求 ：*URL=’/127.0.0.1:8080/endpointChat’* 与 STOMP server 进行连接，之后再转发到订阅URL；\n- 它复写了 configureMessageBroker() 方法：配置了一个 简单的消息代理，通俗一点讲就是设置消息连接请求的各种规范信息。\n\n```java\nimport org.springframework.messaging.handler.annotation.MessageMapping;\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\nimport org.springframework.stereotype.Controller;\n\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.thinkgem.jeesite.modules.sys.utils.UserUtils;\n\n@Controller\n@RequestMapping(\"/websocket\")\npublic class WebsocketController {\n\t@Autowired\n\tprivate SimpMessagingTemplate template;\n\n\t@MessageMapping(\"/sendMsg\")\n\tpublic void roomMessage() {\n         // 多线程配置推送消息\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());\n\t\texecutor.execute(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\ttemplate.convertAndSendToUser(userId, \"/queue/notifications\",\"新消息：这是websocked测试消息\");// 一对一发送，发送特定的客户端  \n                //template.convertAndSend(\"/topic/getResponse\",\"新消息：这是websocked测试消息\");//广播消息\n\t\t\t}\n\t\t});\n\t\texecutor.shutdown();\n\t}\n}\n```\n\n*template.convertAndSendToUser(user, dest, message)* 这个方法官方给出的解释是 Convert the given Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to the given destination. 意思就是“将给定的对象进行序列化，使用 ‘MessageConverter’ 进行包装转化成一条消息，发送到指定的目标”，通俗点讲就是我们使用这个方法进行消息的转发发送。\n\n## 客户端实现\n\n首先引用 *[**sockjs.js**](http://on937g0jc.bkt.clouddn.com//2018-3/websocket/sockjs.min.js)* 和 *[**stomp.js**](http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.min.js)*\n\n```javascript\n<script src=\"/js/common/sockjs.min.js\">\n<script src=\"/js/common/stomp.min.js\">\n<script type=\"text/javascript\">\n\t\t$(function() {\n\t\t\tconnect();\n\t\t});\n\t\t\n\t\tfunction connect() {\n             // TOMP客户端要想接收来自服务器推送的消息，必须先订阅相应的URL，即发送一个SUBSCRIBE帧，然后才能不断接收来自服务器的推送消息； \n\t\t\tvar sock = new SockJS(\"http://localhost:8080/endpointChat\");\n\t\t\tvar stomp = Stomp.over(sock);\n\t\t\tstomp.connect('guest', 'guest', function(frame) {\n\t\n\t\t\t\t/**订阅了/user/queue/notifications 发送的消息,这里与在控制器convertAndSendToUser 定义的地址保持一致\n\t\t\t\t *  这里多用了一个/user,并且这个user 是必须的,使用user才会发送消息到指定的用户。\n\t\t\t\t *  */\n\t\t\t\tstomp.subscribe(\"/user/queue/notifications\", handleNotification);\n           \t\t stomp.subscribe('/topic/getResponse', function(response) { //订阅/topic/getResponse 目标发送的消息。这个是在控制器的@SendTo中定义的。\n\t\t\t\t\tconsole.info(response.body);\n\t\t\t\t});\n                \t//向服务端发送消息\n    \t\t\tstomp.send(\"URL\", {}, JSON.stringify(message));\n\t\t//订阅服务器发送来的消息\n\t\t\tfunction handleNotification(message) {\n\t\t\t\tconsole.info(message.body);\n\t\t\t}\n\t\t}\n</script>\n```\n\n- 利用 stomp的*connect(login, passcode, connectCallback, errorCallback, vhost)* 方法建立连接，值得注意的是不同版本的 stomp.js 的 connect() 函数的参数会有所不同；\n- 利用 stomp的*subscribe(destination, callback, headers)* 方法可以订阅服务器发送来的消息，destination 表示服务器发送消息地址；通过 event 的 body 获取消息内容；\n- 利用 stompClient 的*send(destination, headers, body)* 方法可以向服务端发送消息，第一个参数为发送消息地址，最后一个参数是发送消息的 json 串；\n\n## 测试\n\n在客户端请求*/websocket/sendMsg*后会有如下效果：<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/result.png\" algin=\"center\"/></div>\n\n参考：\n\n[***Spring Framework Reference Documentation***](https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#websocket)\n\n[***websocket+spring***](http://tech.lede.com/2017/03/08/qa/websocket+spring/)\n\n[***spring websocket + stomp 实现广播通信和一对一通信***](http://www.cnblogs.com/winkey4986/p/5622758.html)","source":"_posts/Spring-webSocket.md","raw":"---\ntitle: Spring+webSocket\ndate: 2018-03-16 14:00:11\ntags: [java,tips,spring]\ncategories: technology\n---\n\n# 引言\n\nwebsocket 是 HTML5新增加特性之一，目的是浏览器与服务端建立全双工的通信方式，解决 HTTP请求-响应带来过多的资源消耗，同时对特殊场景应用提供了全新的实现方式，比如聊天、股票交易、游戏等对对实时性要求较高的行业领域。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/websocket-java.jpg\" algin=\"center\"/></div><!-- more -->\n\n# STOMP\n\nSTOMP(Simple Text-Orientated Messaging Protocol) 面向消息的简单文本协议。\n\nWebSocket是一个消息架构，不强制使用任何特定的消息协议，它依赖于应用层解释消息的含义；\n\n与处在应用层的HTTP不同，WebSocket处在TCP上非常薄的一层，会将字节流转换为文本/二进制消息，因此，对于实际应用来说，WebSocket的通信形式层级过低，因此，可以在 WebSocket 之上使用 STOMP协议，来为浏览器 和 server间的 通信增加适当的消息语义。\n\n如何理解 STOMP 与 WebSocket 的关系： \n1) HTTP协议解决了 web 浏览器发起请求以及 web 服务器响应请求的细节，假设 HTTP 协议 并不存在，只能使用 TCP 套接字来 编写 web 应用，你可能认为这是一件疯狂的事情； \n2) 直接使用 WebSocket（SockJS） 就很类似于 使用 TCP 套接字来编写 web 应用，因为没有高层协议，就需要我们定义应用间所发送消息的语义，还需要确保连接的两端都能遵循这些语义； \n3) 同 HTTP 在 TCP 套接字上添加请求-响应模型层一样，STOMP 在 WebSocket 之上提供了一个基于帧的线路格式层，用来定义消息语义；\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.jpg\" algin=\"center\"/></div>\n\n# Spring+websocket\n\n## 添加依赖\n\n需要添加spring-websocket和spring-messaging依赖，注意和spring-core的版本保持一致。\n\n```xml\n<!-- spring-websocket -->\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-websocket</artifactId>\n    <version>4.1.9.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-messaging</artifactId>\n    <version>4.1.9.RELEASE</version>\n</dependency>\n```\n\n## 服务端代码\n\n服务端的初始化，只需要两个类：**WebsocketConfig**（stomp节点配置）和**WebSocketController**。\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.messaging.simp.config.MessageBrokerRegistry;\nimport org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;\nimport org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;\nimport org.springframework.web.socket.config.annotation.StompEndpointRegistry;\n\n/**\n * 通过EnableWebSocketMessageBroker 开启使用STOMP协议来传输基于代理(message broker)的消息,此时浏览器支持使用@MessageMapping 就像支持@RequestMapping一样。\n */\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfig extends AbstractWebSocketMessageBrokerConfigurer {\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) { \n        //endPoint 注册协议节点,并映射指定的URl\n        //注册一个名字为\"endpointChat\" 的endpoint,并指定 SockJS协议，客户端就可以通过这个端点来进行连接；withSockJS作用是添加SockJS支持。\n        registry.addEndpoint(\"/endpointChat\").withSockJS();\n    }\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry registry) {\n        //配置消息代理(message broker)，定义了两个客户端订阅地址的前缀信息，也就是客户端接收服务端发送消息的前缀信息\n        //点对点式增加一个/queue 消息代理\n        registry.enableSimpleBroker(\"/queue\", \"/topic\");\n        //定义了服务端接收地址的前缀，也即客户端给服务端发消息的地址前缀\n        //registry.setApplicationDestinationPrefixes(“/user”);\t\n    }\n}\n```\n\n**对以上代码分析：**\n\n- EnableWebSocketMessageBroker 注解表明： 这个配置类不仅配置了 WebSocket，还配置了基于代理的 STOMP 消息；\n- 它复写了 registerStompEndpoints() 方法：添加一个服务端点，来接收客户端的连接。将 “/endpointChat” 路径注册为 STOMP 端点。这个路径与之前发送和接收消息的目的路径有所不同， 这是一个端点，客户端在订阅或发布消息到目的地址前，要连接该端点，即用户发送请求 ：*URL=’/127.0.0.1:8080/endpointChat’* 与 STOMP server 进行连接，之后再转发到订阅URL；\n- 它复写了 configureMessageBroker() 方法：配置了一个 简单的消息代理，通俗一点讲就是设置消息连接请求的各种规范信息。\n\n```java\nimport org.springframework.messaging.handler.annotation.MessageMapping;\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\nimport org.springframework.stereotype.Controller;\n\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.thinkgem.jeesite.modules.sys.utils.UserUtils;\n\n@Controller\n@RequestMapping(\"/websocket\")\npublic class WebsocketController {\n\t@Autowired\n\tprivate SimpMessagingTemplate template;\n\n\t@MessageMapping(\"/sendMsg\")\n\tpublic void roomMessage() {\n         // 多线程配置推送消息\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());\n\t\texecutor.execute(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\ttemplate.convertAndSendToUser(userId, \"/queue/notifications\",\"新消息：这是websocked测试消息\");// 一对一发送，发送特定的客户端  \n                //template.convertAndSend(\"/topic/getResponse\",\"新消息：这是websocked测试消息\");//广播消息\n\t\t\t}\n\t\t});\n\t\texecutor.shutdown();\n\t}\n}\n```\n\n*template.convertAndSendToUser(user, dest, message)* 这个方法官方给出的解释是 Convert the given Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to the given destination. 意思就是“将给定的对象进行序列化，使用 ‘MessageConverter’ 进行包装转化成一条消息，发送到指定的目标”，通俗点讲就是我们使用这个方法进行消息的转发发送。\n\n## 客户端实现\n\n首先引用 *[**sockjs.js**](http://on937g0jc.bkt.clouddn.com//2018-3/websocket/sockjs.min.js)* 和 *[**stomp.js**](http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.min.js)*\n\n```javascript\n<script src=\"/js/common/sockjs.min.js\">\n<script src=\"/js/common/stomp.min.js\">\n<script type=\"text/javascript\">\n\t\t$(function() {\n\t\t\tconnect();\n\t\t});\n\t\t\n\t\tfunction connect() {\n             // TOMP客户端要想接收来自服务器推送的消息，必须先订阅相应的URL，即发送一个SUBSCRIBE帧，然后才能不断接收来自服务器的推送消息； \n\t\t\tvar sock = new SockJS(\"http://localhost:8080/endpointChat\");\n\t\t\tvar stomp = Stomp.over(sock);\n\t\t\tstomp.connect('guest', 'guest', function(frame) {\n\t\n\t\t\t\t/**订阅了/user/queue/notifications 发送的消息,这里与在控制器convertAndSendToUser 定义的地址保持一致\n\t\t\t\t *  这里多用了一个/user,并且这个user 是必须的,使用user才会发送消息到指定的用户。\n\t\t\t\t *  */\n\t\t\t\tstomp.subscribe(\"/user/queue/notifications\", handleNotification);\n           \t\t stomp.subscribe('/topic/getResponse', function(response) { //订阅/topic/getResponse 目标发送的消息。这个是在控制器的@SendTo中定义的。\n\t\t\t\t\tconsole.info(response.body);\n\t\t\t\t});\n                \t//向服务端发送消息\n    \t\t\tstomp.send(\"URL\", {}, JSON.stringify(message));\n\t\t//订阅服务器发送来的消息\n\t\t\tfunction handleNotification(message) {\n\t\t\t\tconsole.info(message.body);\n\t\t\t}\n\t\t}\n</script>\n```\n\n- 利用 stomp的*connect(login, passcode, connectCallback, errorCallback, vhost)* 方法建立连接，值得注意的是不同版本的 stomp.js 的 connect() 函数的参数会有所不同；\n- 利用 stomp的*subscribe(destination, callback, headers)* 方法可以订阅服务器发送来的消息，destination 表示服务器发送消息地址；通过 event 的 body 获取消息内容；\n- 利用 stompClient 的*send(destination, headers, body)* 方法可以向服务端发送消息，第一个参数为发送消息地址，最后一个参数是发送消息的 json 串；\n\n## 测试\n\n在客户端请求*/websocket/sendMsg*后会有如下效果：<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/result.png\" algin=\"center\"/></div>\n\n参考：\n\n[***Spring Framework Reference Documentation***](https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#websocket)\n\n[***websocket+spring***](http://tech.lede.com/2017/03/08/qa/websocket+spring/)\n\n[***spring websocket + stomp 实现广播通信和一对一通信***](http://www.cnblogs.com/winkey4986/p/5622758.html)","slug":"Spring-webSocket","published":1,"updated":"2018-03-17T04:30:47.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u2l00233gfkqe1nvik5","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>websocket 是 HTML5新增加特性之一，目的是浏览器与服务端建立全双工的通信方式，解决 HTTP请求-响应带来过多的资源消耗，同时对特殊场景应用提供了全新的实现方式，比如聊天、股票交易、游戏等对对实时性要求较高的行业领域。<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/websocket-java.jpg\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"STOMP\"><a href=\"#STOMP\" class=\"headerlink\" title=\"STOMP\"></a>STOMP</h1><p>STOMP(Simple Text-Orientated Messaging Protocol) 面向消息的简单文本协议。</p>\n<p>WebSocket是一个消息架构，不强制使用任何特定的消息协议，它依赖于应用层解释消息的含义；</p>\n<p>与处在应用层的HTTP不同，WebSocket处在TCP上非常薄的一层，会将字节流转换为文本/二进制消息，因此，对于实际应用来说，WebSocket的通信形式层级过低，因此，可以在 WebSocket 之上使用 STOMP协议，来为浏览器 和 server间的 通信增加适当的消息语义。</p>\n<p>如何理解 STOMP 与 WebSocket 的关系：<br>1) HTTP协议解决了 web 浏览器发起请求以及 web 服务器响应请求的细节，假设 HTTP 协议 并不存在，只能使用 TCP 套接字来 编写 web 应用，你可能认为这是一件疯狂的事情；<br>2) 直接使用 WebSocket（SockJS） 就很类似于 使用 TCP 套接字来编写 web 应用，因为没有高层协议，就需要我们定义应用间所发送消息的语义，还需要确保连接的两端都能遵循这些语义；<br>3) 同 HTTP 在 TCP 套接字上添加请求-响应模型层一样，STOMP 在 WebSocket 之上提供了一个基于帧的线路格式层，用来定义消息语义；</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.jpg\" algin=\"center\"></div>\n\n<h1 id=\"Spring-websocket\"><a href=\"#Spring-websocket\" class=\"headerlink\" title=\"Spring+websocket\"></a>Spring+websocket</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>需要添加spring-websocket和spring-messaging依赖，注意和spring-core的版本保持一致。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- spring-websocket --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-websocket<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-messaging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"服务端代码\"><a href=\"#服务端代码\" class=\"headerlink\" title=\"服务端代码\"></a>服务端代码</h2><p>服务端的初始化，只需要两个类：<strong>WebsocketConfig</strong>（stomp节点配置）和<strong>WebSocketController</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 通过EnableWebSocketMessageBroker 开启使用STOMP协议来传输基于代理(message broker)的消息,此时浏览器支持使用<span class=\"doctag\">@MessageMapping</span> 就像支持<span class=\"doctag\">@RequestMapping</span>一样。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSocketMessageBroker</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractWebSocketMessageBrokerConfigurer</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerStompEndpoints</span><span class=\"params\">(StompEndpointRegistry registry)</span> </span>&#123; </div><div class=\"line\">        <span class=\"comment\">//endPoint 注册协议节点,并映射指定的URl</span></div><div class=\"line\">        <span class=\"comment\">//注册一个名字为\"endpointChat\" 的endpoint,并指定 SockJS协议，客户端就可以通过这个端点来进行连接；withSockJS作用是添加SockJS支持。</span></div><div class=\"line\">        registry.addEndpoint(<span class=\"string\">\"/endpointChat\"</span>).withSockJS();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureMessageBroker</span><span class=\"params\">(MessageBrokerRegistry registry)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//配置消息代理(message broker)，定义了两个客户端订阅地址的前缀信息，也就是客户端接收服务端发送消息的前缀信息</span></div><div class=\"line\">        <span class=\"comment\">//点对点式增加一个/queue 消息代理</span></div><div class=\"line\">        registry.enableSimpleBroker(<span class=\"string\">\"/queue\"</span>, <span class=\"string\">\"/topic\"</span>);</div><div class=\"line\">        <span class=\"comment\">//定义了服务端接收地址的前缀，也即客户端给服务端发消息的地址前缀</span></div><div class=\"line\">        <span class=\"comment\">//registry.setApplicationDestinationPrefixes(“/user”);\t</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>对以上代码分析：</strong></p>\n<ul>\n<li>EnableWebSocketMessageBroker 注解表明： 这个配置类不仅配置了 WebSocket，还配置了基于代理的 STOMP 消息；</li>\n<li>它复写了 registerStompEndpoints() 方法：添加一个服务端点，来接收客户端的连接。将 “/endpointChat” 路径注册为 STOMP 端点。这个路径与之前发送和接收消息的目的路径有所不同， 这是一个端点，客户端在订阅或发布消息到目的地址前，要连接该端点，即用户发送请求 ：<em>URL=’/127.0.0.1:8080/endpointChat’</em> 与 STOMP server 进行连接，之后再转发到订阅URL；</li>\n<li>它复写了 configureMessageBroker() 方法：配置了一个 简单的消息代理，通俗一点讲就是设置消息连接请求的各种规范信息。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> com.thinkgem.jeesite.modules.sys.utils.UserUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/websocket\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebsocketController</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpMessagingTemplate template;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@MessageMapping</span>(<span class=\"string\">\"/sendMsg\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roomMessage</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"comment\">// 多线程配置推送消息</span></div><div class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, TimeUnit.MILLISECONDS,<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">\t\texecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\ttemplate.convertAndSendToUser(userId, <span class=\"string\">\"/queue/notifications\"</span>,<span class=\"string\">\"新消息：这是websocked测试消息\"</span>);<span class=\"comment\">// 一对一发送，发送特定的客户端  </span></div><div class=\"line\">                <span class=\"comment\">//template.convertAndSend(\"/topic/getResponse\",\"新消息：这是websocked测试消息\");//广播消息</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\texecutor.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>template.convertAndSendToUser(user, dest, message)</em> 这个方法官方给出的解释是 Convert the given Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to the given destination. 意思就是“将给定的对象进行序列化，使用 ‘MessageConverter’ 进行包装转化成一条消息，发送到指定的目标”，通俗点讲就是我们使用这个方法进行消息的转发发送。</p>\n<h2 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h2><p>首先引用 <em><a href=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/sockjs.min.js\" target=\"_blank\" rel=\"external\"><strong>sockjs.js</strong></a></em> 和 <em><a href=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.min.js\" target=\"_blank\" rel=\"external\"><strong>stomp.js</strong></a></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"/js/common/sockjs.min.js\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/common/stomp.min.js\"</span>&gt;</span><span class=\"xml\"></span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tconnect();</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">             <span class=\"comment\">// TOMP客户端要想接收来自服务器推送的消息，必须先订阅相应的URL，即发送一个SUBSCRIBE帧，然后才能不断接收来自服务器的推送消息； </span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> sock = <span class=\"keyword\">new</span> SockJS(<span class=\"string\">\"http://localhost:8080/endpointChat\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> stomp = Stomp.over(sock);</div><div class=\"line\">\t\t\tstomp.connect(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">frame</span>) </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/**订阅了/user/queue/notifications 发送的消息,这里与在控制器convertAndSendToUser 定义的地址保持一致</span></div><div class=\"line\">\t\t\t\t *  这里多用了一个/user,并且这个user 是必须的,使用user才会发送消息到指定的用户。</div><div class=\"line\">\t\t\t\t *  */</div><div class=\"line\">\t\t\t\tstomp.subscribe(<span class=\"string\">\"/user/queue/notifications\"</span>, handleNotification);</div><div class=\"line\">           \t\t stomp.subscribe(<span class=\"string\">'/topic/getResponse'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123; <span class=\"comment\">//订阅/topic/getResponse 目标发送的消息。这个是在控制器的@SendTo中定义的。</span></div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.info(response.body);</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">                \t<span class=\"comment\">//向服务端发送消息</span></div><div class=\"line\">    \t\t\tstomp.send(<span class=\"string\">\"URL\"</span>, &#123;&#125;, <span class=\"built_in\">JSON</span>.stringify(message));</div><div class=\"line\">\t\t<span class=\"comment\">//订阅服务器发送来的消息</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleNotification</span>(<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.info(message.body);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>利用 stomp的<em>connect(login, passcode, connectCallback, errorCallback, vhost)</em> 方法建立连接，值得注意的是不同版本的 stomp.js 的 connect() 函数的参数会有所不同；</li>\n<li>利用 stomp的<em>subscribe(destination, callback, headers)</em> 方法可以订阅服务器发送来的消息，destination 表示服务器发送消息地址；通过 event 的 body 获取消息内容；</li>\n<li>利用 stompClient 的<em>send(destination, headers, body)</em> 方法可以向服务端发送消息，第一个参数为发送消息地址，最后一个参数是发送消息的 json 串；</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在客户端请求<em>/websocket/sendMsg</em>后会有如下效果：<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/result.png\" algin=\"center\"></div></p>\n<p>参考：</p>\n<p><a href=\"https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#websocket\" target=\"_blank\" rel=\"external\"><strong><em>Spring Framework Reference Documentation</em></strong></a></p>\n<p><a href=\"http://tech.lede.com/2017/03/08/qa/websocket+spring/\" target=\"_blank\" rel=\"external\"><strong><em>websocket+spring</em></strong></a></p>\n<p><a href=\"http://www.cnblogs.com/winkey4986/p/5622758.html\" target=\"_blank\" rel=\"external\"><strong><em>spring websocket + stomp 实现广播通信和一对一通信</em></strong></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>websocket 是 HTML5新增加特性之一，目的是浏览器与服务端建立全双工的通信方式，解决 HTTP请求-响应带来过多的资源消耗，同时对特殊场景应用提供了全新的实现方式，比如聊天、股票交易、游戏等对对实时性要求较高的行业领域。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/websocket-java.jpg\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"STOMP\"><a href=\"#STOMP\" class=\"headerlink\" title=\"STOMP\"></a>STOMP</h1><p>STOMP(Simple Text-Orientated Messaging Protocol) 面向消息的简单文本协议。</p>\n<p>WebSocket是一个消息架构，不强制使用任何特定的消息协议，它依赖于应用层解释消息的含义；</p>\n<p>与处在应用层的HTTP不同，WebSocket处在TCP上非常薄的一层，会将字节流转换为文本/二进制消息，因此，对于实际应用来说，WebSocket的通信形式层级过低，因此，可以在 WebSocket 之上使用 STOMP协议，来为浏览器 和 server间的 通信增加适当的消息语义。</p>\n<p>如何理解 STOMP 与 WebSocket 的关系：<br>1) HTTP协议解决了 web 浏览器发起请求以及 web 服务器响应请求的细节，假设 HTTP 协议 并不存在，只能使用 TCP 套接字来 编写 web 应用，你可能认为这是一件疯狂的事情；<br>2) 直接使用 WebSocket（SockJS） 就很类似于 使用 TCP 套接字来编写 web 应用，因为没有高层协议，就需要我们定义应用间所发送消息的语义，还需要确保连接的两端都能遵循这些语义；<br>3) 同 HTTP 在 TCP 套接字上添加请求-响应模型层一样，STOMP 在 WebSocket 之上提供了一个基于帧的线路格式层，用来定义消息语义；</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.jpg\" algin=\"center\"/></div>\n\n<h1 id=\"Spring-websocket\"><a href=\"#Spring-websocket\" class=\"headerlink\" title=\"Spring+websocket\"></a>Spring+websocket</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>需要添加spring-websocket和spring-messaging依赖，注意和spring-core的版本保持一致。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- spring-websocket --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-websocket<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-messaging<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"服务端代码\"><a href=\"#服务端代码\" class=\"headerlink\" title=\"服务端代码\"></a>服务端代码</h2><p>服务端的初始化，只需要两个类：<strong>WebsocketConfig</strong>（stomp节点配置）和<strong>WebSocketController</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 通过EnableWebSocketMessageBroker 开启使用STOMP协议来传输基于代理(message broker)的消息,此时浏览器支持使用<span class=\"doctag\">@MessageMapping</span> 就像支持<span class=\"doctag\">@RequestMapping</span>一样。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@EnableWebSocketMessageBroker</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractWebSocketMessageBrokerConfigurer</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerStompEndpoints</span><span class=\"params\">(StompEndpointRegistry registry)</span> </span>&#123; </div><div class=\"line\">        <span class=\"comment\">//endPoint 注册协议节点,并映射指定的URl</span></div><div class=\"line\">        <span class=\"comment\">//注册一个名字为\"endpointChat\" 的endpoint,并指定 SockJS协议，客户端就可以通过这个端点来进行连接；withSockJS作用是添加SockJS支持。</span></div><div class=\"line\">        registry.addEndpoint(<span class=\"string\">\"/endpointChat\"</span>).withSockJS();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureMessageBroker</span><span class=\"params\">(MessageBrokerRegistry registry)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//配置消息代理(message broker)，定义了两个客户端订阅地址的前缀信息，也就是客户端接收服务端发送消息的前缀信息</span></div><div class=\"line\">        <span class=\"comment\">//点对点式增加一个/queue 消息代理</span></div><div class=\"line\">        registry.enableSimpleBroker(<span class=\"string\">\"/queue\"</span>, <span class=\"string\">\"/topic\"</span>);</div><div class=\"line\">        <span class=\"comment\">//定义了服务端接收地址的前缀，也即客户端给服务端发消息的地址前缀</span></div><div class=\"line\">        <span class=\"comment\">//registry.setApplicationDestinationPrefixes(“/user”);\t</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>对以上代码分析：</strong></p>\n<ul>\n<li>EnableWebSocketMessageBroker 注解表明： 这个配置类不仅配置了 WebSocket，还配置了基于代理的 STOMP 消息；</li>\n<li>它复写了 registerStompEndpoints() 方法：添加一个服务端点，来接收客户端的连接。将 “/endpointChat” 路径注册为 STOMP 端点。这个路径与之前发送和接收消息的目的路径有所不同， 这是一个端点，客户端在订阅或发布消息到目的地址前，要连接该端点，即用户发送请求 ：<em>URL=’/127.0.0.1:8080/endpointChat’</em> 与 STOMP server 进行连接，之后再转发到订阅URL；</li>\n<li>它复写了 configureMessageBroker() 方法：配置了一个 简单的消息代理，通俗一点讲就是设置消息连接请求的各种规范信息。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.messaging.simp.SimpMessagingTemplate;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.LinkedBlockingQueue;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class=\"line\"><span class=\"keyword\">import</span> com.thinkgem.jeesite.modules.sys.utils.UserUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Controller</span></div><div class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/websocket\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebsocketController</span> </span>&#123;</div><div class=\"line\">\t<span class=\"meta\">@Autowired</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> SimpMessagingTemplate template;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@MessageMapping</span>(<span class=\"string\">\"/sendMsg\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">roomMessage</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"comment\">// 多线程配置推送消息</span></div><div class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, TimeUnit.MILLISECONDS,<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class=\"line\">\t\texecutor.execute(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\ttemplate.convertAndSendToUser(userId, <span class=\"string\">\"/queue/notifications\"</span>,<span class=\"string\">\"新消息：这是websocked测试消息\"</span>);<span class=\"comment\">// 一对一发送，发送特定的客户端  </span></div><div class=\"line\">                <span class=\"comment\">//template.convertAndSend(\"/topic/getResponse\",\"新消息：这是websocked测试消息\");//广播消息</span></div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\texecutor.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><em>template.convertAndSendToUser(user, dest, message)</em> 这个方法官方给出的解释是 Convert the given Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to the given destination. 意思就是“将给定的对象进行序列化，使用 ‘MessageConverter’ 进行包装转化成一条消息，发送到指定的目标”，通俗点讲就是我们使用这个方法进行消息的转发发送。</p>\n<h2 id=\"客户端实现\"><a href=\"#客户端实现\" class=\"headerlink\" title=\"客户端实现\"></a>客户端实现</h2><p>首先引用 <em><a href=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/sockjs.min.js\"><strong>sockjs.js</strong></a></em> 和 <em><a href=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/stomp.min.js\"><strong>stomp.js</strong></a></em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"/js/common/sockjs.min.js\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/js/common/stomp.min.js\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">\t\t$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tconnect();</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">             <span class=\"comment\">// TOMP客户端要想接收来自服务器推送的消息，必须先订阅相应的URL，即发送一个SUBSCRIBE帧，然后才能不断接收来自服务器的推送消息； </span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> sock = <span class=\"keyword\">new</span> SockJS(<span class=\"string\">\"http://localhost:8080/endpointChat\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> stomp = Stomp.over(sock);</div><div class=\"line\">\t\t\tstomp.connect(<span class=\"string\">'guest'</span>, <span class=\"string\">'guest'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">frame</span>) </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t\t\t\t<span class=\"comment\">/**订阅了/user/queue/notifications 发送的消息,这里与在控制器convertAndSendToUser 定义的地址保持一致</div><div class=\"line\">\t\t\t\t *  这里多用了一个/user,并且这个user 是必须的,使用user才会发送消息到指定的用户。</div><div class=\"line\">\t\t\t\t *  */</span></div><div class=\"line\">\t\t\t\tstomp.subscribe(<span class=\"string\">\"/user/queue/notifications\"</span>, handleNotification);</div><div class=\"line\">           \t\t stomp.subscribe(<span class=\"string\">'/topic/getResponse'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123; <span class=\"comment\">//订阅/topic/getResponse 目标发送的消息。这个是在控制器的@SendTo中定义的。</span></div><div class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.info(response.body);</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">                \t<span class=\"comment\">//向服务端发送消息</span></div><div class=\"line\">    \t\t\tstomp.send(<span class=\"string\">\"URL\"</span>, &#123;&#125;, <span class=\"built_in\">JSON</span>.stringify(message));</div><div class=\"line\">\t\t<span class=\"comment\">//订阅服务器发送来的消息</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleNotification</span>(<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.info(message.body);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<ul>\n<li>利用 stomp的<em>connect(login, passcode, connectCallback, errorCallback, vhost)</em> 方法建立连接，值得注意的是不同版本的 stomp.js 的 connect() 函数的参数会有所不同；</li>\n<li>利用 stomp的<em>subscribe(destination, callback, headers)</em> 方法可以订阅服务器发送来的消息，destination 表示服务器发送消息地址；通过 event 的 body 获取消息内容；</li>\n<li>利用 stompClient 的<em>send(destination, headers, body)</em> 方法可以向服务端发送消息，第一个参数为发送消息地址，最后一个参数是发送消息的 json 串；</li>\n</ul>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在客户端请求<em>/websocket/sendMsg</em>后会有如下效果：<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/websocket/result.png\" algin=\"center\"/></div></p>\n<p>参考：</p>\n<p><a href=\"https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#websocket\"><strong><em>Spring Framework Reference Documentation</em></strong></a></p>\n<p><a href=\"http://tech.lede.com/2017/03/08/qa/websocket+spring/\"><strong><em>websocket+spring</em></strong></a></p>\n<p><a href=\"http://www.cnblogs.com/winkey4986/p/5622758.html\"><strong><em>spring websocket + stomp 实现广播通信和一对一通信</em></strong></a></p>"},{"title":"Tomcat入门","date":"2017-12-20T06:35:32.000Z","_content":"\n# 引言\n\nTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器。说是经常用到，也只是熟悉，还没没有真正达到了解其中的原理和其中配置的意义，最近也找了一些书籍来看，先入门。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat.jpg\"/></div><!-- more -->\n\n# Tomcat简介\n\nTomcat的下载包解压之后的目录\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat%E7%9B%AE%E5%BD%95.jpg\"/>\n\n</div>\n\nTomcat根目录在Tomcat中叫`<CATALINA_HOME>`\n\n**`<CATALINA_HOME>`/bin：**存放各种平台下启动和关闭Tomcat的脚本文件。其中有个是catalina.bat，打开这个windows配置文件，在非注释行加入JDK路径,例如 : SET  JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_141，其中对JDK的优化也在catalina.bat中配置，保存后就配置好Tomcat环境了。 startup.bat是windows下启动Tomcat的脚本文件，shutdown.bat是关闭Tomcat的脚本文件。\n\n**`<CATALINA_HOME>`/conf**：*存放不同的配置文件（如：server.xml和web.xml）*\n\n　　server.xml文件：该文件用于配置和server相关的信息，比如tomcat启动的端口号、配置host主机、配置Context，接下来会重点讲述。\n\n　　web.xml文件：部署描述文件，这个web.xml中描述了一些默认的servlet，部署每个webapp时，都会调用这个文件，配置该web应用的默认servlet。\n\n　　tomcat-users.xml文件：配置tomcat的用户密码与权限。\n\n　　context.xml：定义web应用的默认行为。\n**`<CATALINA_HOME>`/lib：**存放Tomcat运行需要的库文件（Jars）； \n**`<CATALINA_HOME>`/logs：**存放Tomcat执行时的log文件； \n**`<CATALINA_HOME>`/temp：** 存放Tomcat运行时产生的文件，如缓存等；\n**`<CATALINA_HOME>`/webapps：**Tomcat的主要Web发布目录（包括应用程序示例）；\n\n**`<CATALINA_HOME>`/work**：存放jsp编译后产生的class文件； \n\n**【Tomcat的启动过程】**Tomcat 先根据**/conf/server.xml** 下的配置启动Server，再加载Service，对于与Engine相匹配的Host，每个Host 下面都有一个或多个Context。\n\n　　注意：Context 既可配置在server.xml 下，也可配置成一单独的文件，放在conf\\Catalina\\localhost 下，简称应用配置文件。\n\n　　Web Application 对应一个Context，每个Web Application 由一个或多个Servlet 组成。当一个Web Application 被初始化的时候，它将用自己的ClassLoader 对象载入部署配置文件web.xml 中定义的每个Servlet 类：它首先载入在$CATALINA_HOME/conf/web.xml中部署的Servlet 类，然后载入在自己的Web Application 根目录下WEB-INF/web.xml 中部署的Servlet 类。\n\nweb.xml 文件有两部分：Servlet 类定义和Servlet 映射定义。每个被载入的Servlet 类都有一个名字，且被填入该Context 的映射表(mapping table)中，和某种URL 路径对应。当该Context 获得请求时，将查询mapping table，找到被请求的Servlet，并执行以获得请求响应。\n\n# Tomcat一个server实例\n\n\n\n```xml\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JasperListener\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n```\n\n# server.xml文档的元素分类和整体结构\n\n### 整体结构\n\nserver.xml的整体结构如下：\n\n```xml\n<Server>\n    <Service>\n        <Connector/>\n        <Connector/>\n        <Engine>\n            <Host>\n                <Context/><!-- 现在常常使用自动部署，不推荐配置Context元素，Context小节有详细说明 -->\n            </Host>\n        </Engine>\n    </Service>\n</Server>\n```\n\n该结构中只给出了Tomcat的核心组件，除了核心组件外，Tomcat还有一些其他组件，下面介绍一下组件的分类。\n\n### 元素分类\n\nserver.xml文件中的元素可以分为以下4类：\n\n（1）顶层元素：`<Server>`和`<Service>`\n\n`<Server>`元素是整个配置文件的根元素，`<Service>`元素则代表一个Engine元素以及一组与之相连的Connector元素。\n\n（2）连接器：`<Connector>`\n\n`<Connector>`代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。\n\n（3）容器：`<Engine><Host><Context>`\n\n容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。\n\n（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。\n\n### 核心组件\n\n**1、Server**\n\nServer元素在最顶层，代表整个Tomcat容器，因此它必须是server.xml中唯一一个最外层的元素。一个Server元素中可以有一个或多个Service元素。\n\n在第一部分的例子中，在最外层有一个`<Server>`元素，shutdown属性表示关闭Server的指令；port属性表示Server接收shutdown指令的端口号，设为-1可以禁掉该端口。\n\nServer的主要任务，就是提供一个接口让客户端能够访问到这个Service集合，同时维护它所包含的所有的Service的声明周期，包括如何初始化、如何结束服务、如何找到客户端要访问的Service。\n\n**2、Service**\n\nService的作用，是在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；其中Connector的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。\n\n在第一部分的例子中，Server中包含一个名称为“Catalina”的Service。实际上，Tomcat可以提供多个Service，不同的Service监听不同的端口。\n\n**3、Connector**\n\nConnector的主要功能，是接收连接请求，**创建Request和Response对象用于和请求端交换数据**；然后分配线程让Engine来处理这个请求，并把产生的Request和Response对象传给Engine。\n\n通过配置Connector，可以控制请求Service的协议及端口号。在第一部分的例子中，Service包含两个Connector：\n\n> `<Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />`\n>\n> `<Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />`\n\n（1）通过配置第1个Connector，客户端可以通过8080端口号使用http协议访问Tomcat。其中，protocol属性规定了请求的协议，port规定了请求的端口号，redirectPort表示当强制要求https而请求是http时，重定向至端口号为8443的Connector，connectionTimeout表示连接的超时时间。\n\n在这个例子中，Tomcat监听HTTP请求，使用的是8080端口，而不是正式的80端口；实际上，在正式的生产环境中，Tomcat也常常监听8080端口，而不是80端口。这是因为在生产环境中，很少将Tomcat直接对外开放接收请求，而是在Tomcat和客户端之间加一层代理服务器(如nginx)，用于请求的转发、负载均衡、处理静态文件等；通过代理服务器访问Tomcat时，是在局域网中，因此一般仍使用8080端口。\n\n（2）通过配置第2个Connector，客户端可以通过8009端口号使用AJP协议访问Tomcat。AJP协议负责和其他的HTTP服务器(如Apache)建立连接；在把Tomcat与其他HTTP服务器集成时，就需要用到这个连接器。之所以使用Tomcat和其他服务器集成，是因为Tomcat可以用作Servlet/JSP容器，但是对静态资源的处理速度较慢，不如Apache和IIS等HTTP服务器；因此常常将Tomcat与Apache等集成，前者作Servlet容器，后者处理静态资源，而AJP协议便负责Tomcat和Apache的连接。Tomcat与Apache等集成的原理如下图：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat-Apache.png\"/>\n\n</div>\n\n**4、Engine**\n\nEngine组件在Service组件中有且只有一个；Engine是Service组件中的请求处理组件。Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。\n\n前面已经提到过，Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。\n\n在第一部分的例子中，Engine的配置语句如下：\n\n> `<Engine name=\"Catalina\" defaultHost=\"localhost\">`\n\n其中，name属性用于日志和错误信息，在整个Server中应该唯一。defaultHost属性指定了默认的host名称，当发往本机的请求指定的host名称不存在时，一律使用defaultHost指定的host进行处理；因此，defaultHost的值，必须与Engine中的一个Host组件的name属性值匹配。\n\n**5、Host**\n\n（1）Engine与Host\n\nHost是Engine的子容器。Engine组件中可以内嵌1个或多个Host组件，每个Host组件代表Engine中的一个虚拟主机。Host组件至少有一个，且其中一个的name必须与Engine组件的defaultHost属性相匹配。\n\n（2）Host的作用\n\nHost虚拟主机的作用，是运行多个Web应用（一个Context代表一个Web应用），并负责安装、展开、启动和结束每个Web应用。\n\nHost组件代表的虚拟主机，对应了服务器中一个网络名实体(如”www.test.com”，或IP地址”116.25.25.25”)；为了使用户可以通过网络名连接Tomcat服务器，这个名字应该在DNS服务器上注册。\n\n客户端通常使用主机名来标识它们希望连接的服务器；该主机名也会包含在HTTP请求头中。Tomcat从HTTP头中提取出主机名，寻找名称匹配的主机。如果没有匹配，请求将发送至默认主机。因此默认主机不需要是在DNS服务器中注册的网络名，因为任何与所有Host名称不匹配的请求，都会路由至默认主机。\n\n（3）Host的配置\n\n在第一部分的例子中，Host的配置如下：\n\n> `<Host name=\"localhost\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\">`\n\n下面对其中配置的属性进行说明：\n\nname属性指定虚拟主机的主机名，一个Engine中有且仅有一个Host组件的name属性与Engine组件的defaultHost属性相匹配；一般情况下，主机名需要是在DNS服务器中注册的网络名，但是Engine指定的defaultHost不需要，原因在前面已经说明。\n\nunpackWARs指定了是否将代表Web应用的WAR文件解压；如果为true，通过解压后的文件结构运行该Web应用，如果为false，直接使用WAR文件运行Web应用。\n\nHost的autoDeploy和appBase属性，与Host内Web应用的自动部署有关；此外，本例中没有出现的xmlBase和deployOnStartup属性，也与Web应用的自动部署有关。\n\n**6、Context**\n\n（1）Context的作用\n\nContext元素代表在特定虚拟主机上运行的一个Web应用。在后文中，提到Context、应用或Web应用，它们指代的都是Web应用。每个Web应用基于WAR文件，或WAR文件解压后对应的目录（这里称为应用目录）。\n\nContext是Host的子容器，每个Host中可以定义任意多的Context元素。\n\n在第一部分的例子中，可以看到server.xml配置文件中并没有出现Context元素的配置。这是因为，Tomcat开启了自动部署，Web应用没有在server.xml中配置静态部署，而是由Tomcat通过特定的规则自动部署。下面介绍一下Tomcat自动部署Web应用的机制。\n\n（2）Web应用自动部署\n\n**Host的配置**\n\n要开启Web应用的自动部署，需要配置所在的虚拟主机；配置的方式就是前面提到的Host元素的deployOnStartup和autoDeploy属性。如果deployOnStartup和autoDeploy设置为true，则tomcat启动自动部署：当检测到新的Web应用或Web应用的更新时，会触发应用的部署(或重新部署)。二者的主要区别在于，deployOnStartup为true时，Tomcat在启动时检查Web应用，且检测到的所有Web应用视作新应用；autoDeploy为true时，Tomcat在运行时定期检查新的Web应用或Web应用的更新。除此之外，二者的处理相似。\n\n通过配置deployOnStartup和autoDeploy可以开启虚拟主机自动部署Web应用；实际上，自动部署依赖于检查是否有新的或更改过的Web应用，而Host元素的appBase和xmlBase设置了检查Web应用更新的目录。\n\n其中，appBase属性指定Web应用所在的目录，默认值是webapps，这是一个相对路径，代表Tomcat根目录下webapps文件夹。\n\nxmlBase属性指定Web应用的XML配置文件所在的目录，默认值为conf/`<engine_name>`/`<host_name>`，例如第一部分的例子中，主机localhost的xmlBase的默认值是$TOMCAT_HOME/conf/Catalina/localhost。\n\n**检查Web应用更新**\n\n一个Web应用可能包括以下文件：XML配置文件，WAR包，以及一个应用目录(该目录包含Web应用的文件结构)；其中XML配置文件位于xmlBase指定的目录，WAR包和应用目录位于appBase指定的目录。\n\nTomcat按照如下的顺序进行扫描，来检查应用更新：\n\nA、扫描虚拟主机指定的xmlBase下的XML配置文件\n\nB、扫描虚拟主机指定的appBase下的WAR文件\n\nC、扫描虚拟主机指定的appBase下的应用目录\n\n**`<Context>`元素的配置**\n\nContext元素最重要的属性是docBase和path，此外reloadable属性也比较常用。\n\ndocBase指定了该Web应用使用的WAR包路径，或应用目录。需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，docBase不在appBase目录中，才需要指定；如果docBase指定的WAR包或应用目录就在docBase中，则不需要指定，因为Tomcat会自动扫描appBase中的WAR包和应用目录，指定了反而会造成问题。\n\npath指定了访问该Web应用的上下文路径，当请求到来时，Tomcat根据Web应用的 path属性与URI的匹配程度来选择Web应用处理相应请求。例如，Web应用app1的path属性是”/app1”，Web应用app2的path属性是”/app2”，那么请求/app1/index.html会交由app1来处理；而请求/app2/index.html会交由app2来处理。如果一个Context元素的path属性为””，那么这个Context是虚拟主机的默认Web应用；当请求的uri与所有的path都不匹配时，使用该默认Web应用来处理。\n\n但是，需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，不能指定path属性，path属性由配置文件的文件名、WAR文件的文件名或应用目录的名称自动推导出来。如扫描Web应用时，发现了xmlBase目录下的app1.xml，或appBase目录下的app1.WAR或app1应用目录，则该Web应用的path属性是”app1”。如果名称不是app1而是ROOT，则该Web应用是虚拟主机默认的Web应用，此时path属性推导为””。\n\nreloadable属性指示tomcat是否在运行时监控在WEB-INF/classes和WEB-INF/lib目录下class文件的改动。如果值为true，那么当class文件改动时，会触发Web应用的重新加载。在开发环境下，reloadable设置为true便于调试；但是在生产环境中设置为true会给服务器带来性能压力，因此reloadable参数的默认值为false。\n\n下面来看自动部署时，xmlBase下的XML配置文件app1.xml的例子：\n\n> `<Context docBase=\"D:\\Program Files\\app1.war\" reloadable=\"true\"/>`\n\n在该例子中，docBase位于Host的appBase目录之外；path属性没有指定，而是根据app1.xml自动推导为”app1”；由于是在开发环境下，因此reloadable设置为true，便于开发调试。\n\n**自动部署举例**\n\n最典型的自动部署，就是当我们安装完Tomcat后，$TOMCAT_HOME/webapps目录下有如下文件夹：\n\n<div align=center><img width=\"100\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/%E7%9B%AE%E5%BD%95.png\"/>\n\n</div>\n\n当我们启动Tomcat后，可以使用http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的Web应用；我们也可以通过http://localhost:8080/docs来访问docs应用，同理我们可以访问examples/host-manager/manager这几个Web应用。\n\n（3）server.xml中静态部署Web应用\n\n除了自动部署，我们也可以在server.xml中通过`<context>`元素静态部署Web应用。静态部署与自动部署是可以共存的。在实际应用中，并不推荐使用静态部署，因为server.xml 是不可动态重加载的资源，服务器一旦启动了以后，要修改这个文件，就得重启服务器才能重新加载。而自动部署可以在Tomcat运行时通过定期的扫描来实现，不需要重启服务器。\n\nserver.xml中使用Context元素配置Web应用，Context元素应该位于Host元素中。举例如下：\n\n> `<Context path=\"/\" docBase=\"D:\\Program Files \\app1.war\" reloadable=\"true\"/>`\n\ndocBase：静态部署时，docBase可以在appBase目录下，也可以不在；本例中，docBase不在appBase目录下。\n\npath：静态部署时，可以显式指定path属性，但是仍然受到了严格的限制：只有当自动部署完全关闭(deployOnStartup和autoDeploy都为false)或docBase不在appBase中时，才可以设置path属性。在本例中，docBase不在appBase中，因此path属性可以设置。\n\nreloadable属性的用法与自动部署时相同。\n\n### 核心组件的关联\n\n**1、整体关系**\n\n核心组件之间的整体关系，在上一部分有所介绍，这里总结一下：\n\nServer元素在最顶层，代表整个Tomcat容器；一个Server元素中可以有一个或多个Service元素。\n\nService在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；Connector接收请求，Engine处理请求。\n\nEngine、Host和Context都是容器，且 Engine包含Host，Host包含Context。每个Host组件代表Engine中的一个虚拟主机；每个Context组件代表在特定Host上运行的一个Web应用。\n\n**2、如何确定请求由谁处理？**\n\n当请求被发送到Tomcat所在的主机时，如何确定最终哪个Web应用来处理该请求呢？\n\n（1）根据协议和端口号选定Service和Engine\n\nService中的Connector组件可以接收特定端口的请求，因此，当Tomcat启动时，Service组件就会监听特定的端口。在第一部分的例子中，Catalina这个Service监听了8080端口（基于HTTP协议）和8009端口（基于AJP协议）。当请求进来时，Tomcat便可以根据协议和端口号选定处理请求的Service；Service一旦选定，Engine也就确定。\n\n通过在Server中配置多个Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。\n\n（2）根据域名或IP地址选定Host\n\nService确定后，Tomcat在Service中寻找名称与域名/IP地址匹配的Host处理该请求。如果没有找到，则使用Engine中指定的defaultHost来处理该请求。在第一部分的例子中，由于只有一个Host（name属性为localhost），因此该Service/Engine的所有请求都交给该Host处理。\n\n（3）根据URI选定Context/Web应用\n\n这一点在Context一节有详细的说明：Tomcat根据应用的 path属性与URI的匹配程度来选择Web应用处理相应请求，这里不再赘述。\n\n（4）举例\n\n以请求http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。\n\n**3、如何配置多个服务**\n\n通过在Server中配置多个Service服务，可以实现通过不同的端口号来访问同一台机器上部署的不同Web应用。\n\n在server.xml中配置多服务的方法非常简单，分为以下几步：\n\n（1）复制`<Service>`元素，放在当前`<Service>`后面。\n\n（2）修改端口号：根据需要监听的端口号修改`<Connector>`元素的port属性；必须确保该端口没有被其他进程占用，否则Tomcat启动时会报错，而无法通过该端口访问Web应用。\n\n以Win7为例，可以用如下方法找出某个端口是否被其他进程占用：netstat -aon|findstr “8081″发现8081端口被PID为2064的进程占用，tasklist |findstr “2064″发现该进程为FrameworkService.exe(这是McAfee杀毒软件的进程)。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/task.png\"/>\n\n</div>\n\n（3）修改Service和Engine的name属性\n\n（4）修改Host的appBase属性（如webapps2）\n\n（5）Web应用仍然使用自动部署\n\n（6）将要部署的Web应用(WAR包或应用目录)拷贝到新的appBase下。\n\n以第一部分的server.xml为例，多个Service的配置如下：\n\n```xml\n<?xml version='1.0' encoding='utf-8'?>\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JasperListener\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\" type=\"org.apache.catalina.UserDatabase\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"/opt/project/webapps\" unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n  <Service name=\"Catalina2\">\n    <Connector port=\"8084\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <Connector port=\"8010\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina2\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"/opt/project/webapps2\" unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n```\n\n再将原webapps下的docs目录拷贝到webapps2中，则通过如下两个接口都可以访问docs应用：\n\nhttp://localhost:8080/docs/\n\nhttp://localhost:8084/docs/\n\n### 其他组件\n\n除核心组件外，server.xml中还可以配置很多其他组件。下面只介绍第一部分例子中出现的组件，如果要了解更多内容，可以查看Tomcat官方文档。\n\n**1、Listener**\n\n```xml\n<Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n<Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n<Listener className=\"org.apache.catalina.core.JasperListener\" />\n<Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n<Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n<Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n```\n\nListener(即监听器)定义的组件，可以在特定事件发生时执行特定的操作；被监听的事件通常是Tomcat的启动和停止。\n\n监听器可以在Server、Engine、Host或Context中，本例中的监听器都是在Server中。实际上，本例中定义的6个监听器，都只能存在于Server组件中。监听器不允许内嵌其他组件。\n\n监听器需要配置的最重要的属性是className，该属性规定了监听器的具体实现类，该类必须实现了org.apache.catalina.LifecycleListener接口。\n\n下面依次介绍例子中配置的监听器：\n\n- VersionLoggerListener：当Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。\n- AprLifecycleListener：Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime，是Apache可移植运行库，可以实现高可扩展性、高性能，以及与本地服务器技术更好的集成。\n- JasperListener：在Web应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，然后编译成class文件供JVM使用。\n- JreMemoryLeakPreventionListener：与类加载器导致的内存泄露有关。\n- GlobalResourcesLifecycleListener：通过该监听器，初始化< GlobalNamingResources>标签中定义的全局JNDI资源；如果没有该监听器，任何全局资源都不能使用。< GlobalNamingResources>将在后文介绍。\n- ThreadLocalLeakPreventionListener：当Web应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新。当线程执行完任务被收回线程池时，活跃线程会一个一个的更新。只有当Web应用(即Context元素)的renewThreadsWhenStoppingContext属性设置为true时，该监听器才有效。\n\n**2、GlobalNamingResources与Realm**\n\n第一部分的例子中，Engine组件下定义了Realm组件：\n\n```xml\n<Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                resourceName=\"UserDatabase\"/>\n</Realm>\n```\n\nRealm，可以把它理解成“域”；Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用。在本例中，Realm的配置使用name为UserDatabase的资源实现。而该资源在Server元素中使用GlobalNamingResources配置：\n\n```xml\n<GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\" type=\"org.apache.catalina.UserDatabase\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" pathname=\"conf/tomcat-users.xml\" />\n</GlobalNamingResources>\n```\n\n**3、Valve**\n\n在第一部分的例子中，Host元素内定义了Valve组件：\n\n```xml\n<Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n```\n\n单词Valve的意思是“阀门”，在Tomcat中代表了请求处理流水线上的一个组件；Valve可以与Tomcat的容器(Engine、Host或Context)关联。\n\n不同的Valve有不同的特性，下面介绍一下本例中出现的AccessLogValve。\n\nAccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求，在本例中，Valve放在Host下，便可以记录该Host处理的所有请求。AccessLogValve记录的日志就是访问日志，每天的请求会写到一个日志文件里。AccessLogValve可以与Engine、Host或Context关联；在本例中，只有一个Engine，Engine下只有一个Host，Host下只有一个Context，因此AccessLogValve放在三个容器下的作用其实是类似的。\n\n本例的AccessLogValve属性的配置，使用的是默认的配置；下面介绍AccessLogValve中各个属性的作用：\n\n（1）className：规定了Valve的类型，是最重要的属性；本例中，通过该属性规定了这是一个AccessLogValve。\n\n（2）directory：指定日志存储的位置，本例中，日志存储在$TOMCAT_HOME/logs目录下。\n\n（3）prefix：指定了日志文件的前缀。\n\n（4）suffix：指定了日志文件的后缀。通过directory、prefix和suffix的配置，在$TOMCAT_HOME/logs目录下，可以看到如下所示的日志文件。\n\n<div align=center><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/log.png\"/>\n\n</div>\n\n（5）pattern：指定记录日志的格式，本例中各项的含义如下：\n\n- %h：远程主机名或IP地址；如果有nginx等反向代理服务器进行请求分发，该主机名/IP地址代表的是nginx，否则代表的是客户端。后面远程的含义与之类似，不再解释。\n- %l：远程逻辑用户名，一律是”-”，可以忽略。\n- %u：授权的远程用户名，如果没有，则是”-”。\n- %t：访问的时间。\n- %r：请求的第一行，即请求方法(get/post等)、uri、及协议。\n- %s：响应状态，200,404等等。\n- %b：响应的数据量，不包括请求头，如果为0，则是””-。\n\n例如，下面是访问日志中的一条记录\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/access_log.png\"/>\n\n</div>\n\npattern的配置中，除了上述各项，还有一个非常常用的选项是%D，含义是请求处理的时间(单位是毫秒)，对于统计分析请求的处理速度帮助很大。\n\n开发人员可以充分利用访问日志，来分析问题、优化应用。例如，分析访问日志中各个接口被访问的比例，不仅可以为需求和运营人员提供数据支持，还可以使自己的优化有的放矢；分析访问日志中各个请求的响应状态码，可以知道服务器请求的成功率，并找出有问题的请求；分析访问日志中各个请求的响应时间，可以找出慢请求，并根据需要进行响应时间的优化。\n\n## 参考文档\n\n- Tomcat官方文档\n- 《How Tomcat Works》\n- 《深入分析Java Web技术内幕》\n- [详解 Tomcat 配置文件 server.xml](https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&mid=2651478920&idx=1&sn=c3f23f9bc0707930e5634e5ae61b499c&chksm=bd2537f78a52bee1c04ad1fb410e2d62c6714f6851a21ab36d26c117dd0cdf02925f4295485b&mpshare=1&scene=24&srcid=08266j3OTBuUem8l94WhpTAK#rd)","source":"_posts/tomcat入门.md","raw":"---\ntitle: Tomcat入门\ndate: 2017-12-20 14:35:32\ntags: [tomcat,tips]\ncategories: technology\n---\n\n# 引言\n\nTomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器。说是经常用到，也只是熟悉，还没没有真正达到了解其中的原理和其中配置的意义，最近也找了一些书籍来看，先入门。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat.jpg\"/></div><!-- more -->\n\n# Tomcat简介\n\nTomcat的下载包解压之后的目录\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat%E7%9B%AE%E5%BD%95.jpg\"/>\n\n</div>\n\nTomcat根目录在Tomcat中叫`<CATALINA_HOME>`\n\n**`<CATALINA_HOME>`/bin：**存放各种平台下启动和关闭Tomcat的脚本文件。其中有个是catalina.bat，打开这个windows配置文件，在非注释行加入JDK路径,例如 : SET  JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_141，其中对JDK的优化也在catalina.bat中配置，保存后就配置好Tomcat环境了。 startup.bat是windows下启动Tomcat的脚本文件，shutdown.bat是关闭Tomcat的脚本文件。\n\n**`<CATALINA_HOME>`/conf**：*存放不同的配置文件（如：server.xml和web.xml）*\n\n　　server.xml文件：该文件用于配置和server相关的信息，比如tomcat启动的端口号、配置host主机、配置Context，接下来会重点讲述。\n\n　　web.xml文件：部署描述文件，这个web.xml中描述了一些默认的servlet，部署每个webapp时，都会调用这个文件，配置该web应用的默认servlet。\n\n　　tomcat-users.xml文件：配置tomcat的用户密码与权限。\n\n　　context.xml：定义web应用的默认行为。\n**`<CATALINA_HOME>`/lib：**存放Tomcat运行需要的库文件（Jars）； \n**`<CATALINA_HOME>`/logs：**存放Tomcat执行时的log文件； \n**`<CATALINA_HOME>`/temp：** 存放Tomcat运行时产生的文件，如缓存等；\n**`<CATALINA_HOME>`/webapps：**Tomcat的主要Web发布目录（包括应用程序示例）；\n\n**`<CATALINA_HOME>`/work**：存放jsp编译后产生的class文件； \n\n**【Tomcat的启动过程】**Tomcat 先根据**/conf/server.xml** 下的配置启动Server，再加载Service，对于与Engine相匹配的Host，每个Host 下面都有一个或多个Context。\n\n　　注意：Context 既可配置在server.xml 下，也可配置成一单独的文件，放在conf\\Catalina\\localhost 下，简称应用配置文件。\n\n　　Web Application 对应一个Context，每个Web Application 由一个或多个Servlet 组成。当一个Web Application 被初始化的时候，它将用自己的ClassLoader 对象载入部署配置文件web.xml 中定义的每个Servlet 类：它首先载入在$CATALINA_HOME/conf/web.xml中部署的Servlet 类，然后载入在自己的Web Application 根目录下WEB-INF/web.xml 中部署的Servlet 类。\n\nweb.xml 文件有两部分：Servlet 类定义和Servlet 映射定义。每个被载入的Servlet 类都有一个名字，且被填入该Context 的映射表(mapping table)中，和某种URL 路径对应。当该Context 获得请求时，将查询mapping table，找到被请求的Servlet，并执行以获得请求响应。\n\n# Tomcat一个server实例\n\n\n\n```xml\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JasperListener\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\"\n              type=\"org.apache.catalina.UserDatabase\"\n              description=\"User database that can be updated and saved\"\n              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n              pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"webapps\"\n            unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n```\n\n# server.xml文档的元素分类和整体结构\n\n### 整体结构\n\nserver.xml的整体结构如下：\n\n```xml\n<Server>\n    <Service>\n        <Connector/>\n        <Connector/>\n        <Engine>\n            <Host>\n                <Context/><!-- 现在常常使用自动部署，不推荐配置Context元素，Context小节有详细说明 -->\n            </Host>\n        </Engine>\n    </Service>\n</Server>\n```\n\n该结构中只给出了Tomcat的核心组件，除了核心组件外，Tomcat还有一些其他组件，下面介绍一下组件的分类。\n\n### 元素分类\n\nserver.xml文件中的元素可以分为以下4类：\n\n（1）顶层元素：`<Server>`和`<Service>`\n\n`<Server>`元素是整个配置文件的根元素，`<Service>`元素则代表一个Engine元素以及一组与之相连的Connector元素。\n\n（2）连接器：`<Connector>`\n\n`<Connector>`代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。\n\n（3）容器：`<Engine><Host><Context>`\n\n容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。\n\n（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。\n\n### 核心组件\n\n**1、Server**\n\nServer元素在最顶层，代表整个Tomcat容器，因此它必须是server.xml中唯一一个最外层的元素。一个Server元素中可以有一个或多个Service元素。\n\n在第一部分的例子中，在最外层有一个`<Server>`元素，shutdown属性表示关闭Server的指令；port属性表示Server接收shutdown指令的端口号，设为-1可以禁掉该端口。\n\nServer的主要任务，就是提供一个接口让客户端能够访问到这个Service集合，同时维护它所包含的所有的Service的声明周期，包括如何初始化、如何结束服务、如何找到客户端要访问的Service。\n\n**2、Service**\n\nService的作用，是在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；其中Connector的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。\n\n在第一部分的例子中，Server中包含一个名称为“Catalina”的Service。实际上，Tomcat可以提供多个Service，不同的Service监听不同的端口。\n\n**3、Connector**\n\nConnector的主要功能，是接收连接请求，**创建Request和Response对象用于和请求端交换数据**；然后分配线程让Engine来处理这个请求，并把产生的Request和Response对象传给Engine。\n\n通过配置Connector，可以控制请求Service的协议及端口号。在第一部分的例子中，Service包含两个Connector：\n\n> `<Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />`\n>\n> `<Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />`\n\n（1）通过配置第1个Connector，客户端可以通过8080端口号使用http协议访问Tomcat。其中，protocol属性规定了请求的协议，port规定了请求的端口号，redirectPort表示当强制要求https而请求是http时，重定向至端口号为8443的Connector，connectionTimeout表示连接的超时时间。\n\n在这个例子中，Tomcat监听HTTP请求，使用的是8080端口，而不是正式的80端口；实际上，在正式的生产环境中，Tomcat也常常监听8080端口，而不是80端口。这是因为在生产环境中，很少将Tomcat直接对外开放接收请求，而是在Tomcat和客户端之间加一层代理服务器(如nginx)，用于请求的转发、负载均衡、处理静态文件等；通过代理服务器访问Tomcat时，是在局域网中，因此一般仍使用8080端口。\n\n（2）通过配置第2个Connector，客户端可以通过8009端口号使用AJP协议访问Tomcat。AJP协议负责和其他的HTTP服务器(如Apache)建立连接；在把Tomcat与其他HTTP服务器集成时，就需要用到这个连接器。之所以使用Tomcat和其他服务器集成，是因为Tomcat可以用作Servlet/JSP容器，但是对静态资源的处理速度较慢，不如Apache和IIS等HTTP服务器；因此常常将Tomcat与Apache等集成，前者作Servlet容器，后者处理静态资源，而AJP协议便负责Tomcat和Apache的连接。Tomcat与Apache等集成的原理如下图：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat-Apache.png\"/>\n\n</div>\n\n**4、Engine**\n\nEngine组件在Service组件中有且只有一个；Engine是Service组件中的请求处理组件。Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。\n\n前面已经提到过，Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。\n\n在第一部分的例子中，Engine的配置语句如下：\n\n> `<Engine name=\"Catalina\" defaultHost=\"localhost\">`\n\n其中，name属性用于日志和错误信息，在整个Server中应该唯一。defaultHost属性指定了默认的host名称，当发往本机的请求指定的host名称不存在时，一律使用defaultHost指定的host进行处理；因此，defaultHost的值，必须与Engine中的一个Host组件的name属性值匹配。\n\n**5、Host**\n\n（1）Engine与Host\n\nHost是Engine的子容器。Engine组件中可以内嵌1个或多个Host组件，每个Host组件代表Engine中的一个虚拟主机。Host组件至少有一个，且其中一个的name必须与Engine组件的defaultHost属性相匹配。\n\n（2）Host的作用\n\nHost虚拟主机的作用，是运行多个Web应用（一个Context代表一个Web应用），并负责安装、展开、启动和结束每个Web应用。\n\nHost组件代表的虚拟主机，对应了服务器中一个网络名实体(如”www.test.com”，或IP地址”116.25.25.25”)；为了使用户可以通过网络名连接Tomcat服务器，这个名字应该在DNS服务器上注册。\n\n客户端通常使用主机名来标识它们希望连接的服务器；该主机名也会包含在HTTP请求头中。Tomcat从HTTP头中提取出主机名，寻找名称匹配的主机。如果没有匹配，请求将发送至默认主机。因此默认主机不需要是在DNS服务器中注册的网络名，因为任何与所有Host名称不匹配的请求，都会路由至默认主机。\n\n（3）Host的配置\n\n在第一部分的例子中，Host的配置如下：\n\n> `<Host name=\"localhost\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\">`\n\n下面对其中配置的属性进行说明：\n\nname属性指定虚拟主机的主机名，一个Engine中有且仅有一个Host组件的name属性与Engine组件的defaultHost属性相匹配；一般情况下，主机名需要是在DNS服务器中注册的网络名，但是Engine指定的defaultHost不需要，原因在前面已经说明。\n\nunpackWARs指定了是否将代表Web应用的WAR文件解压；如果为true，通过解压后的文件结构运行该Web应用，如果为false，直接使用WAR文件运行Web应用。\n\nHost的autoDeploy和appBase属性，与Host内Web应用的自动部署有关；此外，本例中没有出现的xmlBase和deployOnStartup属性，也与Web应用的自动部署有关。\n\n**6、Context**\n\n（1）Context的作用\n\nContext元素代表在特定虚拟主机上运行的一个Web应用。在后文中，提到Context、应用或Web应用，它们指代的都是Web应用。每个Web应用基于WAR文件，或WAR文件解压后对应的目录（这里称为应用目录）。\n\nContext是Host的子容器，每个Host中可以定义任意多的Context元素。\n\n在第一部分的例子中，可以看到server.xml配置文件中并没有出现Context元素的配置。这是因为，Tomcat开启了自动部署，Web应用没有在server.xml中配置静态部署，而是由Tomcat通过特定的规则自动部署。下面介绍一下Tomcat自动部署Web应用的机制。\n\n（2）Web应用自动部署\n\n**Host的配置**\n\n要开启Web应用的自动部署，需要配置所在的虚拟主机；配置的方式就是前面提到的Host元素的deployOnStartup和autoDeploy属性。如果deployOnStartup和autoDeploy设置为true，则tomcat启动自动部署：当检测到新的Web应用或Web应用的更新时，会触发应用的部署(或重新部署)。二者的主要区别在于，deployOnStartup为true时，Tomcat在启动时检查Web应用，且检测到的所有Web应用视作新应用；autoDeploy为true时，Tomcat在运行时定期检查新的Web应用或Web应用的更新。除此之外，二者的处理相似。\n\n通过配置deployOnStartup和autoDeploy可以开启虚拟主机自动部署Web应用；实际上，自动部署依赖于检查是否有新的或更改过的Web应用，而Host元素的appBase和xmlBase设置了检查Web应用更新的目录。\n\n其中，appBase属性指定Web应用所在的目录，默认值是webapps，这是一个相对路径，代表Tomcat根目录下webapps文件夹。\n\nxmlBase属性指定Web应用的XML配置文件所在的目录，默认值为conf/`<engine_name>`/`<host_name>`，例如第一部分的例子中，主机localhost的xmlBase的默认值是$TOMCAT_HOME/conf/Catalina/localhost。\n\n**检查Web应用更新**\n\n一个Web应用可能包括以下文件：XML配置文件，WAR包，以及一个应用目录(该目录包含Web应用的文件结构)；其中XML配置文件位于xmlBase指定的目录，WAR包和应用目录位于appBase指定的目录。\n\nTomcat按照如下的顺序进行扫描，来检查应用更新：\n\nA、扫描虚拟主机指定的xmlBase下的XML配置文件\n\nB、扫描虚拟主机指定的appBase下的WAR文件\n\nC、扫描虚拟主机指定的appBase下的应用目录\n\n**`<Context>`元素的配置**\n\nContext元素最重要的属性是docBase和path，此外reloadable属性也比较常用。\n\ndocBase指定了该Web应用使用的WAR包路径，或应用目录。需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，docBase不在appBase目录中，才需要指定；如果docBase指定的WAR包或应用目录就在docBase中，则不需要指定，因为Tomcat会自动扫描appBase中的WAR包和应用目录，指定了反而会造成问题。\n\npath指定了访问该Web应用的上下文路径，当请求到来时，Tomcat根据Web应用的 path属性与URI的匹配程度来选择Web应用处理相应请求。例如，Web应用app1的path属性是”/app1”，Web应用app2的path属性是”/app2”，那么请求/app1/index.html会交由app1来处理；而请求/app2/index.html会交由app2来处理。如果一个Context元素的path属性为””，那么这个Context是虚拟主机的默认Web应用；当请求的uri与所有的path都不匹配时，使用该默认Web应用来处理。\n\n但是，需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，不能指定path属性，path属性由配置文件的文件名、WAR文件的文件名或应用目录的名称自动推导出来。如扫描Web应用时，发现了xmlBase目录下的app1.xml，或appBase目录下的app1.WAR或app1应用目录，则该Web应用的path属性是”app1”。如果名称不是app1而是ROOT，则该Web应用是虚拟主机默认的Web应用，此时path属性推导为””。\n\nreloadable属性指示tomcat是否在运行时监控在WEB-INF/classes和WEB-INF/lib目录下class文件的改动。如果值为true，那么当class文件改动时，会触发Web应用的重新加载。在开发环境下，reloadable设置为true便于调试；但是在生产环境中设置为true会给服务器带来性能压力，因此reloadable参数的默认值为false。\n\n下面来看自动部署时，xmlBase下的XML配置文件app1.xml的例子：\n\n> `<Context docBase=\"D:\\Program Files\\app1.war\" reloadable=\"true\"/>`\n\n在该例子中，docBase位于Host的appBase目录之外；path属性没有指定，而是根据app1.xml自动推导为”app1”；由于是在开发环境下，因此reloadable设置为true，便于开发调试。\n\n**自动部署举例**\n\n最典型的自动部署，就是当我们安装完Tomcat后，$TOMCAT_HOME/webapps目录下有如下文件夹：\n\n<div align=center><img width=\"100\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/%E7%9B%AE%E5%BD%95.png\"/>\n\n</div>\n\n当我们启动Tomcat后，可以使用http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的Web应用；我们也可以通过http://localhost:8080/docs来访问docs应用，同理我们可以访问examples/host-manager/manager这几个Web应用。\n\n（3）server.xml中静态部署Web应用\n\n除了自动部署，我们也可以在server.xml中通过`<context>`元素静态部署Web应用。静态部署与自动部署是可以共存的。在实际应用中，并不推荐使用静态部署，因为server.xml 是不可动态重加载的资源，服务器一旦启动了以后，要修改这个文件，就得重启服务器才能重新加载。而自动部署可以在Tomcat运行时通过定期的扫描来实现，不需要重启服务器。\n\nserver.xml中使用Context元素配置Web应用，Context元素应该位于Host元素中。举例如下：\n\n> `<Context path=\"/\" docBase=\"D:\\Program Files \\app1.war\" reloadable=\"true\"/>`\n\ndocBase：静态部署时，docBase可以在appBase目录下，也可以不在；本例中，docBase不在appBase目录下。\n\npath：静态部署时，可以显式指定path属性，但是仍然受到了严格的限制：只有当自动部署完全关闭(deployOnStartup和autoDeploy都为false)或docBase不在appBase中时，才可以设置path属性。在本例中，docBase不在appBase中，因此path属性可以设置。\n\nreloadable属性的用法与自动部署时相同。\n\n### 核心组件的关联\n\n**1、整体关系**\n\n核心组件之间的整体关系，在上一部分有所介绍，这里总结一下：\n\nServer元素在最顶层，代表整个Tomcat容器；一个Server元素中可以有一个或多个Service元素。\n\nService在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；Connector接收请求，Engine处理请求。\n\nEngine、Host和Context都是容器，且 Engine包含Host，Host包含Context。每个Host组件代表Engine中的一个虚拟主机；每个Context组件代表在特定Host上运行的一个Web应用。\n\n**2、如何确定请求由谁处理？**\n\n当请求被发送到Tomcat所在的主机时，如何确定最终哪个Web应用来处理该请求呢？\n\n（1）根据协议和端口号选定Service和Engine\n\nService中的Connector组件可以接收特定端口的请求，因此，当Tomcat启动时，Service组件就会监听特定的端口。在第一部分的例子中，Catalina这个Service监听了8080端口（基于HTTP协议）和8009端口（基于AJP协议）。当请求进来时，Tomcat便可以根据协议和端口号选定处理请求的Service；Service一旦选定，Engine也就确定。\n\n通过在Server中配置多个Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。\n\n（2）根据域名或IP地址选定Host\n\nService确定后，Tomcat在Service中寻找名称与域名/IP地址匹配的Host处理该请求。如果没有找到，则使用Engine中指定的defaultHost来处理该请求。在第一部分的例子中，由于只有一个Host（name属性为localhost），因此该Service/Engine的所有请求都交给该Host处理。\n\n（3）根据URI选定Context/Web应用\n\n这一点在Context一节有详细的说明：Tomcat根据应用的 path属性与URI的匹配程度来选择Web应用处理相应请求，这里不再赘述。\n\n（4）举例\n\n以请求http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。\n\n**3、如何配置多个服务**\n\n通过在Server中配置多个Service服务，可以实现通过不同的端口号来访问同一台机器上部署的不同Web应用。\n\n在server.xml中配置多服务的方法非常简单，分为以下几步：\n\n（1）复制`<Service>`元素，放在当前`<Service>`后面。\n\n（2）修改端口号：根据需要监听的端口号修改`<Connector>`元素的port属性；必须确保该端口没有被其他进程占用，否则Tomcat启动时会报错，而无法通过该端口访问Web应用。\n\n以Win7为例，可以用如下方法找出某个端口是否被其他进程占用：netstat -aon|findstr “8081″发现8081端口被PID为2064的进程占用，tasklist |findstr “2064″发现该进程为FrameworkService.exe(这是McAfee杀毒软件的进程)。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/task.png\"/>\n\n</div>\n\n（3）修改Service和Engine的name属性\n\n（4）修改Host的appBase属性（如webapps2）\n\n（5）Web应用仍然使用自动部署\n\n（6）将要部署的Web应用(WAR包或应用目录)拷贝到新的appBase下。\n\n以第一部分的server.xml为例，多个Service的配置如下：\n\n```xml\n<?xml version='1.0' encoding='utf-8'?>\n<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n  <Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n  <Listener className=\"org.apache.catalina.core.JasperListener\" />\n  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n  <GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\" type=\"org.apache.catalina.UserDatabase\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" pathname=\"conf/tomcat-users.xml\" />\n  </GlobalNamingResources>\n  <Service name=\"Catalina\">\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"/opt/project/webapps\" unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n  <Service name=\"Catalina2\">\n    <Connector port=\"8084\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" />\n    <Connector port=\"8010\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n    <Engine name=\"Catalina2\" defaultHost=\"localhost\">\n      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n               resourceName=\"UserDatabase\"/>\n      </Realm>\n      <Host name=\"localhost\"  appBase=\"/opt/project/webapps2\" unpackWARs=\"true\" autoDeploy=\"true\">\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n      </Host>\n    </Engine>\n  </Service>\n</Server>\n```\n\n再将原webapps下的docs目录拷贝到webapps2中，则通过如下两个接口都可以访问docs应用：\n\nhttp://localhost:8080/docs/\n\nhttp://localhost:8084/docs/\n\n### 其他组件\n\n除核心组件外，server.xml中还可以配置很多其他组件。下面只介绍第一部分例子中出现的组件，如果要了解更多内容，可以查看Tomcat官方文档。\n\n**1、Listener**\n\n```xml\n<Listener className=\"org.apache.catalina.startup.VersionLoggerListener\" />\n<Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n<Listener className=\"org.apache.catalina.core.JasperListener\" />\n<Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n<Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n<Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n```\n\nListener(即监听器)定义的组件，可以在特定事件发生时执行特定的操作；被监听的事件通常是Tomcat的启动和停止。\n\n监听器可以在Server、Engine、Host或Context中，本例中的监听器都是在Server中。实际上，本例中定义的6个监听器，都只能存在于Server组件中。监听器不允许内嵌其他组件。\n\n监听器需要配置的最重要的属性是className，该属性规定了监听器的具体实现类，该类必须实现了org.apache.catalina.LifecycleListener接口。\n\n下面依次介绍例子中配置的监听器：\n\n- VersionLoggerListener：当Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。\n- AprLifecycleListener：Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime，是Apache可移植运行库，可以实现高可扩展性、高性能，以及与本地服务器技术更好的集成。\n- JasperListener：在Web应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，然后编译成class文件供JVM使用。\n- JreMemoryLeakPreventionListener：与类加载器导致的内存泄露有关。\n- GlobalResourcesLifecycleListener：通过该监听器，初始化< GlobalNamingResources>标签中定义的全局JNDI资源；如果没有该监听器，任何全局资源都不能使用。< GlobalNamingResources>将在后文介绍。\n- ThreadLocalLeakPreventionListener：当Web应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新。当线程执行完任务被收回线程池时，活跃线程会一个一个的更新。只有当Web应用(即Context元素)的renewThreadsWhenStoppingContext属性设置为true时，该监听器才有效。\n\n**2、GlobalNamingResources与Realm**\n\n第一部分的例子中，Engine组件下定义了Realm组件：\n\n```xml\n<Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n                resourceName=\"UserDatabase\"/>\n</Realm>\n```\n\nRealm，可以把它理解成“域”；Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用。在本例中，Realm的配置使用name为UserDatabase的资源实现。而该资源在Server元素中使用GlobalNamingResources配置：\n\n```xml\n<GlobalNamingResources>\n    <Resource name=\"UserDatabase\" auth=\"Container\" type=\"org.apache.catalina.UserDatabase\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" pathname=\"conf/tomcat-users.xml\" />\n</GlobalNamingResources>\n```\n\n**3、Valve**\n\n在第一部分的例子中，Host元素内定义了Valve组件：\n\n```xml\n<Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\" prefix=\"localhost_access_log.\" suffix=\".txt\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n```\n\n单词Valve的意思是“阀门”，在Tomcat中代表了请求处理流水线上的一个组件；Valve可以与Tomcat的容器(Engine、Host或Context)关联。\n\n不同的Valve有不同的特性，下面介绍一下本例中出现的AccessLogValve。\n\nAccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求，在本例中，Valve放在Host下，便可以记录该Host处理的所有请求。AccessLogValve记录的日志就是访问日志，每天的请求会写到一个日志文件里。AccessLogValve可以与Engine、Host或Context关联；在本例中，只有一个Engine，Engine下只有一个Host，Host下只有一个Context，因此AccessLogValve放在三个容器下的作用其实是类似的。\n\n本例的AccessLogValve属性的配置，使用的是默认的配置；下面介绍AccessLogValve中各个属性的作用：\n\n（1）className：规定了Valve的类型，是最重要的属性；本例中，通过该属性规定了这是一个AccessLogValve。\n\n（2）directory：指定日志存储的位置，本例中，日志存储在$TOMCAT_HOME/logs目录下。\n\n（3）prefix：指定了日志文件的前缀。\n\n（4）suffix：指定了日志文件的后缀。通过directory、prefix和suffix的配置，在$TOMCAT_HOME/logs目录下，可以看到如下所示的日志文件。\n\n<div align=center><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/log.png\"/>\n\n</div>\n\n（5）pattern：指定记录日志的格式，本例中各项的含义如下：\n\n- %h：远程主机名或IP地址；如果有nginx等反向代理服务器进行请求分发，该主机名/IP地址代表的是nginx，否则代表的是客户端。后面远程的含义与之类似，不再解释。\n- %l：远程逻辑用户名，一律是”-”，可以忽略。\n- %u：授权的远程用户名，如果没有，则是”-”。\n- %t：访问的时间。\n- %r：请求的第一行，即请求方法(get/post等)、uri、及协议。\n- %s：响应状态，200,404等等。\n- %b：响应的数据量，不包括请求头，如果为0，则是””-。\n\n例如，下面是访问日志中的一条记录\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/access_log.png\"/>\n\n</div>\n\npattern的配置中，除了上述各项，还有一个非常常用的选项是%D，含义是请求处理的时间(单位是毫秒)，对于统计分析请求的处理速度帮助很大。\n\n开发人员可以充分利用访问日志，来分析问题、优化应用。例如，分析访问日志中各个接口被访问的比例，不仅可以为需求和运营人员提供数据支持，还可以使自己的优化有的放矢；分析访问日志中各个请求的响应状态码，可以知道服务器请求的成功率，并找出有问题的请求；分析访问日志中各个请求的响应时间，可以找出慢请求，并根据需要进行响应时间的优化。\n\n## 参考文档\n\n- Tomcat官方文档\n- 《How Tomcat Works》\n- 《深入分析Java Web技术内幕》\n- [详解 Tomcat 配置文件 server.xml](https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&mid=2651478920&idx=1&sn=c3f23f9bc0707930e5634e5ae61b499c&chksm=bd2537f78a52bee1c04ad1fb410e2d62c6714f6851a21ab36d26c117dd0cdf02925f4295485b&mpshare=1&scene=24&srcid=08266j3OTBuUem8l94WhpTAK#rd)","slug":"tomcat入门","published":1,"updated":"2018-03-13T05:52:58.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u2s00263gfkj3f4lecm","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器。说是经常用到，也只是熟悉，还没没有真正达到了解其中的原理和其中配置的意义，最近也找了一些书籍来看，先入门。<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat.jpg\"></div><a id=\"more\"></a></p>\n<h1 id=\"Tomcat简介\"><a href=\"#Tomcat简介\" class=\"headerlink\" title=\"Tomcat简介\"></a>Tomcat简介</h1><p>Tomcat的下载包解压之后的目录</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat%E7%9B%AE%E5%BD%95.jpg\"><br><br></div>\n\n<p>Tomcat根目录在Tomcat中叫<code>&lt;CATALINA_HOME&gt;</code></p>\n<p><strong><code>&lt;CATALINA_HOME&gt;</code>/bin：</strong>存放各种平台下启动和关闭Tomcat的脚本文件。其中有个是catalina.bat，打开这个windows配置文件，在非注释行加入JDK路径,例如 : SET  JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_141，其中对JDK的优化也在catalina.bat中配置，保存后就配置好Tomcat环境了。 startup.bat是windows下启动Tomcat的脚本文件，shutdown.bat是关闭Tomcat的脚本文件。</p>\n<p><strong><code>&lt;CATALINA_HOME&gt;</code>/conf</strong>：<em>存放不同的配置文件（如：server.xml和web.xml）</em></p>\n<p>　　server.xml文件：该文件用于配置和server相关的信息，比如tomcat启动的端口号、配置host主机、配置Context，接下来会重点讲述。</p>\n<p>　　web.xml文件：部署描述文件，这个web.xml中描述了一些默认的servlet，部署每个webapp时，都会调用这个文件，配置该web应用的默认servlet。</p>\n<p>　　tomcat-users.xml文件：配置tomcat的用户密码与权限。</p>\n<p>　　context.xml：定义web应用的默认行为。<br><strong><code>&lt;CATALINA_HOME&gt;</code>/lib：</strong>存放Tomcat运行需要的库文件（Jars）；<br><strong><code>&lt;CATALINA_HOME&gt;</code>/logs：</strong>存放Tomcat执行时的log文件；<br><strong><code>&lt;CATALINA_HOME&gt;</code>/temp：</strong> 存放Tomcat运行时产生的文件，如缓存等；<br><strong><code>&lt;CATALINA_HOME&gt;</code>/webapps：</strong>Tomcat的主要Web发布目录（包括应用程序示例）；</p>\n<p><strong><code>&lt;CATALINA_HOME&gt;</code>/work</strong>：存放jsp编译后产生的class文件； </p>\n<p><strong>【Tomcat的启动过程】</strong>Tomcat 先根据<strong>/conf/server.xml</strong> 下的配置启动Server，再加载Service，对于与Engine相匹配的Host，每个Host 下面都有一个或多个Context。</p>\n<p>　　注意：Context 既可配置在server.xml 下，也可配置成一单独的文件，放在conf\\Catalina\\localhost 下，简称应用配置文件。</p>\n<p>　　Web Application 对应一个Context，每个Web Application 由一个或多个Servlet 组成。当一个Web Application 被初始化的时候，它将用自己的ClassLoader 对象载入部署配置文件web.xml 中定义的每个Servlet 类：它首先载入在$CATALINA_HOME/conf/web.xml中部署的Servlet 类，然后载入在自己的Web Application 根目录下WEB-INF/web.xml 中部署的Servlet 类。</p>\n<p>web.xml 文件有两部分：Servlet 类定义和Servlet 映射定义。每个被载入的Servlet 类都有一个名字，且被填入该Context 的映射表(mapping table)中，和某种URL 路径对应。当该Context 获得请求时，将查询mapping table，找到被请求的Servlet，并执行以获得请求响应。</p>\n<h1 id=\"Tomcat一个server实例\"><a href=\"#Tomcat一个server实例\" class=\"headerlink\" title=\"Tomcat一个server实例\"></a>Tomcat一个server实例</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8005\"</span> <span class=\"attr\">shutdown</span>=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.startup.VersionLoggerListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.AprLifecycleListener\"</span> <span class=\"attr\">SSLEngine</span>=<span class=\"string\">\"on\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JasperListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Resource</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserDatabase\"</span> <span class=\"attr\">auth</span>=<span class=\"string\">\"Container\"</span></span></div><div class=\"line\">              <span class=\"attr\">type</span>=<span class=\"string\">\"org.apache.catalina.UserDatabase\"</span></div><div class=\"line\">              <span class=\"attr\">description</span>=<span class=\"string\">\"User database that can be updated and saved\"</span></div><div class=\"line\">              <span class=\"attr\">factory</span>=<span class=\"string\">\"org.apache.catalina.users.MemoryUserDatabaseFactory\"</span></div><div class=\"line\">              <span class=\"attr\">pathname</span>=<span class=\"string\">\"conf/tomcat-users.xml\"</span> /&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8009\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></span></div><div class=\"line\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span></span></div><div class=\"line\">            <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span></span></div><div class=\"line\">               <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span></div><div class=\"line\">               <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Server</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"server-xml文档的元素分类和整体结构\"><a href=\"#server-xml文档的元素分类和整体结构\" class=\"headerlink\" title=\"server.xml文档的元素分类和整体结构\"></a>server.xml文档的元素分类和整体结构</h1><h3 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h3><p>server.xml的整体结构如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Connector</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Connector</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Context</span>/&gt;</span><span class=\"comment\">&lt;!-- 现在常常使用自动部署，不推荐配置Context元素，Context小节有详细说明 --&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Server</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>该结构中只给出了Tomcat的核心组件，除了核心组件外，Tomcat还有一些其他组件，下面介绍一下组件的分类。</p>\n<h3 id=\"元素分类\"><a href=\"#元素分类\" class=\"headerlink\" title=\"元素分类\"></a>元素分类</h3><p>server.xml文件中的元素可以分为以下4类：</p>\n<p>（1）顶层元素：<code>&lt;Server&gt;</code>和<code>&lt;Service&gt;</code></p>\n<p><code>&lt;Server&gt;</code>元素是整个配置文件的根元素，<code>&lt;Service&gt;</code>元素则代表一个Engine元素以及一组与之相连的Connector元素。</p>\n<p>（2）连接器：<code>&lt;Connector&gt;</code></p>\n<p><code>&lt;Connector&gt;</code>代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。</p>\n<p>（3）容器：<code>&lt;Engine&gt;&lt;Host&gt;&lt;Context&gt;</code></p>\n<p>容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。</p>\n<p>（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。</p>\n<h3 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h3><p><strong>1、Server</strong></p>\n<p>Server元素在最顶层，代表整个Tomcat容器，因此它必须是server.xml中唯一一个最外层的元素。一个Server元素中可以有一个或多个Service元素。</p>\n<p>在第一部分的例子中，在最外层有一个<code>&lt;Server&gt;</code>元素，shutdown属性表示关闭Server的指令；port属性表示Server接收shutdown指令的端口号，设为-1可以禁掉该端口。</p>\n<p>Server的主要任务，就是提供一个接口让客户端能够访问到这个Service集合，同时维护它所包含的所有的Service的声明周期，包括如何初始化、如何结束服务、如何找到客户端要访问的Service。</p>\n<p><strong>2、Service</strong></p>\n<p>Service的作用，是在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；其中Connector的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。</p>\n<p>在第一部分的例子中，Server中包含一个名称为“Catalina”的Service。实际上，Tomcat可以提供多个Service，不同的Service监听不同的端口。</p>\n<p><strong>3、Connector</strong></p>\n<p>Connector的主要功能，是接收连接请求，<strong>创建Request和Response对象用于和请求端交换数据</strong>；然后分配线程让Engine来处理这个请求，并把产生的Request和Response对象传给Engine。</p>\n<p>通过配置Connector，可以控制请求Service的协议及端口号。在第一部分的例子中，Service包含两个Connector：</p>\n<blockquote>\n<p><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code></p>\n<p><code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code></p>\n</blockquote>\n<p>（1）通过配置第1个Connector，客户端可以通过8080端口号使用http协议访问Tomcat。其中，protocol属性规定了请求的协议，port规定了请求的端口号，redirectPort表示当强制要求https而请求是http时，重定向至端口号为8443的Connector，connectionTimeout表示连接的超时时间。</p>\n<p>在这个例子中，Tomcat监听HTTP请求，使用的是8080端口，而不是正式的80端口；实际上，在正式的生产环境中，Tomcat也常常监听8080端口，而不是80端口。这是因为在生产环境中，很少将Tomcat直接对外开放接收请求，而是在Tomcat和客户端之间加一层代理服务器(如nginx)，用于请求的转发、负载均衡、处理静态文件等；通过代理服务器访问Tomcat时，是在局域网中，因此一般仍使用8080端口。</p>\n<p>（2）通过配置第2个Connector，客户端可以通过8009端口号使用AJP协议访问Tomcat。AJP协议负责和其他的HTTP服务器(如Apache)建立连接；在把Tomcat与其他HTTP服务器集成时，就需要用到这个连接器。之所以使用Tomcat和其他服务器集成，是因为Tomcat可以用作Servlet/JSP容器，但是对静态资源的处理速度较慢，不如Apache和IIS等HTTP服务器；因此常常将Tomcat与Apache等集成，前者作Servlet容器，后者处理静态资源，而AJP协议便负责Tomcat和Apache的连接。Tomcat与Apache等集成的原理如下图：</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat-Apache.png\"><br><br></div>\n\n<p><strong>4、Engine</strong></p>\n<p>Engine组件在Service组件中有且只有一个；Engine是Service组件中的请求处理组件。Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。</p>\n<p>前面已经提到过，Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。</p>\n<p>在第一部分的例子中，Engine的配置语句如下：</p>\n<blockquote>\n<p><code>&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</code></p>\n</blockquote>\n<p>其中，name属性用于日志和错误信息，在整个Server中应该唯一。defaultHost属性指定了默认的host名称，当发往本机的请求指定的host名称不存在时，一律使用defaultHost指定的host进行处理；因此，defaultHost的值，必须与Engine中的一个Host组件的name属性值匹配。</p>\n<p><strong>5、Host</strong></p>\n<p>（1）Engine与Host</p>\n<p>Host是Engine的子容器。Engine组件中可以内嵌1个或多个Host组件，每个Host组件代表Engine中的一个虚拟主机。Host组件至少有一个，且其中一个的name必须与Engine组件的defaultHost属性相匹配。</p>\n<p>（2）Host的作用</p>\n<p>Host虚拟主机的作用，是运行多个Web应用（一个Context代表一个Web应用），并负责安装、展开、启动和结束每个Web应用。</p>\n<p>Host组件代表的虚拟主机，对应了服务器中一个网络名实体(如”www.test.com”，或IP地址”116.25.25.25”)；为了使用户可以通过网络名连接Tomcat服务器，这个名字应该在DNS服务器上注册。</p>\n<p>客户端通常使用主机名来标识它们希望连接的服务器；该主机名也会包含在HTTP请求头中。Tomcat从HTTP头中提取出主机名，寻找名称匹配的主机。如果没有匹配，请求将发送至默认主机。因此默认主机不需要是在DNS服务器中注册的网络名，因为任何与所有Host名称不匹配的请求，都会路由至默认主机。</p>\n<p>（3）Host的配置</p>\n<p>在第一部分的例子中，Host的配置如下：</p>\n<blockquote>\n<p><code>&lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</code></p>\n</blockquote>\n<p>下面对其中配置的属性进行说明：</p>\n<p>name属性指定虚拟主机的主机名，一个Engine中有且仅有一个Host组件的name属性与Engine组件的defaultHost属性相匹配；一般情况下，主机名需要是在DNS服务器中注册的网络名，但是Engine指定的defaultHost不需要，原因在前面已经说明。</p>\n<p>unpackWARs指定了是否将代表Web应用的WAR文件解压；如果为true，通过解压后的文件结构运行该Web应用，如果为false，直接使用WAR文件运行Web应用。</p>\n<p>Host的autoDeploy和appBase属性，与Host内Web应用的自动部署有关；此外，本例中没有出现的xmlBase和deployOnStartup属性，也与Web应用的自动部署有关。</p>\n<p><strong>6、Context</strong></p>\n<p>（1）Context的作用</p>\n<p>Context元素代表在特定虚拟主机上运行的一个Web应用。在后文中，提到Context、应用或Web应用，它们指代的都是Web应用。每个Web应用基于WAR文件，或WAR文件解压后对应的目录（这里称为应用目录）。</p>\n<p>Context是Host的子容器，每个Host中可以定义任意多的Context元素。</p>\n<p>在第一部分的例子中，可以看到server.xml配置文件中并没有出现Context元素的配置。这是因为，Tomcat开启了自动部署，Web应用没有在server.xml中配置静态部署，而是由Tomcat通过特定的规则自动部署。下面介绍一下Tomcat自动部署Web应用的机制。</p>\n<p>（2）Web应用自动部署</p>\n<p><strong>Host的配置</strong></p>\n<p>要开启Web应用的自动部署，需要配置所在的虚拟主机；配置的方式就是前面提到的Host元素的deployOnStartup和autoDeploy属性。如果deployOnStartup和autoDeploy设置为true，则tomcat启动自动部署：当检测到新的Web应用或Web应用的更新时，会触发应用的部署(或重新部署)。二者的主要区别在于，deployOnStartup为true时，Tomcat在启动时检查Web应用，且检测到的所有Web应用视作新应用；autoDeploy为true时，Tomcat在运行时定期检查新的Web应用或Web应用的更新。除此之外，二者的处理相似。</p>\n<p>通过配置deployOnStartup和autoDeploy可以开启虚拟主机自动部署Web应用；实际上，自动部署依赖于检查是否有新的或更改过的Web应用，而Host元素的appBase和xmlBase设置了检查Web应用更新的目录。</p>\n<p>其中，appBase属性指定Web应用所在的目录，默认值是webapps，这是一个相对路径，代表Tomcat根目录下webapps文件夹。</p>\n<p>xmlBase属性指定Web应用的XML配置文件所在的目录，默认值为conf/<code>&lt;engine_name&gt;</code>/<code>&lt;host_name&gt;</code>，例如第一部分的例子中，主机localhost的xmlBase的默认值是$TOMCAT_HOME/conf/Catalina/localhost。</p>\n<p><strong>检查Web应用更新</strong></p>\n<p>一个Web应用可能包括以下文件：XML配置文件，WAR包，以及一个应用目录(该目录包含Web应用的文件结构)；其中XML配置文件位于xmlBase指定的目录，WAR包和应用目录位于appBase指定的目录。</p>\n<p>Tomcat按照如下的顺序进行扫描，来检查应用更新：</p>\n<p>A、扫描虚拟主机指定的xmlBase下的XML配置文件</p>\n<p>B、扫描虚拟主机指定的appBase下的WAR文件</p>\n<p>C、扫描虚拟主机指定的appBase下的应用目录</p>\n<p><strong><code>&lt;Context&gt;</code>元素的配置</strong></p>\n<p>Context元素最重要的属性是docBase和path，此外reloadable属性也比较常用。</p>\n<p>docBase指定了该Web应用使用的WAR包路径，或应用目录。需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，docBase不在appBase目录中，才需要指定；如果docBase指定的WAR包或应用目录就在docBase中，则不需要指定，因为Tomcat会自动扫描appBase中的WAR包和应用目录，指定了反而会造成问题。</p>\n<p>path指定了访问该Web应用的上下文路径，当请求到来时，Tomcat根据Web应用的 path属性与URI的匹配程度来选择Web应用处理相应请求。例如，Web应用app1的path属性是”/app1”，Web应用app2的path属性是”/app2”，那么请求/app1/index.html会交由app1来处理；而请求/app2/index.html会交由app2来处理。如果一个Context元素的path属性为””，那么这个Context是虚拟主机的默认Web应用；当请求的uri与所有的path都不匹配时，使用该默认Web应用来处理。</p>\n<p>但是，需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，不能指定path属性，path属性由配置文件的文件名、WAR文件的文件名或应用目录的名称自动推导出来。如扫描Web应用时，发现了xmlBase目录下的app1.xml，或appBase目录下的app1.WAR或app1应用目录，则该Web应用的path属性是”app1”。如果名称不是app1而是ROOT，则该Web应用是虚拟主机默认的Web应用，此时path属性推导为””。</p>\n<p>reloadable属性指示tomcat是否在运行时监控在WEB-INF/classes和WEB-INF/lib目录下class文件的改动。如果值为true，那么当class文件改动时，会触发Web应用的重新加载。在开发环境下，reloadable设置为true便于调试；但是在生产环境中设置为true会给服务器带来性能压力，因此reloadable参数的默认值为false。</p>\n<p>下面来看自动部署时，xmlBase下的XML配置文件app1.xml的例子：</p>\n<blockquote>\n<p><code>&lt;Context docBase=&quot;D:\\Program Files\\app1.war&quot; reloadable=&quot;true&quot;/&gt;</code></p>\n</blockquote>\n<p>在该例子中，docBase位于Host的appBase目录之外；path属性没有指定，而是根据app1.xml自动推导为”app1”；由于是在开发环境下，因此reloadable设置为true，便于开发调试。</p>\n<p><strong>自动部署举例</strong></p>\n<p>最典型的自动部署，就是当我们安装完Tomcat后，$TOMCAT_HOME/webapps目录下有如下文件夹：</p>\n<div align=\"center\"><img width=\"100\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/%E7%9B%AE%E5%BD%95.png\"><br><br></div>\n\n<p>当我们启动Tomcat后，可以使用<a href=\"http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的Web应用；我们也可以通过http://localhost:8080/docs来访问docs应用，同理我们可以访问examples/host-manager/manager这几个Web应用。\" target=\"_blank\" rel=\"external\">http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的Web应用；我们也可以通过http://localhost:8080/docs来访问docs应用，同理我们可以访问examples/host-manager/manager这几个Web应用。</a></p>\n<p>（3）server.xml中静态部署Web应用</p>\n<p>除了自动部署，我们也可以在server.xml中通过<code>&lt;context&gt;</code>元素静态部署Web应用。静态部署与自动部署是可以共存的。在实际应用中，并不推荐使用静态部署，因为server.xml 是不可动态重加载的资源，服务器一旦启动了以后，要修改这个文件，就得重启服务器才能重新加载。而自动部署可以在Tomcat运行时通过定期的扫描来实现，不需要重启服务器。</p>\n<p>server.xml中使用Context元素配置Web应用，Context元素应该位于Host元素中。举例如下：</p>\n<blockquote>\n<p><code>&lt;Context path=&quot;/&quot; docBase=&quot;D:\\Program Files \\app1.war&quot; reloadable=&quot;true&quot;/&gt;</code></p>\n</blockquote>\n<p>docBase：静态部署时，docBase可以在appBase目录下，也可以不在；本例中，docBase不在appBase目录下。</p>\n<p>path：静态部署时，可以显式指定path属性，但是仍然受到了严格的限制：只有当自动部署完全关闭(deployOnStartup和autoDeploy都为false)或docBase不在appBase中时，才可以设置path属性。在本例中，docBase不在appBase中，因此path属性可以设置。</p>\n<p>reloadable属性的用法与自动部署时相同。</p>\n<h3 id=\"核心组件的关联\"><a href=\"#核心组件的关联\" class=\"headerlink\" title=\"核心组件的关联\"></a>核心组件的关联</h3><p><strong>1、整体关系</strong></p>\n<p>核心组件之间的整体关系，在上一部分有所介绍，这里总结一下：</p>\n<p>Server元素在最顶层，代表整个Tomcat容器；一个Server元素中可以有一个或多个Service元素。</p>\n<p>Service在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；Connector接收请求，Engine处理请求。</p>\n<p>Engine、Host和Context都是容器，且 Engine包含Host，Host包含Context。每个Host组件代表Engine中的一个虚拟主机；每个Context组件代表在特定Host上运行的一个Web应用。</p>\n<p><strong>2、如何确定请求由谁处理？</strong></p>\n<p>当请求被发送到Tomcat所在的主机时，如何确定最终哪个Web应用来处理该请求呢？</p>\n<p>（1）根据协议和端口号选定Service和Engine</p>\n<p>Service中的Connector组件可以接收特定端口的请求，因此，当Tomcat启动时，Service组件就会监听特定的端口。在第一部分的例子中，Catalina这个Service监听了8080端口（基于HTTP协议）和8009端口（基于AJP协议）。当请求进来时，Tomcat便可以根据协议和端口号选定处理请求的Service；Service一旦选定，Engine也就确定。</p>\n<p>通过在Server中配置多个Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。</p>\n<p>（2）根据域名或IP地址选定Host</p>\n<p>Service确定后，Tomcat在Service中寻找名称与域名/IP地址匹配的Host处理该请求。如果没有找到，则使用Engine中指定的defaultHost来处理该请求。在第一部分的例子中，由于只有一个Host（name属性为localhost），因此该Service/Engine的所有请求都交给该Host处理。</p>\n<p>（3）根据URI选定Context/Web应用</p>\n<p>这一点在Context一节有详细的说明：Tomcat根据应用的 path属性与URI的匹配程度来选择Web应用处理相应请求，这里不再赘述。</p>\n<p>（4）举例</p>\n<p>以请求<a href=\"http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。\" target=\"_blank\" rel=\"external\">http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。</a></p>\n<p><strong>3、如何配置多个服务</strong></p>\n<p>通过在Server中配置多个Service服务，可以实现通过不同的端口号来访问同一台机器上部署的不同Web应用。</p>\n<p>在server.xml中配置多服务的方法非常简单，分为以下几步：</p>\n<p>（1）复制<code>&lt;Service&gt;</code>元素，放在当前<code>&lt;Service&gt;</code>后面。</p>\n<p>（2）修改端口号：根据需要监听的端口号修改<code>&lt;Connector&gt;</code>元素的port属性；必须确保该端口没有被其他进程占用，否则Tomcat启动时会报错，而无法通过该端口访问Web应用。</p>\n<p>以Win7为例，可以用如下方法找出某个端口是否被其他进程占用：netstat -aon|findstr “8081″发现8081端口被PID为2064的进程占用，tasklist |findstr “2064″发现该进程为FrameworkService.exe(这是McAfee杀毒软件的进程)。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/task.png\"><br><br></div>\n\n<p>（3）修改Service和Engine的name属性</p>\n<p>（4）修改Host的appBase属性（如webapps2）</p>\n<p>（5）Web应用仍然使用自动部署</p>\n<p>（6）将要部署的Web应用(WAR包或应用目录)拷贝到新的appBase下。</p>\n<p>以第一部分的server.xml为例，多个Service的配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8005\"</span> <span class=\"attr\">shutdown</span>=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.startup.VersionLoggerListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.AprLifecycleListener\"</span> <span class=\"attr\">SSLEngine</span>=<span class=\"string\">\"on\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JasperListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Resource</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserDatabase\"</span> <span class=\"attr\">auth</span>=<span class=\"string\">\"Container\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.apache.catalina.UserDatabase\"</span> <span class=\"attr\">description</span>=<span class=\"string\">\"User database that can be updated and saved\"</span> <span class=\"attr\">factory</span>=<span class=\"string\">\"org.apache.catalina.users.MemoryUserDatabaseFactory\"</span> <span class=\"attr\">pathname</span>=<span class=\"string\">\"conf/tomcat-users.xml\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8009\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></span></div><div class=\"line\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"/opt/project/webapps\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina2\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8084\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8010\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina2\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></span></div><div class=\"line\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"/opt/project/webapps2\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Server</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再将原webapps下的docs目录拷贝到webapps2中，则通过如下两个接口都可以访问docs应用：</p>\n<p><a href=\"http://localhost:8080/docs/\" target=\"_blank\" rel=\"external\">http://localhost:8080/docs/</a></p>\n<p><a href=\"http://localhost:8084/docs/\" target=\"_blank\" rel=\"external\">http://localhost:8084/docs/</a></p>\n<h3 id=\"其他组件\"><a href=\"#其他组件\" class=\"headerlink\" title=\"其他组件\"></a>其他组件</h3><p>除核心组件外，server.xml中还可以配置很多其他组件。下面只介绍第一部分例子中出现的组件，如果要了解更多内容，可以查看Tomcat官方文档。</p>\n<p><strong>1、Listener</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.startup.VersionLoggerListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.AprLifecycleListener\"</span> <span class=\"attr\">SSLEngine</span>=<span class=\"string\">\"on\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JasperListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>Listener(即监听器)定义的组件，可以在特定事件发生时执行特定的操作；被监听的事件通常是Tomcat的启动和停止。</p>\n<p>监听器可以在Server、Engine、Host或Context中，本例中的监听器都是在Server中。实际上，本例中定义的6个监听器，都只能存在于Server组件中。监听器不允许内嵌其他组件。</p>\n<p>监听器需要配置的最重要的属性是className，该属性规定了监听器的具体实现类，该类必须实现了org.apache.catalina.LifecycleListener接口。</p>\n<p>下面依次介绍例子中配置的监听器：</p>\n<ul>\n<li>VersionLoggerListener：当Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。</li>\n<li>AprLifecycleListener：Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime，是Apache可移植运行库，可以实现高可扩展性、高性能，以及与本地服务器技术更好的集成。</li>\n<li>JasperListener：在Web应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，然后编译成class文件供JVM使用。</li>\n<li>JreMemoryLeakPreventionListener：与类加载器导致的内存泄露有关。</li>\n<li>GlobalResourcesLifecycleListener：通过该监听器，初始化&lt; GlobalNamingResources&gt;标签中定义的全局JNDI资源；如果没有该监听器，任何全局资源都不能使用。&lt; GlobalNamingResources&gt;将在后文介绍。</li>\n<li>ThreadLocalLeakPreventionListener：当Web应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新。当线程执行完任务被收回线程池时，活跃线程会一个一个的更新。只有当Web应用(即Context元素)的renewThreadsWhenStoppingContext属性设置为true时，该监听器才有效。</li>\n</ul>\n<p><strong>2、GlobalNamingResources与Realm</strong></p>\n<p>第一部分的例子中，Engine组件下定义了Realm组件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></span></div><div class=\"line\">                <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Realm，可以把它理解成“域”；Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用。在本例中，Realm的配置使用name为UserDatabase的资源实现。而该资源在Server元素中使用GlobalNamingResources配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Resource</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserDatabase\"</span> <span class=\"attr\">auth</span>=<span class=\"string\">\"Container\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.apache.catalina.UserDatabase\"</span> <span class=\"attr\">description</span>=<span class=\"string\">\"User database that can be updated and saved\"</span> <span class=\"attr\">factory</span>=<span class=\"string\">\"org.apache.catalina.users.MemoryUserDatabaseFactory\"</span> <span class=\"attr\">pathname</span>=<span class=\"string\">\"conf/tomcat-users.xml\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GlobalNamingResources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>3、Valve</strong></p>\n<p>在第一部分的例子中，Host元素内定义了Valve组件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>单词Valve的意思是“阀门”，在Tomcat中代表了请求处理流水线上的一个组件；Valve可以与Tomcat的容器(Engine、Host或Context)关联。</p>\n<p>不同的Valve有不同的特性，下面介绍一下本例中出现的AccessLogValve。</p>\n<p>AccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求，在本例中，Valve放在Host下，便可以记录该Host处理的所有请求。AccessLogValve记录的日志就是访问日志，每天的请求会写到一个日志文件里。AccessLogValve可以与Engine、Host或Context关联；在本例中，只有一个Engine，Engine下只有一个Host，Host下只有一个Context，因此AccessLogValve放在三个容器下的作用其实是类似的。</p>\n<p>本例的AccessLogValve属性的配置，使用的是默认的配置；下面介绍AccessLogValve中各个属性的作用：</p>\n<p>（1）className：规定了Valve的类型，是最重要的属性；本例中，通过该属性规定了这是一个AccessLogValve。</p>\n<p>（2）directory：指定日志存储的位置，本例中，日志存储在$TOMCAT_HOME/logs目录下。</p>\n<p>（3）prefix：指定了日志文件的前缀。</p>\n<p>（4）suffix：指定了日志文件的后缀。通过directory、prefix和suffix的配置，在$TOMCAT_HOME/logs目录下，可以看到如下所示的日志文件。</p>\n<div align=\"center\"><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/log.png\"><br><br></div>\n\n<p>（5）pattern：指定记录日志的格式，本例中各项的含义如下：</p>\n<ul>\n<li>%h：远程主机名或IP地址；如果有nginx等反向代理服务器进行请求分发，该主机名/IP地址代表的是nginx，否则代表的是客户端。后面远程的含义与之类似，不再解释。</li>\n<li>%l：远程逻辑用户名，一律是”-”，可以忽略。</li>\n<li>%u：授权的远程用户名，如果没有，则是”-”。</li>\n<li>%t：访问的时间。</li>\n<li>%r：请求的第一行，即请求方法(get/post等)、uri、及协议。</li>\n<li>%s：响应状态，200,404等等。</li>\n<li>%b：响应的数据量，不包括请求头，如果为0，则是””-。</li>\n</ul>\n<p>例如，下面是访问日志中的一条记录</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/access_log.png\"><br><br></div>\n\n<p>pattern的配置中，除了上述各项，还有一个非常常用的选项是%D，含义是请求处理的时间(单位是毫秒)，对于统计分析请求的处理速度帮助很大。</p>\n<p>开发人员可以充分利用访问日志，来分析问题、优化应用。例如，分析访问日志中各个接口被访问的比例，不仅可以为需求和运营人员提供数据支持，还可以使自己的优化有的放矢；分析访问日志中各个请求的响应状态码，可以知道服务器请求的成功率，并找出有问题的请求；分析访问日志中各个请求的响应时间，可以找出慢请求，并根据需要进行响应时间的优化。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li>Tomcat官方文档</li>\n<li>《How Tomcat Works》</li>\n<li>《深入分析Java Web技术内幕》</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651478920&amp;idx=1&amp;sn=c3f23f9bc0707930e5634e5ae61b499c&amp;chksm=bd2537f78a52bee1c04ad1fb410e2d62c6714f6851a21ab36d26c117dd0cdf02925f4295485b&amp;mpshare=1&amp;scene=24&amp;srcid=08266j3OTBuUem8l94WhpTAK#rd\" target=\"_blank\" rel=\"external\">详解 Tomcat 配置文件 server.xml</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器。说是经常用到，也只是熟悉，还没没有真正达到了解其中的原理和其中配置的意义，最近也找了一些书籍来看，先入门。<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat.jpg\"/></div>","more":"</p>\n<h1 id=\"Tomcat简介\"><a href=\"#Tomcat简介\" class=\"headerlink\" title=\"Tomcat简介\"></a>Tomcat简介</h1><p>Tomcat的下载包解压之后的目录</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat%E7%9B%AE%E5%BD%95.jpg\"/><br><br></div>\n\n<p>Tomcat根目录在Tomcat中叫<code>&lt;CATALINA_HOME&gt;</code></p>\n<p><strong><code>&lt;CATALINA_HOME&gt;</code>/bin：</strong>存放各种平台下启动和关闭Tomcat的脚本文件。其中有个是catalina.bat，打开这个windows配置文件，在非注释行加入JDK路径,例如 : SET  JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_141，其中对JDK的优化也在catalina.bat中配置，保存后就配置好Tomcat环境了。 startup.bat是windows下启动Tomcat的脚本文件，shutdown.bat是关闭Tomcat的脚本文件。</p>\n<p><strong><code>&lt;CATALINA_HOME&gt;</code>/conf</strong>：<em>存放不同的配置文件（如：server.xml和web.xml）</em></p>\n<p>　　server.xml文件：该文件用于配置和server相关的信息，比如tomcat启动的端口号、配置host主机、配置Context，接下来会重点讲述。</p>\n<p>　　web.xml文件：部署描述文件，这个web.xml中描述了一些默认的servlet，部署每个webapp时，都会调用这个文件，配置该web应用的默认servlet。</p>\n<p>　　tomcat-users.xml文件：配置tomcat的用户密码与权限。</p>\n<p>　　context.xml：定义web应用的默认行为。<br><strong><code>&lt;CATALINA_HOME&gt;</code>/lib：</strong>存放Tomcat运行需要的库文件（Jars）；<br><strong><code>&lt;CATALINA_HOME&gt;</code>/logs：</strong>存放Tomcat执行时的log文件；<br><strong><code>&lt;CATALINA_HOME&gt;</code>/temp：</strong> 存放Tomcat运行时产生的文件，如缓存等；<br><strong><code>&lt;CATALINA_HOME&gt;</code>/webapps：</strong>Tomcat的主要Web发布目录（包括应用程序示例）；</p>\n<p><strong><code>&lt;CATALINA_HOME&gt;</code>/work</strong>：存放jsp编译后产生的class文件； </p>\n<p><strong>【Tomcat的启动过程】</strong>Tomcat 先根据<strong>/conf/server.xml</strong> 下的配置启动Server，再加载Service，对于与Engine相匹配的Host，每个Host 下面都有一个或多个Context。</p>\n<p>　　注意：Context 既可配置在server.xml 下，也可配置成一单独的文件，放在conf\\Catalina\\localhost 下，简称应用配置文件。</p>\n<p>　　Web Application 对应一个Context，每个Web Application 由一个或多个Servlet 组成。当一个Web Application 被初始化的时候，它将用自己的ClassLoader 对象载入部署配置文件web.xml 中定义的每个Servlet 类：它首先载入在$CATALINA_HOME/conf/web.xml中部署的Servlet 类，然后载入在自己的Web Application 根目录下WEB-INF/web.xml 中部署的Servlet 类。</p>\n<p>web.xml 文件有两部分：Servlet 类定义和Servlet 映射定义。每个被载入的Servlet 类都有一个名字，且被填入该Context 的映射表(mapping table)中，和某种URL 路径对应。当该Context 获得请求时，将查询mapping table，找到被请求的Servlet，并执行以获得请求响应。</p>\n<h1 id=\"Tomcat一个server实例\"><a href=\"#Tomcat一个server实例\" class=\"headerlink\" title=\"Tomcat一个server实例\"></a>Tomcat一个server实例</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8005\"</span> <span class=\"attr\">shutdown</span>=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.startup.VersionLoggerListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.AprLifecycleListener\"</span> <span class=\"attr\">SSLEngine</span>=<span class=\"string\">\"on\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JasperListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Resource</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserDatabase\"</span> <span class=\"attr\">auth</span>=<span class=\"string\">\"Container\"</span></div><div class=\"line\">              <span class=\"attr\">type</span>=<span class=\"string\">\"org.apache.catalina.UserDatabase\"</span></div><div class=\"line\">              <span class=\"attr\">description</span>=<span class=\"string\">\"User database that can be updated and saved\"</span></div><div class=\"line\">              <span class=\"attr\">factory</span>=<span class=\"string\">\"org.apache.catalina.users.MemoryUserDatabaseFactory\"</span></div><div class=\"line\">              <span class=\"attr\">pathname</span>=<span class=\"string\">\"conf/tomcat-users.xml\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8009\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></div><div class=\"line\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span></div><div class=\"line\">            <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span></div><div class=\"line\">               <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span></div><div class=\"line\">               <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Server</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"server-xml文档的元素分类和整体结构\"><a href=\"#server-xml文档的元素分类和整体结构\" class=\"headerlink\" title=\"server.xml文档的元素分类和整体结构\"></a>server.xml文档的元素分类和整体结构</h1><h3 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h3><p>server.xml的整体结构如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Connector</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Connector</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Context</span>/&gt;</span><span class=\"comment\">&lt;!-- 现在常常使用自动部署，不推荐配置Context元素，Context小节有详细说明 --&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Server</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>该结构中只给出了Tomcat的核心组件，除了核心组件外，Tomcat还有一些其他组件，下面介绍一下组件的分类。</p>\n<h3 id=\"元素分类\"><a href=\"#元素分类\" class=\"headerlink\" title=\"元素分类\"></a>元素分类</h3><p>server.xml文件中的元素可以分为以下4类：</p>\n<p>（1）顶层元素：<code>&lt;Server&gt;</code>和<code>&lt;Service&gt;</code></p>\n<p><code>&lt;Server&gt;</code>元素是整个配置文件的根元素，<code>&lt;Service&gt;</code>元素则代表一个Engine元素以及一组与之相连的Connector元素。</p>\n<p>（2）连接器：<code>&lt;Connector&gt;</code></p>\n<p><code>&lt;Connector&gt;</code>代表了外部客户端发送请求到特定Service的接口；同时也是外部客户端从特定Service接收响应的接口。</p>\n<p>（3）容器：<code>&lt;Engine&gt;&lt;Host&gt;&lt;Context&gt;</code></p>\n<p>容器的功能是处理Connector接收进来的请求，并产生相应的响应。Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。一个Engine组件可以处理Service中的所有请求，一个Host组件可以处理发向一个特定虚拟主机的所有请求，一个Context组件可以处理一个特定Web应用的所有请求。</p>\n<p>（4）内嵌组件：可以内嵌到容器中的组件。实际上，Server、Service、Connector、Engine、Host和Context是最重要的最核心的Tomcat组件，其他组件都可以归为内嵌组件。</p>\n<h3 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h3><p><strong>1、Server</strong></p>\n<p>Server元素在最顶层，代表整个Tomcat容器，因此它必须是server.xml中唯一一个最外层的元素。一个Server元素中可以有一个或多个Service元素。</p>\n<p>在第一部分的例子中，在最外层有一个<code>&lt;Server&gt;</code>元素，shutdown属性表示关闭Server的指令；port属性表示Server接收shutdown指令的端口号，设为-1可以禁掉该端口。</p>\n<p>Server的主要任务，就是提供一个接口让客户端能够访问到这个Service集合，同时维护它所包含的所有的Service的声明周期，包括如何初始化、如何结束服务、如何找到客户端要访问的Service。</p>\n<p><strong>2、Service</strong></p>\n<p>Service的作用，是在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；其中Connector的作用是从客户端接收请求，Engine的作用是处理接收进来的请求。</p>\n<p>在第一部分的例子中，Server中包含一个名称为“Catalina”的Service。实际上，Tomcat可以提供多个Service，不同的Service监听不同的端口。</p>\n<p><strong>3、Connector</strong></p>\n<p>Connector的主要功能，是接收连接请求，<strong>创建Request和Response对象用于和请求端交换数据</strong>；然后分配线程让Engine来处理这个请求，并把产生的Request和Response对象传给Engine。</p>\n<p>通过配置Connector，可以控制请求Service的协议及端口号。在第一部分的例子中，Service包含两个Connector：</p>\n<blockquote>\n<p><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;</code></p>\n<p><code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</code></p>\n</blockquote>\n<p>（1）通过配置第1个Connector，客户端可以通过8080端口号使用http协议访问Tomcat。其中，protocol属性规定了请求的协议，port规定了请求的端口号，redirectPort表示当强制要求https而请求是http时，重定向至端口号为8443的Connector，connectionTimeout表示连接的超时时间。</p>\n<p>在这个例子中，Tomcat监听HTTP请求，使用的是8080端口，而不是正式的80端口；实际上，在正式的生产环境中，Tomcat也常常监听8080端口，而不是80端口。这是因为在生产环境中，很少将Tomcat直接对外开放接收请求，而是在Tomcat和客户端之间加一层代理服务器(如nginx)，用于请求的转发、负载均衡、处理静态文件等；通过代理服务器访问Tomcat时，是在局域网中，因此一般仍使用8080端口。</p>\n<p>（2）通过配置第2个Connector，客户端可以通过8009端口号使用AJP协议访问Tomcat。AJP协议负责和其他的HTTP服务器(如Apache)建立连接；在把Tomcat与其他HTTP服务器集成时，就需要用到这个连接器。之所以使用Tomcat和其他服务器集成，是因为Tomcat可以用作Servlet/JSP容器，但是对静态资源的处理速度较慢，不如Apache和IIS等HTTP服务器；因此常常将Tomcat与Apache等集成，前者作Servlet容器，后者处理静态资源，而AJP协议便负责Tomcat和Apache的连接。Tomcat与Apache等集成的原理如下图：</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/tomcat-Apache.png\"/><br><br></div>\n\n<p><strong>4、Engine</strong></p>\n<p>Engine组件在Service组件中有且只有一个；Engine是Service组件中的请求处理组件。Engine组件从一个或多个Connector中接收请求并处理，并将完成的响应返回给Connector，最终传递给客户端。</p>\n<p>前面已经提到过，Engine、Host和Context都是容器，但它们不是平行的关系，而是父子关系：Engine包含Host，Host包含Context。</p>\n<p>在第一部分的例子中，Engine的配置语句如下：</p>\n<blockquote>\n<p><code>&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</code></p>\n</blockquote>\n<p>其中，name属性用于日志和错误信息，在整个Server中应该唯一。defaultHost属性指定了默认的host名称，当发往本机的请求指定的host名称不存在时，一律使用defaultHost指定的host进行处理；因此，defaultHost的值，必须与Engine中的一个Host组件的name属性值匹配。</p>\n<p><strong>5、Host</strong></p>\n<p>（1）Engine与Host</p>\n<p>Host是Engine的子容器。Engine组件中可以内嵌1个或多个Host组件，每个Host组件代表Engine中的一个虚拟主机。Host组件至少有一个，且其中一个的name必须与Engine组件的defaultHost属性相匹配。</p>\n<p>（2）Host的作用</p>\n<p>Host虚拟主机的作用，是运行多个Web应用（一个Context代表一个Web应用），并负责安装、展开、启动和结束每个Web应用。</p>\n<p>Host组件代表的虚拟主机，对应了服务器中一个网络名实体(如”www.test.com”，或IP地址”116.25.25.25”)；为了使用户可以通过网络名连接Tomcat服务器，这个名字应该在DNS服务器上注册。</p>\n<p>客户端通常使用主机名来标识它们希望连接的服务器；该主机名也会包含在HTTP请求头中。Tomcat从HTTP头中提取出主机名，寻找名称匹配的主机。如果没有匹配，请求将发送至默认主机。因此默认主机不需要是在DNS服务器中注册的网络名，因为任何与所有Host名称不匹配的请求，都会路由至默认主机。</p>\n<p>（3）Host的配置</p>\n<p>在第一部分的例子中，Host的配置如下：</p>\n<blockquote>\n<p><code>&lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</code></p>\n</blockquote>\n<p>下面对其中配置的属性进行说明：</p>\n<p>name属性指定虚拟主机的主机名，一个Engine中有且仅有一个Host组件的name属性与Engine组件的defaultHost属性相匹配；一般情况下，主机名需要是在DNS服务器中注册的网络名，但是Engine指定的defaultHost不需要，原因在前面已经说明。</p>\n<p>unpackWARs指定了是否将代表Web应用的WAR文件解压；如果为true，通过解压后的文件结构运行该Web应用，如果为false，直接使用WAR文件运行Web应用。</p>\n<p>Host的autoDeploy和appBase属性，与Host内Web应用的自动部署有关；此外，本例中没有出现的xmlBase和deployOnStartup属性，也与Web应用的自动部署有关。</p>\n<p><strong>6、Context</strong></p>\n<p>（1）Context的作用</p>\n<p>Context元素代表在特定虚拟主机上运行的一个Web应用。在后文中，提到Context、应用或Web应用，它们指代的都是Web应用。每个Web应用基于WAR文件，或WAR文件解压后对应的目录（这里称为应用目录）。</p>\n<p>Context是Host的子容器，每个Host中可以定义任意多的Context元素。</p>\n<p>在第一部分的例子中，可以看到server.xml配置文件中并没有出现Context元素的配置。这是因为，Tomcat开启了自动部署，Web应用没有在server.xml中配置静态部署，而是由Tomcat通过特定的规则自动部署。下面介绍一下Tomcat自动部署Web应用的机制。</p>\n<p>（2）Web应用自动部署</p>\n<p><strong>Host的配置</strong></p>\n<p>要开启Web应用的自动部署，需要配置所在的虚拟主机；配置的方式就是前面提到的Host元素的deployOnStartup和autoDeploy属性。如果deployOnStartup和autoDeploy设置为true，则tomcat启动自动部署：当检测到新的Web应用或Web应用的更新时，会触发应用的部署(或重新部署)。二者的主要区别在于，deployOnStartup为true时，Tomcat在启动时检查Web应用，且检测到的所有Web应用视作新应用；autoDeploy为true时，Tomcat在运行时定期检查新的Web应用或Web应用的更新。除此之外，二者的处理相似。</p>\n<p>通过配置deployOnStartup和autoDeploy可以开启虚拟主机自动部署Web应用；实际上，自动部署依赖于检查是否有新的或更改过的Web应用，而Host元素的appBase和xmlBase设置了检查Web应用更新的目录。</p>\n<p>其中，appBase属性指定Web应用所在的目录，默认值是webapps，这是一个相对路径，代表Tomcat根目录下webapps文件夹。</p>\n<p>xmlBase属性指定Web应用的XML配置文件所在的目录，默认值为conf/<code>&lt;engine_name&gt;</code>/<code>&lt;host_name&gt;</code>，例如第一部分的例子中，主机localhost的xmlBase的默认值是$TOMCAT_HOME/conf/Catalina/localhost。</p>\n<p><strong>检查Web应用更新</strong></p>\n<p>一个Web应用可能包括以下文件：XML配置文件，WAR包，以及一个应用目录(该目录包含Web应用的文件结构)；其中XML配置文件位于xmlBase指定的目录，WAR包和应用目录位于appBase指定的目录。</p>\n<p>Tomcat按照如下的顺序进行扫描，来检查应用更新：</p>\n<p>A、扫描虚拟主机指定的xmlBase下的XML配置文件</p>\n<p>B、扫描虚拟主机指定的appBase下的WAR文件</p>\n<p>C、扫描虚拟主机指定的appBase下的应用目录</p>\n<p><strong><code>&lt;Context&gt;</code>元素的配置</strong></p>\n<p>Context元素最重要的属性是docBase和path，此外reloadable属性也比较常用。</p>\n<p>docBase指定了该Web应用使用的WAR包路径，或应用目录。需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，docBase不在appBase目录中，才需要指定；如果docBase指定的WAR包或应用目录就在docBase中，则不需要指定，因为Tomcat会自动扫描appBase中的WAR包和应用目录，指定了反而会造成问题。</p>\n<p>path指定了访问该Web应用的上下文路径，当请求到来时，Tomcat根据Web应用的 path属性与URI的匹配程度来选择Web应用处理相应请求。例如，Web应用app1的path属性是”/app1”，Web应用app2的path属性是”/app2”，那么请求/app1/index.html会交由app1来处理；而请求/app2/index.html会交由app2来处理。如果一个Context元素的path属性为””，那么这个Context是虚拟主机的默认Web应用；当请求的uri与所有的path都不匹配时，使用该默认Web应用来处理。</p>\n<p>但是，需要注意的是，在自动部署场景下(配置文件位于xmlBase中)，不能指定path属性，path属性由配置文件的文件名、WAR文件的文件名或应用目录的名称自动推导出来。如扫描Web应用时，发现了xmlBase目录下的app1.xml，或appBase目录下的app1.WAR或app1应用目录，则该Web应用的path属性是”app1”。如果名称不是app1而是ROOT，则该Web应用是虚拟主机默认的Web应用，此时path属性推导为””。</p>\n<p>reloadable属性指示tomcat是否在运行时监控在WEB-INF/classes和WEB-INF/lib目录下class文件的改动。如果值为true，那么当class文件改动时，会触发Web应用的重新加载。在开发环境下，reloadable设置为true便于调试；但是在生产环境中设置为true会给服务器带来性能压力，因此reloadable参数的默认值为false。</p>\n<p>下面来看自动部署时，xmlBase下的XML配置文件app1.xml的例子：</p>\n<blockquote>\n<p><code>&lt;Context docBase=&quot;D:\\Program Files\\app1.war&quot; reloadable=&quot;true&quot;/&gt;</code></p>\n</blockquote>\n<p>在该例子中，docBase位于Host的appBase目录之外；path属性没有指定，而是根据app1.xml自动推导为”app1”；由于是在开发环境下，因此reloadable设置为true，便于开发调试。</p>\n<p><strong>自动部署举例</strong></p>\n<p>最典型的自动部署，就是当我们安装完Tomcat后，$TOMCAT_HOME/webapps目录下有如下文件夹：</p>\n<div align=center><img width=\"100\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/%E7%9B%AE%E5%BD%95.png\"/><br><br></div>\n\n<p>当我们启动Tomcat后，可以使用<a href=\"http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的Web应用；我们也可以通过http://localhost:8080/docs来访问docs应用，同理我们可以访问examples/host-manager/manager这几个Web应用。\">http://localhost:8080/来访问Tomcat，其实访问的就是ROOT对应的Web应用；我们也可以通过http://localhost:8080/docs来访问docs应用，同理我们可以访问examples/host-manager/manager这几个Web应用。</a></p>\n<p>（3）server.xml中静态部署Web应用</p>\n<p>除了自动部署，我们也可以在server.xml中通过<code>&lt;context&gt;</code>元素静态部署Web应用。静态部署与自动部署是可以共存的。在实际应用中，并不推荐使用静态部署，因为server.xml 是不可动态重加载的资源，服务器一旦启动了以后，要修改这个文件，就得重启服务器才能重新加载。而自动部署可以在Tomcat运行时通过定期的扫描来实现，不需要重启服务器。</p>\n<p>server.xml中使用Context元素配置Web应用，Context元素应该位于Host元素中。举例如下：</p>\n<blockquote>\n<p><code>&lt;Context path=&quot;/&quot; docBase=&quot;D:\\Program Files \\app1.war&quot; reloadable=&quot;true&quot;/&gt;</code></p>\n</blockquote>\n<p>docBase：静态部署时，docBase可以在appBase目录下，也可以不在；本例中，docBase不在appBase目录下。</p>\n<p>path：静态部署时，可以显式指定path属性，但是仍然受到了严格的限制：只有当自动部署完全关闭(deployOnStartup和autoDeploy都为false)或docBase不在appBase中时，才可以设置path属性。在本例中，docBase不在appBase中，因此path属性可以设置。</p>\n<p>reloadable属性的用法与自动部署时相同。</p>\n<h3 id=\"核心组件的关联\"><a href=\"#核心组件的关联\" class=\"headerlink\" title=\"核心组件的关联\"></a>核心组件的关联</h3><p><strong>1、整体关系</strong></p>\n<p>核心组件之间的整体关系，在上一部分有所介绍，这里总结一下：</p>\n<p>Server元素在最顶层，代表整个Tomcat容器；一个Server元素中可以有一个或多个Service元素。</p>\n<p>Service在Connector和Engine外面包了一层，把它们组装在一起，对外提供服务。一个Service可以包含多个Connector，但是只能包含一个Engine；Connector接收请求，Engine处理请求。</p>\n<p>Engine、Host和Context都是容器，且 Engine包含Host，Host包含Context。每个Host组件代表Engine中的一个虚拟主机；每个Context组件代表在特定Host上运行的一个Web应用。</p>\n<p><strong>2、如何确定请求由谁处理？</strong></p>\n<p>当请求被发送到Tomcat所在的主机时，如何确定最终哪个Web应用来处理该请求呢？</p>\n<p>（1）根据协议和端口号选定Service和Engine</p>\n<p>Service中的Connector组件可以接收特定端口的请求，因此，当Tomcat启动时，Service组件就会监听特定的端口。在第一部分的例子中，Catalina这个Service监听了8080端口（基于HTTP协议）和8009端口（基于AJP协议）。当请求进来时，Tomcat便可以根据协议和端口号选定处理请求的Service；Service一旦选定，Engine也就确定。</p>\n<p>通过在Server中配置多个Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。</p>\n<p>（2）根据域名或IP地址选定Host</p>\n<p>Service确定后，Tomcat在Service中寻找名称与域名/IP地址匹配的Host处理该请求。如果没有找到，则使用Engine中指定的defaultHost来处理该请求。在第一部分的例子中，由于只有一个Host（name属性为localhost），因此该Service/Engine的所有请求都交给该Host处理。</p>\n<p>（3）根据URI选定Context/Web应用</p>\n<p>这一点在Context一节有详细的说明：Tomcat根据应用的 path属性与URI的匹配程度来选择Web应用处理相应请求，这里不再赘述。</p>\n<p>（4）举例</p>\n<p>以请求<a href=\"http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。\">http://localhost:8080/app1/index.html为例，首先通过协议和端口号（http和8080）选定Service；然后通过主机名（localhost）选定Host；然后通过uri（/app1/index.html）选定Web应用。</a></p>\n<p><strong>3、如何配置多个服务</strong></p>\n<p>通过在Server中配置多个Service服务，可以实现通过不同的端口号来访问同一台机器上部署的不同Web应用。</p>\n<p>在server.xml中配置多服务的方法非常简单，分为以下几步：</p>\n<p>（1）复制<code>&lt;Service&gt;</code>元素，放在当前<code>&lt;Service&gt;</code>后面。</p>\n<p>（2）修改端口号：根据需要监听的端口号修改<code>&lt;Connector&gt;</code>元素的port属性；必须确保该端口没有被其他进程占用，否则Tomcat启动时会报错，而无法通过该端口访问Web应用。</p>\n<p>以Win7为例，可以用如下方法找出某个端口是否被其他进程占用：netstat -aon|findstr “8081″发现8081端口被PID为2064的进程占用，tasklist |findstr “2064″发现该进程为FrameworkService.exe(这是McAfee杀毒软件的进程)。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/task.png\"/><br><br></div>\n\n<p>（3）修改Service和Engine的name属性</p>\n<p>（4）修改Host的appBase属性（如webapps2）</p>\n<p>（5）Web应用仍然使用自动部署</p>\n<p>（6）将要部署的Web应用(WAR包或应用目录)拷贝到新的appBase下。</p>\n<p>以第一部分的server.xml为例，多个Service的配置如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Server</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8005\"</span> <span class=\"attr\">shutdown</span>=<span class=\"string\">\"SHUTDOWN\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.startup.VersionLoggerListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.AprLifecycleListener\"</span> <span class=\"attr\">SSLEngine</span>=<span class=\"string\">\"on\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JasperListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Resource</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserDatabase\"</span> <span class=\"attr\">auth</span>=<span class=\"string\">\"Container\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.apache.catalina.UserDatabase\"</span> <span class=\"attr\">description</span>=<span class=\"string\">\"User database that can be updated and saved\"</span> <span class=\"attr\">factory</span>=<span class=\"string\">\"org.apache.catalina.users.MemoryUserDatabaseFactory\"</span> <span class=\"attr\">pathname</span>=<span class=\"string\">\"conf/tomcat-users.xml\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8009\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></div><div class=\"line\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"/opt/project/webapps\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Service</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina2\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8084\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8010\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"AJP/1.3\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Engine</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Catalina2\"</span> <span class=\"attr\">defaultHost</span>=<span class=\"string\">\"localhost\"</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></div><div class=\"line\">               <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span>  <span class=\"attr\">appBase</span>=<span class=\"string\">\"/opt/project/webapps2\"</span> <span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Engine</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Service</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Server</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>再将原webapps下的docs目录拷贝到webapps2中，则通过如下两个接口都可以访问docs应用：</p>\n<p><a href=\"http://localhost:8080/docs/\">http://localhost:8080/docs/</a></p>\n<p><a href=\"http://localhost:8084/docs/\">http://localhost:8084/docs/</a></p>\n<h3 id=\"其他组件\"><a href=\"#其他组件\" class=\"headerlink\" title=\"其他组件\"></a>其他组件</h3><p>除核心组件外，server.xml中还可以配置很多其他组件。下面只介绍第一部分例子中出现的组件，如果要了解更多内容，可以查看Tomcat官方文档。</p>\n<p><strong>1、Listener</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.startup.VersionLoggerListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.AprLifecycleListener\"</span> <span class=\"attr\">SSLEngine</span>=<span class=\"string\">\"on\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JasperListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.JreMemoryLeakPreventionListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Listener</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>Listener(即监听器)定义的组件，可以在特定事件发生时执行特定的操作；被监听的事件通常是Tomcat的启动和停止。</p>\n<p>监听器可以在Server、Engine、Host或Context中，本例中的监听器都是在Server中。实际上，本例中定义的6个监听器，都只能存在于Server组件中。监听器不允许内嵌其他组件。</p>\n<p>监听器需要配置的最重要的属性是className，该属性规定了监听器的具体实现类，该类必须实现了org.apache.catalina.LifecycleListener接口。</p>\n<p>下面依次介绍例子中配置的监听器：</p>\n<ul>\n<li>VersionLoggerListener：当Tomcat启动时，该监听器记录Tomcat、Java和操作系统的信息。该监听器必须是配置的第一个监听器。</li>\n<li>AprLifecycleListener：Tomcat启动时，检查APR库，如果存在则加载。APR，即Apache Portable Runtime，是Apache可移植运行库，可以实现高可扩展性、高性能，以及与本地服务器技术更好的集成。</li>\n<li>JasperListener：在Web应用启动之前初始化Jasper，Jasper是JSP引擎，把JVM不认识的JSP文件解析成java文件，然后编译成class文件供JVM使用。</li>\n<li>JreMemoryLeakPreventionListener：与类加载器导致的内存泄露有关。</li>\n<li>GlobalResourcesLifecycleListener：通过该监听器，初始化&lt; GlobalNamingResources&gt;标签中定义的全局JNDI资源；如果没有该监听器，任何全局资源都不能使用。&lt; GlobalNamingResources&gt;将在后文介绍。</li>\n<li>ThreadLocalLeakPreventionListener：当Web应用因thread-local导致的内存泄露而要停止时，该监听器会触发线程池中线程的更新。当线程执行完任务被收回线程池时，活跃线程会一个一个的更新。只有当Web应用(即Context元素)的renewThreadsWhenStoppingContext属性设置为true时，该监听器才有效。</li>\n</ul>\n<p><strong>2、GlobalNamingResources与Realm</strong></p>\n<p>第一部分的例子中，Engine组件下定义了Realm组件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.LockOutRealm\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Realm</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.realm.UserDatabaseRealm\"</span></div><div class=\"line\">                <span class=\"attr\">resourceName</span>=<span class=\"string\">\"UserDatabase\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Realm</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Realm，可以把它理解成“域”；Realm提供了一种用户密码与web应用的映射关系，从而达到角色安全管理的作用。在本例中，Realm的配置使用name为UserDatabase的资源实现。而该资源在Server元素中使用GlobalNamingResources配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">GlobalNamingResources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Resource</span> <span class=\"attr\">name</span>=<span class=\"string\">\"UserDatabase\"</span> <span class=\"attr\">auth</span>=<span class=\"string\">\"Container\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"org.apache.catalina.UserDatabase\"</span> <span class=\"attr\">description</span>=<span class=\"string\">\"User database that can be updated and saved\"</span> <span class=\"attr\">factory</span>=<span class=\"string\">\"org.apache.catalina.users.MemoryUserDatabaseFactory\"</span> <span class=\"attr\">pathname</span>=<span class=\"string\">\"conf/tomcat-users.xml\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">GlobalNamingResources</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><strong>3、Valve</strong></p>\n<p>在第一部分的例子中，Host元素内定义了Valve组件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span> <span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>单词Valve的意思是“阀门”，在Tomcat中代表了请求处理流水线上的一个组件；Valve可以与Tomcat的容器(Engine、Host或Context)关联。</p>\n<p>不同的Valve有不同的特性，下面介绍一下本例中出现的AccessLogValve。</p>\n<p>AccessLogValve的作用是通过日志记录其所在的容器中处理的所有请求，在本例中，Valve放在Host下，便可以记录该Host处理的所有请求。AccessLogValve记录的日志就是访问日志，每天的请求会写到一个日志文件里。AccessLogValve可以与Engine、Host或Context关联；在本例中，只有一个Engine，Engine下只有一个Host，Host下只有一个Context，因此AccessLogValve放在三个容器下的作用其实是类似的。</p>\n<p>本例的AccessLogValve属性的配置，使用的是默认的配置；下面介绍AccessLogValve中各个属性的作用：</p>\n<p>（1）className：规定了Valve的类型，是最重要的属性；本例中，通过该属性规定了这是一个AccessLogValve。</p>\n<p>（2）directory：指定日志存储的位置，本例中，日志存储在$TOMCAT_HOME/logs目录下。</p>\n<p>（3）prefix：指定了日志文件的前缀。</p>\n<p>（4）suffix：指定了日志文件的后缀。通过directory、prefix和suffix的配置，在$TOMCAT_HOME/logs目录下，可以看到如下所示的日志文件。</p>\n<div align=center><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/log.png\"/><br><br></div>\n\n<p>（5）pattern：指定记录日志的格式，本例中各项的含义如下：</p>\n<ul>\n<li>%h：远程主机名或IP地址；如果有nginx等反向代理服务器进行请求分发，该主机名/IP地址代表的是nginx，否则代表的是客户端。后面远程的含义与之类似，不再解释。</li>\n<li>%l：远程逻辑用户名，一律是”-”，可以忽略。</li>\n<li>%u：授权的远程用户名，如果没有，则是”-”。</li>\n<li>%t：访问的时间。</li>\n<li>%r：请求的第一行，即请求方法(get/post等)、uri、及协议。</li>\n<li>%s：响应状态，200,404等等。</li>\n<li>%b：响应的数据量，不包括请求头，如果为0，则是””-。</li>\n</ul>\n<p>例如，下面是访问日志中的一条记录</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-27/tomcat%E5%85%A5%E9%97%A8/access_log.png\"/><br><br></div>\n\n<p>pattern的配置中，除了上述各项，还有一个非常常用的选项是%D，含义是请求处理的时间(单位是毫秒)，对于统计分析请求的处理速度帮助很大。</p>\n<p>开发人员可以充分利用访问日志，来分析问题、优化应用。例如，分析访问日志中各个接口被访问的比例，不仅可以为需求和运营人员提供数据支持，还可以使自己的优化有的放矢；分析访问日志中各个请求的响应状态码，可以知道服务器请求的成功率，并找出有问题的请求；分析访问日志中各个请求的响应时间，可以找出慢请求，并根据需要进行响应时间的优化。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li>Tomcat官方文档</li>\n<li>《How Tomcat Works》</li>\n<li>《深入分析Java Web技术内幕》</li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651478920&amp;idx=1&amp;sn=c3f23f9bc0707930e5634e5ae61b499c&amp;chksm=bd2537f78a52bee1c04ad1fb410e2d62c6714f6851a21ab36d26c117dd0cdf02925f4295485b&amp;mpshare=1&amp;scene=24&amp;srcid=08266j3OTBuUem8l94WhpTAK#rd\">详解 Tomcat 配置文件 server.xml</a></li>\n</ul>"},{"title":"UML工具-PowerDesigner设计数据库","date":"2017-12-06T07:47:06.000Z","_content":"\n# 引言\n\n在数据库的开发设计中，PowerDesiger（PD）是一个较为常用的UML工具。PowerDesiger为各类数据模型提供了直观的符号表示，不仅使设计人员能更方便、更快捷地使非计算机专业技术人员展示数据库设计和应用系统设计，使系统设计人员与使用系统的业务人员更易于相互理解和交流，同时也使项目组内的交流更为直观、准确，更便于协调工作，从而加速系统的设计和开发过程。PowerDesiger设计完成后的数据库可直接生成SQL语句。<div align=center><img width=\"200\" height=\"100\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/logo-powerdesigner.png\" algin=\"center\"/></div><!-- more -->\n\n# 使用ODBC连接MySQL\n\n## 准备工作\n\n**PowerDesigner本身是32位的程序（特别重要），故不管在32位或者64位操作系统中，都需要安装32位的MySQL Connector /ODBC。**\n\nMySQL Connector /ODBC下载地址：*https://dev.mysql.com/downloads/connector/odbc/*\n\n## 连接数据库\n\n1. 安装完ODBC之后，打开PowerDesigner，新建一个Model，File—>New Model\n\n<div align=center><img width=\"500\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2.png\" algin=\"center\"/>\n\n</div>\n\n2. 选择工具栏中的Database—> Update Model from Database，如下图\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/3.png\" algin=\"center\"/>\n\n</div>\n\n3. 打开配置对话框，选择[Using a data source]，点击输入框后的图标\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/4.png\" algin=\"center\"/>\n\n</div>\n\n4. 配置ODBC数据源\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/5.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/6.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/7.png\" algin=\"center\"/></div>\n\n说明：这里提供了ANSI和Unicode两种字符集版本的Driver，**Unicode提供更丰富的字符集，一般推荐使用Unicode**。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/8.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/9.png\" algin=\"center\"/></div>\n\n点击完成，配置连接信息。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/10.png\" algin=\"center\"/></div>\n\n```xml\n说明：\nData Source Name：指定当前配置的ODBC数据源名称，可随意填写。\nDescription：指定ODBC数据源的描述信息，可根据用途随意填写。\nTCP/IP Server：采用TCP/IP协议连接服务器，如果是本地填写localhost或者127.0.0.1（根据实际MySQL用户情况选择），如果是远程服务器则填写相应IP地址即可。\nPort：默认3306，根据实际MySQL的端口设置填写。\nlNamed Pipe：命名管道方式连接，只适用于widows下的本地连接。连接性能比TCP/IP方式更高，更安全。请按照MySQL的配置文件my.ini中的socket参数指定的值填写，如果没有设置则默认为MySQL（但是目前为止这种方式我还没有测试成功）。\nUser：数据库用户名。\nPassword：数据库密码。\nDatabase：数据库中的database。\n```\n\n信息输入完之后可以选择Test测试配置是否正确，点击OK就结束了配置。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/12.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/13.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/14.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/15.png\" algin=\"center\"/></div>\n\n到这里已经可以连接数据库了。\n\n# 设计数据库\n\n如果在已有的数据库上需要设计和修改，先取消所有表，再选择需要设计或修改的数据库，选择表，点击ok。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-1.png\" algin=\"center\"/></div>\n\n连接后的UML如下，可以新建和修改表\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-2.png\" algin=\"center\"/></div>\n\n同时可对表进行主外键设计，现在主外键已经很少用到了。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-3.png\" algin=\"center\"/></div>\n\n双击表之间的连接线，点击Joins\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-4.png\" algin=\"center\"/></div>\n\n点击【确定】按钮，即可如我们所愿： \n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-6.png\" algin=\"center\"/></div>\n\n# 生成建表语句\n\n点击Database—>Generate Database\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-7.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-8.png\" algin=\"center\"/></div>\n\n点击【确定】按钮之后，可以在桌面上找到shiro.sql这样的一个文件，打开，即可看到建表语句： \n\n```sql\n/*==============================================================*/\n/* DBMS name:      MySQL 5.0                                    */\n/* Created on:     2017.12.6 17:22:25                          */\n/*==============================================================*/\n\n\ndrop table if exists shiro.u_permission;\n\ndrop table if exists shiro.u_role;\n\ndrop table if exists shiro.u_role_permission;\n\ndrop table if exists shiro.u_user;\n\ndrop table if exists shiro.u_user_role;\n\n/*==============================================================*/\n/* User: shiro                                                  */\n/*==============================================================*/\ncreate user shiro;\n\n/*==============================================================*/\n/* Table: u_permission                                          */\n/*==============================================================*/\ncreate table shiro.u_permission\n(\n   id                   bigint(20) not null auto_increment,\n   url                  national varchar(256) comment 'url地址',\n   name                 national varchar(64) comment 'url描述',\n   primary key (id)\n);\n\n/*==============================================================*/\n/* Table: u_role                                                */\n/*==============================================================*/\ncreate table shiro.u_role\n(\n   id                   bigint(20) not null auto_increment,\n   name                 national varchar(32) comment '角色名称',\n   type                 national varchar(10) comment '角色类型',\n   primary key (id)\n);\n\n/*==============================================================*/\n/* Table: u_role_permission                                     */\n/*==============================================================*/\ncreate table shiro.u_role_permission\n(\n   rid                  bigint(20) comment '角色ID',\n   pid                  bigint(20) comment '权限ID'\n);\n\n/*==============================================================*/\n/* Table: u_user                                                */\n/*==============================================================*/\ncreate table shiro.u_user\n(\n   id                   bigint(20) not null auto_increment,\n   nickname             national varchar(20) comment '用户昵称',\n   email                national varchar(128) comment '邮箱|登录帐号',\n   pswd                 national varchar(32) comment '密码',\n   create_time          datetime comment '创建时间',\n   last_login_time      datetime comment '最后登录时间',\n   status               bigint(1) default 1 comment '1:有效，0:禁止登录',\n   primary key (id)\n);\n\n/*==============================================================*/\n/* Table: u_user_role                                           */\n/*==============================================================*/\ncreate table shiro.u_user_role\n(\n   uid                  bigint(20) comment '用户ID',\n   rid                  bigint(20) comment '角色ID'\n);\n\nalter table shiro.u_user_role add constraint FK_Reference_1 foreign key (uid)\n      references shiro.u_user (id) on delete restrict on update restrict;\n```\n\n得到SQL语句后可直接导入到数据库。由此我们设计数据库已经完成。\n\n# 总结\n\n这里只是简单介绍了PowerDesigner进行数据库模型设计，自动生成SQL语句等功能。PowerDesigner还有很多技巧和功能在摸索中。","source":"_posts/UML工具-PowerDesigner设计数据库.md","raw":"---\ntitle: UML工具-PowerDesigner设计数据库\ndate: 2017-12-6 15:47:06\ntags: [mysql,tool]\ncategories: technology\n---\n\n# 引言\n\n在数据库的开发设计中，PowerDesiger（PD）是一个较为常用的UML工具。PowerDesiger为各类数据模型提供了直观的符号表示，不仅使设计人员能更方便、更快捷地使非计算机专业技术人员展示数据库设计和应用系统设计，使系统设计人员与使用系统的业务人员更易于相互理解和交流，同时也使项目组内的交流更为直观、准确，更便于协调工作，从而加速系统的设计和开发过程。PowerDesiger设计完成后的数据库可直接生成SQL语句。<div align=center><img width=\"200\" height=\"100\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/logo-powerdesigner.png\" algin=\"center\"/></div><!-- more -->\n\n# 使用ODBC连接MySQL\n\n## 准备工作\n\n**PowerDesigner本身是32位的程序（特别重要），故不管在32位或者64位操作系统中，都需要安装32位的MySQL Connector /ODBC。**\n\nMySQL Connector /ODBC下载地址：*https://dev.mysql.com/downloads/connector/odbc/*\n\n## 连接数据库\n\n1. 安装完ODBC之后，打开PowerDesigner，新建一个Model，File—>New Model\n\n<div align=center><img width=\"500\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2.png\" algin=\"center\"/>\n\n</div>\n\n2. 选择工具栏中的Database—> Update Model from Database，如下图\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/3.png\" algin=\"center\"/>\n\n</div>\n\n3. 打开配置对话框，选择[Using a data source]，点击输入框后的图标\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/4.png\" algin=\"center\"/>\n\n</div>\n\n4. 配置ODBC数据源\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/5.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/6.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/7.png\" algin=\"center\"/></div>\n\n说明：这里提供了ANSI和Unicode两种字符集版本的Driver，**Unicode提供更丰富的字符集，一般推荐使用Unicode**。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/8.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/9.png\" algin=\"center\"/></div>\n\n点击完成，配置连接信息。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/10.png\" algin=\"center\"/></div>\n\n```xml\n说明：\nData Source Name：指定当前配置的ODBC数据源名称，可随意填写。\nDescription：指定ODBC数据源的描述信息，可根据用途随意填写。\nTCP/IP Server：采用TCP/IP协议连接服务器，如果是本地填写localhost或者127.0.0.1（根据实际MySQL用户情况选择），如果是远程服务器则填写相应IP地址即可。\nPort：默认3306，根据实际MySQL的端口设置填写。\nlNamed Pipe：命名管道方式连接，只适用于widows下的本地连接。连接性能比TCP/IP方式更高，更安全。请按照MySQL的配置文件my.ini中的socket参数指定的值填写，如果没有设置则默认为MySQL（但是目前为止这种方式我还没有测试成功）。\nUser：数据库用户名。\nPassword：数据库密码。\nDatabase：数据库中的database。\n```\n\n信息输入完之后可以选择Test测试配置是否正确，点击OK就结束了配置。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/12.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/13.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/14.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/15.png\" algin=\"center\"/></div>\n\n到这里已经可以连接数据库了。\n\n# 设计数据库\n\n如果在已有的数据库上需要设计和修改，先取消所有表，再选择需要设计或修改的数据库，选择表，点击ok。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-1.png\" algin=\"center\"/></div>\n\n连接后的UML如下，可以新建和修改表\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-2.png\" algin=\"center\"/></div>\n\n同时可对表进行主外键设计，现在主外键已经很少用到了。\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-3.png\" algin=\"center\"/></div>\n\n双击表之间的连接线，点击Joins\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-4.png\" algin=\"center\"/></div>\n\n点击【确定】按钮，即可如我们所愿： \n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-6.png\" algin=\"center\"/></div>\n\n# 生成建表语句\n\n点击Database—>Generate Database\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-7.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-8.png\" algin=\"center\"/></div>\n\n点击【确定】按钮之后，可以在桌面上找到shiro.sql这样的一个文件，打开，即可看到建表语句： \n\n```sql\n/*==============================================================*/\n/* DBMS name:      MySQL 5.0                                    */\n/* Created on:     2017.12.6 17:22:25                          */\n/*==============================================================*/\n\n\ndrop table if exists shiro.u_permission;\n\ndrop table if exists shiro.u_role;\n\ndrop table if exists shiro.u_role_permission;\n\ndrop table if exists shiro.u_user;\n\ndrop table if exists shiro.u_user_role;\n\n/*==============================================================*/\n/* User: shiro                                                  */\n/*==============================================================*/\ncreate user shiro;\n\n/*==============================================================*/\n/* Table: u_permission                                          */\n/*==============================================================*/\ncreate table shiro.u_permission\n(\n   id                   bigint(20) not null auto_increment,\n   url                  national varchar(256) comment 'url地址',\n   name                 national varchar(64) comment 'url描述',\n   primary key (id)\n);\n\n/*==============================================================*/\n/* Table: u_role                                                */\n/*==============================================================*/\ncreate table shiro.u_role\n(\n   id                   bigint(20) not null auto_increment,\n   name                 national varchar(32) comment '角色名称',\n   type                 national varchar(10) comment '角色类型',\n   primary key (id)\n);\n\n/*==============================================================*/\n/* Table: u_role_permission                                     */\n/*==============================================================*/\ncreate table shiro.u_role_permission\n(\n   rid                  bigint(20) comment '角色ID',\n   pid                  bigint(20) comment '权限ID'\n);\n\n/*==============================================================*/\n/* Table: u_user                                                */\n/*==============================================================*/\ncreate table shiro.u_user\n(\n   id                   bigint(20) not null auto_increment,\n   nickname             national varchar(20) comment '用户昵称',\n   email                national varchar(128) comment '邮箱|登录帐号',\n   pswd                 national varchar(32) comment '密码',\n   create_time          datetime comment '创建时间',\n   last_login_time      datetime comment '最后登录时间',\n   status               bigint(1) default 1 comment '1:有效，0:禁止登录',\n   primary key (id)\n);\n\n/*==============================================================*/\n/* Table: u_user_role                                           */\n/*==============================================================*/\ncreate table shiro.u_user_role\n(\n   uid                  bigint(20) comment '用户ID',\n   rid                  bigint(20) comment '角色ID'\n);\n\nalter table shiro.u_user_role add constraint FK_Reference_1 foreign key (uid)\n      references shiro.u_user (id) on delete restrict on update restrict;\n```\n\n得到SQL语句后可直接导入到数据库。由此我们设计数据库已经完成。\n\n# 总结\n\n这里只是简单介绍了PowerDesigner进行数据库模型设计，自动生成SQL语句等功能。PowerDesigner还有很多技巧和功能在摸索中。","slug":"UML工具-PowerDesigner设计数据库","published":1,"updated":"2018-03-13T05:53:11.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u32002a3gfk60tfb8eq","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在数据库的开发设计中，PowerDesiger（PD）是一个较为常用的UML工具。PowerDesiger为各类数据模型提供了直观的符号表示，不仅使设计人员能更方便、更快捷地使非计算机专业技术人员展示数据库设计和应用系统设计，使系统设计人员与使用系统的业务人员更易于相互理解和交流，同时也使项目组内的交流更为直观、准确，更便于协调工作，从而加速系统的设计和开发过程。PowerDesiger设计完成后的数据库可直接生成SQL语句。<div align=\"center\"><img width=\"200\" height=\"100\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/logo-powerdesigner.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"使用ODBC连接MySQL\"><a href=\"#使用ODBC连接MySQL\" class=\"headerlink\" title=\"使用ODBC连接MySQL\"></a>使用ODBC连接MySQL</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p><strong>PowerDesigner本身是32位的程序（特别重要），故不管在32位或者64位操作系统中，都需要安装32位的MySQL Connector /ODBC。</strong></p>\n<p>MySQL Connector /ODBC下载地址：<em><a href=\"https://dev.mysql.com/downloads/connector/odbc/\" target=\"_blank\" rel=\"external\">https://dev.mysql.com/downloads/connector/odbc/</a></em></p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><ol>\n<li>安装完ODBC之后，打开PowerDesigner，新建一个Model，File—&gt;New Model</li>\n</ol>\n<div align=\"center\"><img width=\"500\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li>选择工具栏中的Database—&gt; Update Model from Database，如下图</li>\n</ol>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/3.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li>打开配置对话框，选择[Using a data source]，点击输入框后的图标</li>\n</ol>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/4.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li>配置ODBC数据源</li>\n</ol>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/5.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/6.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/7.png\" algin=\"center\"></div>\n\n<p>说明：这里提供了ANSI和Unicode两种字符集版本的Driver，<strong>Unicode提供更丰富的字符集，一般推荐使用Unicode</strong>。</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/8.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/9.png\" algin=\"center\"></div>\n\n<p>点击完成，配置连接信息。</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/10.png\" algin=\"center\"></div>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">说明：</div><div class=\"line\">Data Source Name：指定当前配置的ODBC数据源名称，可随意填写。</div><div class=\"line\">Description：指定ODBC数据源的描述信息，可根据用途随意填写。</div><div class=\"line\">TCP/IP Server：采用TCP/IP协议连接服务器，如果是本地填写localhost或者127.0.0.1（根据实际MySQL用户情况选择），如果是远程服务器则填写相应IP地址即可。</div><div class=\"line\">Port：默认3306，根据实际MySQL的端口设置填写。</div><div class=\"line\">lNamed Pipe：命名管道方式连接，只适用于widows下的本地连接。连接性能比TCP/IP方式更高，更安全。请按照MySQL的配置文件my.ini中的socket参数指定的值填写，如果没有设置则默认为MySQL（但是目前为止这种方式我还没有测试成功）。</div><div class=\"line\">User：数据库用户名。</div><div class=\"line\">Password：数据库密码。</div><div class=\"line\">Database：数据库中的database。</div></pre></td></tr></table></figure>\n<p>信息输入完之后可以选择Test测试配置是否正确，点击OK就结束了配置。</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/12.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/13.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/14.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/15.png\" algin=\"center\"></div>\n\n<p>到这里已经可以连接数据库了。</p>\n<h1 id=\"设计数据库\"><a href=\"#设计数据库\" class=\"headerlink\" title=\"设计数据库\"></a>设计数据库</h1><p>如果在已有的数据库上需要设计和修改，先取消所有表，再选择需要设计或修改的数据库，选择表，点击ok。</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-1.png\" algin=\"center\"></div>\n\n<p>连接后的UML如下，可以新建和修改表</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-2.png\" algin=\"center\"></div>\n\n<p>同时可对表进行主外键设计，现在主外键已经很少用到了。</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-3.png\" algin=\"center\"></div>\n\n<p>双击表之间的连接线，点击Joins</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-4.png\" algin=\"center\"></div>\n\n<p>点击【确定】按钮，即可如我们所愿： </p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-6.png\" algin=\"center\"></div>\n\n<h1 id=\"生成建表语句\"><a href=\"#生成建表语句\" class=\"headerlink\" title=\"生成建表语句\"></a>生成建表语句</h1><p>点击Database—&gt;Generate Database</p>\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-7.png\" algin=\"center\"></div>\n\n<div align=\"center\"><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-8.png\" algin=\"center\"></div>\n\n<p>点击【确定】按钮之后，可以在桌面上找到shiro.sql这样的一个文件，打开，即可看到建表语句： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* DBMS name:      MySQL 5.0                                    */</span></div><div class=\"line\"><span class=\"comment\">/* Created on:     2017.12.6 17:22:25                          */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_permission;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_role;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_role_permission;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_user_role;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* User: shiro                                                  */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> shiro;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_permission                                          */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_permission</div><div class=\"line\">(</div><div class=\"line\">   <span class=\"keyword\">id</span>                   <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">   <span class=\"keyword\">url</span>                  <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'url地址'</span>,</div><div class=\"line\">   <span class=\"keyword\">name</span>                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'url描述'</span>,</div><div class=\"line\">   primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_role                                                */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_role</div><div class=\"line\">(</div><div class=\"line\">   <span class=\"keyword\">id</span>                   <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">   <span class=\"keyword\">name</span>                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色名称'</span>,</div><div class=\"line\">   <span class=\"keyword\">type</span>                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色类型'</span>,</div><div class=\"line\">   primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_role_permission                                     */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_role_permission</div><div class=\"line\">(</div><div class=\"line\">   rid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色ID'</span>,</div><div class=\"line\">   pid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'权限ID'</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_user                                                */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_user</div><div class=\"line\">(</div><div class=\"line\">   <span class=\"keyword\">id</span>                   <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">   nickname             <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'用户昵称'</span>,</div><div class=\"line\">   email                <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'邮箱|登录帐号'</span>,</div><div class=\"line\">   pswd                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'密码'</span>,</div><div class=\"line\">   create_time          datetime <span class=\"keyword\">comment</span> <span class=\"string\">'创建时间'</span>,</div><div class=\"line\">   last_login_time      datetime <span class=\"keyword\">comment</span> <span class=\"string\">'最后登录时间'</span>,</div><div class=\"line\">   <span class=\"keyword\">status</span>               <span class=\"built_in\">bigint</span>(<span class=\"number\">1</span>) <span class=\"keyword\">default</span> <span class=\"number\">1</span> <span class=\"keyword\">comment</span> <span class=\"string\">'1:有效，0:禁止登录'</span>,</div><div class=\"line\">   primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_user_role                                           */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_user_role</div><div class=\"line\">(</div><div class=\"line\">   uid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'用户ID'</span>,</div><div class=\"line\">   rid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色ID'</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> shiro.u_user_role <span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> FK_Reference_1 foreign <span class=\"keyword\">key</span> (uid)</div><div class=\"line\">      <span class=\"keyword\">references</span> shiro.u_user (<span class=\"keyword\">id</span>) <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict <span class=\"keyword\">on</span> <span class=\"keyword\">update</span> restrict;</div></pre></td></tr></table></figure>\n<p>得到SQL语句后可直接导入到数据库。由此我们设计数据库已经完成。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这里只是简单介绍了PowerDesigner进行数据库模型设计，自动生成SQL语句等功能。PowerDesigner还有很多技巧和功能在摸索中。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在数据库的开发设计中，PowerDesiger（PD）是一个较为常用的UML工具。PowerDesiger为各类数据模型提供了直观的符号表示，不仅使设计人员能更方便、更快捷地使非计算机专业技术人员展示数据库设计和应用系统设计，使系统设计人员与使用系统的业务人员更易于相互理解和交流，同时也使项目组内的交流更为直观、准确，更便于协调工作，从而加速系统的设计和开发过程。PowerDesiger设计完成后的数据库可直接生成SQL语句。<div align=center><img width=\"200\" height=\"100\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/logo-powerdesigner.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"使用ODBC连接MySQL\"><a href=\"#使用ODBC连接MySQL\" class=\"headerlink\" title=\"使用ODBC连接MySQL\"></a>使用ODBC连接MySQL</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p><strong>PowerDesigner本身是32位的程序（特别重要），故不管在32位或者64位操作系统中，都需要安装32位的MySQL Connector /ODBC。</strong></p>\n<p>MySQL Connector /ODBC下载地址：<em><a href=\"https://dev.mysql.com/downloads/connector/odbc/\">https://dev.mysql.com/downloads/connector/odbc/</a></em></p>\n<h2 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h2><ol>\n<li>安装完ODBC之后，打开PowerDesigner，新建一个Model，File—&gt;New Model</li>\n</ol>\n<div align=center><img width=\"500\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li>选择工具栏中的Database—&gt; Update Model from Database，如下图</li>\n</ol>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/3.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li>打开配置对话框，选择[Using a data source]，点击输入框后的图标</li>\n</ol>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/4.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li>配置ODBC数据源</li>\n</ol>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/5.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/6.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/7.png\" algin=\"center\"/></div>\n\n<p>说明：这里提供了ANSI和Unicode两种字符集版本的Driver，<strong>Unicode提供更丰富的字符集，一般推荐使用Unicode</strong>。</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/8.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/9.png\" algin=\"center\"/></div>\n\n<p>点击完成，配置连接信息。</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/10.png\" algin=\"center\"/></div>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">说明：</div><div class=\"line\">Data Source Name：指定当前配置的ODBC数据源名称，可随意填写。</div><div class=\"line\">Description：指定ODBC数据源的描述信息，可根据用途随意填写。</div><div class=\"line\">TCP/IP Server：采用TCP/IP协议连接服务器，如果是本地填写localhost或者127.0.0.1（根据实际MySQL用户情况选择），如果是远程服务器则填写相应IP地址即可。</div><div class=\"line\">Port：默认3306，根据实际MySQL的端口设置填写。</div><div class=\"line\">lNamed Pipe：命名管道方式连接，只适用于widows下的本地连接。连接性能比TCP/IP方式更高，更安全。请按照MySQL的配置文件my.ini中的socket参数指定的值填写，如果没有设置则默认为MySQL（但是目前为止这种方式我还没有测试成功）。</div><div class=\"line\">User：数据库用户名。</div><div class=\"line\">Password：数据库密码。</div><div class=\"line\">Database：数据库中的database。</div></pre></td></tr></table></figure>\n<p>信息输入完之后可以选择Test测试配置是否正确，点击OK就结束了配置。</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/12.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/13.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/14.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/15.png\" algin=\"center\"/></div>\n\n<p>到这里已经可以连接数据库了。</p>\n<h1 id=\"设计数据库\"><a href=\"#设计数据库\" class=\"headerlink\" title=\"设计数据库\"></a>设计数据库</h1><p>如果在已有的数据库上需要设计和修改，先取消所有表，再选择需要设计或修改的数据库，选择表，点击ok。</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-1.png\" algin=\"center\"/></div>\n\n<p>连接后的UML如下，可以新建和修改表</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-2.png\" algin=\"center\"/></div>\n\n<p>同时可对表进行主外键设计，现在主外键已经很少用到了。</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-3.png\" algin=\"center\"/></div>\n\n<p>双击表之间的连接线，点击Joins</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-4.png\" algin=\"center\"/></div>\n\n<p>点击【确定】按钮，即可如我们所愿： </p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-6.png\" algin=\"center\"/></div>\n\n<h1 id=\"生成建表语句\"><a href=\"#生成建表语句\" class=\"headerlink\" title=\"生成建表语句\"></a>生成建表语句</h1><p>点击Database—&gt;Generate Database</p>\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-7.png\" algin=\"center\"/></div>\n\n<div align=center><img width=\"450\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017/12/PowerDesigner/2-8.png\" algin=\"center\"/></div>\n\n<p>点击【确定】按钮之后，可以在桌面上找到shiro.sql这样的一个文件，打开，即可看到建表语句： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* DBMS name:      MySQL 5.0                                    */</span></div><div class=\"line\"><span class=\"comment\">/* Created on:     2017.12.6 17:22:25                          */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_permission;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_role;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_role_permission;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_user;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> <span class=\"keyword\">if</span> <span class=\"keyword\">exists</span> shiro.u_user_role;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* User: shiro                                                  */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> shiro;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_permission                                          */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_permission</div><div class=\"line\">(</div><div class=\"line\">   <span class=\"keyword\">id</span>                   <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">   <span class=\"keyword\">url</span>                  <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">256</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'url地址'</span>,</div><div class=\"line\">   <span class=\"keyword\">name</span>                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'url描述'</span>,</div><div class=\"line\">   primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_role                                                */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_role</div><div class=\"line\">(</div><div class=\"line\">   <span class=\"keyword\">id</span>                   <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">   <span class=\"keyword\">name</span>                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色名称'</span>,</div><div class=\"line\">   <span class=\"keyword\">type</span>                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色类型'</span>,</div><div class=\"line\">   primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_role_permission                                     */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_role_permission</div><div class=\"line\">(</div><div class=\"line\">   rid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色ID'</span>,</div><div class=\"line\">   pid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'权限ID'</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_user                                                */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_user</div><div class=\"line\">(</div><div class=\"line\">   <span class=\"keyword\">id</span>                   <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span> auto_increment,</div><div class=\"line\">   nickname             <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'用户昵称'</span>,</div><div class=\"line\">   email                <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">128</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'邮箱|登录帐号'</span>,</div><div class=\"line\">   pswd                 <span class=\"keyword\">national</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">32</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'密码'</span>,</div><div class=\"line\">   create_time          datetime <span class=\"keyword\">comment</span> <span class=\"string\">'创建时间'</span>,</div><div class=\"line\">   last_login_time      datetime <span class=\"keyword\">comment</span> <span class=\"string\">'最后登录时间'</span>,</div><div class=\"line\">   <span class=\"keyword\">status</span>               <span class=\"built_in\">bigint</span>(<span class=\"number\">1</span>) <span class=\"keyword\">default</span> <span class=\"number\">1</span> <span class=\"keyword\">comment</span> <span class=\"string\">'1:有效，0:禁止登录'</span>,</div><div class=\"line\">   primary <span class=\"keyword\">key</span> (<span class=\"keyword\">id</span>)</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"comment\">/* Table: u_user_role                                           */</span></div><div class=\"line\"><span class=\"comment\">/*==============================================================*/</span></div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> shiro.u_user_role</div><div class=\"line\">(</div><div class=\"line\">   uid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'用户ID'</span>,</div><div class=\"line\">   rid                  <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">comment</span> <span class=\"string\">'角色ID'</span></div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> shiro.u_user_role <span class=\"keyword\">add</span> <span class=\"keyword\">constraint</span> FK_Reference_1 foreign <span class=\"keyword\">key</span> (uid)</div><div class=\"line\">      <span class=\"keyword\">references</span> shiro.u_user (<span class=\"keyword\">id</span>) <span class=\"keyword\">on</span> <span class=\"keyword\">delete</span> restrict <span class=\"keyword\">on</span> <span class=\"keyword\">update</span> restrict;</div></pre></td></tr></table></figure>\n<p>得到SQL语句后可直接导入到数据库。由此我们设计数据库已经完成。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这里只是简单介绍了PowerDesigner进行数据库模型设计，自动生成SQL语句等功能。PowerDesigner还有很多技巧和功能在摸索中。</p>"},{"title":"博客建成第一天","date":"2017-03-07T05:30:26.000Z","_content":"> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","source":"_posts/博客建成第一天.md","raw":"---\ntitle: 博客建成第一天\ndate: 2017-03-7 13:30:26\ntags: [随笔]\ncategories: life\n---\n> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","slug":"博客建成第一天","published":1,"updated":"2018-01-05T01:17:10.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u35002d3gfk7s8wtpxn","content":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=\"center\"><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"></div>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n"},{"title":"分布式下ID生成算法 SnowFlake","date":"2017-10-30T06:26:21.000Z","_content":"\n# 引言\n\n在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"/></div><!-- more -->\n\n# 数据库自增长序列或字段\n\n最常见的方式，利用数据库，全表中唯一。如MySQL的`AUTO_INCREMENT`。\n\n## 优点\n\n1. 简单，代码方便，性能可以接受。\n2. 数字ID天然排序，对分页或者需要排序的结果很有帮助。\n\n## 缺点\n\n1. 不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。\n2. 在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。\n3. 在性能达不到要求的情况下，比较难于扩展。\n4. 如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。\n5. 分表分库的时候会有麻烦。\n\n## 优化方案\n\n针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。\n\n# UUID\n\n常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。\n\n## 优点\n\n1. 简单，代码方便。\n2. 生成ID性能非常好，基本不会有性能问题。\n3. 全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。\n\n## 缺点\n\n1. 没有排序，无法保证趋势递增。\n2. UUID往往是使用字符串存储，查询的效率比较低。\n3. 存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。\n4. 传输数据量大。\n5. 不可读。\n\n# Twitter-SnowFlake算法\n\n有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 [*SnowFlake*](https://github.com/twitter/snowflake) 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。\n\n## 算法原理\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"/>\n\n</div>\n\n除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。\n\n### SnowFlake – 时间戳\n\n这里时间戳的细度是**毫秒级**，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。\n\n### SnowFake – 工作机器ID\n\n严格意义上来说这个bit段的使用可以是**进程级**，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。\n\n### SnowFlake – 序列号\n\n序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。\n\n## 具体实现\n\n### Sequence类\n\n```java\n/**\n * Snowflake 生成的 64 位 long 类型的 ID，结构如下:<br>\n * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>\n * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0<br>\n * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，\n *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。\n * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年<br>\n * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId<br>\n * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号<br>\n *\n * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。\n */\npublic class Sequence {\n\t\n\t/** 开始时间截 */\n\tprivate final long twepoch = 1288834974657L;\n\t/** 机器id所占的位数 */\n\tprivate final long workerIdBits = 5L;\n\t/** 数据标识id所占的位数 */\n\tprivate final long datacenterIdBits = 5L;\n\t/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */\n\tprivate final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n\t/** 支持的最大数据标识id，结果是31 */\n\tprivate final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\n\t/** 序列在id中占的位数 */\n\tprivate final long sequenceBits = 12L;\n\t/** 机器ID向左移12位 */\n\tprivate final long workerIdShift = sequenceBits;\n\t/** 数据标识id向左移17位(12+5) */\n\tprivate final long datacenterIdShift = sequenceBits + workerIdBits;\n\t/** 时间截向左移22位(5+5+12) */\n\tprivate final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\n\t/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */\n\tprivate final long sequenceMask = -1L ^ (-1L << sequenceBits);\n\n\t/** 工作机器ID(0~31) */\n\tprivate long workerId;\n\t/** 数据中心ID(0~31) */\n\tprivate long datacenterId;\n\t/** 毫秒内序列(0~4095) */\n\tprivate long sequence = 0L;\n\t/** 上次生成ID的时间截 */\n\tprivate long lastTimestamp = -1L;\n\n\n\tpublic Sequence() {\n\t\tdatacenterId = getDatacenterId(maxDatacenterId);\n\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);\n    }\n\t\n\tpublic Sequence(long workerId, long datacenterId) {\n\t\tif (workerId > maxWorkerId || workerId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n\t\t}\n\t\t\n\t\tif (datacenterId > maxDatacenterId || datacenterId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"datacenter Id can't be greater than %d or less than 0\", maxDatacenterId));\n\t\t}\n\t\t\n\t\tthis.workerId = workerId;\n\t\tthis.datacenterId = datacenterId;\n\t}\n\t\n\n\t/**\n\t * 获取 maxWorkerId\n\t * @param datacenterId\t 数据中心id\n\t * @param maxWorkerId\t 机器id\n\t * @return\tmaxWorkerId\n\t */\n\tprotected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {\n\t\tStringBuilder mpid = new StringBuilder();\n\t\tmpid.append(datacenterId);\n\t\tString name = ManagementFactory.getRuntimeMXBean().getName();\n\t\tif (name != null && !\"\".equals(name)) {\n\t\t\t// GET jvmPid\n\t\t\tmpid.append(name.split(\"@\")[0]);\n\t\t}\n\t\t//MAC + PID 的 hashcode 获取16个低位\n\t\treturn (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);\n\t}\n\n\t/**\n\t * <p>\n     * 数据标识id部分\n     * </p>\n\t * @param maxDatacenterId\n\t * @return \n\t */\n\tprotected static long getDatacenterId(long maxDatacenterId) {\n\t\tlong id = 0L;\n\t\ttry {\n\t\t\tInetAddress ip = InetAddress.getLocalHost();\n\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\t\t\tif (network == null) {\n\t\t\t\tid = 1L;\n\t\t\t} else {\n\t\t\t\tbyte[] mac = network.getHardwareAddress();\n\t\t\t\tif (null != mac) {\n\t\t\t\t\tid = ((0x000000FF & (long) mac[mac.length - 1]) | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;\n\t\t\t\t\tid = id % (maxDatacenterId + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\" getDatacenterId: \" + e.getMessage());\n\t\t}\n\t\treturn id;\n    }\n\t\n\t/**\n\t * 获得下一个ID (该方法是线程安全的)\n\t * \n\t * @return nextId\n\t */\n\tpublic synchronized long nextId() {\n\t\tlong timestamp = timeGen();\n\n\t\t// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常\n\t\tif (timestamp < lastTimestamp) {// 闰秒\n\t\t\tlong offset = lastTimestamp - timestamp;\n\t\t\tif (offset <= 5) {\n\t\t\t\ttry {\n\t\t\t\t\twait(offset << 1);\n\t\t\t\t\ttimestamp = timeGen();\n\t\t\t\t\tif (timestamp < lastTimestamp) {\n\t\t\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t}\n\t\t}\n\t\t\n\t\t//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t\tsequence = (sequence + 1) & sequenceMask;\n\t\t\t// 毫秒内序列溢出\n\t\t\tif (sequence == 0) {\n\t\t\t\t// 阻塞到下一个毫秒,获得新的时间戳\n\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);\n\t\t\t}\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t\tsequence = 0L;\n\t\t}\n\t\t/**\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t    long old = sequence;\n\t\t    sequence = (sequence + 1) & sequenceMask;\n\t\t    // 毫秒内序列溢出\n\t\t    if (sequence == old) {\n\t\t        // 阻塞到下一个毫秒,获得新的时间戳\n\t\t        timestamp = tilNextMillis(lastTimestamp);\n\t\t    }\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);\n\t\t}\n\t\t**/\n\n\t\t// 上次生成ID的时间截\n\t\tlastTimestamp = timestamp;\n\n\t\t// 移位并通过或运算拼到一起组成64位的ID\n\t\treturn ((timestamp - twepoch) << timestampLeftShift) //\n\t\t\t\t| (datacenterId << datacenterIdShift) //\n\t\t\t\t| (workerId << workerIdShift) //\n\t\t\t\t| sequence;\n\t}\n\n\t/**\n\t * 阻塞到下一个毫秒，直到获得新的时间戳\n\t * \n\t * @param lastTimestamp 上次生成ID的时间截\n\t * @return 当前时间戳\n\t */\n\tprotected long tilNextMillis(long lastTimestamp) {\n\t\tlong timestamp = timeGen();\n\t\twhile (timestamp <= lastTimestamp) {\n\t\t\ttimestamp = timeGen();\n\t\t}\n\t\t\n\t\treturn timestamp;\n\t}\n\n\t/**\n\t * 返回以毫秒为单位的当前时间\n\t * \n\t * @return 当前时间(毫秒)\n\t */\n\tprotected long timeGen() {\n\t\treturn SystemClock.now();\n\t}\n\n}\n```\n\n### SystemClock类\n\n```java\n/**\n * 高并发场景下System.currentTimeMillis()的性能问题的优化\n * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）<p>\n * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道<p>\n * 后台定时更新时钟，JVM退出时，线程自动回收<p>\n * 10亿：43410,206,210.72815533980582%<p>\n * 1亿：4699,29,162.0344827586207%<p>\n * 1000万：480,12,40.0%<p>\n * 100万：50,10,5.0%<p>\n */\npublic class SystemClock {\n\n    private final long period;\n    private final AtomicLong now;\n\n    private SystemClock(long period) {\n        this.period = period;\n        this.now = new AtomicLong(System.currentTimeMillis());\n        scheduleClockUpdating();\n    }\n\n    private static class InstanceHolder {\n        public static final SystemClock INSTANCE = new SystemClock(1);\n    }\n\n    private static SystemClock instance() {\n        return InstanceHolder.INSTANCE;\n    }\n\n    private void scheduleClockUpdating() {\n        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n            public Thread newThread(Runnable runnable) {\n                Thread thread = new Thread(runnable, \"System Clock\");\n                thread.setDaemon(true);\n                return thread;\n            }\n        });\n        scheduler.scheduleAtFixedRate(new Runnable() {\n            public void run() {\n                now.set(System.currentTimeMillis());\n            }\n        }, period, period, TimeUnit.MILLISECONDS);\n    }\n\n    private long currentTimeMillis() {\n        return now.get();\n    }\n\n    public static long now() {\n        return instance().currentTimeMillis();\n    }\n    \n\tpublic static String nowDate() {\n\t\treturn new Timestamp(instance().currentTimeMillis()).toString();\n\t}\n\n}\n```\n\n### 测试\n\n```java\npublic class IdGen {\n    private static Sequence sequence = new Sequence();\n  \t/**\n\t * 使用Sequence生成主键，利用Snowflake算法\n\t */\n  \tpublic static String sequenceId() {\n            long nextId = sequence.nextId();\n            return String.valueOf(nextId);\n    }\n  \n  \t//测试代码\n\tpublic static void main(String[] args) {\n        \n        for (int i = 0; i < 1000; i++) {\n            long id = sequenceId();\n            //System.out.println(Long.toBinaryString(id));\n            System.out.println(id);\n        }\n}\n```\n\nSnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。\n\n#### 优点\n\n1. 不依赖于数据库，灵活方便，且性能优于数据库。\n2. ID按照时间在单机上是递增的。\n\n#### 缺点\n\n在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。\n\n# 总结\n\n在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。","source":"_posts/分布式下ID生成算法-SnowFlake.md","raw":"---\ntitle: 分布式下ID生成算法 SnowFlake\ndate: 2017-10-30 14:26:21\ntags: [java,mysql]\ncategories: technology\n---\n\n# 引言\n\n在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"/></div><!-- more -->\n\n# 数据库自增长序列或字段\n\n最常见的方式，利用数据库，全表中唯一。如MySQL的`AUTO_INCREMENT`。\n\n## 优点\n\n1. 简单，代码方便，性能可以接受。\n2. 数字ID天然排序，对分页或者需要排序的结果很有帮助。\n\n## 缺点\n\n1. 不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。\n2. 在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。\n3. 在性能达不到要求的情况下，比较难于扩展。\n4. 如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。\n5. 分表分库的时候会有麻烦。\n\n## 优化方案\n\n针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。\n\n# UUID\n\n常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。\n\n## 优点\n\n1. 简单，代码方便。\n2. 生成ID性能非常好，基本不会有性能问题。\n3. 全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。\n\n## 缺点\n\n1. 没有排序，无法保证趋势递增。\n2. UUID往往是使用字符串存储，查询的效率比较低。\n3. 存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。\n4. 传输数据量大。\n5. 不可读。\n\n# Twitter-SnowFlake算法\n\n有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 [*SnowFlake*](https://github.com/twitter/snowflake) 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。\n\n## 算法原理\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"/>\n\n</div>\n\n除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。\n\n### SnowFlake – 时间戳\n\n这里时间戳的细度是**毫秒级**，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。\n\n### SnowFake – 工作机器ID\n\n严格意义上来说这个bit段的使用可以是**进程级**，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。\n\n### SnowFlake – 序列号\n\n序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。\n\n## 具体实现\n\n### Sequence类\n\n```java\n/**\n * Snowflake 生成的 64 位 long 类型的 ID，结构如下:<br>\n * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>\n * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0<br>\n * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，\n *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。\n * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年<br>\n * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId<br>\n * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号<br>\n *\n * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。\n */\npublic class Sequence {\n\t\n\t/** 开始时间截 */\n\tprivate final long twepoch = 1288834974657L;\n\t/** 机器id所占的位数 */\n\tprivate final long workerIdBits = 5L;\n\t/** 数据标识id所占的位数 */\n\tprivate final long datacenterIdBits = 5L;\n\t/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */\n\tprivate final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n\t/** 支持的最大数据标识id，结果是31 */\n\tprivate final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\n\t/** 序列在id中占的位数 */\n\tprivate final long sequenceBits = 12L;\n\t/** 机器ID向左移12位 */\n\tprivate final long workerIdShift = sequenceBits;\n\t/** 数据标识id向左移17位(12+5) */\n\tprivate final long datacenterIdShift = sequenceBits + workerIdBits;\n\t/** 时间截向左移22位(5+5+12) */\n\tprivate final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\n\t/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */\n\tprivate final long sequenceMask = -1L ^ (-1L << sequenceBits);\n\n\t/** 工作机器ID(0~31) */\n\tprivate long workerId;\n\t/** 数据中心ID(0~31) */\n\tprivate long datacenterId;\n\t/** 毫秒内序列(0~4095) */\n\tprivate long sequence = 0L;\n\t/** 上次生成ID的时间截 */\n\tprivate long lastTimestamp = -1L;\n\n\n\tpublic Sequence() {\n\t\tdatacenterId = getDatacenterId(maxDatacenterId);\n\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);\n    }\n\t\n\tpublic Sequence(long workerId, long datacenterId) {\n\t\tif (workerId > maxWorkerId || workerId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n\t\t}\n\t\t\n\t\tif (datacenterId > maxDatacenterId || datacenterId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"datacenter Id can't be greater than %d or less than 0\", maxDatacenterId));\n\t\t}\n\t\t\n\t\tthis.workerId = workerId;\n\t\tthis.datacenterId = datacenterId;\n\t}\n\t\n\n\t/**\n\t * 获取 maxWorkerId\n\t * @param datacenterId\t 数据中心id\n\t * @param maxWorkerId\t 机器id\n\t * @return\tmaxWorkerId\n\t */\n\tprotected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {\n\t\tStringBuilder mpid = new StringBuilder();\n\t\tmpid.append(datacenterId);\n\t\tString name = ManagementFactory.getRuntimeMXBean().getName();\n\t\tif (name != null && !\"\".equals(name)) {\n\t\t\t// GET jvmPid\n\t\t\tmpid.append(name.split(\"@\")[0]);\n\t\t}\n\t\t//MAC + PID 的 hashcode 获取16个低位\n\t\treturn (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);\n\t}\n\n\t/**\n\t * <p>\n     * 数据标识id部分\n     * </p>\n\t * @param maxDatacenterId\n\t * @return \n\t */\n\tprotected static long getDatacenterId(long maxDatacenterId) {\n\t\tlong id = 0L;\n\t\ttry {\n\t\t\tInetAddress ip = InetAddress.getLocalHost();\n\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\t\t\tif (network == null) {\n\t\t\t\tid = 1L;\n\t\t\t} else {\n\t\t\t\tbyte[] mac = network.getHardwareAddress();\n\t\t\t\tif (null != mac) {\n\t\t\t\t\tid = ((0x000000FF & (long) mac[mac.length - 1]) | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;\n\t\t\t\t\tid = id % (maxDatacenterId + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\" getDatacenterId: \" + e.getMessage());\n\t\t}\n\t\treturn id;\n    }\n\t\n\t/**\n\t * 获得下一个ID (该方法是线程安全的)\n\t * \n\t * @return nextId\n\t */\n\tpublic synchronized long nextId() {\n\t\tlong timestamp = timeGen();\n\n\t\t// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常\n\t\tif (timestamp < lastTimestamp) {// 闰秒\n\t\t\tlong offset = lastTimestamp - timestamp;\n\t\t\tif (offset <= 5) {\n\t\t\t\ttry {\n\t\t\t\t\twait(offset << 1);\n\t\t\t\t\ttimestamp = timeGen();\n\t\t\t\t\tif (timestamp < lastTimestamp) {\n\t\t\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t}\n\t\t}\n\t\t\n\t\t//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t\tsequence = (sequence + 1) & sequenceMask;\n\t\t\t// 毫秒内序列溢出\n\t\t\tif (sequence == 0) {\n\t\t\t\t// 阻塞到下一个毫秒,获得新的时间戳\n\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);\n\t\t\t}\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t\tsequence = 0L;\n\t\t}\n\t\t/**\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t    long old = sequence;\n\t\t    sequence = (sequence + 1) & sequenceMask;\n\t\t    // 毫秒内序列溢出\n\t\t    if (sequence == old) {\n\t\t        // 阻塞到下一个毫秒,获得新的时间戳\n\t\t        timestamp = tilNextMillis(lastTimestamp);\n\t\t    }\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);\n\t\t}\n\t\t**/\n\n\t\t// 上次生成ID的时间截\n\t\tlastTimestamp = timestamp;\n\n\t\t// 移位并通过或运算拼到一起组成64位的ID\n\t\treturn ((timestamp - twepoch) << timestampLeftShift) //\n\t\t\t\t| (datacenterId << datacenterIdShift) //\n\t\t\t\t| (workerId << workerIdShift) //\n\t\t\t\t| sequence;\n\t}\n\n\t/**\n\t * 阻塞到下一个毫秒，直到获得新的时间戳\n\t * \n\t * @param lastTimestamp 上次生成ID的时间截\n\t * @return 当前时间戳\n\t */\n\tprotected long tilNextMillis(long lastTimestamp) {\n\t\tlong timestamp = timeGen();\n\t\twhile (timestamp <= lastTimestamp) {\n\t\t\ttimestamp = timeGen();\n\t\t}\n\t\t\n\t\treturn timestamp;\n\t}\n\n\t/**\n\t * 返回以毫秒为单位的当前时间\n\t * \n\t * @return 当前时间(毫秒)\n\t */\n\tprotected long timeGen() {\n\t\treturn SystemClock.now();\n\t}\n\n}\n```\n\n### SystemClock类\n\n```java\n/**\n * 高并发场景下System.currentTimeMillis()的性能问题的优化\n * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）<p>\n * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道<p>\n * 后台定时更新时钟，JVM退出时，线程自动回收<p>\n * 10亿：43410,206,210.72815533980582%<p>\n * 1亿：4699,29,162.0344827586207%<p>\n * 1000万：480,12,40.0%<p>\n * 100万：50,10,5.0%<p>\n */\npublic class SystemClock {\n\n    private final long period;\n    private final AtomicLong now;\n\n    private SystemClock(long period) {\n        this.period = period;\n        this.now = new AtomicLong(System.currentTimeMillis());\n        scheduleClockUpdating();\n    }\n\n    private static class InstanceHolder {\n        public static final SystemClock INSTANCE = new SystemClock(1);\n    }\n\n    private static SystemClock instance() {\n        return InstanceHolder.INSTANCE;\n    }\n\n    private void scheduleClockUpdating() {\n        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n            public Thread newThread(Runnable runnable) {\n                Thread thread = new Thread(runnable, \"System Clock\");\n                thread.setDaemon(true);\n                return thread;\n            }\n        });\n        scheduler.scheduleAtFixedRate(new Runnable() {\n            public void run() {\n                now.set(System.currentTimeMillis());\n            }\n        }, period, period, TimeUnit.MILLISECONDS);\n    }\n\n    private long currentTimeMillis() {\n        return now.get();\n    }\n\n    public static long now() {\n        return instance().currentTimeMillis();\n    }\n    \n\tpublic static String nowDate() {\n\t\treturn new Timestamp(instance().currentTimeMillis()).toString();\n\t}\n\n}\n```\n\n### 测试\n\n```java\npublic class IdGen {\n    private static Sequence sequence = new Sequence();\n  \t/**\n\t * 使用Sequence生成主键，利用Snowflake算法\n\t */\n  \tpublic static String sequenceId() {\n            long nextId = sequence.nextId();\n            return String.valueOf(nextId);\n    }\n  \n  \t//测试代码\n\tpublic static void main(String[] args) {\n        \n        for (int i = 0; i < 1000; i++) {\n            long id = sequenceId();\n            //System.out.println(Long.toBinaryString(id));\n            System.out.println(id);\n        }\n}\n```\n\nSnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。\n\n#### 优点\n\n1. 不依赖于数据库，灵活方便，且性能优于数据库。\n2. ID按照时间在单机上是递增的。\n\n#### 缺点\n\n在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。\n\n# 总结\n\n在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。","slug":"分布式下ID生成算法-SnowFlake","published":1,"updated":"2018-03-13T05:53:41.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u3a002h3gfkh8cgcbs5","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"数据库自增长序列或字段\"><a href=\"#数据库自增长序列或字段\" class=\"headerlink\" title=\"数据库自增长序列或字段\"></a>数据库自增长序列或字段</h1><p>最常见的方式，利用数据库，全表中唯一。如MySQL的<code>AUTO_INCREMENT</code>。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便，性能可以接受。</li>\n<li>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</li>\n<li>在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</li>\n<li>在性能达不到要求的情况下，比较难于扩展。</li>\n<li>如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</li>\n<li>分表分库的时候会有麻烦。</li>\n</ol>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><p>针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p>\n<h1 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h1><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。</p>\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便。</li>\n<li>生成ID性能非常好，基本不会有性能问题。</li>\n<li>全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</li>\n</ol>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>没有排序，无法保证趋势递增。</li>\n<li>UUID往往是使用字符串存储，查询的效率比较低。</li>\n<li>存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</li>\n<li>传输数据量大。</li>\n<li>不可读。</li>\n</ol>\n<h1 id=\"Twitter-SnowFlake算法\"><a href=\"#Twitter-SnowFlake算法\" class=\"headerlink\" title=\"Twitter-SnowFlake算法\"></a>Twitter-SnowFlake算法</h1><p>有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 <a href=\"https://github.com/twitter/snowflake\" target=\"_blank\" rel=\"external\"><em>SnowFlake</em></a> 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。</p>\n<h2 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h2><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"><br><br></div>\n\n<p>除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。</p>\n<h3 id=\"SnowFlake-–-时间戳\"><a href=\"#SnowFlake-–-时间戳\" class=\"headerlink\" title=\"SnowFlake – 时间戳\"></a>SnowFlake – 时间戳</h3><p>这里时间戳的细度是<strong>毫秒级</strong>，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。</p>\n<h3 id=\"SnowFake-–-工作机器ID\"><a href=\"#SnowFake-–-工作机器ID\" class=\"headerlink\" title=\"SnowFake – 工作机器ID\"></a>SnowFake – 工作机器ID</h3><p>严格意义上来说这个bit段的使用可以是<strong>进程级</strong>，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。</p>\n<h3 id=\"SnowFlake-–-序列号\"><a href=\"#SnowFlake-–-序列号\" class=\"headerlink\" title=\"SnowFlake – 序列号\"></a>SnowFlake – 序列号</h3><p>序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"Sequence类\"><a href=\"#Sequence类\" class=\"headerlink\" title=\"Sequence类\"></a>Sequence类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Snowflake 生成的 64 位 long 类型的 ID，结构如下:&lt;br&gt;</div><div class=\"line\"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</div><div class=\"line\"> * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0&lt;br&gt;</div><div class=\"line\"> * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，</div><div class=\"line\"> *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。</div><div class=\"line\"> * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年&lt;br&gt;</div><div class=\"line\"> * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId&lt;br&gt;</div><div class=\"line\"> * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号&lt;br&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sequence</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/** 开始时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> twepoch = <span class=\"number\">1288834974657L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxWorkerId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; workerIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大数据标识id，结果是31 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxDatacenterId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; datacenterIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 序列在id中占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceBits = <span class=\"number\">12L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器ID向左移12位 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdShift = sequenceBits;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id向左移17位(12+5) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdShift = sequenceBits + workerIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 时间截向左移22位(5+5+12) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceMask = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; sequenceBits);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** 工作机器ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerId;</div><div class=\"line\">\t<span class=\"comment\">/** 数据中心ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId;</div><div class=\"line\">\t<span class=\"comment\">/** 毫秒内序列(0~4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 上次生成ID的时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastTimestamp = -<span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tdatacenterId = getDatacenterId(maxDatacenterId);</div><div class=\"line\">\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> datacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"worker Id can't be greater than %d or less than 0\"</span>, maxWorkerId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"datacenter Id can't be greater than %d or less than 0\"</span>, maxDatacenterId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.workerId = workerId;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.datacenterId = datacenterId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取 maxWorkerId</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> datacenterId\t 数据中心id</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxWorkerId\t 机器id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span>\tmaxWorkerId</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMaxWorkerId</span><span class=\"params\">(<span class=\"keyword\">long</span> datacenterId, <span class=\"keyword\">long</span> maxWorkerId)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder mpid = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tmpid.append(datacenterId);</div><div class=\"line\">\t\tString name = ManagementFactory.getRuntimeMXBean().getName();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// GET jvmPid</span></div><div class=\"line\">\t\t\tmpid.append(name.split(<span class=\"string\">\"@\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//MAC + PID 的 hashcode 获取16个低位</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (mpid.toString().hashCode() &amp; <span class=\"number\">0xffff</span>) % (maxWorkerId + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * &lt;p&gt;</div><div class=\"line\">     * 数据标识id部分</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxDatacenterId</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> </div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getDatacenterId</span><span class=\"params\">(<span class=\"keyword\">long</span> maxDatacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> id = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tInetAddress ip = InetAddress.getLocalHost();</div><div class=\"line\">\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (network == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tid = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] mac = network.getHardwareAddress();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mac) &#123;</div><div class=\"line\">\t\t\t\t\tid = ((<span class=\"number\">0x000000FF</span> &amp; (<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">1</span>]) | (<span class=\"number\">0x0000FF00</span> &amp; (((<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">8</span>))) &gt;&gt; <span class=\"number\">6</span>;</div><div class=\"line\">\t\t\t\t\tid = id % (maxDatacenterId + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.err.println(<span class=\"string\">\" getDatacenterId: \"</span> + e.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获得下一个ID (该方法是线程安全的)</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> nextId</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">nextId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;<span class=\"comment\">// 闰秒</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> offset = lastTimestamp - timestamp;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (offset &lt;= <span class=\"number\">5</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\twait(offset &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果是同一时间生成的，则进行毫秒内序列</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t\tsequence = (sequence + <span class=\"number\">1</span>) &amp; sequenceMask;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 毫秒内序列溢出</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (sequence == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 阻塞到下一个毫秒,获得新的时间戳</span></div><div class=\"line\">\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 时间戳改变，毫秒内序列重置</span></div><div class=\"line\">\t\t\tsequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t// 如果是同一时间生成的，则进行毫秒内序列</div><div class=\"line\">\t\tif (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t    long old = sequence;</div><div class=\"line\">\t\t    sequence = (sequence + 1) &amp; sequenceMask;</div><div class=\"line\">\t\t    // 毫秒内序列溢出</div><div class=\"line\">\t\t    if (sequence == old) &#123;</div><div class=\"line\">\t\t        // 阻塞到下一个毫秒,获得新的时间戳</div><div class=\"line\">\t\t        timestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t&#125; else &#123;// 时间戳改变，毫秒内序列重置</div><div class=\"line\">\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t**/</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 上次生成ID的时间截</span></div><div class=\"line\">\t\tlastTimestamp = timestamp;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 移位并通过或运算拼到一起组成64位的ID</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (datacenterId &lt;&lt; datacenterIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (workerId &lt;&lt; workerIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| sequence;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 阻塞到下一个毫秒，直到获得新的时间戳</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> lastTimestamp 上次生成ID的时间截</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间戳</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">tilNextMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> lastTimestamp)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (timestamp &lt;= lastTimestamp) &#123;</div><div class=\"line\">\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> timestamp;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回以毫秒为单位的当前时间</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间(毫秒)</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">timeGen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SystemClock.now();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SystemClock类\"><a href=\"#SystemClock类\" class=\"headerlink\" title=\"SystemClock类\"></a>SystemClock类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 高并发场景下System.currentTimeMillis()的性能问题的优化</div><div class=\"line\"> * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）&lt;p&gt;</div><div class=\"line\"> * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道&lt;p&gt;</div><div class=\"line\"> * 后台定时更新时钟，JVM退出时，线程自动回收&lt;p&gt;</div><div class=\"line\"> * 10亿：43410,206,210.72815533980582%&lt;p&gt;</div><div class=\"line\"> * 1亿：4699,29,162.0344827586207%&lt;p&gt;</div><div class=\"line\"> * 1000万：480,12,40.0%&lt;p&gt;</div><div class=\"line\"> * 100万：50,10,5.0%&lt;p&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemClock</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> period;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicLong now;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SystemClock</span><span class=\"params\">(<span class=\"keyword\">long</span> period)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.period = period;</div><div class=\"line\">        <span class=\"keyword\">this</span>.now = <span class=\"keyword\">new</span> AtomicLong(System.currentTimeMillis());</div><div class=\"line\">        scheduleClockUpdating();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstanceHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SystemClock INSTANCE = <span class=\"keyword\">new</span> SystemClock(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SystemClock <span class=\"title\">instance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> InstanceHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleClockUpdating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(<span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(runnable, <span class=\"string\">\"System Clock\"</span>);</div><div class=\"line\">                thread.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> thread;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        scheduler.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                now.set(System.currentTimeMillis());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, period, period, TimeUnit.MILLISECONDS);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> now.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">now</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance().currentTimeMillis();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">nowDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Timestamp(instance().currentTimeMillis()).toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdGen</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Sequence sequence = <span class=\"keyword\">new</span> Sequence();</div><div class=\"line\">  \t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 使用Sequence生成主键，利用Snowflake算法</div><div class=\"line\">\t */</div><div class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">sequenceId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> nextId = sequence.nextId();</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(nextId);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">//测试代码</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> id = sequenceId();</div><div class=\"line\">            <span class=\"comment\">//System.out.println(Long.toBinaryString(id));</span></div><div class=\"line\">            System.out.println(id);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>不依赖于数据库，灵活方便，且性能优于数据库。</li>\n<li>ID按照时间在单机上是递增的。</li>\n</ol>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"数据库自增长序列或字段\"><a href=\"#数据库自增长序列或字段\" class=\"headerlink\" title=\"数据库自增长序列或字段\"></a>数据库自增长序列或字段</h1><p>最常见的方式，利用数据库，全表中唯一。如MySQL的<code>AUTO_INCREMENT</code>。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便，性能可以接受。</li>\n<li>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</li>\n<li>在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</li>\n<li>在性能达不到要求的情况下，比较难于扩展。</li>\n<li>如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</li>\n<li>分表分库的时候会有麻烦。</li>\n</ol>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><p>针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p>\n<h1 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h1><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。</p>\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便。</li>\n<li>生成ID性能非常好，基本不会有性能问题。</li>\n<li>全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</li>\n</ol>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>没有排序，无法保证趋势递增。</li>\n<li>UUID往往是使用字符串存储，查询的效率比较低。</li>\n<li>存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</li>\n<li>传输数据量大。</li>\n<li>不可读。</li>\n</ol>\n<h1 id=\"Twitter-SnowFlake算法\"><a href=\"#Twitter-SnowFlake算法\" class=\"headerlink\" title=\"Twitter-SnowFlake算法\"></a>Twitter-SnowFlake算法</h1><p>有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 <a href=\"https://github.com/twitter/snowflake\"><em>SnowFlake</em></a> 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。</p>\n<h2 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h2><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"/><br><br></div>\n\n<p>除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。</p>\n<h3 id=\"SnowFlake-–-时间戳\"><a href=\"#SnowFlake-–-时间戳\" class=\"headerlink\" title=\"SnowFlake – 时间戳\"></a>SnowFlake – 时间戳</h3><p>这里时间戳的细度是<strong>毫秒级</strong>，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。</p>\n<h3 id=\"SnowFake-–-工作机器ID\"><a href=\"#SnowFake-–-工作机器ID\" class=\"headerlink\" title=\"SnowFake – 工作机器ID\"></a>SnowFake – 工作机器ID</h3><p>严格意义上来说这个bit段的使用可以是<strong>进程级</strong>，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。</p>\n<h3 id=\"SnowFlake-–-序列号\"><a href=\"#SnowFlake-–-序列号\" class=\"headerlink\" title=\"SnowFlake – 序列号\"></a>SnowFlake – 序列号</h3><p>序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"Sequence类\"><a href=\"#Sequence类\" class=\"headerlink\" title=\"Sequence类\"></a>Sequence类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Snowflake 生成的 64 位 long 类型的 ID，结构如下:&lt;br&gt;</div><div class=\"line\"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</div><div class=\"line\"> * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0&lt;br&gt;</div><div class=\"line\"> * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，</div><div class=\"line\"> *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。</div><div class=\"line\"> * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年&lt;br&gt;</div><div class=\"line\"> * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId&lt;br&gt;</div><div class=\"line\"> * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号&lt;br&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sequence</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/** 开始时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> twepoch = <span class=\"number\">1288834974657L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxWorkerId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; workerIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大数据标识id，结果是31 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxDatacenterId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; datacenterIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 序列在id中占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceBits = <span class=\"number\">12L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器ID向左移12位 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdShift = sequenceBits;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id向左移17位(12+5) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdShift = sequenceBits + workerIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 时间截向左移22位(5+5+12) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceMask = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; sequenceBits);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** 工作机器ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerId;</div><div class=\"line\">\t<span class=\"comment\">/** 数据中心ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId;</div><div class=\"line\">\t<span class=\"comment\">/** 毫秒内序列(0~4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 上次生成ID的时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastTimestamp = -<span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tdatacenterId = getDatacenterId(maxDatacenterId);</div><div class=\"line\">\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> datacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"worker Id can't be greater than %d or less than 0\"</span>, maxWorkerId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"datacenter Id can't be greater than %d or less than 0\"</span>, maxDatacenterId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.workerId = workerId;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.datacenterId = datacenterId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取 maxWorkerId</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> datacenterId\t 数据中心id</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxWorkerId\t 机器id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span>\tmaxWorkerId</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMaxWorkerId</span><span class=\"params\">(<span class=\"keyword\">long</span> datacenterId, <span class=\"keyword\">long</span> maxWorkerId)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder mpid = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tmpid.append(datacenterId);</div><div class=\"line\">\t\tString name = ManagementFactory.getRuntimeMXBean().getName();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// GET jvmPid</span></div><div class=\"line\">\t\t\tmpid.append(name.split(<span class=\"string\">\"@\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//MAC + PID 的 hashcode 获取16个低位</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (mpid.toString().hashCode() &amp; <span class=\"number\">0xffff</span>) % (maxWorkerId + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * &lt;p&gt;</div><div class=\"line\">     * 数据标识id部分</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxDatacenterId</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> </div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getDatacenterId</span><span class=\"params\">(<span class=\"keyword\">long</span> maxDatacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> id = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tInetAddress ip = InetAddress.getLocalHost();</div><div class=\"line\">\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (network == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tid = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] mac = network.getHardwareAddress();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mac) &#123;</div><div class=\"line\">\t\t\t\t\tid = ((<span class=\"number\">0x000000FF</span> &amp; (<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">1</span>]) | (<span class=\"number\">0x0000FF00</span> &amp; (((<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">8</span>))) &gt;&gt; <span class=\"number\">6</span>;</div><div class=\"line\">\t\t\t\t\tid = id % (maxDatacenterId + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.err.println(<span class=\"string\">\" getDatacenterId: \"</span> + e.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获得下一个ID (该方法是线程安全的)</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> nextId</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">nextId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;<span class=\"comment\">// 闰秒</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> offset = lastTimestamp - timestamp;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (offset &lt;= <span class=\"number\">5</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\twait(offset &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果是同一时间生成的，则进行毫秒内序列</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t\tsequence = (sequence + <span class=\"number\">1</span>) &amp; sequenceMask;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 毫秒内序列溢出</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (sequence == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 阻塞到下一个毫秒,获得新的时间戳</span></div><div class=\"line\">\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 时间戳改变，毫秒内序列重置</span></div><div class=\"line\">\t\t\tsequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t// 如果是同一时间生成的，则进行毫秒内序列</div><div class=\"line\">\t\tif (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t    long old = sequence;</div><div class=\"line\">\t\t    sequence = (sequence + 1) &amp; sequenceMask;</div><div class=\"line\">\t\t    // 毫秒内序列溢出</div><div class=\"line\">\t\t    if (sequence == old) &#123;</div><div class=\"line\">\t\t        // 阻塞到下一个毫秒,获得新的时间戳</div><div class=\"line\">\t\t        timestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t&#125; else &#123;// 时间戳改变，毫秒内序列重置</div><div class=\"line\">\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t**/</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 上次生成ID的时间截</span></div><div class=\"line\">\t\tlastTimestamp = timestamp;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 移位并通过或运算拼到一起组成64位的ID</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (datacenterId &lt;&lt; datacenterIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (workerId &lt;&lt; workerIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| sequence;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 阻塞到下一个毫秒，直到获得新的时间戳</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> lastTimestamp 上次生成ID的时间截</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间戳</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">tilNextMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> lastTimestamp)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (timestamp &lt;= lastTimestamp) &#123;</div><div class=\"line\">\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> timestamp;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 返回以毫秒为单位的当前时间</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间(毫秒)</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">timeGen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SystemClock.now();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SystemClock类\"><a href=\"#SystemClock类\" class=\"headerlink\" title=\"SystemClock类\"></a>SystemClock类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 高并发场景下System.currentTimeMillis()的性能问题的优化</div><div class=\"line\"> * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）&lt;p&gt;</div><div class=\"line\"> * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道&lt;p&gt;</div><div class=\"line\"> * 后台定时更新时钟，JVM退出时，线程自动回收&lt;p&gt;</div><div class=\"line\"> * 10亿：43410,206,210.72815533980582%&lt;p&gt;</div><div class=\"line\"> * 1亿：4699,29,162.0344827586207%&lt;p&gt;</div><div class=\"line\"> * 1000万：480,12,40.0%&lt;p&gt;</div><div class=\"line\"> * 100万：50,10,5.0%&lt;p&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemClock</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> period;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicLong now;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SystemClock</span><span class=\"params\">(<span class=\"keyword\">long</span> period)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.period = period;</div><div class=\"line\">        <span class=\"keyword\">this</span>.now = <span class=\"keyword\">new</span> AtomicLong(System.currentTimeMillis());</div><div class=\"line\">        scheduleClockUpdating();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstanceHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SystemClock INSTANCE = <span class=\"keyword\">new</span> SystemClock(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SystemClock <span class=\"title\">instance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> InstanceHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleClockUpdating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(<span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(runnable, <span class=\"string\">\"System Clock\"</span>);</div><div class=\"line\">                thread.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> thread;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        scheduler.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                now.set(System.currentTimeMillis());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, period, period, TimeUnit.MILLISECONDS);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> now.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">now</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance().currentTimeMillis();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">nowDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Timestamp(instance().currentTimeMillis()).toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdGen</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Sequence sequence = <span class=\"keyword\">new</span> Sequence();</div><div class=\"line\">  \t<span class=\"comment\">/**</div><div class=\"line\">\t * 使用Sequence生成主键，利用Snowflake算法</div><div class=\"line\">\t */</span></div><div class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">sequenceId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> nextId = sequence.nextId();</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(nextId);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">//测试代码</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> id = sequenceId();</div><div class=\"line\">            <span class=\"comment\">//System.out.println(Long.toBinaryString(id));</span></div><div class=\"line\">            System.out.println(id);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>不依赖于数据库，灵活方便，且性能优于数据库。</li>\n<li>ID按照时间在单机上是递增的。</li>\n</ol>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。</p>"},{"title":"回顾过去 展望未来","date":"2018-01-02T01:53:54.000Z","_content":"\n时间过的可真的是快，转眼间到了2018年，今年的元旦没有出去跨年，而是在家里静静的等待着2018年的到来，不知道是欣喜还是忧郁。2017年我的年度目标只实现了90%，并没有完全达到期望。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/time/2018%E5%8A%A0%E6%B2%B9.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n自己最近一年来特别不想熬夜，一熬夜第二天就感觉特别的累。这一年自己也学到了很多的东西，虽然感觉很累，但是觉得很开心。公司放假的安排也出来了，腊月二十四，放假立马就回家，又到了一年抢票的时间。几多欢喜几多愁啊。2018也是自己的本命年，加油！加油！","source":"_posts/回顾过去-展望未来.md","raw":"---\ntitle: 回顾过去 展望未来\ndate: 2018-01-02 09:53:54\ntags: [随笔]\ncategories: life\n---\n\n时间过的可真的是快，转眼间到了2018年，今年的元旦没有出去跨年，而是在家里静静的等待着2018年的到来，不知道是欣喜还是忧郁。2017年我的年度目标只实现了90%，并没有完全达到期望。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/time/2018%E5%8A%A0%E6%B2%B9.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n自己最近一年来特别不想熬夜，一熬夜第二天就感觉特别的累。这一年自己也学到了很多的东西，虽然感觉很累，但是觉得很开心。公司放假的安排也出来了，腊月二十四，放假立马就回家，又到了一年抢票的时间。几多欢喜几多愁啊。2018也是自己的本命年，加油！加油！","slug":"回顾过去-展望未来","published":1,"updated":"2018-03-13T05:53:51.648Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u3g002l3gfk9a3hlcfx","content":"<p>时间过的可真的是快，转眼间到了2018年，今年的元旦没有出去跨年，而是在家里静静的等待着2018年的到来，不知道是欣喜还是忧郁。2017年我的年度目标只实现了90%，并没有完全达到期望。</p>\n<p><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/time/2018%E5%8A%A0%E6%B2%B9.jpg\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<p>自己最近一年来特别不想熬夜，一熬夜第二天就感觉特别的累。这一年自己也学到了很多的东西，虽然感觉很累，但是觉得很开心。公司放假的安排也出来了，腊月二十四，放假立马就回家，又到了一年抢票的时间。几多欢喜几多愁啊。2018也是自己的本命年，加油！加油！</p>\n","site":{"data":{}},"excerpt":"<p>时间过的可真的是快，转眼间到了2018年，今年的元旦没有出去跨年，而是在家里静静的等待着2018年的到来，不知道是欣喜还是忧郁。2017年我的年度目标只实现了90%，并没有完全达到期望。</p>\n<p><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/time/2018%E5%8A%A0%E6%B2%B9.jpg\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<p>自己最近一年来特别不想熬夜，一熬夜第二天就感觉特别的累。这一年自己也学到了很多的东西，虽然感觉很累，但是觉得很开心。公司放假的安排也出来了，腊月二十四，放假立马就回家，又到了一年抢票的时间。几多欢喜几多愁啊。2018也是自己的本命年，加油！加油！</p>"},{"title":"大话数据库连接池","date":"2018-02-06T09:50:49.000Z","_content":"\n# 引言\n\n数据库连接池在Java数据库相关中间件产品群中，应该算是最底层最基础的一类产品，作为企业应用开发必不可少的组件，无数开发者们贡献了一个又一个的优秀产品，它们有的随着时代发展，功成身退，有的还在不断迭代，老而弥坚，更有新生代产品，或性能无敌、或功能全面。接下来就聊一聊  “那些年，我们用过的数据库连接池。”<div  align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/index.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 第一、二代连接池\n\n区分一个数据库连接池是属于第一代产品还是代二代产品有一个最重要的特征就是看它在架构和设计时采用的线程模型，因为这直接影响的是并发环境下存取数据库连接的性能。\n\n一般来讲采用单线程同步的架构设计都属于第一代连接池，二采用多线程异步架构的则属于第二代。比较有代表性的就是Apache Commons DBCP，在1.x版本中，一直延续着单线程设计模式，到2.x才采用多线程模型。\n\n用版本发布时间来辨别区分两代产品，则一个偷懒的好方法。以下是这些常见数据库连接池最新版本的发布时间：\n\n| 数据库连接池   | 最新版本         | 发布时间             |\n| -------- | ------------ | ---------------- |\n| C3P0     | c3p0-0.9.5.2 | on 9 Dec 2015    |\n| DBCP     | 2.2.0        | 27 December 2017 |\n| Druid    | 0.11.0       | Dec 4 2017       |\n| HikariCP | 2.7.6        | 2018-01-14       |\n\n从表中可以看出，C3P0已经很久没有更新了。DBCP更新速度很慢，基本处于不活跃状态，而Druid和HikariCP处于活跃状态的更新中，这就是我们说的二代产品了。\n\n二代产品对一代产品的超越是颠覆性的，除了一些“历史原因”，你很难再找到第二条理由说服自己不选择二代产品，但任何成功都不是偶然的，二代产品的成功很大程度上得益于前代产品们打下的基础，站在巨人的肩膀上，新一代的连接池的设计师们将这一项“工具化”的产品，推向了极致。其中，最具代表性的两款产品是：\n\n- HikariCP\n- Druid\n\n# 彻底死掉的C3P0\n\nC3P0是我使用的第一款数据库连接池，在很长一段时间内，它一直是Java领域内数据库连接池的代名词，当年盛极一时的Hibernate都将其作为内置的数据库连接池，可以业内对它的稳定性还是认可的。C3P0功能简单易用，稳定性好这是它的优点，但是性能上的缺点却让它彻底被打入冷宫。C3P0的性能很差，差到即便是同时代的产品相比它也是垫底的，更不用和Druid、HikariCP等相比了。正常来讲，有问题很正常，改就是了，但c3p0最致命的问题就是架构设计过于复杂，让重构变成了一项不可能完成的任务。随着国内互联网大潮的涌起，性能有硬伤的c3p0彻底的退出了历史舞台。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/1.png\" algin=\"center\"/>\n\n</div>\n\n# 咸鱼翻身的DBCP\n\nDBCP（DataBase Connection Pool）属于Apache顶级项目Commons中的核心子项目（最早在Jakarta Commons里就有）,在Apache的生态圈中的影响里十分广泛，比如最为大家所熟知的Tomcat就在内部集成了DBCP，实现JPA规范的OpenJPA，也是默认集成DBCP的。但DBCP并不是独立实现连接池功能的，它内部依赖于Commons中的另一个子项目Pool，连接池最核心的“池”，就是由Pool组件提供的，因此，DBCP的性能实际上就是Pool的性能，DBCP和Pool的依赖关系如下表：\n\n| Apache Commons DBCP | Apache Commons Pool |\n| ------------------- | ------------------- |\n| v1.2.2              | v1.3                |\n| v1.3                | v1.5.4              |\n| v1.4                | v1.5.4              |\n| v2.0.x              | v2.2                |\n| v2.1.x              | v2.4.2              |\n| v2.2.x              | v2.5.0              |\n\n可以看到，因为核心功能依赖于Pool，所以DBCP本身只能做小版本的更新，真正大版本的更迭则完全依托于pool。有很长一段时间，pool都还是停留在1.x版本，这直接导致DBCP也更新乏力。很多依赖DBCP的应用在遇到性能瓶颈之后，别无选择，只能将其替换掉，DBCP忠实的拥趸tomcat就在其tomcat 7.0版本中，自己重新设计开发出了一套连接池（Tomcat JDBC Pool）。好在，在2013年事情终于迎来转机，13年9月Commons-Pool 2.0版本发布，14年2月份，DBCP也终于迎来了自己的2.0版本，基于新的线程模型全新设计的“池”让DBCP重焕青春，虽然和新一代的连接池相比仍有一定差距，但差距并不大，DBCP2.x版本已经稳稳达到了和新一代产品同级别的性能指标（见下图）。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/3.png\" algin=\"center\"/>\n\n</div>\n\nDBCP终于靠Pool咸鱼翻身，打了一个漂亮的翻身仗，但长时间的等待已经完全消磨了用户的耐心，与新一代的产品项目相比，DBCP没有任何优势，试问，谁会在有选择的前提下，去选择那个并不优秀的呢？也许，现在还选择DBCP2的唯一理由，就是情怀吧。\n\n# 性能无敌的HikariCP\n\nHikariCP号称“性能杀手”（It’s Faster），它的表现究竟如何呢，先来看下官网提供的数据：\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/4.png\" algin=\"center\"/>\n\n</div>\n\n不光性能强劲，稳定性也不差：\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/5.png\" algin=\"center\"/>\n\n</div>\n\n那它是怎么做到如此强劲的呢？官网给出的说明如下：\n\n- 字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；\n- 优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码；\n- 自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；\n- 自定义集合类型（ConcurrentBag）：提高并发读写的效率；\n- 其他缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究（但没说具体怎么优化）。\n\n可以看到，上述这几点优化，和现在能找到的资料来看，HakariCP在性能上的优势应该是得到共识的，再加上它自身小巧的身形，在当前的“云时代、微服务”的背景下，HakariCP一定会得到更多人的青睐。\n\n# 功能全面的Druid\n\n近几年，阿里在开源项目上动作频频，除了有像fastJson、dubbo这类项目，更有像AliSQL这类的大型软件，今天说的Druid，就是阿里众多优秀开源项目中的一个。它除了提供性能卓越的连接池功能外，还集成了SQL监控，黑名单拦截等功能，用它自己的话说，Druid是“为监控而生”。借助于阿里这个平台的号召力，产品一经发布就赢得了大批用户的拥趸，从用户使用的反馈来看，Druid也确实没让用户失望。\n\n相较于其他产品，Druid另一个比较大的优势，就是中文文档比较全面（毕竟是国人的项目么），在github的[*wiki页面*](https://github.com/alibaba/druid/wiki/%E9%A6%96%E9%A1%B5)，列举了日常使用中可能遇到的问题，对一个新用户来讲，上面提供的内容已经足够指导它完成产品的配置和使用了。\n\n下图为Druid自己提供的性能测试数据：\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/6.png\" algin=\"center\"/>\n\n</div>\n\n现在项目开发中，我还是比较倾向于使用Durid，它不仅仅是一个数据库连接池，它还包含一个ProxyDriver，一系列内置的JDBC组件库，一个SQL Parser。\n\n## Druid 相对于其他数据库连接池的优点\n\n1. 强大的监控特性，通过Druid提供的监控功能，可以清楚知道连接池和SQL的工作情况。\n\n   a. 监控SQL的执行时间、ResultSet持有时间、返回行数、更新行数、错误次数、错误堆栈信息；\n\n   b. SQL执行的耗时区间分布。什么是耗时区间分布呢？比如说，某个SQL执行了1000次，其中0~1毫秒区间50次，1~10毫秒800次，10~100毫秒100次，100~1000毫秒30次，1~10秒15次，10秒以上5次。通过耗时区间分布，能够非常清楚知道SQL的执行耗时情况；\n\n   c.  监控连接池的物理连接创建和销毁次数、逻辑连接的申请和关闭次数、非空等待次数、PSCache命中率等。\n\n2. 方便扩展。Druid提供了Filter-Chain模式的扩展API，可以自己编写Filter拦截JDBC中的任何方法，可以在上面做任何事情，比如说性能监控、SQL审计、用户名密码加密、日志等等。\n3. Druid集合了开源和商业数据库连接池的优秀特性，并结合阿里巴巴大规模苛刻生产环境的使用经验进行优化。\n\n# 总结\n\n时至今日，虽然每个应用（需要RDBMS的）都离不开连接池，但在实际使用的时候，连接池已经可以做到“隐形”了。也就是说在通常情况下，连接池完成项目初始化配置之后，就再不需要再做任何改动了。不论你是选择Druid或是HikariCP，甚至是DBCP，它们都足够稳定且高效！之前讨论了很多关于连接池的性能的问题，但这些性能上的差异，是相较于其他连接池而言的，对整个系统应用来说，第二代连接池在使用过程中体会到的差别是微乎其微的，基本上不存在因为连接池的自身的配饰和使用导致系统性能下降的情况，除非是在单点应用的数据库负载足够高的时候（压力测试的时候），但即便是如此，通用的优化的方式也是单点改集群，而不是在单点的连接池上死扣。\n\n**参考**\n\n- [*数据库连接池性能比对*](https://link.jianshu.com/?t=http://blog.csdn.net/hetaohappy/article/details/50462486)\n- [*大话数据库连接池*](https://www.jianshu.com/p/53de4b76f98c)\n- [*c3p0,Druid,Tomcat Jdbc Pool,dbcp2,proxool数据源性能比较*](https://link.jianshu.com/?t=http://blog.csdn.net/whzhaochao/article/details/49559931)","source":"_posts/大话数据库连接池.md","raw":"---\ntitle: 大话数据库连接池\ndate: 2018-02-06 17:50:49\ntags: [tips,tool]\ncategories: technology\n---\n\n# 引言\n\n数据库连接池在Java数据库相关中间件产品群中，应该算是最底层最基础的一类产品，作为企业应用开发必不可少的组件，无数开发者们贡献了一个又一个的优秀产品，它们有的随着时代发展，功成身退，有的还在不断迭代，老而弥坚，更有新生代产品，或性能无敌、或功能全面。接下来就聊一聊  “那些年，我们用过的数据库连接池。”<div  align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/index.jpg\" algin=\"center\"/>\n\n</div><!-- more -->\n\n# 第一、二代连接池\n\n区分一个数据库连接池是属于第一代产品还是代二代产品有一个最重要的特征就是看它在架构和设计时采用的线程模型，因为这直接影响的是并发环境下存取数据库连接的性能。\n\n一般来讲采用单线程同步的架构设计都属于第一代连接池，二采用多线程异步架构的则属于第二代。比较有代表性的就是Apache Commons DBCP，在1.x版本中，一直延续着单线程设计模式，到2.x才采用多线程模型。\n\n用版本发布时间来辨别区分两代产品，则一个偷懒的好方法。以下是这些常见数据库连接池最新版本的发布时间：\n\n| 数据库连接池   | 最新版本         | 发布时间             |\n| -------- | ------------ | ---------------- |\n| C3P0     | c3p0-0.9.5.2 | on 9 Dec 2015    |\n| DBCP     | 2.2.0        | 27 December 2017 |\n| Druid    | 0.11.0       | Dec 4 2017       |\n| HikariCP | 2.7.6        | 2018-01-14       |\n\n从表中可以看出，C3P0已经很久没有更新了。DBCP更新速度很慢，基本处于不活跃状态，而Druid和HikariCP处于活跃状态的更新中，这就是我们说的二代产品了。\n\n二代产品对一代产品的超越是颠覆性的，除了一些“历史原因”，你很难再找到第二条理由说服自己不选择二代产品，但任何成功都不是偶然的，二代产品的成功很大程度上得益于前代产品们打下的基础，站在巨人的肩膀上，新一代的连接池的设计师们将这一项“工具化”的产品，推向了极致。其中，最具代表性的两款产品是：\n\n- HikariCP\n- Druid\n\n# 彻底死掉的C3P0\n\nC3P0是我使用的第一款数据库连接池，在很长一段时间内，它一直是Java领域内数据库连接池的代名词，当年盛极一时的Hibernate都将其作为内置的数据库连接池，可以业内对它的稳定性还是认可的。C3P0功能简单易用，稳定性好这是它的优点，但是性能上的缺点却让它彻底被打入冷宫。C3P0的性能很差，差到即便是同时代的产品相比它也是垫底的，更不用和Druid、HikariCP等相比了。正常来讲，有问题很正常，改就是了，但c3p0最致命的问题就是架构设计过于复杂，让重构变成了一项不可能完成的任务。随着国内互联网大潮的涌起，性能有硬伤的c3p0彻底的退出了历史舞台。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/1.png\" algin=\"center\"/>\n\n</div>\n\n# 咸鱼翻身的DBCP\n\nDBCP（DataBase Connection Pool）属于Apache顶级项目Commons中的核心子项目（最早在Jakarta Commons里就有）,在Apache的生态圈中的影响里十分广泛，比如最为大家所熟知的Tomcat就在内部集成了DBCP，实现JPA规范的OpenJPA，也是默认集成DBCP的。但DBCP并不是独立实现连接池功能的，它内部依赖于Commons中的另一个子项目Pool，连接池最核心的“池”，就是由Pool组件提供的，因此，DBCP的性能实际上就是Pool的性能，DBCP和Pool的依赖关系如下表：\n\n| Apache Commons DBCP | Apache Commons Pool |\n| ------------------- | ------------------- |\n| v1.2.2              | v1.3                |\n| v1.3                | v1.5.4              |\n| v1.4                | v1.5.4              |\n| v2.0.x              | v2.2                |\n| v2.1.x              | v2.4.2              |\n| v2.2.x              | v2.5.0              |\n\n可以看到，因为核心功能依赖于Pool，所以DBCP本身只能做小版本的更新，真正大版本的更迭则完全依托于pool。有很长一段时间，pool都还是停留在1.x版本，这直接导致DBCP也更新乏力。很多依赖DBCP的应用在遇到性能瓶颈之后，别无选择，只能将其替换掉，DBCP忠实的拥趸tomcat就在其tomcat 7.0版本中，自己重新设计开发出了一套连接池（Tomcat JDBC Pool）。好在，在2013年事情终于迎来转机，13年9月Commons-Pool 2.0版本发布，14年2月份，DBCP也终于迎来了自己的2.0版本，基于新的线程模型全新设计的“池”让DBCP重焕青春，虽然和新一代的连接池相比仍有一定差距，但差距并不大，DBCP2.x版本已经稳稳达到了和新一代产品同级别的性能指标（见下图）。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/3.png\" algin=\"center\"/>\n\n</div>\n\nDBCP终于靠Pool咸鱼翻身，打了一个漂亮的翻身仗，但长时间的等待已经完全消磨了用户的耐心，与新一代的产品项目相比，DBCP没有任何优势，试问，谁会在有选择的前提下，去选择那个并不优秀的呢？也许，现在还选择DBCP2的唯一理由，就是情怀吧。\n\n# 性能无敌的HikariCP\n\nHikariCP号称“性能杀手”（It’s Faster），它的表现究竟如何呢，先来看下官网提供的数据：\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/4.png\" algin=\"center\"/>\n\n</div>\n\n不光性能强劲，稳定性也不差：\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/5.png\" algin=\"center\"/>\n\n</div>\n\n那它是怎么做到如此强劲的呢？官网给出的说明如下：\n\n- 字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；\n- 优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码；\n- 自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；\n- 自定义集合类型（ConcurrentBag）：提高并发读写的效率；\n- 其他缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究（但没说具体怎么优化）。\n\n可以看到，上述这几点优化，和现在能找到的资料来看，HakariCP在性能上的优势应该是得到共识的，再加上它自身小巧的身形，在当前的“云时代、微服务”的背景下，HakariCP一定会得到更多人的青睐。\n\n# 功能全面的Druid\n\n近几年，阿里在开源项目上动作频频，除了有像fastJson、dubbo这类项目，更有像AliSQL这类的大型软件，今天说的Druid，就是阿里众多优秀开源项目中的一个。它除了提供性能卓越的连接池功能外，还集成了SQL监控，黑名单拦截等功能，用它自己的话说，Druid是“为监控而生”。借助于阿里这个平台的号召力，产品一经发布就赢得了大批用户的拥趸，从用户使用的反馈来看，Druid也确实没让用户失望。\n\n相较于其他产品，Druid另一个比较大的优势，就是中文文档比较全面（毕竟是国人的项目么），在github的[*wiki页面*](https://github.com/alibaba/druid/wiki/%E9%A6%96%E9%A1%B5)，列举了日常使用中可能遇到的问题，对一个新用户来讲，上面提供的内容已经足够指导它完成产品的配置和使用了。\n\n下图为Druid自己提供的性能测试数据：\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/6.png\" algin=\"center\"/>\n\n</div>\n\n现在项目开发中，我还是比较倾向于使用Durid，它不仅仅是一个数据库连接池，它还包含一个ProxyDriver，一系列内置的JDBC组件库，一个SQL Parser。\n\n## Druid 相对于其他数据库连接池的优点\n\n1. 强大的监控特性，通过Druid提供的监控功能，可以清楚知道连接池和SQL的工作情况。\n\n   a. 监控SQL的执行时间、ResultSet持有时间、返回行数、更新行数、错误次数、错误堆栈信息；\n\n   b. SQL执行的耗时区间分布。什么是耗时区间分布呢？比如说，某个SQL执行了1000次，其中0~1毫秒区间50次，1~10毫秒800次，10~100毫秒100次，100~1000毫秒30次，1~10秒15次，10秒以上5次。通过耗时区间分布，能够非常清楚知道SQL的执行耗时情况；\n\n   c.  监控连接池的物理连接创建和销毁次数、逻辑连接的申请和关闭次数、非空等待次数、PSCache命中率等。\n\n2. 方便扩展。Druid提供了Filter-Chain模式的扩展API，可以自己编写Filter拦截JDBC中的任何方法，可以在上面做任何事情，比如说性能监控、SQL审计、用户名密码加密、日志等等。\n3. Druid集合了开源和商业数据库连接池的优秀特性，并结合阿里巴巴大规模苛刻生产环境的使用经验进行优化。\n\n# 总结\n\n时至今日，虽然每个应用（需要RDBMS的）都离不开连接池，但在实际使用的时候，连接池已经可以做到“隐形”了。也就是说在通常情况下，连接池完成项目初始化配置之后，就再不需要再做任何改动了。不论你是选择Druid或是HikariCP，甚至是DBCP，它们都足够稳定且高效！之前讨论了很多关于连接池的性能的问题，但这些性能上的差异，是相较于其他连接池而言的，对整个系统应用来说，第二代连接池在使用过程中体会到的差别是微乎其微的，基本上不存在因为连接池的自身的配饰和使用导致系统性能下降的情况，除非是在单点应用的数据库负载足够高的时候（压力测试的时候），但即便是如此，通用的优化的方式也是单点改集群，而不是在单点的连接池上死扣。\n\n**参考**\n\n- [*数据库连接池性能比对*](https://link.jianshu.com/?t=http://blog.csdn.net/hetaohappy/article/details/50462486)\n- [*大话数据库连接池*](https://www.jianshu.com/p/53de4b76f98c)\n- [*c3p0,Druid,Tomcat Jdbc Pool,dbcp2,proxool数据源性能比较*](https://link.jianshu.com/?t=http://blog.csdn.net/whzhaochao/article/details/49559931)","slug":"大话数据库连接池","published":1,"updated":"2018-03-20T06:22:26.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u3k002p3gfkjk7806e0","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>数据库连接池在Java数据库相关中间件产品群中，应该算是最底层最基础的一类产品，作为企业应用开发必不可少的组件，无数开发者们贡献了一个又一个的优秀产品，它们有的随着时代发展，功成身退，有的还在不断迭代，老而弥坚，更有新生代产品，或性能无敌、或功能全面。接下来就聊一聊  “那些年，我们用过的数据库连接池。”<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/index.jpg\" algin=\"center\"></div></p>\n<p><a id=\"more\"></a></p>\n<h1 id=\"第一、二代连接池\"><a href=\"#第一、二代连接池\" class=\"headerlink\" title=\"第一、二代连接池\"></a>第一、二代连接池</h1><p>区分一个数据库连接池是属于第一代产品还是代二代产品有一个最重要的特征就是看它在架构和设计时采用的线程模型，因为这直接影响的是并发环境下存取数据库连接的性能。</p>\n<p>一般来讲采用单线程同步的架构设计都属于第一代连接池，二采用多线程异步架构的则属于第二代。比较有代表性的就是Apache Commons DBCP，在1.x版本中，一直延续着单线程设计模式，到2.x才采用多线程模型。</p>\n<p>用版本发布时间来辨别区分两代产品，则一个偷懒的好方法。以下是这些常见数据库连接池最新版本的发布时间：</p>\n<table>\n<thead>\n<tr>\n<th>数据库连接池</th>\n<th>最新版本</th>\n<th>发布时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C3P0</td>\n<td>c3p0-0.9.5.2</td>\n<td>on 9 Dec 2015</td>\n</tr>\n<tr>\n<td>DBCP</td>\n<td>2.2.0</td>\n<td>27 December 2017</td>\n</tr>\n<tr>\n<td>Druid</td>\n<td>0.11.0</td>\n<td>Dec 4 2017</td>\n</tr>\n<tr>\n<td>HikariCP</td>\n<td>2.7.6</td>\n<td>2018-01-14</td>\n</tr>\n</tbody>\n</table>\n<p>从表中可以看出，C3P0已经很久没有更新了。DBCP更新速度很慢，基本处于不活跃状态，而Druid和HikariCP处于活跃状态的更新中，这就是我们说的二代产品了。</p>\n<p>二代产品对一代产品的超越是颠覆性的，除了一些“历史原因”，你很难再找到第二条理由说服自己不选择二代产品，但任何成功都不是偶然的，二代产品的成功很大程度上得益于前代产品们打下的基础，站在巨人的肩膀上，新一代的连接池的设计师们将这一项“工具化”的产品，推向了极致。其中，最具代表性的两款产品是：</p>\n<ul>\n<li>HikariCP</li>\n<li>Druid</li>\n</ul>\n<h1 id=\"彻底死掉的C3P0\"><a href=\"#彻底死掉的C3P0\" class=\"headerlink\" title=\"彻底死掉的C3P0\"></a>彻底死掉的C3P0</h1><p>C3P0是我使用的第一款数据库连接池，在很长一段时间内，它一直是Java领域内数据库连接池的代名词，当年盛极一时的Hibernate都将其作为内置的数据库连接池，可以业内对它的稳定性还是认可的。C3P0功能简单易用，稳定性好这是它的优点，但是性能上的缺点却让它彻底被打入冷宫。C3P0的性能很差，差到即便是同时代的产品相比它也是垫底的，更不用和Druid、HikariCP等相比了。正常来讲，有问题很正常，改就是了，但c3p0最致命的问题就是架构设计过于复杂，让重构变成了一项不可能完成的任务。随着国内互联网大潮的涌起，性能有硬伤的c3p0彻底的退出了历史舞台。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/1.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"咸鱼翻身的DBCP\"><a href=\"#咸鱼翻身的DBCP\" class=\"headerlink\" title=\"咸鱼翻身的DBCP\"></a>咸鱼翻身的DBCP</h1><p>DBCP（DataBase Connection Pool）属于Apache顶级项目Commons中的核心子项目（最早在Jakarta Commons里就有）,在Apache的生态圈中的影响里十分广泛，比如最为大家所熟知的Tomcat就在内部集成了DBCP，实现JPA规范的OpenJPA，也是默认集成DBCP的。但DBCP并不是独立实现连接池功能的，它内部依赖于Commons中的另一个子项目Pool，连接池最核心的“池”，就是由Pool组件提供的，因此，DBCP的性能实际上就是Pool的性能，DBCP和Pool的依赖关系如下表：</p>\n<table>\n<thead>\n<tr>\n<th>Apache Commons DBCP</th>\n<th>Apache Commons Pool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v1.2.2</td>\n<td>v1.3</td>\n</tr>\n<tr>\n<td>v1.3</td>\n<td>v1.5.4</td>\n</tr>\n<tr>\n<td>v1.4</td>\n<td>v1.5.4</td>\n</tr>\n<tr>\n<td>v2.0.x</td>\n<td>v2.2</td>\n</tr>\n<tr>\n<td>v2.1.x</td>\n<td>v2.4.2</td>\n</tr>\n<tr>\n<td>v2.2.x</td>\n<td>v2.5.0</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到，因为核心功能依赖于Pool，所以DBCP本身只能做小版本的更新，真正大版本的更迭则完全依托于pool。有很长一段时间，pool都还是停留在1.x版本，这直接导致DBCP也更新乏力。很多依赖DBCP的应用在遇到性能瓶颈之后，别无选择，只能将其替换掉，DBCP忠实的拥趸tomcat就在其tomcat 7.0版本中，自己重新设计开发出了一套连接池（Tomcat JDBC Pool）。好在，在2013年事情终于迎来转机，13年9月Commons-Pool 2.0版本发布，14年2月份，DBCP也终于迎来了自己的2.0版本，基于新的线程模型全新设计的“池”让DBCP重焕青春，虽然和新一代的连接池相比仍有一定差距，但差距并不大，DBCP2.x版本已经稳稳达到了和新一代产品同级别的性能指标（见下图）。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/3.png\" algin=\"center\"><br><br></div>\n\n<p>DBCP终于靠Pool咸鱼翻身，打了一个漂亮的翻身仗，但长时间的等待已经完全消磨了用户的耐心，与新一代的产品项目相比，DBCP没有任何优势，试问，谁会在有选择的前提下，去选择那个并不优秀的呢？也许，现在还选择DBCP2的唯一理由，就是情怀吧。</p>\n<h1 id=\"性能无敌的HikariCP\"><a href=\"#性能无敌的HikariCP\" class=\"headerlink\" title=\"性能无敌的HikariCP\"></a>性能无敌的HikariCP</h1><p>HikariCP号称“性能杀手”（It’s Faster），它的表现究竟如何呢，先来看下官网提供的数据：</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/4.png\" algin=\"center\"><br><br></div>\n\n<p>不光性能强劲，稳定性也不差：</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/5.png\" algin=\"center\"><br><br></div>\n\n<p>那它是怎么做到如此强劲的呢？官网给出的说明如下：</p>\n<ul>\n<li>字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；</li>\n<li>优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码；</li>\n<li>自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；</li>\n<li>自定义集合类型（ConcurrentBag）：提高并发读写的效率；</li>\n<li>其他缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究（但没说具体怎么优化）。</li>\n</ul>\n<p>可以看到，上述这几点优化，和现在能找到的资料来看，HakariCP在性能上的优势应该是得到共识的，再加上它自身小巧的身形，在当前的“云时代、微服务”的背景下，HakariCP一定会得到更多人的青睐。</p>\n<h1 id=\"功能全面的Druid\"><a href=\"#功能全面的Druid\" class=\"headerlink\" title=\"功能全面的Druid\"></a>功能全面的Druid</h1><p>近几年，阿里在开源项目上动作频频，除了有像fastJson、dubbo这类项目，更有像AliSQL这类的大型软件，今天说的Druid，就是阿里众多优秀开源项目中的一个。它除了提供性能卓越的连接池功能外，还集成了SQL监控，黑名单拦截等功能，用它自己的话说，Druid是“为监控而生”。借助于阿里这个平台的号召力，产品一经发布就赢得了大批用户的拥趸，从用户使用的反馈来看，Druid也确实没让用户失望。</p>\n<p>相较于其他产品，Druid另一个比较大的优势，就是中文文档比较全面（毕竟是国人的项目么），在github的<a href=\"https://github.com/alibaba/druid/wiki/%E9%A6%96%E9%A1%B5\" target=\"_blank\" rel=\"external\"><em>wiki页面</em></a>，列举了日常使用中可能遇到的问题，对一个新用户来讲，上面提供的内容已经足够指导它完成产品的配置和使用了。</p>\n<p>下图为Druid自己提供的性能测试数据：</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/6.png\" algin=\"center\"><br><br></div>\n\n<p>现在项目开发中，我还是比较倾向于使用Durid，它不仅仅是一个数据库连接池，它还包含一个ProxyDriver，一系列内置的JDBC组件库，一个SQL Parser。</p>\n<h2 id=\"Druid-相对于其他数据库连接池的优点\"><a href=\"#Druid-相对于其他数据库连接池的优点\" class=\"headerlink\" title=\"Druid 相对于其他数据库连接池的优点\"></a>Druid 相对于其他数据库连接池的优点</h2><ol>\n<li><p>强大的监控特性，通过Druid提供的监控功能，可以清楚知道连接池和SQL的工作情况。</p>\n<p>a. 监控SQL的执行时间、ResultSet持有时间、返回行数、更新行数、错误次数、错误堆栈信息；</p>\n<p>b. SQL执行的耗时区间分布。什么是耗时区间分布呢？比如说，某个SQL执行了1000次，其中0~1毫秒区间50次，1~10毫秒800次，10~100毫秒100次，100~1000毫秒30次，1~10秒15次，10秒以上5次。通过耗时区间分布，能够非常清楚知道SQL的执行耗时情况；</p>\n<p>c.  监控连接池的物理连接创建和销毁次数、逻辑连接的申请和关闭次数、非空等待次数、PSCache命中率等。</p>\n</li>\n<li><p>方便扩展。Druid提供了Filter-Chain模式的扩展API，可以自己编写Filter拦截JDBC中的任何方法，可以在上面做任何事情，比如说性能监控、SQL审计、用户名密码加密、日志等等。</p>\n</li>\n<li>Druid集合了开源和商业数据库连接池的优秀特性，并结合阿里巴巴大规模苛刻生产环境的使用经验进行优化。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>时至今日，虽然每个应用（需要RDBMS的）都离不开连接池，但在实际使用的时候，连接池已经可以做到“隐形”了。也就是说在通常情况下，连接池完成项目初始化配置之后，就再不需要再做任何改动了。不论你是选择Druid或是HikariCP，甚至是DBCP，它们都足够稳定且高效！之前讨论了很多关于连接池的性能的问题，但这些性能上的差异，是相较于其他连接池而言的，对整个系统应用来说，第二代连接池在使用过程中体会到的差别是微乎其微的，基本上不存在因为连接池的自身的配饰和使用导致系统性能下降的情况，除非是在单点应用的数据库负载足够高的时候（压力测试的时候），但即便是如此，通用的优化的方式也是单点改集群，而不是在单点的连接池上死扣。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"https://link.jianshu.com/?t=http://blog.csdn.net/hetaohappy/article/details/50462486\" target=\"_blank\" rel=\"external\"><em>数据库连接池性能比对</em></a></li>\n<li><a href=\"https://www.jianshu.com/p/53de4b76f98c\" target=\"_blank\" rel=\"external\"><em>大话数据库连接池</em></a></li>\n<li><a href=\"https://link.jianshu.com/?t=http://blog.csdn.net/whzhaochao/article/details/49559931\" target=\"_blank\" rel=\"external\"><em>c3p0,Druid,Tomcat Jdbc Pool,dbcp2,proxool数据源性能比较</em></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>数据库连接池在Java数据库相关中间件产品群中，应该算是最底层最基础的一类产品，作为企业应用开发必不可少的组件，无数开发者们贡献了一个又一个的优秀产品，它们有的随着时代发展，功成身退，有的还在不断迭代，老而弥坚，更有新生代产品，或性能无敌、或功能全面。接下来就聊一聊  “那些年，我们用过的数据库连接池。”<div  align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/index.jpg\" algin=\"center\"/></p>\n<p></div>","more":"</p>\n<h1 id=\"第一、二代连接池\"><a href=\"#第一、二代连接池\" class=\"headerlink\" title=\"第一、二代连接池\"></a>第一、二代连接池</h1><p>区分一个数据库连接池是属于第一代产品还是代二代产品有一个最重要的特征就是看它在架构和设计时采用的线程模型，因为这直接影响的是并发环境下存取数据库连接的性能。</p>\n<p>一般来讲采用单线程同步的架构设计都属于第一代连接池，二采用多线程异步架构的则属于第二代。比较有代表性的就是Apache Commons DBCP，在1.x版本中，一直延续着单线程设计模式，到2.x才采用多线程模型。</p>\n<p>用版本发布时间来辨别区分两代产品，则一个偷懒的好方法。以下是这些常见数据库连接池最新版本的发布时间：</p>\n<table>\n<thead>\n<tr>\n<th>数据库连接池</th>\n<th>最新版本</th>\n<th>发布时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C3P0</td>\n<td>c3p0-0.9.5.2</td>\n<td>on 9 Dec 2015</td>\n</tr>\n<tr>\n<td>DBCP</td>\n<td>2.2.0</td>\n<td>27 December 2017</td>\n</tr>\n<tr>\n<td>Druid</td>\n<td>0.11.0</td>\n<td>Dec 4 2017</td>\n</tr>\n<tr>\n<td>HikariCP</td>\n<td>2.7.6</td>\n<td>2018-01-14</td>\n</tr>\n</tbody>\n</table>\n<p>从表中可以看出，C3P0已经很久没有更新了。DBCP更新速度很慢，基本处于不活跃状态，而Druid和HikariCP处于活跃状态的更新中，这就是我们说的二代产品了。</p>\n<p>二代产品对一代产品的超越是颠覆性的，除了一些“历史原因”，你很难再找到第二条理由说服自己不选择二代产品，但任何成功都不是偶然的，二代产品的成功很大程度上得益于前代产品们打下的基础，站在巨人的肩膀上，新一代的连接池的设计师们将这一项“工具化”的产品，推向了极致。其中，最具代表性的两款产品是：</p>\n<ul>\n<li>HikariCP</li>\n<li>Druid</li>\n</ul>\n<h1 id=\"彻底死掉的C3P0\"><a href=\"#彻底死掉的C3P0\" class=\"headerlink\" title=\"彻底死掉的C3P0\"></a>彻底死掉的C3P0</h1><p>C3P0是我使用的第一款数据库连接池，在很长一段时间内，它一直是Java领域内数据库连接池的代名词，当年盛极一时的Hibernate都将其作为内置的数据库连接池，可以业内对它的稳定性还是认可的。C3P0功能简单易用，稳定性好这是它的优点，但是性能上的缺点却让它彻底被打入冷宫。C3P0的性能很差，差到即便是同时代的产品相比它也是垫底的，更不用和Druid、HikariCP等相比了。正常来讲，有问题很正常，改就是了，但c3p0最致命的问题就是架构设计过于复杂，让重构变成了一项不可能完成的任务。随着国内互联网大潮的涌起，性能有硬伤的c3p0彻底的退出了历史舞台。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/1.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"咸鱼翻身的DBCP\"><a href=\"#咸鱼翻身的DBCP\" class=\"headerlink\" title=\"咸鱼翻身的DBCP\"></a>咸鱼翻身的DBCP</h1><p>DBCP（DataBase Connection Pool）属于Apache顶级项目Commons中的核心子项目（最早在Jakarta Commons里就有）,在Apache的生态圈中的影响里十分广泛，比如最为大家所熟知的Tomcat就在内部集成了DBCP，实现JPA规范的OpenJPA，也是默认集成DBCP的。但DBCP并不是独立实现连接池功能的，它内部依赖于Commons中的另一个子项目Pool，连接池最核心的“池”，就是由Pool组件提供的，因此，DBCP的性能实际上就是Pool的性能，DBCP和Pool的依赖关系如下表：</p>\n<table>\n<thead>\n<tr>\n<th>Apache Commons DBCP</th>\n<th>Apache Commons Pool</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v1.2.2</td>\n<td>v1.3</td>\n</tr>\n<tr>\n<td>v1.3</td>\n<td>v1.5.4</td>\n</tr>\n<tr>\n<td>v1.4</td>\n<td>v1.5.4</td>\n</tr>\n<tr>\n<td>v2.0.x</td>\n<td>v2.2</td>\n</tr>\n<tr>\n<td>v2.1.x</td>\n<td>v2.4.2</td>\n</tr>\n<tr>\n<td>v2.2.x</td>\n<td>v2.5.0</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到，因为核心功能依赖于Pool，所以DBCP本身只能做小版本的更新，真正大版本的更迭则完全依托于pool。有很长一段时间，pool都还是停留在1.x版本，这直接导致DBCP也更新乏力。很多依赖DBCP的应用在遇到性能瓶颈之后，别无选择，只能将其替换掉，DBCP忠实的拥趸tomcat就在其tomcat 7.0版本中，自己重新设计开发出了一套连接池（Tomcat JDBC Pool）。好在，在2013年事情终于迎来转机，13年9月Commons-Pool 2.0版本发布，14年2月份，DBCP也终于迎来了自己的2.0版本，基于新的线程模型全新设计的“池”让DBCP重焕青春，虽然和新一代的连接池相比仍有一定差距，但差距并不大，DBCP2.x版本已经稳稳达到了和新一代产品同级别的性能指标（见下图）。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/3.png\" algin=\"center\"/><br><br></div>\n\n<p>DBCP终于靠Pool咸鱼翻身，打了一个漂亮的翻身仗，但长时间的等待已经完全消磨了用户的耐心，与新一代的产品项目相比，DBCP没有任何优势，试问，谁会在有选择的前提下，去选择那个并不优秀的呢？也许，现在还选择DBCP2的唯一理由，就是情怀吧。</p>\n<h1 id=\"性能无敌的HikariCP\"><a href=\"#性能无敌的HikariCP\" class=\"headerlink\" title=\"性能无敌的HikariCP\"></a>性能无敌的HikariCP</h1><p>HikariCP号称“性能杀手”（It’s Faster），它的表现究竟如何呢，先来看下官网提供的数据：</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/4.png\" algin=\"center\"/><br><br></div>\n\n<p>不光性能强劲，稳定性也不差：</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/5.png\" algin=\"center\"/><br><br></div>\n\n<p>那它是怎么做到如此强劲的呢？官网给出的说明如下：</p>\n<ul>\n<li>字节码精简：优化代码，直到编译后的字节码最少，这样，CPU缓存可以加载更多的程序代码；</li>\n<li>优化代理和拦截器：减少代码，例如HikariCP的Statement proxy只有100行代码；</li>\n<li>自定义数组类型（FastStatementList）代替ArrayList：避免每次get()调用都要进行range check，避免调用remove()时的从头到尾的扫描；</li>\n<li>自定义集合类型（ConcurrentBag）：提高并发读写的效率；</li>\n<li>其他缺陷的优化，比如对于耗时超过一个CPU时间片的方法调用的研究（但没说具体怎么优化）。</li>\n</ul>\n<p>可以看到，上述这几点优化，和现在能找到的资料来看，HakariCP在性能上的优势应该是得到共识的，再加上它自身小巧的身形，在当前的“云时代、微服务”的背景下，HakariCP一定会得到更多人的青睐。</p>\n<h1 id=\"功能全面的Druid\"><a href=\"#功能全面的Druid\" class=\"headerlink\" title=\"功能全面的Druid\"></a>功能全面的Druid</h1><p>近几年，阿里在开源项目上动作频频，除了有像fastJson、dubbo这类项目，更有像AliSQL这类的大型软件，今天说的Druid，就是阿里众多优秀开源项目中的一个。它除了提供性能卓越的连接池功能外，还集成了SQL监控，黑名单拦截等功能，用它自己的话说，Druid是“为监控而生”。借助于阿里这个平台的号召力，产品一经发布就赢得了大批用户的拥趸，从用户使用的反馈来看，Druid也确实没让用户失望。</p>\n<p>相较于其他产品，Druid另一个比较大的优势，就是中文文档比较全面（毕竟是国人的项目么），在github的<a href=\"https://github.com/alibaba/druid/wiki/%E9%A6%96%E9%A1%B5\"><em>wiki页面</em></a>，列举了日常使用中可能遇到的问题，对一个新用户来讲，上面提供的内容已经足够指导它完成产品的配置和使用了。</p>\n<p>下图为Druid自己提供的性能测试数据：</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-02/dataSource/6.png\" algin=\"center\"/><br><br></div>\n\n<p>现在项目开发中，我还是比较倾向于使用Durid，它不仅仅是一个数据库连接池，它还包含一个ProxyDriver，一系列内置的JDBC组件库，一个SQL Parser。</p>\n<h2 id=\"Druid-相对于其他数据库连接池的优点\"><a href=\"#Druid-相对于其他数据库连接池的优点\" class=\"headerlink\" title=\"Druid 相对于其他数据库连接池的优点\"></a>Druid 相对于其他数据库连接池的优点</h2><ol>\n<li><p>强大的监控特性，通过Druid提供的监控功能，可以清楚知道连接池和SQL的工作情况。</p>\n<p>a. 监控SQL的执行时间、ResultSet持有时间、返回行数、更新行数、错误次数、错误堆栈信息；</p>\n<p>b. SQL执行的耗时区间分布。什么是耗时区间分布呢？比如说，某个SQL执行了1000次，其中0~1毫秒区间50次，1~10毫秒800次，10~100毫秒100次，100~1000毫秒30次，1~10秒15次，10秒以上5次。通过耗时区间分布，能够非常清楚知道SQL的执行耗时情况；</p>\n<p>c.  监控连接池的物理连接创建和销毁次数、逻辑连接的申请和关闭次数、非空等待次数、PSCache命中率等。</p>\n</li>\n<li><p>方便扩展。Druid提供了Filter-Chain模式的扩展API，可以自己编写Filter拦截JDBC中的任何方法，可以在上面做任何事情，比如说性能监控、SQL审计、用户名密码加密、日志等等。</p>\n</li>\n<li>Druid集合了开源和商业数据库连接池的优秀特性，并结合阿里巴巴大规模苛刻生产环境的使用经验进行优化。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>时至今日，虽然每个应用（需要RDBMS的）都离不开连接池，但在实际使用的时候，连接池已经可以做到“隐形”了。也就是说在通常情况下，连接池完成项目初始化配置之后，就再不需要再做任何改动了。不论你是选择Druid或是HikariCP，甚至是DBCP，它们都足够稳定且高效！之前讨论了很多关于连接池的性能的问题，但这些性能上的差异，是相较于其他连接池而言的，对整个系统应用来说，第二代连接池在使用过程中体会到的差别是微乎其微的，基本上不存在因为连接池的自身的配饰和使用导致系统性能下降的情况，除非是在单点应用的数据库负载足够高的时候（压力测试的时候），但即便是如此，通用的优化的方式也是单点改集群，而不是在单点的连接池上死扣。</p>\n<p><strong>参考</strong></p>\n<ul>\n<li><a href=\"https://link.jianshu.com/?t=http://blog.csdn.net/hetaohappy/article/details/50462486\"><em>数据库连接池性能比对</em></a></li>\n<li><a href=\"https://www.jianshu.com/p/53de4b76f98c\"><em>大话数据库连接池</em></a></li>\n<li><a href=\"https://link.jianshu.com/?t=http://blog.csdn.net/whzhaochao/article/details/49559931\"><em>c3p0,Druid,Tomcat Jdbc Pool,dbcp2,proxool数据源性能比较</em></a></li>\n</ul>"},{"title":"浅谈共享单车","date":"2017-03-24T09:40:22.000Z","_content":"\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","source":"_posts/浅谈共享单车.md","raw":"---\ntitle: 浅谈共享单车\ndate: 2017-03-24 17:40:22\ntags: [随笔]\ncategories: society\n---\n\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","slug":"浅谈共享单车","published":1,"updated":"2018-01-05T01:16:52.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u3o002s3gfkif6xcluu","content":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=\"center\"><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\" target=\"_blank\" rel=\"external\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\" target=\"_blank\" rel=\"external\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>","more":"<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>"},{"title":"微信公众号网页开发","date":"2017-06-01T07:27:34.000Z","_content":"\n# 引言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/></div><!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","source":"_posts/微信公众号网页开发.md","raw":"---\ntitle: 微信公众号网页开发\ndate: 2017-06-01 15:27:34\ntags: [移动端,前端]\ncategories: technology\n---\n\n# 引言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/></div><!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","slug":"微信公众号网页开发","published":1,"updated":"2018-03-13T05:54:42.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u3u002x3gfkh75nnaov","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\" target=\"_blank\" rel=\"external\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>"},{"title":"系统中功能点的版本控制","date":"2017-09-21T10:40:41.000Z","_content":"\n# 引言\n\n​\t开发过程中我们会使用`版本控制工具`，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要`记录每一次修改的详细信息`，`每次版本之间的差异`，甚至还可以`版本回滚`。\n\n​\t例如题目编号为*20170919170800000061*的题目被*A*创建，依次被*B*、*C*、*D*各修改了一次，此时需要比较*B*和*A*间的差异、*C*和*B*间的差异、*D*和*C*间的差异，到最后审核阶段如果*B* 的版本比较符合，则需要把试题版本内容回滚到*B*版本作为最后的版本。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"/></div><!-- more -->\n\n仔细分析一下题干，我们的需求是*1.比较版本的差异，2.版本的回滚*。之前有考虑过两种方案：\n\n1. 修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。\n2. 把所有版本信息全部存储在数据库，在请求时后台进行比较差异。\n\n第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。\n\n下图是数据库中的版本修改记录\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"/>\n\n</div>\n\n题目的所有信息全部存储在**itemJson**中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。\n\n通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。\n\n# 版本差异（比较Json的方法）\n\n计较两个Json(X，Y)，其中可能情况：\n\n1. X和Y中均有相同字段\n2. X中存在Y中不存在的字段\n3. Y中存在X中不存在的字段\n\n需要掌握：\n\n1. **各个字段的用处和意义**\n2. **字段在Map、Json、JavaBean、List、JsonString形态之间的转换**\n\n## 通过Map间接比较\n\n### 引入Maven依赖\n\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-annotations</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>23.0</version>\n</dependency>\n```\n\n### 定义静态工具类\n\n```java\n//处理json字符串\npublic static <T> T readJsonToObject(String jsonString, TypeReference<T> tr) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    if (jsonString == null || \"\".equals(jsonString)) {\n        return null;\n    } else {\n        try {\n            return (T) objectMapper.readValue(jsonString, tr);\n        } catch (Exception e) {\n\n            logger.debug(\"json error:\" + e);\n        }\n    }\n    return null;\n}\n```\n\n### 定义Map比较的工具类\n\n​\t通过google的`guava`表达式中的 *Maps.difference(map1,map2)*方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：\n\n```java\npublic static List<Map<String, String>> compareMap(Map<String, Object> oldVersion, Map<String, Object> newVersion) {\n        MapDifference<String, Object> difference = Maps.difference(oldVersion, newVersion);\n\n        // 获取所有不同点\n        Map<String, MapDifference.ValueDifference<Object>> differenceMap = difference.entriesDiffering();\n        List<Map<String, String>> result = new ArrayList<>();\n        Iterator diffIterator = differenceMap.entrySet().iterator();\n        while (diffIterator.hasNext()) {\n            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();\n\n            MapDifference.ValueDifference<Object> valueDifference = (MapDifference.ValueDifference<Object>) entry\n                    .getValue();\n            boolean isList = valueDifference.leftValue() instanceof List\n                    && valueDifference.rightValue() instanceof List;\n            boolean isMap = valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map;\n            if (!isList && !isMap) {\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n\n                // 选择题中选项内容改变\n                if (oldVersion.get(\"content\") != null && oldVersion.get(\"name\") != null) {\n                    map.put(\"fieldName\", judgeOption(oldVersion.get(\"name\").toString()));\n                } else {\n                    map.put(\"fieldName\", judgeFiledName(fieldKey));\n                }\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));\n                map.put(\"newValue\", judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));\n                result.add(map);\n            }\n\n            // 处理结果是否为List,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof List && valueDifference.rightValue() instanceof List) {\n                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));\n                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));\n                JSONObject js = new JSONObject();\n                JSONObject js1 = new JSONObject();\n                for (int i = 0; i < j.size(); i++) {\n                    js.put(i + \"\", j.get(i));\n                }\n                for (int i = 0; i < p.size(); i++) {\n                    js1.put(i + \"\", p.get(i));\n                }\n                Map<String, Object> requestMap = JsonUtils.readJsonToObject(js.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                Map<String, Object> requestMap1 = JsonUtils.readJsonToObject(js1.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                List<Map<String, String>> m = compareMap(requestMap, requestMap1);  //当修改多个选项\n                for (int i = 0; i < m.size(); i++) {\n                    result.add(compareMap(requestMap, requestMap1).get(i));\n                }\n            }\n            // 处理结果是否为Map,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map) {\n                result.add(compareMap((Map<String, Object>) valueDifference.leftValue(),\n                        (Map<String, Object>) valueDifference.rightValue()).get(0));\n            }\n        }\n\n        // 若A中有B中不存在的值\n        Map<String, Object> entriesOnlyOnLeft = difference.entriesOnlyOnLeft();\n        if (entriesOnlyOnLeft != null && !entriesOnlyOnLeft.isEmpty()) {\n\n            Iterator it = entriesOnlyOnLeft.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = entry.getKey();\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                map.put(\"newValue\", \"\");\n                result.add(map);\n            }\n        }\n\n        // 若B中有A中不存在的值\n        Map<String, Object> onlyOnRightMap = difference.entriesOnlyOnRight();\n        if (onlyOnRightMap != null && !onlyOnRightMap.isEmpty()) {\n            Iterator it = onlyOnRightMap.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", \"\");\n                map.put(\"newValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                result.add(map);\n            }\n        }\n        return result;\n    }\n```\n\n### 定义静态调用方法\n\n```java\npublic static List<Map<String, String>> compareJSON(String jsonOld, String jsonNew) {\n        Map<String, Object> oldVersion = JsonUtils.readJsonToObject(jsonOld, new TypeReference<Map<String, Object>>() {\n        });\n        Map<String, Object> newVersion = JsonUtils.readJsonToObject(jsonNew, new TypeReference<Map<String, Object>>() {\n        });\n        return compareMap(oldVersion, newVersion);\n }\n```\n\n### 返回结果\n\n经过处理后的返回结果\n\n```json\n[\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"分数\",\n                    \"fieldKey\": \"score\",\n                    \"oldValue\": \"8\"\n                },\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"教材依据\",\n                    \"fieldKey\": \"teachingMaterialBasis\",\n                    \"oldValue\": \"2\"\n                },\n                {\n                    \"newValue\": \"2\",\n                    \"fieldName\": \"大纲依据\",\n                    \"fieldKey\": \"syllabusBasis\",\n                    \"oldValue\": \"1\"\n                },\n                {\n                    \"newValue\": \"1.0\",\n                    \"fieldName\": \"难度系数\",\n                    \"fieldKey\": \"difficult\",\n                    \"oldValue\": \"0.4\"\n                },\n                {\n                    \"newValue\": \"掌握\",\n                    \"fieldName\": \"能力层次\",\n                    \"fieldKey\": \"abilityLevel\",\n                    \"oldValue\": \"熟悉\"\n                },\n                {\n                    \"newValue\": \"测试关键词\",\n                    \"fieldName\": \"关键字\",\n                    \"fieldKey\": \"keyWord\",\n                    \"oldValue\": \"个\"\n                }\n            ]\n```\n\n查看所有源码点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip)\n\n## 转为JavaBean比较\n\n将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。\n\n### 引入Javers的Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>org.javers</groupId>\n\t\t<artifactId>javers-core</artifactId>\n\t\t<version>3.5.0</version>\n\t</dependency>\n```\n\n### 将itemJson转为JavaBean\n\n#### 方式一：利用Jackson\n\n##### 工具类JsonUtils\n\n```java\npublic class JsonUtils {\n    // 定义jackson对象\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    /**\n     * 将对象转换成json字符串。\n     * <p>Title: pojoToJson</p>\n     * <p>Description: </p>\n     * @param data\n     * @return\n     */\n    public static String objectToJson(Object data) {\n    \ttry {\n\t\t\tString string = MAPPER.writeValueAsString(data);\n\t\t\treturn string;\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \treturn null;\n    }\n    \n    /**\n     * 将json结果集转化为对象\n     * \n     * @param jsonData json数据\n     * @param clazz 对象中的object类型\n     * @return\n     */\n    public static <T> T jsonToPojo(String jsonData, Class<T> beanType) {\n        try {\n            T t = MAPPER.readValue(jsonData, beanType);\n            return t;\n        } catch (Exception e) {\n        \te.printStackTrace();\n        }\n        return null;\n    }\n    \n    /**\n     * 将json数据转换成pojo对象list\n     * <p>Title: jsonToList</p>\n     * <p>Description: </p>\n     * @param jsonData\n     * @param beanType\n     * @return\n     */\n    public static <T>List<T> jsonToList(String jsonData, Class<T> beanType) {\n    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);\n    \ttry {\n    \t\tList<T> list = MAPPER.readValue(jsonData, javaType);\n    \t\treturn list;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \t\n    \treturn null;\n    }\n}\n```\n\n##### \tJson转Pojo\n\n```java\nItem item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);\nItem item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);\n```\n\n#### 方式二：利用fastJson\n\n##### 引入Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>com.alibaba</groupId>\n\t\t<artifactId>fastjson</artifactId>\n\t\t<version>1.1.26</version>\n\t</dependency>\n```\n\n##### Json转Pojo\n\n```java\nItem item1 = JSONObject.parseObject(json3, Item.class);\nItem item2 = JSONObject.parseObject(json4, Item.class);\n```\n\n### 利用Javers比较JavaBean\n\n```java\nJavers j = JaversBuilder.javers().build();\n        Diff diff = j.compare(item1, item2);\n        if (diff.hasChanges()) {\n            List<Change> changes = diff.getChanges();\n            for (Change change : changes) {\n                if (change instanceof ValueChange) {\n                    ValueChange valChange = (ValueChange) change;\n                    System.out.println(valChange.getPropertyName() + \" -- \" + valChange.getLeft() + \"--\" + valChange.getRight());\n                }\n            }\n        }\n```\n\n# 版本回滚\n\n​\t其实版本回滚在上面的比较中已经说了，就是把**需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录**即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n\n# 总结\n\n1. 熟悉业务。\n2. 掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n3. 版本需要存储所有信息便于回滚。\n4. 个人倾向使用Javers比较JavaBean进行比较版本差异。","source":"_posts/系统中功能点的版本控制.md","raw":"---\ntitle: 系统中功能点的版本控制\ndate: 2017-09-21 18:40:41\ntags: [java,tips]\ncategories: technology\n---\n\n# 引言\n\n​\t开发过程中我们会使用`版本控制工具`，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要`记录每一次修改的详细信息`，`每次版本之间的差异`，甚至还可以`版本回滚`。\n\n​\t例如题目编号为*20170919170800000061*的题目被*A*创建，依次被*B*、*C*、*D*各修改了一次，此时需要比较*B*和*A*间的差异、*C*和*B*间的差异、*D*和*C*间的差异，到最后审核阶段如果*B* 的版本比较符合，则需要把试题版本内容回滚到*B*版本作为最后的版本。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"/></div><!-- more -->\n\n仔细分析一下题干，我们的需求是*1.比较版本的差异，2.版本的回滚*。之前有考虑过两种方案：\n\n1. 修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。\n2. 把所有版本信息全部存储在数据库，在请求时后台进行比较差异。\n\n第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。\n\n下图是数据库中的版本修改记录\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"/>\n\n</div>\n\n题目的所有信息全部存储在**itemJson**中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。\n\n通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。\n\n# 版本差异（比较Json的方法）\n\n计较两个Json(X，Y)，其中可能情况：\n\n1. X和Y中均有相同字段\n2. X中存在Y中不存在的字段\n3. Y中存在X中不存在的字段\n\n需要掌握：\n\n1. **各个字段的用处和意义**\n2. **字段在Map、Json、JavaBean、List、JsonString形态之间的转换**\n\n## 通过Map间接比较\n\n### 引入Maven依赖\n\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-annotations</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>23.0</version>\n</dependency>\n```\n\n### 定义静态工具类\n\n```java\n//处理json字符串\npublic static <T> T readJsonToObject(String jsonString, TypeReference<T> tr) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    if (jsonString == null || \"\".equals(jsonString)) {\n        return null;\n    } else {\n        try {\n            return (T) objectMapper.readValue(jsonString, tr);\n        } catch (Exception e) {\n\n            logger.debug(\"json error:\" + e);\n        }\n    }\n    return null;\n}\n```\n\n### 定义Map比较的工具类\n\n​\t通过google的`guava`表达式中的 *Maps.difference(map1,map2)*方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：\n\n```java\npublic static List<Map<String, String>> compareMap(Map<String, Object> oldVersion, Map<String, Object> newVersion) {\n        MapDifference<String, Object> difference = Maps.difference(oldVersion, newVersion);\n\n        // 获取所有不同点\n        Map<String, MapDifference.ValueDifference<Object>> differenceMap = difference.entriesDiffering();\n        List<Map<String, String>> result = new ArrayList<>();\n        Iterator diffIterator = differenceMap.entrySet().iterator();\n        while (diffIterator.hasNext()) {\n            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();\n\n            MapDifference.ValueDifference<Object> valueDifference = (MapDifference.ValueDifference<Object>) entry\n                    .getValue();\n            boolean isList = valueDifference.leftValue() instanceof List\n                    && valueDifference.rightValue() instanceof List;\n            boolean isMap = valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map;\n            if (!isList && !isMap) {\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n\n                // 选择题中选项内容改变\n                if (oldVersion.get(\"content\") != null && oldVersion.get(\"name\") != null) {\n                    map.put(\"fieldName\", judgeOption(oldVersion.get(\"name\").toString()));\n                } else {\n                    map.put(\"fieldName\", judgeFiledName(fieldKey));\n                }\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));\n                map.put(\"newValue\", judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));\n                result.add(map);\n            }\n\n            // 处理结果是否为List,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof List && valueDifference.rightValue() instanceof List) {\n                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));\n                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));\n                JSONObject js = new JSONObject();\n                JSONObject js1 = new JSONObject();\n                for (int i = 0; i < j.size(); i++) {\n                    js.put(i + \"\", j.get(i));\n                }\n                for (int i = 0; i < p.size(); i++) {\n                    js1.put(i + \"\", p.get(i));\n                }\n                Map<String, Object> requestMap = JsonUtils.readJsonToObject(js.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                Map<String, Object> requestMap1 = JsonUtils.readJsonToObject(js1.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                List<Map<String, String>> m = compareMap(requestMap, requestMap1);  //当修改多个选项\n                for (int i = 0; i < m.size(); i++) {\n                    result.add(compareMap(requestMap, requestMap1).get(i));\n                }\n            }\n            // 处理结果是否为Map,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map) {\n                result.add(compareMap((Map<String, Object>) valueDifference.leftValue(),\n                        (Map<String, Object>) valueDifference.rightValue()).get(0));\n            }\n        }\n\n        // 若A中有B中不存在的值\n        Map<String, Object> entriesOnlyOnLeft = difference.entriesOnlyOnLeft();\n        if (entriesOnlyOnLeft != null && !entriesOnlyOnLeft.isEmpty()) {\n\n            Iterator it = entriesOnlyOnLeft.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = entry.getKey();\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                map.put(\"newValue\", \"\");\n                result.add(map);\n            }\n        }\n\n        // 若B中有A中不存在的值\n        Map<String, Object> onlyOnRightMap = difference.entriesOnlyOnRight();\n        if (onlyOnRightMap != null && !onlyOnRightMap.isEmpty()) {\n            Iterator it = onlyOnRightMap.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", \"\");\n                map.put(\"newValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                result.add(map);\n            }\n        }\n        return result;\n    }\n```\n\n### 定义静态调用方法\n\n```java\npublic static List<Map<String, String>> compareJSON(String jsonOld, String jsonNew) {\n        Map<String, Object> oldVersion = JsonUtils.readJsonToObject(jsonOld, new TypeReference<Map<String, Object>>() {\n        });\n        Map<String, Object> newVersion = JsonUtils.readJsonToObject(jsonNew, new TypeReference<Map<String, Object>>() {\n        });\n        return compareMap(oldVersion, newVersion);\n }\n```\n\n### 返回结果\n\n经过处理后的返回结果\n\n```json\n[\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"分数\",\n                    \"fieldKey\": \"score\",\n                    \"oldValue\": \"8\"\n                },\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"教材依据\",\n                    \"fieldKey\": \"teachingMaterialBasis\",\n                    \"oldValue\": \"2\"\n                },\n                {\n                    \"newValue\": \"2\",\n                    \"fieldName\": \"大纲依据\",\n                    \"fieldKey\": \"syllabusBasis\",\n                    \"oldValue\": \"1\"\n                },\n                {\n                    \"newValue\": \"1.0\",\n                    \"fieldName\": \"难度系数\",\n                    \"fieldKey\": \"difficult\",\n                    \"oldValue\": \"0.4\"\n                },\n                {\n                    \"newValue\": \"掌握\",\n                    \"fieldName\": \"能力层次\",\n                    \"fieldKey\": \"abilityLevel\",\n                    \"oldValue\": \"熟悉\"\n                },\n                {\n                    \"newValue\": \"测试关键词\",\n                    \"fieldName\": \"关键字\",\n                    \"fieldKey\": \"keyWord\",\n                    \"oldValue\": \"个\"\n                }\n            ]\n```\n\n查看所有源码点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip)\n\n## 转为JavaBean比较\n\n将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。\n\n### 引入Javers的Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>org.javers</groupId>\n\t\t<artifactId>javers-core</artifactId>\n\t\t<version>3.5.0</version>\n\t</dependency>\n```\n\n### 将itemJson转为JavaBean\n\n#### 方式一：利用Jackson\n\n##### 工具类JsonUtils\n\n```java\npublic class JsonUtils {\n    // 定义jackson对象\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    /**\n     * 将对象转换成json字符串。\n     * <p>Title: pojoToJson</p>\n     * <p>Description: </p>\n     * @param data\n     * @return\n     */\n    public static String objectToJson(Object data) {\n    \ttry {\n\t\t\tString string = MAPPER.writeValueAsString(data);\n\t\t\treturn string;\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \treturn null;\n    }\n    \n    /**\n     * 将json结果集转化为对象\n     * \n     * @param jsonData json数据\n     * @param clazz 对象中的object类型\n     * @return\n     */\n    public static <T> T jsonToPojo(String jsonData, Class<T> beanType) {\n        try {\n            T t = MAPPER.readValue(jsonData, beanType);\n            return t;\n        } catch (Exception e) {\n        \te.printStackTrace();\n        }\n        return null;\n    }\n    \n    /**\n     * 将json数据转换成pojo对象list\n     * <p>Title: jsonToList</p>\n     * <p>Description: </p>\n     * @param jsonData\n     * @param beanType\n     * @return\n     */\n    public static <T>List<T> jsonToList(String jsonData, Class<T> beanType) {\n    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);\n    \ttry {\n    \t\tList<T> list = MAPPER.readValue(jsonData, javaType);\n    \t\treturn list;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \t\n    \treturn null;\n    }\n}\n```\n\n##### \tJson转Pojo\n\n```java\nItem item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);\nItem item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);\n```\n\n#### 方式二：利用fastJson\n\n##### 引入Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>com.alibaba</groupId>\n\t\t<artifactId>fastjson</artifactId>\n\t\t<version>1.1.26</version>\n\t</dependency>\n```\n\n##### Json转Pojo\n\n```java\nItem item1 = JSONObject.parseObject(json3, Item.class);\nItem item2 = JSONObject.parseObject(json4, Item.class);\n```\n\n### 利用Javers比较JavaBean\n\n```java\nJavers j = JaversBuilder.javers().build();\n        Diff diff = j.compare(item1, item2);\n        if (diff.hasChanges()) {\n            List<Change> changes = diff.getChanges();\n            for (Change change : changes) {\n                if (change instanceof ValueChange) {\n                    ValueChange valChange = (ValueChange) change;\n                    System.out.println(valChange.getPropertyName() + \" -- \" + valChange.getLeft() + \"--\" + valChange.getRight());\n                }\n            }\n        }\n```\n\n# 版本回滚\n\n​\t其实版本回滚在上面的比较中已经说了，就是把**需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录**即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n\n# 总结\n\n1. 熟悉业务。\n2. 掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n3. 版本需要存储所有信息便于回滚。\n4. 个人倾向使用Javers比较JavaBean进行比较版本差异。","slug":"系统中功能点的版本控制","published":1,"updated":"2018-03-13T05:55:03.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u3z00303gfk87uaf0uw","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    开发过程中我们会使用<code>版本控制工具</code>，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要<code>记录每一次修改的详细信息</code>，<code>每次版本之间的差异</code>，甚至还可以<code>版本回滚</code>。</p>\n<p>​    例如题目编号为<em>20170919170800000061</em>的题目被<em>A</em>创建，依次被<em>B</em>、<em>C</em>、<em>D</em>各修改了一次，此时需要比较<em>B</em>和<em>A</em>间的差异、<em>C</em>和<em>B</em>间的差异、<em>D</em>和<em>C</em>间的差异，到最后审核阶段如果<em>B</em> 的版本比较符合，则需要把试题版本内容回滚到<em>B</em>版本作为最后的版本。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"></div><a id=\"more\"></a></p>\n<p>仔细分析一下题干，我们的需求是<em>1.比较版本的差异，2.版本的回滚</em>。之前有考虑过两种方案：</p>\n<ol>\n<li>修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。</li>\n<li>把所有版本信息全部存储在数据库，在请求时后台进行比较差异。</li>\n</ol>\n<p>第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。</p>\n<p>下图是数据库中的版本修改记录</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"><br><br></div>\n\n<p>题目的所有信息全部存储在<strong>itemJson</strong>中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。</p>\n<p>通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。</p>\n<h1 id=\"版本差异（比较Json的方法）\"><a href=\"#版本差异（比较Json的方法）\" class=\"headerlink\" title=\"版本差异（比较Json的方法）\"></a>版本差异（比较Json的方法）</h1><p>计较两个Json(X，Y)，其中可能情况：</p>\n<ol>\n<li>X和Y中均有相同字段</li>\n<li>X中存在Y中不存在的字段</li>\n<li>Y中存在X中不存在的字段</li>\n</ol>\n<p>需要掌握：</p>\n<ol>\n<li><strong>各个字段的用处和意义</strong></li>\n<li><strong>字段在Map、Json、JavaBean、List、JsonString形态之间的转换</strong></li>\n</ol>\n<h2 id=\"通过Map间接比较\"><a href=\"#通过Map间接比较\" class=\"headerlink\" title=\"通过Map间接比较\"></a>通过Map间接比较</h2><h3 id=\"引入Maven依赖\"><a href=\"#引入Maven依赖\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>23.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"定义静态工具类\"><a href=\"#定义静态工具类\" class=\"headerlink\" title=\"定义静态工具类\"></a>定义静态工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理json字符串</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">readJsonToObject</span><span class=\"params\">(String jsonString, TypeReference&lt;T&gt; tr)</span> </span>&#123;</div><div class=\"line\">    ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (jsonString == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(jsonString)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) objectMapper.readValue(jsonString, tr);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">            logger.debug(<span class=\"string\">\"json error:\"</span> + e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义Map比较的工具类\"><a href=\"#定义Map比较的工具类\" class=\"headerlink\" title=\"定义Map比较的工具类\"></a>定义Map比较的工具类</h3><p>​    通过google的<code>guava</code>表达式中的 <em>Maps.difference(map1,map2)</em>方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareMap(Map&lt;String, Object&gt; oldVersion, Map&lt;String, Object&gt; newVersion) &#123;</div><div class=\"line\">        MapDifference&lt;String, Object&gt; difference = Maps.difference(oldVersion, newVersion);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取所有不同点</span></div><div class=\"line\">        Map&lt;String, MapDifference.ValueDifference&lt;Object&gt;&gt; differenceMap = difference.entriesDiffering();</div><div class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        Iterator diffIterator = differenceMap.entrySet().iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span> (diffIterator.hasNext()) &#123;</div><div class=\"line\">            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();</div><div class=\"line\"></div><div class=\"line\">            MapDifference.ValueDifference&lt;Object&gt; valueDifference = (MapDifference.ValueDifference&lt;Object&gt;) entry</div><div class=\"line\">                    .getValue();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isList = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List</div><div class=\"line\">                    &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isMap = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isList &amp;&amp; !isMap) &#123;</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 选择题中选项内容改变</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (oldVersion.get(<span class=\"string\">\"content\"</span>) != <span class=\"keyword\">null</span> &amp;&amp; oldVersion.get(<span class=\"string\">\"name\"</span>) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeOption(oldVersion.get(<span class=\"string\">\"name\"</span>).toString()));</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为List,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List) &#123;</div><div class=\"line\">                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));</div><div class=\"line\">                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));</div><div class=\"line\">                JSONObject js = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                JSONObject js1 = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; j.size(); i++) &#123;</div><div class=\"line\">                    js.put(i + <span class=\"string\">\"\"</span>, j.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); i++) &#123;</div><div class=\"line\">                    js1.put(i + <span class=\"string\">\"\"</span>, p.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap = JsonUtils.readJsonToObject(js.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap1 = JsonUtils.readJsonToObject(js1.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                List&lt;Map&lt;String, String&gt;&gt; m = compareMap(requestMap, requestMap1);  <span class=\"comment\">//当修改多个选项</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m.size(); i++) &#123;</div><div class=\"line\">                    result.add(compareMap(requestMap, requestMap1).get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为Map,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map) &#123;</div><div class=\"line\">                result.add(compareMap((Map&lt;String, Object&gt;) valueDifference.leftValue(),</div><div class=\"line\">                        (Map&lt;String, Object&gt;) valueDifference.rightValue()).get(<span class=\"number\">0</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若A中有B中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; entriesOnlyOnLeft = difference.entriesOnlyOnLeft();</div><div class=\"line\">        <span class=\"keyword\">if</span> (entriesOnlyOnLeft != <span class=\"keyword\">null</span> &amp;&amp; !entriesOnlyOnLeft.isEmpty()) &#123;</div><div class=\"line\"></div><div class=\"line\">            Iterator it = entriesOnlyOnLeft.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = entry.getKey();</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若B中有A中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; onlyOnRightMap = difference.entriesOnlyOnRight();</div><div class=\"line\">        <span class=\"keyword\">if</span> (onlyOnRightMap != <span class=\"keyword\">null</span> &amp;&amp; !onlyOnRightMap.isEmpty()) &#123;</div><div class=\"line\">            Iterator it = onlyOnRightMap.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义静态调用方法\"><a href=\"#定义静态调用方法\" class=\"headerlink\" title=\"定义静态调用方法\"></a>定义静态调用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareJSON(String jsonOld, String jsonNew) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; oldVersion = JsonUtils.readJsonToObject(jsonOld, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        Map&lt;String, Object&gt; newVersion = JsonUtils.readJsonToObject(jsonNew, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> compareMap(oldVersion, newVersion);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p>经过处理后的返回结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"分数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"score\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"8\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"教材依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"teachingMaterialBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"2\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"2\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"大纲依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"syllabusBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"1\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"难度系数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"difficult\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"0.4\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"掌握\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"能力层次\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"abilityLevel\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"熟悉\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"测试关键词\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"关键字\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"keyWord\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"个\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div></pre></td></tr></table></figure>\n<p>查看所有源码点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip\" target=\"_blank\" rel=\"external\"><em>下载</em></a></p>\n<h2 id=\"转为JavaBean比较\"><a href=\"#转为JavaBean比较\" class=\"headerlink\" title=\"转为JavaBean比较\"></a>转为JavaBean比较</h2><p>将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。</p>\n<h3 id=\"引入Javers的Maven依赖\"><a href=\"#引入Javers的Maven依赖\" class=\"headerlink\" title=\"引入Javers的Maven依赖\"></a>引入Javers的Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javers<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javers-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"将itemJson转为JavaBean\"><a href=\"#将itemJson转为JavaBean\" class=\"headerlink\" title=\"将itemJson转为JavaBean\"></a>将itemJson转为JavaBean</h3><h4 id=\"方式一：利用Jackson\"><a href=\"#方式一：利用Jackson\" class=\"headerlink\" title=\"方式一：利用Jackson\"></a>方式一：利用Jackson</h4><h5 id=\"工具类JsonUtils\"><a href=\"#工具类JsonUtils\" class=\"headerlink\" title=\"工具类JsonUtils\"></a>工具类JsonUtils</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义jackson对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ObjectMapper MAPPER = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将对象转换成json字符串。</div><div class=\"line\">     * &lt;p&gt;Title: pojoToJson&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> data</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToJson</span><span class=\"params\">(Object data)</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString string = MAPPER.writeValueAsString(data);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> string;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将json结果集转化为对象</div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData json数据</div><div class=\"line\">     * <span class=\"doctag\">@param</span> clazz 对象中的object类型</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">jsonToPojo</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            T t = MAPPER.readValue(jsonData, beanType);</div><div class=\"line\">            <span class=\"keyword\">return</span> t;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        \te.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将json数据转换成pojo对象list</div><div class=\"line\">     * &lt;p&gt;Title: jsonToList&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData</div><div class=\"line\">     * <span class=\"doctag\">@param</span> beanType</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;<span class=\"function\">List&lt;T&gt; <span class=\"title\">jsonToList</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    \t\tList&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo\"><a href=\"#Json转Pojo\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);</div><div class=\"line\">Item item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);</div></pre></td></tr></table></figure>\n<h4 id=\"方式二：利用fastJson\"><a href=\"#方式二：利用fastJson\" class=\"headerlink\" title=\"方式二：利用fastJson\"></a>方式二：利用fastJson</h4><h5 id=\"引入Maven依赖-1\"><a href=\"#引入Maven依赖-1\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.26<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo-1\"><a href=\"#Json转Pojo-1\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JSONObject.parseObject(json3, Item.class);</div><div class=\"line\">Item item2 = JSONObject.parseObject(json4, Item.class);</div></pre></td></tr></table></figure>\n<h3 id=\"利用Javers比较JavaBean\"><a href=\"#利用Javers比较JavaBean\" class=\"headerlink\" title=\"利用Javers比较JavaBean\"></a>利用Javers比较JavaBean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javers j = JaversBuilder.javers().build();</div><div class=\"line\">        Diff diff = j.compare(item1, item2);</div><div class=\"line\">        <span class=\"keyword\">if</span> (diff.hasChanges()) &#123;</div><div class=\"line\">            List&lt;Change&gt; changes = diff.getChanges();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Change change : changes) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (change <span class=\"keyword\">instanceof</span> ValueChange) &#123;</div><div class=\"line\">                    ValueChange valChange = (ValueChange) change;</div><div class=\"line\">                    System.out.println(valChange.getPropertyName() + <span class=\"string\">\" -- \"</span> + valChange.getLeft() + <span class=\"string\">\"--\"</span> + valChange.getRight());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"版本回滚\"><a href=\"#版本回滚\" class=\"headerlink\" title=\"版本回滚\"></a>版本回滚</h1><p>​    其实版本回滚在上面的比较中已经说了，就是把<strong>需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录</strong>即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>熟悉业务。</li>\n<li>掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。</li>\n<li>版本需要存储所有信息便于回滚。</li>\n<li>个人倾向使用Javers比较JavaBean进行比较版本差异。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    开发过程中我们会使用<code>版本控制工具</code>，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要<code>记录每一次修改的详细信息</code>，<code>每次版本之间的差异</code>，甚至还可以<code>版本回滚</code>。</p>\n<p>​    例如题目编号为<em>20170919170800000061</em>的题目被<em>A</em>创建，依次被<em>B</em>、<em>C</em>、<em>D</em>各修改了一次，此时需要比较<em>B</em>和<em>A</em>间的差异、<em>C</em>和<em>B</em>间的差异、<em>D</em>和<em>C</em>间的差异，到最后审核阶段如果<em>B</em> 的版本比较符合，则需要把试题版本内容回滚到<em>B</em>版本作为最后的版本。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"/></div>","more":"</p>\n<p>仔细分析一下题干，我们的需求是<em>1.比较版本的差异，2.版本的回滚</em>。之前有考虑过两种方案：</p>\n<ol>\n<li>修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。</li>\n<li>把所有版本信息全部存储在数据库，在请求时后台进行比较差异。</li>\n</ol>\n<p>第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。</p>\n<p>下图是数据库中的版本修改记录</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"/><br><br></div>\n\n<p>题目的所有信息全部存储在<strong>itemJson</strong>中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。</p>\n<p>通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。</p>\n<h1 id=\"版本差异（比较Json的方法）\"><a href=\"#版本差异（比较Json的方法）\" class=\"headerlink\" title=\"版本差异（比较Json的方法）\"></a>版本差异（比较Json的方法）</h1><p>计较两个Json(X，Y)，其中可能情况：</p>\n<ol>\n<li>X和Y中均有相同字段</li>\n<li>X中存在Y中不存在的字段</li>\n<li>Y中存在X中不存在的字段</li>\n</ol>\n<p>需要掌握：</p>\n<ol>\n<li><strong>各个字段的用处和意义</strong></li>\n<li><strong>字段在Map、Json、JavaBean、List、JsonString形态之间的转换</strong></li>\n</ol>\n<h2 id=\"通过Map间接比较\"><a href=\"#通过Map间接比较\" class=\"headerlink\" title=\"通过Map间接比较\"></a>通过Map间接比较</h2><h3 id=\"引入Maven依赖\"><a href=\"#引入Maven依赖\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>23.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"定义静态工具类\"><a href=\"#定义静态工具类\" class=\"headerlink\" title=\"定义静态工具类\"></a>定义静态工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理json字符串</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">readJsonToObject</span><span class=\"params\">(String jsonString, TypeReference&lt;T&gt; tr)</span> </span>&#123;</div><div class=\"line\">    ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (jsonString == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(jsonString)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) objectMapper.readValue(jsonString, tr);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">            logger.debug(<span class=\"string\">\"json error:\"</span> + e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义Map比较的工具类\"><a href=\"#定义Map比较的工具类\" class=\"headerlink\" title=\"定义Map比较的工具类\"></a>定义Map比较的工具类</h3><p>​    通过google的<code>guava</code>表达式中的 <em>Maps.difference(map1,map2)</em>方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareMap(Map&lt;String, Object&gt; oldVersion, Map&lt;String, Object&gt; newVersion) &#123;</div><div class=\"line\">        MapDifference&lt;String, Object&gt; difference = Maps.difference(oldVersion, newVersion);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取所有不同点</span></div><div class=\"line\">        Map&lt;String, MapDifference.ValueDifference&lt;Object&gt;&gt; differenceMap = difference.entriesDiffering();</div><div class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        Iterator diffIterator = differenceMap.entrySet().iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span> (diffIterator.hasNext()) &#123;</div><div class=\"line\">            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();</div><div class=\"line\"></div><div class=\"line\">            MapDifference.ValueDifference&lt;Object&gt; valueDifference = (MapDifference.ValueDifference&lt;Object&gt;) entry</div><div class=\"line\">                    .getValue();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isList = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List</div><div class=\"line\">                    &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isMap = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isList &amp;&amp; !isMap) &#123;</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 选择题中选项内容改变</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (oldVersion.get(<span class=\"string\">\"content\"</span>) != <span class=\"keyword\">null</span> &amp;&amp; oldVersion.get(<span class=\"string\">\"name\"</span>) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeOption(oldVersion.get(<span class=\"string\">\"name\"</span>).toString()));</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为List,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List) &#123;</div><div class=\"line\">                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));</div><div class=\"line\">                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));</div><div class=\"line\">                JSONObject js = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                JSONObject js1 = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; j.size(); i++) &#123;</div><div class=\"line\">                    js.put(i + <span class=\"string\">\"\"</span>, j.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); i++) &#123;</div><div class=\"line\">                    js1.put(i + <span class=\"string\">\"\"</span>, p.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap = JsonUtils.readJsonToObject(js.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap1 = JsonUtils.readJsonToObject(js1.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                List&lt;Map&lt;String, String&gt;&gt; m = compareMap(requestMap, requestMap1);  <span class=\"comment\">//当修改多个选项</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m.size(); i++) &#123;</div><div class=\"line\">                    result.add(compareMap(requestMap, requestMap1).get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为Map,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map) &#123;</div><div class=\"line\">                result.add(compareMap((Map&lt;String, Object&gt;) valueDifference.leftValue(),</div><div class=\"line\">                        (Map&lt;String, Object&gt;) valueDifference.rightValue()).get(<span class=\"number\">0</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若A中有B中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; entriesOnlyOnLeft = difference.entriesOnlyOnLeft();</div><div class=\"line\">        <span class=\"keyword\">if</span> (entriesOnlyOnLeft != <span class=\"keyword\">null</span> &amp;&amp; !entriesOnlyOnLeft.isEmpty()) &#123;</div><div class=\"line\"></div><div class=\"line\">            Iterator it = entriesOnlyOnLeft.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = entry.getKey();</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若B中有A中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; onlyOnRightMap = difference.entriesOnlyOnRight();</div><div class=\"line\">        <span class=\"keyword\">if</span> (onlyOnRightMap != <span class=\"keyword\">null</span> &amp;&amp; !onlyOnRightMap.isEmpty()) &#123;</div><div class=\"line\">            Iterator it = onlyOnRightMap.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义静态调用方法\"><a href=\"#定义静态调用方法\" class=\"headerlink\" title=\"定义静态调用方法\"></a>定义静态调用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareJSON(String jsonOld, String jsonNew) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; oldVersion = JsonUtils.readJsonToObject(jsonOld, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        Map&lt;String, Object&gt; newVersion = JsonUtils.readJsonToObject(jsonNew, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> compareMap(oldVersion, newVersion);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p>经过处理后的返回结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"分数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"score\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"8\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"教材依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"teachingMaterialBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"2\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"2\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"大纲依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"syllabusBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"1\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"难度系数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"difficult\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"0.4\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"掌握\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"能力层次\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"abilityLevel\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"熟悉\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"测试关键词\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"关键字\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"keyWord\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"个\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div></pre></td></tr></table></figure>\n<p>查看所有源码点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip\"><em>下载</em></a></p>\n<h2 id=\"转为JavaBean比较\"><a href=\"#转为JavaBean比较\" class=\"headerlink\" title=\"转为JavaBean比较\"></a>转为JavaBean比较</h2><p>将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。</p>\n<h3 id=\"引入Javers的Maven依赖\"><a href=\"#引入Javers的Maven依赖\" class=\"headerlink\" title=\"引入Javers的Maven依赖\"></a>引入Javers的Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javers<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javers-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"将itemJson转为JavaBean\"><a href=\"#将itemJson转为JavaBean\" class=\"headerlink\" title=\"将itemJson转为JavaBean\"></a>将itemJson转为JavaBean</h3><h4 id=\"方式一：利用Jackson\"><a href=\"#方式一：利用Jackson\" class=\"headerlink\" title=\"方式一：利用Jackson\"></a>方式一：利用Jackson</h4><h5 id=\"工具类JsonUtils\"><a href=\"#工具类JsonUtils\" class=\"headerlink\" title=\"工具类JsonUtils\"></a>工具类JsonUtils</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义jackson对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ObjectMapper MAPPER = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 将对象转换成json字符串。</div><div class=\"line\">     * &lt;p&gt;Title: pojoToJson&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> data</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToJson</span><span class=\"params\">(Object data)</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString string = MAPPER.writeValueAsString(data);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> string;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 将json结果集转化为对象</div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData json数据</div><div class=\"line\">     * <span class=\"doctag\">@param</span> clazz 对象中的object类型</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">jsonToPojo</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            T t = MAPPER.readValue(jsonData, beanType);</div><div class=\"line\">            <span class=\"keyword\">return</span> t;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        \te.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 将json数据转换成pojo对象list</div><div class=\"line\">     * &lt;p&gt;Title: jsonToList&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData</div><div class=\"line\">     * <span class=\"doctag\">@param</span> beanType</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;<span class=\"function\">List&lt;T&gt; <span class=\"title\">jsonToList</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    \t\tList&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo\"><a href=\"#Json转Pojo\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);</div><div class=\"line\">Item item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);</div></pre></td></tr></table></figure>\n<h4 id=\"方式二：利用fastJson\"><a href=\"#方式二：利用fastJson\" class=\"headerlink\" title=\"方式二：利用fastJson\"></a>方式二：利用fastJson</h4><h5 id=\"引入Maven依赖-1\"><a href=\"#引入Maven依赖-1\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.26<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo-1\"><a href=\"#Json转Pojo-1\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JSONObject.parseObject(json3, Item.class);</div><div class=\"line\">Item item2 = JSONObject.parseObject(json4, Item.class);</div></pre></td></tr></table></figure>\n<h3 id=\"利用Javers比较JavaBean\"><a href=\"#利用Javers比较JavaBean\" class=\"headerlink\" title=\"利用Javers比较JavaBean\"></a>利用Javers比较JavaBean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javers j = JaversBuilder.javers().build();</div><div class=\"line\">        Diff diff = j.compare(item1, item2);</div><div class=\"line\">        <span class=\"keyword\">if</span> (diff.hasChanges()) &#123;</div><div class=\"line\">            List&lt;Change&gt; changes = diff.getChanges();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Change change : changes) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (change <span class=\"keyword\">instanceof</span> ValueChange) &#123;</div><div class=\"line\">                    ValueChange valChange = (ValueChange) change;</div><div class=\"line\">                    System.out.println(valChange.getPropertyName() + <span class=\"string\">\" -- \"</span> + valChange.getLeft() + <span class=\"string\">\"--\"</span> + valChange.getRight());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"版本回滚\"><a href=\"#版本回滚\" class=\"headerlink\" title=\"版本回滚\"></a>版本回滚</h1><p>​    其实版本回滚在上面的比较中已经说了，就是把<strong>需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录</strong>即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>熟悉业务。</li>\n<li>掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。</li>\n<li>版本需要存储所有信息便于回滚。</li>\n<li>个人倾向使用Javers比较JavaBean进行比较版本差异。</li>\n</ol>"},{"title":"详解Tomcat连接池与连接数","date":"2017-12-28T06:56:06.000Z","_content":"\n# 引言\n\n在使用Tomcat时，经常会遇到连接数、线程数之类的配置，然后自己就去谷歌、百度，没有真正理解Tomcat配置的作用及当前业务环境、服务器配置等情况下Tomcat最优配置。\n\n```xml\n\t<Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               connectionTimeout=\"20000\" maxThreads=\"1000\" minSpareThreads=\"100\"\n\t\t\t   maxSpareThreads=\"200\" acceptCount=\"900\" enableLookups=\"false\"\n\t\t\t   compression=\"on\" compressionMinSize=\"1024\" compressableMimeType=\"text/html,text/xml,text/css,text/javascript\"\n               redirectPort=\"8443\" URIEncoding=\"UTF-8\" maxHttpHeaderSize=\"8192\"/>\n```\n\n<!-- more -->\n\n# Tomcat连接器（Connector）\n\n上一篇文章说到过Tomcat的配置文件server.xml ：Connector的主要功能，是**接收连接请求**，创建**Request和Response对象用于和请求端交换数据**；然后分配线程让Engine（也就是Servlet容器）来处理这个请求，并把产生的Request和Response对象传给Engine。当Engine处理完请求后，也会通过Connector将响应返回给客户端。\n\n可以说，Servlet容器处理请求，是需要Connector进行调度和控制的，Connector是Tomcat处理请求的主干，因此Connector的配置和使用对Tomcat的性能有着重要的影响。这篇文将从Connector入手，讨论一些与Connector有关的重要问题，包括NIO/BIO模式、线程池、连接数等。\n\n根据协议的不同，Connector可以分为HTTP Connector、AJP Connector等，在这篇文章我们只讨论HTTP Connector。\n\n# BIO、NIO、APR\n\n## Connector的protocal\n\nConnector在处理HTTP请求时，会使用不同的protocal。不同的Tomcat版本支持的protocal不同，其中最典型的protocol包括BIO、NIO和APR（Tomcat7中支持这3种，Tomcat8增加了对NIO2的支持，而到了Tomcat8.5和Tomcat9.0，则去掉了对BIO的支持）。\n\nBIO是Blocking IO，顾名思义是阻塞的IO；NIO是Non-blocking IO，则是非阻塞的IO。而APR是Apache Portable Runtime，是Apache可移植运行库，利用本地库可以实现高可扩展性、高性能；Apr是在Tomcat上运行高并发应用的首选模式，但是需要安装apr、apr-utils、tomcat-native等包。\n\n## 指定protocal\n\nConnector使用哪种protocol，可以通过**`<connector>`**元素中的protocol属性进行指定，也可以使用默认值。\n\n指定的protocol取值及对应的协议如下：\n\n- HTTP/1.1：默认值，使用的协议与Tomcat版本有关\n- org.apache.coyote.http11.Http11Protocol：BIO\n- org.apache.coyote.http11.Http11NioProtocol：NIO\n- org.apache.coyote.http11.Http11Nio2Protocol：NIO2\n- org.apache.coyote.http11.Http11AprProtocol：APR\n\n如果没有指定protocol，则使用默认值HTTP/1.1，其含义如下：在Tomcat7中，自动选取使用BIO或APR（如果找到APR需要的本地库，则使用APR，否则使用BIO）；在Tomcat8中，自动选取使用NIO或APR（如果找到APR需要的本地库，则使用APR，否则使用NIO）。\n\n## BIO和NIO的不同\n\n无论是BIO，还是NIO，Connector处理请求的大致流程是一样的：\n\n在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。为了便于后面的说明，首先明确一下连接与请求的关系：连接是TCP层面的（传输层），对应socket；请求是HTTP层面的（应用层），必须依赖于TCP的连接实现；一个TCP连接中可能传输多个HTTP请求。\n\n在BIO实现的Connector中，处理请求的主要实体是JIoEndpoint对象。JIoEndpoint维护了Acceptor和Worker：Acceptor接收socket，然后从Worker线程池中找出空闲的线程处理socket，如果worker线程池没有空闲线程，则Acceptor将阻塞。其中Worker是Tomcat自带的线程池，如果通过<Executor>配置了其他线程池，原理与Worker类似。\n\n在NIO实现的Connector中，处理请求的主要实体是NIoEndpoint对象。NIoEndpoint中除了包含Acceptor和Worker外，还是用了Poller，处理流程如下图所示\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/Nio.jpg\"/>\n\n</div>\n\nAcceptor接收socket后，不是直接使用Worker中的线程处理请求，而是先将请求发送给了Poller，而Poller是实现NIO的关键。Acceptor向Poller发送请求通过队列实现，使用了典型的生产者-消费者模式。在Poller中，维护了一个Selector对象；当Poller从队列中取出socket后，注册到该Selector中；然后通过遍历Selector，找出其中可读的socket，并使用Worker中的线程处理相应请求。与BIO类似，Worker也可以被自定义的线程池代替。\n\n通过上述过程可以看出，在NIoEndpoint处理请求的过程中，无论是Acceptor接收socket，还是线程处理请求，使用的仍然是阻塞方式；但在“读取socket并交给Worker中的线程”的这个过程中，使用非阻塞的NIO实现，这是NIO模式与BIO模式的最主要区别（其他区别对性能影响较小，暂时略去不提）。而这个区别，在并发量较大的情形下可以带来Tomcat效率的显著提升：\n\n目前大多数HTTP请求使用的是长连接（HTTP/1.1默认keep-alive为true），而长连接意味着，一个TCP的socket在当前请求结束后，如果没有新的请求到来，socket不会立马释放，而是等timeout后再释放。如果使用BIO，“读取socket并交给Worker中的线程”这个过程是阻塞的，也就意味着在socket等待下一个请求或等待释放的过程中，处理这个socket的工作线程会一直被占用，无法释放；因此Tomcat可以同时处理的socket数目不能超过最大线程数，性能受到了极大限制。而使用NIO，“读取socket并交给Worker中的线程”这个过程是非阻塞的，当socket在等待下一个请求或等待释放时，并不会占用工作线程，因此Tomcat可以同时处理的socket数目远大于最大线程数，并发性能大大提高。\n\n# acceptCount、maxConnections、maxThreads参数\n\nTomcat处理请求的过程：在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。\n\n相对应的，Connector中的几个参数功能如下：\n\n## acceptCount\n\naccept队列的长度；当accept队列中连接的个数达到acceptCount时，队列满，进来的请求一律被拒绝。*默认值是100*。\n\n## maxConnections\n\nTomcat在任意时刻接收和处理的最大连接数。当Tomcat接收的连接数达到maxConnections时，Acceptor线程不会读取accept队列中的连接；这时accept队列中的线程会一直阻塞着，直到Tomcat接收的连接数小于maxConnections。如果设置为-1，则连接数不受限制。\n\n*默认值与连接器使用的协议有关：NIO的默认值是10000，APR/native的默认值是8192，而BIO的默认值为maxThreads（如果配置了Executor，则默认值是Executor的maxThreads）。*\n\n*在windows下，APR/native的maxConnections值会自动调整为设置值以下最大的1024的整数倍；如设置为2000，则最大值实际是1024。*\n\n## maxThreads\n\n请求处理线程的最大数量。*默认值是200（Tomcat7和8都是的）*。如果该Connector绑定了Executor，这个值会被忽略，因为该Connector将使用绑定的Executor，而不是内置的线程池来执行任务。\n\nmaxThreads规定的是最大的线程数目，并不是实际running的CPU数量；实际上，maxThreads的大小比CPU核心数量要大得多。这是因为，处理请求的线程真正用于计算的时间可能很少，大多数时间可能在阻塞，如等待数据库返回数据、等待硬盘读写数据等。因此，在某一时刻，只有少数的线程真正的在使用物理CPU，大多数线程都在等待；因此线程数远大于物理核心数才是合理的。\n\n换句话说，Tomcat通过使用比CPU核心数量多得多的线程数，可以使CPU忙碌起来，大大提高CPU的利用率。\n\n## 参数设置\n\n1. maxThreads的设置既与应用的特点有关，也与服务器的CPU核心数量有关。通过前面介绍可以知道，maxThreads数量应该远大于CPU核心数量；而且CPU核心数越大，maxThreads应该越大；应用中CPU越不密集（IO越密集），maxThreads应该越大，以便能够充分利用CPU。当然，maxThreads的值并不是越大越好，如果maxThreads过大，那么CPU会花费大量的时间用于线程的切换，整体效率会降低。\n2. maxConnections的设置与Tomcat的运行模式有关。如果tomcat使用的是BIO，那么maxConnections的值应该与maxThreads一致；如果tomcat使用的是NIO，那么类似于Tomcat的默认值，maxConnections值应该远大于maxThreads。\n3. 通过前面的介绍可以知道，虽然tomcat同时可以处理的连接数目是maxConnections，但服务器中可以同时接收的连接数为maxConnections+acceptCount 。acceptCount的设置，与应用在连接过高情况下希望做出什么反应有关系。如果设置过大，后面进入的请求等待时间会很长；如果设置过小，后面进入的请求立马返回connection refused。\n\n# 线程池Executor\n\nExecutor元素代表Tomcat中的线程池，可以由其他组件共享使用；要使用该线程池，组件需要通过Executor属性指定该线程池。\n\nExecutor是Service元素的内嵌元素。一般来说，使用线程池的是Connector组件；为了使Connector能使用线程池，Executor元素应该放在Connector前面。Executor与Connector的配置举例如下：\n\n```xml\n<Executor name=\"tomcatThreadPool\" namePrefix =\"catalina-exec-\" maxThreads=\"150\" minSpareThreads=\"4\" />\n\n<Connector executor=\"tomcatThreadPool\" port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" acceptCount=\"1000\" />\n```\n\nExecutor的主要属性包括：\n\n- name：该线程池的标记\n- maxThreads：线程池中最大活跃线程数，默认值200（Tomcat7和8都是）\n- minSpareThreads：线程池中保持的最小线程数，最小值是25\n- maxIdleTime：线程空闲的最大时间，当空闲超过该值时关闭线程（除非线程数小于minSpareThreads），单位是ms，默认值60000（1分钟）\n- daemon：是否后台线程，默认值true\n- threadPriority：线程优先级，默认值5\n- namePrefix：线程名字的前缀，线程池中线程名字为：namePrefix+线程编号\n\n# 查看当前状态\n\n上面介绍了Tomcat连接数、线程数的概念以及如何设置，下面说明如何查看服务器中的连接数和线程数。\n\n查看服务器的状态，大致分为两种方案：\n\n## jconsole工具\n\n现成的工具，如JDK自带的jconsole工具可以方便的查看线程信息（此外还可以查看CPU、内存、类、JVM基本信息等），Tomcat自带的manager，收费工具New Relic等。下图是jconsole查看线程信息的界面：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/jconsole.png\"/>\n\n</div>\n\n## Linux命令查看\n\n假设Tomcat接收http请求的端口是8083，则可以使用如下语句查看连接情况：\n\n```java\nnetstat –nat|grep 8080\n```\n\n结果如下所示：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/net.png\"/>\n\n</div>\n\n可以看出，有一个连接处于listen状态，监听请求；除此之外，还有6个已经建立的连接（ESTABLISHED）和0个等待关闭的连接（CLOSE_WAIT）。\n\n原文：\n\nhttps://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&mid=2651479428&idx=1&sn=791fed1205da057aba77655aaac9d841&chksm=bd2531fb8a52b8ed0066a8efc76d031ffb6e0d2099fb342129c307f78b4bf0581cbf3bbcb058&mpshare=1&scene=1&srcid=1114Osu1mhmfSobleuByFbEC#rd","source":"_posts/详解Tomcat连接池与连接数.md","raw":"---\ntitle: 详解Tomcat连接池与连接数\ndate: 2017-12-28 14:56:06\ntags: [tomcat,tips]\ncategories: technology\n---\n\n# 引言\n\n在使用Tomcat时，经常会遇到连接数、线程数之类的配置，然后自己就去谷歌、百度，没有真正理解Tomcat配置的作用及当前业务环境、服务器配置等情况下Tomcat最优配置。\n\n```xml\n\t<Connector port=\"8080\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\"\n               connectionTimeout=\"20000\" maxThreads=\"1000\" minSpareThreads=\"100\"\n\t\t\t   maxSpareThreads=\"200\" acceptCount=\"900\" enableLookups=\"false\"\n\t\t\t   compression=\"on\" compressionMinSize=\"1024\" compressableMimeType=\"text/html,text/xml,text/css,text/javascript\"\n               redirectPort=\"8443\" URIEncoding=\"UTF-8\" maxHttpHeaderSize=\"8192\"/>\n```\n\n<!-- more -->\n\n# Tomcat连接器（Connector）\n\n上一篇文章说到过Tomcat的配置文件server.xml ：Connector的主要功能，是**接收连接请求**，创建**Request和Response对象用于和请求端交换数据**；然后分配线程让Engine（也就是Servlet容器）来处理这个请求，并把产生的Request和Response对象传给Engine。当Engine处理完请求后，也会通过Connector将响应返回给客户端。\n\n可以说，Servlet容器处理请求，是需要Connector进行调度和控制的，Connector是Tomcat处理请求的主干，因此Connector的配置和使用对Tomcat的性能有着重要的影响。这篇文将从Connector入手，讨论一些与Connector有关的重要问题，包括NIO/BIO模式、线程池、连接数等。\n\n根据协议的不同，Connector可以分为HTTP Connector、AJP Connector等，在这篇文章我们只讨论HTTP Connector。\n\n# BIO、NIO、APR\n\n## Connector的protocal\n\nConnector在处理HTTP请求时，会使用不同的protocal。不同的Tomcat版本支持的protocal不同，其中最典型的protocol包括BIO、NIO和APR（Tomcat7中支持这3种，Tomcat8增加了对NIO2的支持，而到了Tomcat8.5和Tomcat9.0，则去掉了对BIO的支持）。\n\nBIO是Blocking IO，顾名思义是阻塞的IO；NIO是Non-blocking IO，则是非阻塞的IO。而APR是Apache Portable Runtime，是Apache可移植运行库，利用本地库可以实现高可扩展性、高性能；Apr是在Tomcat上运行高并发应用的首选模式，但是需要安装apr、apr-utils、tomcat-native等包。\n\n## 指定protocal\n\nConnector使用哪种protocol，可以通过**`<connector>`**元素中的protocol属性进行指定，也可以使用默认值。\n\n指定的protocol取值及对应的协议如下：\n\n- HTTP/1.1：默认值，使用的协议与Tomcat版本有关\n- org.apache.coyote.http11.Http11Protocol：BIO\n- org.apache.coyote.http11.Http11NioProtocol：NIO\n- org.apache.coyote.http11.Http11Nio2Protocol：NIO2\n- org.apache.coyote.http11.Http11AprProtocol：APR\n\n如果没有指定protocol，则使用默认值HTTP/1.1，其含义如下：在Tomcat7中，自动选取使用BIO或APR（如果找到APR需要的本地库，则使用APR，否则使用BIO）；在Tomcat8中，自动选取使用NIO或APR（如果找到APR需要的本地库，则使用APR，否则使用NIO）。\n\n## BIO和NIO的不同\n\n无论是BIO，还是NIO，Connector处理请求的大致流程是一样的：\n\n在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。为了便于后面的说明，首先明确一下连接与请求的关系：连接是TCP层面的（传输层），对应socket；请求是HTTP层面的（应用层），必须依赖于TCP的连接实现；一个TCP连接中可能传输多个HTTP请求。\n\n在BIO实现的Connector中，处理请求的主要实体是JIoEndpoint对象。JIoEndpoint维护了Acceptor和Worker：Acceptor接收socket，然后从Worker线程池中找出空闲的线程处理socket，如果worker线程池没有空闲线程，则Acceptor将阻塞。其中Worker是Tomcat自带的线程池，如果通过<Executor>配置了其他线程池，原理与Worker类似。\n\n在NIO实现的Connector中，处理请求的主要实体是NIoEndpoint对象。NIoEndpoint中除了包含Acceptor和Worker外，还是用了Poller，处理流程如下图所示\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/Nio.jpg\"/>\n\n</div>\n\nAcceptor接收socket后，不是直接使用Worker中的线程处理请求，而是先将请求发送给了Poller，而Poller是实现NIO的关键。Acceptor向Poller发送请求通过队列实现，使用了典型的生产者-消费者模式。在Poller中，维护了一个Selector对象；当Poller从队列中取出socket后，注册到该Selector中；然后通过遍历Selector，找出其中可读的socket，并使用Worker中的线程处理相应请求。与BIO类似，Worker也可以被自定义的线程池代替。\n\n通过上述过程可以看出，在NIoEndpoint处理请求的过程中，无论是Acceptor接收socket，还是线程处理请求，使用的仍然是阻塞方式；但在“读取socket并交给Worker中的线程”的这个过程中，使用非阻塞的NIO实现，这是NIO模式与BIO模式的最主要区别（其他区别对性能影响较小，暂时略去不提）。而这个区别，在并发量较大的情形下可以带来Tomcat效率的显著提升：\n\n目前大多数HTTP请求使用的是长连接（HTTP/1.1默认keep-alive为true），而长连接意味着，一个TCP的socket在当前请求结束后，如果没有新的请求到来，socket不会立马释放，而是等timeout后再释放。如果使用BIO，“读取socket并交给Worker中的线程”这个过程是阻塞的，也就意味着在socket等待下一个请求或等待释放的过程中，处理这个socket的工作线程会一直被占用，无法释放；因此Tomcat可以同时处理的socket数目不能超过最大线程数，性能受到了极大限制。而使用NIO，“读取socket并交给Worker中的线程”这个过程是非阻塞的，当socket在等待下一个请求或等待释放时，并不会占用工作线程，因此Tomcat可以同时处理的socket数目远大于最大线程数，并发性能大大提高。\n\n# acceptCount、maxConnections、maxThreads参数\n\nTomcat处理请求的过程：在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。\n\n相对应的，Connector中的几个参数功能如下：\n\n## acceptCount\n\naccept队列的长度；当accept队列中连接的个数达到acceptCount时，队列满，进来的请求一律被拒绝。*默认值是100*。\n\n## maxConnections\n\nTomcat在任意时刻接收和处理的最大连接数。当Tomcat接收的连接数达到maxConnections时，Acceptor线程不会读取accept队列中的连接；这时accept队列中的线程会一直阻塞着，直到Tomcat接收的连接数小于maxConnections。如果设置为-1，则连接数不受限制。\n\n*默认值与连接器使用的协议有关：NIO的默认值是10000，APR/native的默认值是8192，而BIO的默认值为maxThreads（如果配置了Executor，则默认值是Executor的maxThreads）。*\n\n*在windows下，APR/native的maxConnections值会自动调整为设置值以下最大的1024的整数倍；如设置为2000，则最大值实际是1024。*\n\n## maxThreads\n\n请求处理线程的最大数量。*默认值是200（Tomcat7和8都是的）*。如果该Connector绑定了Executor，这个值会被忽略，因为该Connector将使用绑定的Executor，而不是内置的线程池来执行任务。\n\nmaxThreads规定的是最大的线程数目，并不是实际running的CPU数量；实际上，maxThreads的大小比CPU核心数量要大得多。这是因为，处理请求的线程真正用于计算的时间可能很少，大多数时间可能在阻塞，如等待数据库返回数据、等待硬盘读写数据等。因此，在某一时刻，只有少数的线程真正的在使用物理CPU，大多数线程都在等待；因此线程数远大于物理核心数才是合理的。\n\n换句话说，Tomcat通过使用比CPU核心数量多得多的线程数，可以使CPU忙碌起来，大大提高CPU的利用率。\n\n## 参数设置\n\n1. maxThreads的设置既与应用的特点有关，也与服务器的CPU核心数量有关。通过前面介绍可以知道，maxThreads数量应该远大于CPU核心数量；而且CPU核心数越大，maxThreads应该越大；应用中CPU越不密集（IO越密集），maxThreads应该越大，以便能够充分利用CPU。当然，maxThreads的值并不是越大越好，如果maxThreads过大，那么CPU会花费大量的时间用于线程的切换，整体效率会降低。\n2. maxConnections的设置与Tomcat的运行模式有关。如果tomcat使用的是BIO，那么maxConnections的值应该与maxThreads一致；如果tomcat使用的是NIO，那么类似于Tomcat的默认值，maxConnections值应该远大于maxThreads。\n3. 通过前面的介绍可以知道，虽然tomcat同时可以处理的连接数目是maxConnections，但服务器中可以同时接收的连接数为maxConnections+acceptCount 。acceptCount的设置，与应用在连接过高情况下希望做出什么反应有关系。如果设置过大，后面进入的请求等待时间会很长；如果设置过小，后面进入的请求立马返回connection refused。\n\n# 线程池Executor\n\nExecutor元素代表Tomcat中的线程池，可以由其他组件共享使用；要使用该线程池，组件需要通过Executor属性指定该线程池。\n\nExecutor是Service元素的内嵌元素。一般来说，使用线程池的是Connector组件；为了使Connector能使用线程池，Executor元素应该放在Connector前面。Executor与Connector的配置举例如下：\n\n```xml\n<Executor name=\"tomcatThreadPool\" namePrefix =\"catalina-exec-\" maxThreads=\"150\" minSpareThreads=\"4\" />\n\n<Connector executor=\"tomcatThreadPool\" port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" acceptCount=\"1000\" />\n```\n\nExecutor的主要属性包括：\n\n- name：该线程池的标记\n- maxThreads：线程池中最大活跃线程数，默认值200（Tomcat7和8都是）\n- minSpareThreads：线程池中保持的最小线程数，最小值是25\n- maxIdleTime：线程空闲的最大时间，当空闲超过该值时关闭线程（除非线程数小于minSpareThreads），单位是ms，默认值60000（1分钟）\n- daemon：是否后台线程，默认值true\n- threadPriority：线程优先级，默认值5\n- namePrefix：线程名字的前缀，线程池中线程名字为：namePrefix+线程编号\n\n# 查看当前状态\n\n上面介绍了Tomcat连接数、线程数的概念以及如何设置，下面说明如何查看服务器中的连接数和线程数。\n\n查看服务器的状态，大致分为两种方案：\n\n## jconsole工具\n\n现成的工具，如JDK自带的jconsole工具可以方便的查看线程信息（此外还可以查看CPU、内存、类、JVM基本信息等），Tomcat自带的manager，收费工具New Relic等。下图是jconsole查看线程信息的界面：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/jconsole.png\"/>\n\n</div>\n\n## Linux命令查看\n\n假设Tomcat接收http请求的端口是8083，则可以使用如下语句查看连接情况：\n\n```java\nnetstat –nat|grep 8080\n```\n\n结果如下所示：\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/net.png\"/>\n\n</div>\n\n可以看出，有一个连接处于listen状态，监听请求；除此之外，还有6个已经建立的连接（ESTABLISHED）和0个等待关闭的连接（CLOSE_WAIT）。\n\n原文：\n\nhttps://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&mid=2651479428&idx=1&sn=791fed1205da057aba77655aaac9d841&chksm=bd2531fb8a52b8ed0066a8efc76d031ffb6e0d2099fb342129c307f78b4bf0581cbf3bbcb058&mpshare=1&scene=1&srcid=1114Osu1mhmfSobleuByFbEC#rd","slug":"详解Tomcat连接池与连接数","published":1,"updated":"2018-03-13T05:55:18.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u4500353gfkqd6dgwnb","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在使用Tomcat时，经常会遇到连接数、线程数之类的配置，然后自己就去谷歌、百度，没有真正理解Tomcat配置的作用及当前业务环境、服务器配置等情况下Tomcat最优配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"org.apache.coyote.http11.Http11AprProtocol\"</span></span></div><div class=\"line\">              <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">minSpareThreads</span>=<span class=\"string\">\"100\"</span></div><div class=\"line\">\t\t   <span class=\"attr\">maxSpareThreads</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">acceptCount</span>=<span class=\"string\">\"900\"</span> <span class=\"attr\">enableLookups</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">\t\t   <span class=\"attr\">compression</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">compressionMinSize</span>=<span class=\"string\">\"1024\"</span> <span class=\"attr\">compressableMimeType</span>=<span class=\"string\">\"text/html,text/xml,text/css,text/javascript\"</span></div><div class=\"line\">              <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> <span class=\"attr\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">maxHttpHeaderSize</span>=<span class=\"string\">\"8192\"</span>/&gt;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h1 id=\"Tomcat连接器（Connector）\"><a href=\"#Tomcat连接器（Connector）\" class=\"headerlink\" title=\"Tomcat连接器（Connector）\"></a>Tomcat连接器（Connector）</h1><p>上一篇文章说到过Tomcat的配置文件server.xml ：Connector的主要功能，是<strong>接收连接请求</strong>，创建<strong>Request和Response对象用于和请求端交换数据</strong>；然后分配线程让Engine（也就是Servlet容器）来处理这个请求，并把产生的Request和Response对象传给Engine。当Engine处理完请求后，也会通过Connector将响应返回给客户端。</p>\n<p>可以说，Servlet容器处理请求，是需要Connector进行调度和控制的，Connector是Tomcat处理请求的主干，因此Connector的配置和使用对Tomcat的性能有着重要的影响。这篇文将从Connector入手，讨论一些与Connector有关的重要问题，包括NIO/BIO模式、线程池、连接数等。</p>\n<p>根据协议的不同，Connector可以分为HTTP Connector、AJP Connector等，在这篇文章我们只讨论HTTP Connector。</p>\n<h1 id=\"BIO、NIO、APR\"><a href=\"#BIO、NIO、APR\" class=\"headerlink\" title=\"BIO、NIO、APR\"></a>BIO、NIO、APR</h1><h2 id=\"Connector的protocal\"><a href=\"#Connector的protocal\" class=\"headerlink\" title=\"Connector的protocal\"></a>Connector的protocal</h2><p>Connector在处理HTTP请求时，会使用不同的protocal。不同的Tomcat版本支持的protocal不同，其中最典型的protocol包括BIO、NIO和APR（Tomcat7中支持这3种，Tomcat8增加了对NIO2的支持，而到了Tomcat8.5和Tomcat9.0，则去掉了对BIO的支持）。</p>\n<p>BIO是Blocking IO，顾名思义是阻塞的IO；NIO是Non-blocking IO，则是非阻塞的IO。而APR是Apache Portable Runtime，是Apache可移植运行库，利用本地库可以实现高可扩展性、高性能；Apr是在Tomcat上运行高并发应用的首选模式，但是需要安装apr、apr-utils、tomcat-native等包。</p>\n<h2 id=\"指定protocal\"><a href=\"#指定protocal\" class=\"headerlink\" title=\"指定protocal\"></a>指定protocal</h2><p>Connector使用哪种protocol，可以通过<strong><code>&lt;connector&gt;</code></strong>元素中的protocol属性进行指定，也可以使用默认值。</p>\n<p>指定的protocol取值及对应的协议如下：</p>\n<ul>\n<li>HTTP/1.1：默认值，使用的协议与Tomcat版本有关</li>\n<li>org.apache.coyote.http11.Http11Protocol：BIO</li>\n<li>org.apache.coyote.http11.Http11NioProtocol：NIO</li>\n<li>org.apache.coyote.http11.Http11Nio2Protocol：NIO2</li>\n<li>org.apache.coyote.http11.Http11AprProtocol：APR</li>\n</ul>\n<p>如果没有指定protocol，则使用默认值HTTP/1.1，其含义如下：在Tomcat7中，自动选取使用BIO或APR（如果找到APR需要的本地库，则使用APR，否则使用BIO）；在Tomcat8中，自动选取使用NIO或APR（如果找到APR需要的本地库，则使用APR，否则使用NIO）。</p>\n<h2 id=\"BIO和NIO的不同\"><a href=\"#BIO和NIO的不同\" class=\"headerlink\" title=\"BIO和NIO的不同\"></a>BIO和NIO的不同</h2><p>无论是BIO，还是NIO，Connector处理请求的大致流程是一样的：</p>\n<p>在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。为了便于后面的说明，首先明确一下连接与请求的关系：连接是TCP层面的（传输层），对应socket；请求是HTTP层面的（应用层），必须依赖于TCP的连接实现；一个TCP连接中可能传输多个HTTP请求。</p>\n<p>在BIO实现的Connector中，处理请求的主要实体是JIoEndpoint对象。JIoEndpoint维护了Acceptor和Worker：Acceptor接收socket，然后从Worker线程池中找出空闲的线程处理socket，如果worker线程池没有空闲线程，则Acceptor将阻塞。其中Worker是Tomcat自带的线程池，如果通过<executor>配置了其他线程池，原理与Worker类似。</executor></p>\n<p>在NIO实现的Connector中，处理请求的主要实体是NIoEndpoint对象。NIoEndpoint中除了包含Acceptor和Worker外，还是用了Poller，处理流程如下图所示</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/Nio.jpg\"><br><br></div>\n\n<p>Acceptor接收socket后，不是直接使用Worker中的线程处理请求，而是先将请求发送给了Poller，而Poller是实现NIO的关键。Acceptor向Poller发送请求通过队列实现，使用了典型的生产者-消费者模式。在Poller中，维护了一个Selector对象；当Poller从队列中取出socket后，注册到该Selector中；然后通过遍历Selector，找出其中可读的socket，并使用Worker中的线程处理相应请求。与BIO类似，Worker也可以被自定义的线程池代替。</p>\n<p>通过上述过程可以看出，在NIoEndpoint处理请求的过程中，无论是Acceptor接收socket，还是线程处理请求，使用的仍然是阻塞方式；但在“读取socket并交给Worker中的线程”的这个过程中，使用非阻塞的NIO实现，这是NIO模式与BIO模式的最主要区别（其他区别对性能影响较小，暂时略去不提）。而这个区别，在并发量较大的情形下可以带来Tomcat效率的显著提升：</p>\n<p>目前大多数HTTP请求使用的是长连接（HTTP/1.1默认keep-alive为true），而长连接意味着，一个TCP的socket在当前请求结束后，如果没有新的请求到来，socket不会立马释放，而是等timeout后再释放。如果使用BIO，“读取socket并交给Worker中的线程”这个过程是阻塞的，也就意味着在socket等待下一个请求或等待释放的过程中，处理这个socket的工作线程会一直被占用，无法释放；因此Tomcat可以同时处理的socket数目不能超过最大线程数，性能受到了极大限制。而使用NIO，“读取socket并交给Worker中的线程”这个过程是非阻塞的，当socket在等待下一个请求或等待释放时，并不会占用工作线程，因此Tomcat可以同时处理的socket数目远大于最大线程数，并发性能大大提高。</p>\n<h1 id=\"acceptCount、maxConnections、maxThreads参数\"><a href=\"#acceptCount、maxConnections、maxThreads参数\" class=\"headerlink\" title=\"acceptCount、maxConnections、maxThreads参数\"></a>acceptCount、maxConnections、maxThreads参数</h1><p>Tomcat处理请求的过程：在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。</p>\n<p>相对应的，Connector中的几个参数功能如下：</p>\n<h2 id=\"acceptCount\"><a href=\"#acceptCount\" class=\"headerlink\" title=\"acceptCount\"></a>acceptCount</h2><p>accept队列的长度；当accept队列中连接的个数达到acceptCount时，队列满，进来的请求一律被拒绝。<em>默认值是100</em>。</p>\n<h2 id=\"maxConnections\"><a href=\"#maxConnections\" class=\"headerlink\" title=\"maxConnections\"></a>maxConnections</h2><p>Tomcat在任意时刻接收和处理的最大连接数。当Tomcat接收的连接数达到maxConnections时，Acceptor线程不会读取accept队列中的连接；这时accept队列中的线程会一直阻塞着，直到Tomcat接收的连接数小于maxConnections。如果设置为-1，则连接数不受限制。</p>\n<p><em>默认值与连接器使用的协议有关：NIO的默认值是10000，APR/native的默认值是8192，而BIO的默认值为maxThreads（如果配置了Executor，则默认值是Executor的maxThreads）。</em></p>\n<p><em>在windows下，APR/native的maxConnections值会自动调整为设置值以下最大的1024的整数倍；如设置为2000，则最大值实际是1024。</em></p>\n<h2 id=\"maxThreads\"><a href=\"#maxThreads\" class=\"headerlink\" title=\"maxThreads\"></a>maxThreads</h2><p>请求处理线程的最大数量。<em>默认值是200（Tomcat7和8都是的）</em>。如果该Connector绑定了Executor，这个值会被忽略，因为该Connector将使用绑定的Executor，而不是内置的线程池来执行任务。</p>\n<p>maxThreads规定的是最大的线程数目，并不是实际running的CPU数量；实际上，maxThreads的大小比CPU核心数量要大得多。这是因为，处理请求的线程真正用于计算的时间可能很少，大多数时间可能在阻塞，如等待数据库返回数据、等待硬盘读写数据等。因此，在某一时刻，只有少数的线程真正的在使用物理CPU，大多数线程都在等待；因此线程数远大于物理核心数才是合理的。</p>\n<p>换句话说，Tomcat通过使用比CPU核心数量多得多的线程数，可以使CPU忙碌起来，大大提高CPU的利用率。</p>\n<h2 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h2><ol>\n<li>maxThreads的设置既与应用的特点有关，也与服务器的CPU核心数量有关。通过前面介绍可以知道，maxThreads数量应该远大于CPU核心数量；而且CPU核心数越大，maxThreads应该越大；应用中CPU越不密集（IO越密集），maxThreads应该越大，以便能够充分利用CPU。当然，maxThreads的值并不是越大越好，如果maxThreads过大，那么CPU会花费大量的时间用于线程的切换，整体效率会降低。</li>\n<li>maxConnections的设置与Tomcat的运行模式有关。如果tomcat使用的是BIO，那么maxConnections的值应该与maxThreads一致；如果tomcat使用的是NIO，那么类似于Tomcat的默认值，maxConnections值应该远大于maxThreads。</li>\n<li>通过前面的介绍可以知道，虽然tomcat同时可以处理的连接数目是maxConnections，但服务器中可以同时接收的连接数为maxConnections+acceptCount 。acceptCount的设置，与应用在连接过高情况下希望做出什么反应有关系。如果设置过大，后面进入的请求等待时间会很长；如果设置过小，后面进入的请求立马返回connection refused。</li>\n</ol>\n<h1 id=\"线程池Executor\"><a href=\"#线程池Executor\" class=\"headerlink\" title=\"线程池Executor\"></a>线程池Executor</h1><p>Executor元素代表Tomcat中的线程池，可以由其他组件共享使用；要使用该线程池，组件需要通过Executor属性指定该线程池。</p>\n<p>Executor是Service元素的内嵌元素。一般来说，使用线程池的是Connector组件；为了使Connector能使用线程池，Executor元素应该放在Connector前面。Executor与Connector的配置举例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Executor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tomcatThreadPool\"</span> <span class=\"attr\">namePrefix</span> =<span class=\"string\">\"catalina-exec-\"</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"150\"</span> <span class=\"attr\">minSpareThreads</span>=<span class=\"string\">\"4\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">executor</span>=<span class=\"string\">\"tomcatThreadPool\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> <span class=\"attr\">acceptCount</span>=<span class=\"string\">\"1000\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>Executor的主要属性包括：</p>\n<ul>\n<li>name：该线程池的标记</li>\n<li>maxThreads：线程池中最大活跃线程数，默认值200（Tomcat7和8都是）</li>\n<li>minSpareThreads：线程池中保持的最小线程数，最小值是25</li>\n<li>maxIdleTime：线程空闲的最大时间，当空闲超过该值时关闭线程（除非线程数小于minSpareThreads），单位是ms，默认值60000（1分钟）</li>\n<li>daemon：是否后台线程，默认值true</li>\n<li>threadPriority：线程优先级，默认值5</li>\n<li>namePrefix：线程名字的前缀，线程池中线程名字为：namePrefix+线程编号</li>\n</ul>\n<h1 id=\"查看当前状态\"><a href=\"#查看当前状态\" class=\"headerlink\" title=\"查看当前状态\"></a>查看当前状态</h1><p>上面介绍了Tomcat连接数、线程数的概念以及如何设置，下面说明如何查看服务器中的连接数和线程数。</p>\n<p>查看服务器的状态，大致分为两种方案：</p>\n<h2 id=\"jconsole工具\"><a href=\"#jconsole工具\" class=\"headerlink\" title=\"jconsole工具\"></a>jconsole工具</h2><p>现成的工具，如JDK自带的jconsole工具可以方便的查看线程信息（此外还可以查看CPU、内存、类、JVM基本信息等），Tomcat自带的manager，收费工具New Relic等。下图是jconsole查看线程信息的界面：</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/jconsole.png\"><br><br></div>\n\n<h2 id=\"Linux命令查看\"><a href=\"#Linux命令查看\" class=\"headerlink\" title=\"Linux命令查看\"></a>Linux命令查看</h2><p>假设Tomcat接收http请求的端口是8083，则可以使用如下语句查看连接情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat –nat|grep <span class=\"number\">8080</span></div></pre></td></tr></table></figure>\n<p>结果如下所示：</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/net.png\"><br><br></div>\n\n<p>可以看出，有一个连接处于listen状态，监听请求；除此之外，还有6个已经建立的连接（ESTABLISHED）和0个等待关闭的连接（CLOSE_WAIT）。</p>\n<p>原文：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651479428&amp;idx=1&amp;sn=791fed1205da057aba77655aaac9d841&amp;chksm=bd2531fb8a52b8ed0066a8efc76d031ffb6e0d2099fb342129c307f78b4bf0581cbf3bbcb058&amp;mpshare=1&amp;scene=1&amp;srcid=1114Osu1mhmfSobleuByFbEC#rd\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651479428&amp;idx=1&amp;sn=791fed1205da057aba77655aaac9d841&amp;chksm=bd2531fb8a52b8ed0066a8efc76d031ffb6e0d2099fb342129c307f78b4bf0581cbf3bbcb058&amp;mpshare=1&amp;scene=1&amp;srcid=1114Osu1mhmfSobleuByFbEC#rd</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>在使用Tomcat时，经常会遇到连接数、线程数之类的配置，然后自己就去谷歌、百度，没有真正理解Tomcat配置的作用及当前业务环境、服务器配置等情况下Tomcat最优配置。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"org.apache.coyote.http11.Http11AprProtocol\"</span></div><div class=\"line\">              <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"1000\"</span> <span class=\"attr\">minSpareThreads</span>=<span class=\"string\">\"100\"</span></div><div class=\"line\">\t\t   <span class=\"attr\">maxSpareThreads</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">acceptCount</span>=<span class=\"string\">\"900\"</span> <span class=\"attr\">enableLookups</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">\t\t   <span class=\"attr\">compression</span>=<span class=\"string\">\"on\"</span> <span class=\"attr\">compressionMinSize</span>=<span class=\"string\">\"1024\"</span> <span class=\"attr\">compressableMimeType</span>=<span class=\"string\">\"text/html,text/xml,text/css,text/javascript\"</span></div><div class=\"line\">              <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> <span class=\"attr\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span> <span class=\"attr\">maxHttpHeaderSize</span>=<span class=\"string\">\"8192\"</span>/&gt;</span></div></pre></td></tr></table></figure>","more":"<h1 id=\"Tomcat连接器（Connector）\"><a href=\"#Tomcat连接器（Connector）\" class=\"headerlink\" title=\"Tomcat连接器（Connector）\"></a>Tomcat连接器（Connector）</h1><p>上一篇文章说到过Tomcat的配置文件server.xml ：Connector的主要功能，是<strong>接收连接请求</strong>，创建<strong>Request和Response对象用于和请求端交换数据</strong>；然后分配线程让Engine（也就是Servlet容器）来处理这个请求，并把产生的Request和Response对象传给Engine。当Engine处理完请求后，也会通过Connector将响应返回给客户端。</p>\n<p>可以说，Servlet容器处理请求，是需要Connector进行调度和控制的，Connector是Tomcat处理请求的主干，因此Connector的配置和使用对Tomcat的性能有着重要的影响。这篇文将从Connector入手，讨论一些与Connector有关的重要问题，包括NIO/BIO模式、线程池、连接数等。</p>\n<p>根据协议的不同，Connector可以分为HTTP Connector、AJP Connector等，在这篇文章我们只讨论HTTP Connector。</p>\n<h1 id=\"BIO、NIO、APR\"><a href=\"#BIO、NIO、APR\" class=\"headerlink\" title=\"BIO、NIO、APR\"></a>BIO、NIO、APR</h1><h2 id=\"Connector的protocal\"><a href=\"#Connector的protocal\" class=\"headerlink\" title=\"Connector的protocal\"></a>Connector的protocal</h2><p>Connector在处理HTTP请求时，会使用不同的protocal。不同的Tomcat版本支持的protocal不同，其中最典型的protocol包括BIO、NIO和APR（Tomcat7中支持这3种，Tomcat8增加了对NIO2的支持，而到了Tomcat8.5和Tomcat9.0，则去掉了对BIO的支持）。</p>\n<p>BIO是Blocking IO，顾名思义是阻塞的IO；NIO是Non-blocking IO，则是非阻塞的IO。而APR是Apache Portable Runtime，是Apache可移植运行库，利用本地库可以实现高可扩展性、高性能；Apr是在Tomcat上运行高并发应用的首选模式，但是需要安装apr、apr-utils、tomcat-native等包。</p>\n<h2 id=\"指定protocal\"><a href=\"#指定protocal\" class=\"headerlink\" title=\"指定protocal\"></a>指定protocal</h2><p>Connector使用哪种protocol，可以通过<strong><code>&lt;connector&gt;</code></strong>元素中的protocol属性进行指定，也可以使用默认值。</p>\n<p>指定的protocol取值及对应的协议如下：</p>\n<ul>\n<li>HTTP/1.1：默认值，使用的协议与Tomcat版本有关</li>\n<li>org.apache.coyote.http11.Http11Protocol：BIO</li>\n<li>org.apache.coyote.http11.Http11NioProtocol：NIO</li>\n<li>org.apache.coyote.http11.Http11Nio2Protocol：NIO2</li>\n<li>org.apache.coyote.http11.Http11AprProtocol：APR</li>\n</ul>\n<p>如果没有指定protocol，则使用默认值HTTP/1.1，其含义如下：在Tomcat7中，自动选取使用BIO或APR（如果找到APR需要的本地库，则使用APR，否则使用BIO）；在Tomcat8中，自动选取使用NIO或APR（如果找到APR需要的本地库，则使用APR，否则使用NIO）。</p>\n<h2 id=\"BIO和NIO的不同\"><a href=\"#BIO和NIO的不同\" class=\"headerlink\" title=\"BIO和NIO的不同\"></a>BIO和NIO的不同</h2><p>无论是BIO，还是NIO，Connector处理请求的大致流程是一样的：</p>\n<p>在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。为了便于后面的说明，首先明确一下连接与请求的关系：连接是TCP层面的（传输层），对应socket；请求是HTTP层面的（应用层），必须依赖于TCP的连接实现；一个TCP连接中可能传输多个HTTP请求。</p>\n<p>在BIO实现的Connector中，处理请求的主要实体是JIoEndpoint对象。JIoEndpoint维护了Acceptor和Worker：Acceptor接收socket，然后从Worker线程池中找出空闲的线程处理socket，如果worker线程池没有空闲线程，则Acceptor将阻塞。其中Worker是Tomcat自带的线程池，如果通过<Executor>配置了其他线程池，原理与Worker类似。</p>\n<p>在NIO实现的Connector中，处理请求的主要实体是NIoEndpoint对象。NIoEndpoint中除了包含Acceptor和Worker外，还是用了Poller，处理流程如下图所示</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/Nio.jpg\"/><br><br></div>\n\n<p>Acceptor接收socket后，不是直接使用Worker中的线程处理请求，而是先将请求发送给了Poller，而Poller是实现NIO的关键。Acceptor向Poller发送请求通过队列实现，使用了典型的生产者-消费者模式。在Poller中，维护了一个Selector对象；当Poller从队列中取出socket后，注册到该Selector中；然后通过遍历Selector，找出其中可读的socket，并使用Worker中的线程处理相应请求。与BIO类似，Worker也可以被自定义的线程池代替。</p>\n<p>通过上述过程可以看出，在NIoEndpoint处理请求的过程中，无论是Acceptor接收socket，还是线程处理请求，使用的仍然是阻塞方式；但在“读取socket并交给Worker中的线程”的这个过程中，使用非阻塞的NIO实现，这是NIO模式与BIO模式的最主要区别（其他区别对性能影响较小，暂时略去不提）。而这个区别，在并发量较大的情形下可以带来Tomcat效率的显著提升：</p>\n<p>目前大多数HTTP请求使用的是长连接（HTTP/1.1默认keep-alive为true），而长连接意味着，一个TCP的socket在当前请求结束后，如果没有新的请求到来，socket不会立马释放，而是等timeout后再释放。如果使用BIO，“读取socket并交给Worker中的线程”这个过程是阻塞的，也就意味着在socket等待下一个请求或等待释放的过程中，处理这个socket的工作线程会一直被占用，无法释放；因此Tomcat可以同时处理的socket数目不能超过最大线程数，性能受到了极大限制。而使用NIO，“读取socket并交给Worker中的线程”这个过程是非阻塞的，当socket在等待下一个请求或等待释放时，并不会占用工作线程，因此Tomcat可以同时处理的socket数目远大于最大线程数，并发性能大大提高。</p>\n<h1 id=\"acceptCount、maxConnections、maxThreads参数\"><a href=\"#acceptCount、maxConnections、maxThreads参数\" class=\"headerlink\" title=\"acceptCount、maxConnections、maxThreads参数\"></a>acceptCount、maxConnections、maxThreads参数</h1><p>Tomcat处理请求的过程：在accept队列中接收连接（当客户端向服务器发送请求时，如果客户端与OS完成三次握手建立了连接，则OS将该连接放入accept队列）；在连接中获取请求的数据，生成request；调用servlet容器处理请求；返回response。</p>\n<p>相对应的，Connector中的几个参数功能如下：</p>\n<h2 id=\"acceptCount\"><a href=\"#acceptCount\" class=\"headerlink\" title=\"acceptCount\"></a>acceptCount</h2><p>accept队列的长度；当accept队列中连接的个数达到acceptCount时，队列满，进来的请求一律被拒绝。<em>默认值是100</em>。</p>\n<h2 id=\"maxConnections\"><a href=\"#maxConnections\" class=\"headerlink\" title=\"maxConnections\"></a>maxConnections</h2><p>Tomcat在任意时刻接收和处理的最大连接数。当Tomcat接收的连接数达到maxConnections时，Acceptor线程不会读取accept队列中的连接；这时accept队列中的线程会一直阻塞着，直到Tomcat接收的连接数小于maxConnections。如果设置为-1，则连接数不受限制。</p>\n<p><em>默认值与连接器使用的协议有关：NIO的默认值是10000，APR/native的默认值是8192，而BIO的默认值为maxThreads（如果配置了Executor，则默认值是Executor的maxThreads）。</em></p>\n<p><em>在windows下，APR/native的maxConnections值会自动调整为设置值以下最大的1024的整数倍；如设置为2000，则最大值实际是1024。</em></p>\n<h2 id=\"maxThreads\"><a href=\"#maxThreads\" class=\"headerlink\" title=\"maxThreads\"></a>maxThreads</h2><p>请求处理线程的最大数量。<em>默认值是200（Tomcat7和8都是的）</em>。如果该Connector绑定了Executor，这个值会被忽略，因为该Connector将使用绑定的Executor，而不是内置的线程池来执行任务。</p>\n<p>maxThreads规定的是最大的线程数目，并不是实际running的CPU数量；实际上，maxThreads的大小比CPU核心数量要大得多。这是因为，处理请求的线程真正用于计算的时间可能很少，大多数时间可能在阻塞，如等待数据库返回数据、等待硬盘读写数据等。因此，在某一时刻，只有少数的线程真正的在使用物理CPU，大多数线程都在等待；因此线程数远大于物理核心数才是合理的。</p>\n<p>换句话说，Tomcat通过使用比CPU核心数量多得多的线程数，可以使CPU忙碌起来，大大提高CPU的利用率。</p>\n<h2 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h2><ol>\n<li>maxThreads的设置既与应用的特点有关，也与服务器的CPU核心数量有关。通过前面介绍可以知道，maxThreads数量应该远大于CPU核心数量；而且CPU核心数越大，maxThreads应该越大；应用中CPU越不密集（IO越密集），maxThreads应该越大，以便能够充分利用CPU。当然，maxThreads的值并不是越大越好，如果maxThreads过大，那么CPU会花费大量的时间用于线程的切换，整体效率会降低。</li>\n<li>maxConnections的设置与Tomcat的运行模式有关。如果tomcat使用的是BIO，那么maxConnections的值应该与maxThreads一致；如果tomcat使用的是NIO，那么类似于Tomcat的默认值，maxConnections值应该远大于maxThreads。</li>\n<li>通过前面的介绍可以知道，虽然tomcat同时可以处理的连接数目是maxConnections，但服务器中可以同时接收的连接数为maxConnections+acceptCount 。acceptCount的设置，与应用在连接过高情况下希望做出什么反应有关系。如果设置过大，后面进入的请求等待时间会很长；如果设置过小，后面进入的请求立马返回connection refused。</li>\n</ol>\n<h1 id=\"线程池Executor\"><a href=\"#线程池Executor\" class=\"headerlink\" title=\"线程池Executor\"></a>线程池Executor</h1><p>Executor元素代表Tomcat中的线程池，可以由其他组件共享使用；要使用该线程池，组件需要通过Executor属性指定该线程池。</p>\n<p>Executor是Service元素的内嵌元素。一般来说，使用线程池的是Connector组件；为了使Connector能使用线程池，Executor元素应该放在Connector前面。Executor与Connector的配置举例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Executor</span> <span class=\"attr\">name</span>=<span class=\"string\">\"tomcatThreadPool\"</span> <span class=\"attr\">namePrefix</span> =<span class=\"string\">\"catalina-exec-\"</span> <span class=\"attr\">maxThreads</span>=<span class=\"string\">\"150\"</span> <span class=\"attr\">minSpareThreads</span>=<span class=\"string\">\"4\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">executor</span>=<span class=\"string\">\"tomcatThreadPool\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span> <span class=\"attr\">acceptCount</span>=<span class=\"string\">\"1000\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>Executor的主要属性包括：</p>\n<ul>\n<li>name：该线程池的标记</li>\n<li>maxThreads：线程池中最大活跃线程数，默认值200（Tomcat7和8都是）</li>\n<li>minSpareThreads：线程池中保持的最小线程数，最小值是25</li>\n<li>maxIdleTime：线程空闲的最大时间，当空闲超过该值时关闭线程（除非线程数小于minSpareThreads），单位是ms，默认值60000（1分钟）</li>\n<li>daemon：是否后台线程，默认值true</li>\n<li>threadPriority：线程优先级，默认值5</li>\n<li>namePrefix：线程名字的前缀，线程池中线程名字为：namePrefix+线程编号</li>\n</ul>\n<h1 id=\"查看当前状态\"><a href=\"#查看当前状态\" class=\"headerlink\" title=\"查看当前状态\"></a>查看当前状态</h1><p>上面介绍了Tomcat连接数、线程数的概念以及如何设置，下面说明如何查看服务器中的连接数和线程数。</p>\n<p>查看服务器的状态，大致分为两种方案：</p>\n<h2 id=\"jconsole工具\"><a href=\"#jconsole工具\" class=\"headerlink\" title=\"jconsole工具\"></a>jconsole工具</h2><p>现成的工具，如JDK自带的jconsole工具可以方便的查看线程信息（此外还可以查看CPU、内存、类、JVM基本信息等），Tomcat自带的manager，收费工具New Relic等。下图是jconsole查看线程信息的界面：</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/jconsole.png\"/><br><br></div>\n\n<h2 id=\"Linux命令查看\"><a href=\"#Linux命令查看\" class=\"headerlink\" title=\"Linux命令查看\"></a>Linux命令查看</h2><p>假设Tomcat接收http请求的端口是8083，则可以使用如下语句查看连接情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">netstat –nat|grep <span class=\"number\">8080</span></div></pre></td></tr></table></figure>\n<p>结果如下所示：</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-28/tomcat%E8%BF%9E%E6%8E%A5%E6%B1%A0/net.png\"/><br><br></div>\n\n<p>可以看出，有一个连接处于listen状态，监听请求；除此之外，还有6个已经建立的连接（ESTABLISHED）和0个等待关闭的连接（CLOSE_WAIT）。</p>\n<p>原文：</p>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651479428&amp;idx=1&amp;sn=791fed1205da057aba77655aaac9d841&amp;chksm=bd2531fb8a52b8ed0066a8efc76d031ffb6e0d2099fb342129c307f78b4bf0581cbf3bbcb058&amp;mpshare=1&amp;scene=1&amp;srcid=1114Osu1mhmfSobleuByFbEC#rd\">https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651479428&amp;idx=1&amp;sn=791fed1205da057aba77655aaac9d841&amp;chksm=bd2531fb8a52b8ed0066a8efc76d031ffb6e0d2099fb342129c307f78b4bf0581cbf3bbcb058&amp;mpshare=1&amp;scene=1&amp;srcid=1114Osu1mhmfSobleuByFbEC#rd</a></p>"},{"title":"线程池之ThreadPoolExecutor","date":"2018-03-17T06:09:10.000Z","_content":"\n# 引言\n\nJAVA对于多线程的封装非常丰富，提供了多种适用于不同场景的多并发实现。但如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。这里就引入了线程池来管理线程，其中最基础、最核心的线程池要属ThreadPoolExecutor类了。<div align=center><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/threadpoolexecutor.png\" algin=\"center\"/></div>\t<!-- more -->\n\n# Java中的ThreadPoolExecutor类\n\njava.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类。下面我们来看一下ThreadPoolExecutor类的具体实现源码。\n\n在ThreadPoolExecutor类中提供了四个构造方法：\n\n```java\npublic class ThreadPoolExecutor extends AbstractExecutorService {\n   .....\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n           BlockingQueue<Runnable> workQueue);\n\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n           BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory);\n\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n           BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler);\n\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n       BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);\n   ...\n}\n//corePoolSize： 线程池维护线程的最少数量  \n//maximumPoolSize：线程池维护线程的最大数量  \n//keepAliveTime： 线程池维护线程所允许的空闲时间  \n//unit： 线程池维护线程所允许的空闲时间的单位  \n//workQueue： 线程池所使用的缓冲队列  \n//handler： 线程池对拒绝任务的处理策略 \n```\n\n从上面的代码可以得知，ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造器，事实上，通过观察每个构造器的源码具体实现，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。\n\n- **corePoolSize**：核心池的大小。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；\n\n- **maximumPoolSize**：线程池最大线程数，它表示在线程池中最多能创建多少个线程；\n\n- **keepAliveTime**：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；\n\n- **unit**：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：\n\n  ```java\n  TimeUnit.DAYS;              //天\n  TimeUnit.HOURS;             //小时\n  TimeUnit.MINUTES;           //分钟\n  TimeUnit.SECONDS;           //秒\n  TimeUnit.MILLISECONDS;      //毫秒\n  TimeUnit.MICROSECONDS;      //微妙\n  TimeUnit.NANOSECONDS;       //纳秒\n  ```\n\n- **workQueue**：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：\n\n  ```java\n  ArrayBlockingQueue;\n  LinkedBlockingQueue;\n  SynchronousQueue;\n  ```\n\n  ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。\n\n- **threadFactory**：线程工厂，主要用来创建线程；\n\n- **handler**：表示当拒绝处理任务时的策略，有以下四种取值：\n\n  ```java\n  ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 \n  ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 \n  ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n  ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 \n  ```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/inherit.png\" algin=\"center\"/></div>\n\n由图中我们可得知ThreadPoolExecutor继承了AbstractExecutorService，AbstractExecutorService是一个抽象类，它实现了ExecutorService接口，而ExecutorService又是继承了Executor接口。\n\n# 线程池实现原理\n\n## 线程池状态\n\n在ThreadPoolExecutor中定义了几个static final变量表示线程池的各个状态：\n\n```java\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n * RUNNING -> SHUTDOWN\n     *    On invocation of shutdown(), perhaps implicitly in finalize()\n     * (RUNNING or SHUTDOWN) -> STOP\n     *    On invocation of shutdownNow()\n     * SHUTDOWN -> TIDYING\n     *    When both queue and pool are empty\n     * STOP -> TIDYING\n     *    When pool is empty\n     * TIDYING -> TERMINATED\n     *    When the terminated() hook method has completed\n     **/\nprivate static final int RUNNING    = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\nprivate static final int STOP       =  1 << COUNT_BITS;\nprivate static final int TIDYING    =  2 << COUNT_BITS;\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n```\n\n下面的几个static final变量表示runState可能的几个取值。\n\n1. **RUNNING**：允许接收新任务并且处理队列中的任务。\n2. **SHUTDOWN**：不再接收新的任务，仅消化完队列中的任务。\n3. **STOP**：不仅不再接收新的任务，连队列中的任务都不再消化处理了，并且尝试中断正在执行任务的线程。\n4. **TIDYING**：所有任务被终止了，工作线程数`workCount`也被设为0，线程的状态也被设为**TIDYING**，并开始调用钩子函数terminated()。\n5. **TERMINATED**：钩子函数`terminated()`执行完毕。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/threadpoolexcetor/status.png\" algin=\"center\"/></div>\n\n## 任务的执行\n\n```java\nprivate final BlockingQueue<Runnable> workQueue;              //任务缓存队列，用来存放等待执行的任务\nprivate final ReentrantLock mainLock = new ReentrantLock();   //线程池的主要状态锁，对线程池状态（比如线程池大小/runState等）的改变都要使用这个锁\nprivate final HashSet<Worker> workers = new HashSet<Worker>();  //用来存放工作集\n\nprivate volatile long keepAliveTime;    //线程存活时间   \nprivate volatile boolean allowCoreThreadTimeOut;   //是否允许为核心线程设置存活时间\nprivate volatile int corePoolSize;     //核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）\nprivate volatile int maximumPoolSize;   //线程池最大能容忍的线程数\n\nprivate volatile int poolSize;       //线程池中当前的线程数\n\nprivate volatile RejectedExecutionHandler handler; //任务拒绝策略\n\nprivate volatile ThreadFactory threadFactory;   //线程工厂，用来创建线程\n\nprivate int largestPoolSize;   //用来记录线程池中曾经出现过的最大线程数\n\nprivate long completedTaskCount;   //用来记录已经执行完毕的任务个数\n```\n\n每个变量的作用都已经标明出来了，这里要重点解释一下*corePoolSize*、*maximumPoolSize*、*largestPoolSize*三个变量。\n\n1. 如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；\n2. 如果当前线程池中的线程数目>=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；\n3. 如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；\n4. 如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。\n\n## 任务缓存及排队策略\n\n在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。workQueue的类型为BlockingQueue`<Runnable>`，通常可以取下面三种类型：\n\n1）**ArrayBlockingQueue**：`有界队列`，有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。\n\n2）**LinkedBlockingQueue**：`无界队列`，将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize 的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n3）**SynchronousQueue**：工作队列的`默认选项是 SynchronousQueue`，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n## 任务拒绝策略\n\n当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：\n\n```java\nThreadPoolExecutor.AbortPolicy:\t\t\t丢弃任务并抛出RejectedExecutionException异常。\nThreadPoolExecutor.DiscardPolicy：   \t也是丢弃任务，但是不抛出异常。\nThreadPoolExecutor.DiscardOldestPolicy： 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\nThreadPoolExecutor.CallerRunsPolicy：\t由调用线程处理该任务\n```\n\n## 线程池的关闭\n\nThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()：\n\n- shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务。\n- shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。\n\n## 线程池容量的动态调整\n\nThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()：\n\n- setCorePoolSize：设置核心池大小。\n- setMaximumPoolSize：设置线程池最大能创建的线程数目大小。\n\n# 使用Executors创建线程池\n\nExecutors提供的工厂方法，可以创建以下四种类型线程池：\n\n- **newFixedThreadPool：**该方法将用于创建一个固定大小的线程池（此时corePoolSize = maxPoolSize），每提交一个任务就创建一个线程池，直到线程池达到最大数量，线程池的规模在此后不会发生任何变化；\n\n\n\n- **newCachedThreadPool：**该方法创建了一个可缓存的线程池，（此时corePoolSize = 0，maxPoolSize = Integer.MAX_VALUE），空闲线程超过60秒就会被自动回收，该线程池存在的风险是，如果服务器应用达到请求高峰期时，会不断创建新的线程，直到内存耗尽；\n\n\n\n- **newSingleThreadExecutor：**该方法创建了一个单线程的线程池，该线程池按照任务在队列中的顺序串行执行（如：**FIFO**、**LIFO**、优先级）；\n\n\n\n- **newScheduledThreadPool：**该方法创建了一个固定长度的线程池，可以以延迟或者定时的方式执行任务；\n\n\n# 实例\n\n```java\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tThreadFactory factory = new ThreadFactoryBuilder().setNameFormat(\"test\").build();\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(2, 5, 200, TimeUnit.MILLISECONDS,\n\t\t\t\tnew LinkedBlockingQueue<Runnable>(5),factory,new ThreadPoolExecutor.CallerRunsPolicy());\n\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tMyTask myTask = new MyTask(i);\n\t\t\texecutor.execute(myTask);\n\t\t\tSystem.out.println(\"线程池中线程数目：\" + executor.getPoolSize() + \"，队列中等待执行的任务数目：\" + executor.getQueue().size()\n\t\t\t\t\t+ \"，已执行玩别的任务数目：\" + executor.getCompletedTaskCount());\n\t\t}\n\t\texecutor.shutdown();\n\t}\n}\n\nclass MyTask implements Runnable {\n\tprivate int taskNum;\n\n\tpublic MyTask(int num) {\n\t\tthis.taskNum = num;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"正在执行task \" + taskNum);\n\t\ttry {\n\t\t\tThread.currentThread().sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"task \" + taskNum + \"执行完毕\");\n\t}\n}\n```\n\n执行结果：\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/result.png\" algin=\"center\"/></div>\n\n## 合理配置线程池大小\n\n一般需要根据任务的类型来配置线程池大小：\n\n- 如果是**CPU密集型任务**，就需要尽量压榨CPU，参考值可以设为 ***N*CPU+1**\n\n\n\n- 如果是**IO密集型任务**，参考值可以设置为2**N*CPU\n\n\n这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。\n\n## 参考\n\n[***Java并发编程：线程池的使用***](http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651935366&idx=1&sn=ee82f1deb13192c5f1a20721a0c1abbe&chksm=8d0f3dc8ba78b4de93a26cdb6eea3b3804149a7fe88e9e8114757b0aa2cd39a67ad10e6f42ee&mpshare=1&scene=1&srcid=0317Fqotu8V4wTWmJ07lgTbS#rd)","source":"_posts/线程池之ThreadPoolExecutor.md","raw":"---\ntitle: 线程池之ThreadPoolExecutor\ndate: 2018-03-17 14:09:10\ntags: [java,tips]\ncategories: technology\n---\n\n# 引言\n\nJAVA对于多线程的封装非常丰富，提供了多种适用于不同场景的多并发实现。但如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。这里就引入了线程池来管理线程，其中最基础、最核心的线程池要属ThreadPoolExecutor类了。<div align=center><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/threadpoolexecutor.png\" algin=\"center\"/></div>\t<!-- more -->\n\n# Java中的ThreadPoolExecutor类\n\njava.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类。下面我们来看一下ThreadPoolExecutor类的具体实现源码。\n\n在ThreadPoolExecutor类中提供了四个构造方法：\n\n```java\npublic class ThreadPoolExecutor extends AbstractExecutorService {\n   .....\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n           BlockingQueue<Runnable> workQueue);\n\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n           BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory);\n\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n           BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler);\n\n   public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,\n       BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);\n   ...\n}\n//corePoolSize： 线程池维护线程的最少数量  \n//maximumPoolSize：线程池维护线程的最大数量  \n//keepAliveTime： 线程池维护线程所允许的空闲时间  \n//unit： 线程池维护线程所允许的空闲时间的单位  \n//workQueue： 线程池所使用的缓冲队列  \n//handler： 线程池对拒绝任务的处理策略 \n```\n\n从上面的代码可以得知，ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造器，事实上，通过观察每个构造器的源码具体实现，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。\n\n- **corePoolSize**：核心池的大小。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；\n\n- **maximumPoolSize**：线程池最大线程数，它表示在线程池中最多能创建多少个线程；\n\n- **keepAliveTime**：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；\n\n- **unit**：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：\n\n  ```java\n  TimeUnit.DAYS;              //天\n  TimeUnit.HOURS;             //小时\n  TimeUnit.MINUTES;           //分钟\n  TimeUnit.SECONDS;           //秒\n  TimeUnit.MILLISECONDS;      //毫秒\n  TimeUnit.MICROSECONDS;      //微妙\n  TimeUnit.NANOSECONDS;       //纳秒\n  ```\n\n- **workQueue**：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：\n\n  ```java\n  ArrayBlockingQueue;\n  LinkedBlockingQueue;\n  SynchronousQueue;\n  ```\n\n  ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。\n\n- **threadFactory**：线程工厂，主要用来创建线程；\n\n- **handler**：表示当拒绝处理任务时的策略，有以下四种取值：\n\n  ```java\n  ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 \n  ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 \n  ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\n  ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 \n  ```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/inherit.png\" algin=\"center\"/></div>\n\n由图中我们可得知ThreadPoolExecutor继承了AbstractExecutorService，AbstractExecutorService是一个抽象类，它实现了ExecutorService接口，而ExecutorService又是继承了Executor接口。\n\n# 线程池实现原理\n\n## 线程池状态\n\n在ThreadPoolExecutor中定义了几个static final变量表示线程池的各个状态：\n\n```java\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n * RUNNING -> SHUTDOWN\n     *    On invocation of shutdown(), perhaps implicitly in finalize()\n     * (RUNNING or SHUTDOWN) -> STOP\n     *    On invocation of shutdownNow()\n     * SHUTDOWN -> TIDYING\n     *    When both queue and pool are empty\n     * STOP -> TIDYING\n     *    When pool is empty\n     * TIDYING -> TERMINATED\n     *    When the terminated() hook method has completed\n     **/\nprivate static final int RUNNING    = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\nprivate static final int STOP       =  1 << COUNT_BITS;\nprivate static final int TIDYING    =  2 << COUNT_BITS;\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n```\n\n下面的几个static final变量表示runState可能的几个取值。\n\n1. **RUNNING**：允许接收新任务并且处理队列中的任务。\n2. **SHUTDOWN**：不再接收新的任务，仅消化完队列中的任务。\n3. **STOP**：不仅不再接收新的任务，连队列中的任务都不再消化处理了，并且尝试中断正在执行任务的线程。\n4. **TIDYING**：所有任务被终止了，工作线程数`workCount`也被设为0，线程的状态也被设为**TIDYING**，并开始调用钩子函数terminated()。\n5. **TERMINATED**：钩子函数`terminated()`执行完毕。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/threadpoolexcetor/status.png\" algin=\"center\"/></div>\n\n## 任务的执行\n\n```java\nprivate final BlockingQueue<Runnable> workQueue;              //任务缓存队列，用来存放等待执行的任务\nprivate final ReentrantLock mainLock = new ReentrantLock();   //线程池的主要状态锁，对线程池状态（比如线程池大小/runState等）的改变都要使用这个锁\nprivate final HashSet<Worker> workers = new HashSet<Worker>();  //用来存放工作集\n\nprivate volatile long keepAliveTime;    //线程存活时间   \nprivate volatile boolean allowCoreThreadTimeOut;   //是否允许为核心线程设置存活时间\nprivate volatile int corePoolSize;     //核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）\nprivate volatile int maximumPoolSize;   //线程池最大能容忍的线程数\n\nprivate volatile int poolSize;       //线程池中当前的线程数\n\nprivate volatile RejectedExecutionHandler handler; //任务拒绝策略\n\nprivate volatile ThreadFactory threadFactory;   //线程工厂，用来创建线程\n\nprivate int largestPoolSize;   //用来记录线程池中曾经出现过的最大线程数\n\nprivate long completedTaskCount;   //用来记录已经执行完毕的任务个数\n```\n\n每个变量的作用都已经标明出来了，这里要重点解释一下*corePoolSize*、*maximumPoolSize*、*largestPoolSize*三个变量。\n\n1. 如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；\n2. 如果当前线程池中的线程数目>=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；\n3. 如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；\n4. 如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。\n\n## 任务缓存及排队策略\n\n在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。workQueue的类型为BlockingQueue`<Runnable>`，通常可以取下面三种类型：\n\n1）**ArrayBlockingQueue**：`有界队列`，有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。\n\n2）**LinkedBlockingQueue**：`无界队列`，将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize 的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n3）**SynchronousQueue**：工作队列的`默认选项是 SynchronousQueue`，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。\n\n## 任务拒绝策略\n\n当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：\n\n```java\nThreadPoolExecutor.AbortPolicy:\t\t\t丢弃任务并抛出RejectedExecutionException异常。\nThreadPoolExecutor.DiscardPolicy：   \t也是丢弃任务，但是不抛出异常。\nThreadPoolExecutor.DiscardOldestPolicy： 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）\nThreadPoolExecutor.CallerRunsPolicy：\t由调用线程处理该任务\n```\n\n## 线程池的关闭\n\nThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()：\n\n- shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务。\n- shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。\n\n## 线程池容量的动态调整\n\nThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()：\n\n- setCorePoolSize：设置核心池大小。\n- setMaximumPoolSize：设置线程池最大能创建的线程数目大小。\n\n# 使用Executors创建线程池\n\nExecutors提供的工厂方法，可以创建以下四种类型线程池：\n\n- **newFixedThreadPool：**该方法将用于创建一个固定大小的线程池（此时corePoolSize = maxPoolSize），每提交一个任务就创建一个线程池，直到线程池达到最大数量，线程池的规模在此后不会发生任何变化；\n\n\n\n- **newCachedThreadPool：**该方法创建了一个可缓存的线程池，（此时corePoolSize = 0，maxPoolSize = Integer.MAX_VALUE），空闲线程超过60秒就会被自动回收，该线程池存在的风险是，如果服务器应用达到请求高峰期时，会不断创建新的线程，直到内存耗尽；\n\n\n\n- **newSingleThreadExecutor：**该方法创建了一个单线程的线程池，该线程池按照任务在队列中的顺序串行执行（如：**FIFO**、**LIFO**、优先级）；\n\n\n\n- **newScheduledThreadPool：**该方法创建了一个固定长度的线程池，可以以延迟或者定时的方式执行任务；\n\n\n# 实例\n\n```java\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tThreadFactory factory = new ThreadFactoryBuilder().setNameFormat(\"test\").build();\n\t\tThreadPoolExecutor executor = new ThreadPoolExecutor(2, 5, 200, TimeUnit.MILLISECONDS,\n\t\t\t\tnew LinkedBlockingQueue<Runnable>(5),factory,new ThreadPoolExecutor.CallerRunsPolicy());\n\n\t\tfor (int i = 1; i <= 10; i++) {\n\t\t\tMyTask myTask = new MyTask(i);\n\t\t\texecutor.execute(myTask);\n\t\t\tSystem.out.println(\"线程池中线程数目：\" + executor.getPoolSize() + \"，队列中等待执行的任务数目：\" + executor.getQueue().size()\n\t\t\t\t\t+ \"，已执行玩别的任务数目：\" + executor.getCompletedTaskCount());\n\t\t}\n\t\texecutor.shutdown();\n\t}\n}\n\nclass MyTask implements Runnable {\n\tprivate int taskNum;\n\n\tpublic MyTask(int num) {\n\t\tthis.taskNum = num;\n\t}\n\n\t@Override\n\tpublic void run() {\n\t\tSystem.out.println(\"正在执行task \" + taskNum);\n\t\ttry {\n\t\t\tThread.currentThread().sleep(2000);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(\"task \" + taskNum + \"执行完毕\");\n\t}\n}\n```\n\n执行结果：\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/result.png\" algin=\"center\"/></div>\n\n## 合理配置线程池大小\n\n一般需要根据任务的类型来配置线程池大小：\n\n- 如果是**CPU密集型任务**，就需要尽量压榨CPU，参考值可以设为 ***N*CPU+1**\n\n\n\n- 如果是**IO密集型任务**，参考值可以设置为2**N*CPU\n\n\n这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。\n\n## 参考\n\n[***Java并发编程：线程池的使用***](http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651935366&idx=1&sn=ee82f1deb13192c5f1a20721a0c1abbe&chksm=8d0f3dc8ba78b4de93a26cdb6eea3b3804149a7fe88e9e8114757b0aa2cd39a67ad10e6f42ee&mpshare=1&scene=1&srcid=0317Fqotu8V4wTWmJ07lgTbS#rd)","slug":"线程池之ThreadPoolExecutor","published":1,"updated":"2018-03-20T01:58:33.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u4700383gfkfbs2r7hp","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>JAVA对于多线程的封装非常丰富，提供了多种适用于不同场景的多并发实现。但如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。这里就引入了线程池来管理线程，其中最基础、最核心的线程池要属ThreadPoolExecutor类了。<div align=\"center\"><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/threadpoolexecutor.png\" algin=\"center\"></div>    <a id=\"more\"></a></p>\n<h1 id=\"Java中的ThreadPoolExecutor类\"><a href=\"#Java中的ThreadPoolExecutor类\" class=\"headerlink\" title=\"Java中的ThreadPoolExecutor类\"></a>Java中的ThreadPoolExecutor类</h1><p>java.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类。下面我们来看一下ThreadPoolExecutor类的具体实现源码。</p>\n<p>在ThreadPoolExecutor类中提供了四个构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;</div><div class=\"line\">   .....</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></div><div class=\"line\">           BlockingQueue&lt;Runnable&gt; workQueue);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></div><div class=\"line\">           BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></div><div class=\"line\">           BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler);</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</span></span></div><div class=\"line\">       BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//corePoolSize： 线程池维护线程的最少数量  </span></div><div class=\"line\"><span class=\"comment\">//maximumPoolSize：线程池维护线程的最大数量  </span></div><div class=\"line\"><span class=\"comment\">//keepAliveTime： 线程池维护线程所允许的空闲时间  </span></div><div class=\"line\"><span class=\"comment\">//unit： 线程池维护线程所允许的空闲时间的单位  </span></div><div class=\"line\"><span class=\"comment\">//workQueue： 线程池所使用的缓冲队列  </span></div><div class=\"line\"><span class=\"comment\">//handler： 线程池对拒绝任务的处理策略</span></div></pre></td></tr></table></figure>\n<p>从上面的代码可以得知，ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造器，事实上，通过观察每个构造器的源码具体实现，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。</p>\n<ul>\n<li><p><strong>corePoolSize</strong>：核心池的大小。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</p>\n</li>\n<li><p><strong>maximumPoolSize</strong>：线程池最大线程数，它表示在线程池中最多能创建多少个线程；</p>\n</li>\n<li><p><strong>keepAliveTime</strong>：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</p>\n</li>\n<li><p><strong>unit</strong>：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">TimeUnit.DAYS;              <span class=\"comment\">//天</span></div><div class=\"line\">TimeUnit.HOURS;             <span class=\"comment\">//小时</span></div><div class=\"line\">TimeUnit.MINUTES;           <span class=\"comment\">//分钟</span></div><div class=\"line\">TimeUnit.SECONDS;           <span class=\"comment\">//秒</span></div><div class=\"line\">TimeUnit.MILLISECONDS;      <span class=\"comment\">//毫秒</span></div><div class=\"line\">TimeUnit.MICROSECONDS;      <span class=\"comment\">//微妙</span></div><div class=\"line\">TimeUnit.NANOSECONDS;       <span class=\"comment\">//纳秒</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>workQueue</strong>：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayBlockingQueue;</div><div class=\"line\">LinkedBlockingQueue;</div><div class=\"line\">SynchronousQueue;</div></pre></td></tr></table></figure>\n<p>ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。</p>\n</li>\n<li><p><strong>threadFactory</strong>：线程工厂，主要用来创建线程；</p>\n</li>\n<li><p><strong>handler</strong>：表示当拒绝处理任务时的策略，有以下四种取值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 </div><div class=\"line\">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </div><div class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/inherit.png\" algin=\"center\"></div>\n\n<p>由图中我们可得知ThreadPoolExecutor继承了AbstractExecutorService，AbstractExecutorService是一个抽象类，它实现了ExecutorService接口，而ExecutorService又是继承了Executor接口。</p>\n<h1 id=\"线程池实现原理\"><a href=\"#线程池实现原理\" class=\"headerlink\" title=\"线程池实现原理\"></a>线程池实现原理</h1><h2 id=\"线程池状态\"><a href=\"#线程池状态\" class=\"headerlink\" title=\"线程池状态\"></a>线程池状态</h2><p>在ThreadPoolExecutor中定义了几个static final变量表示线程池的各个状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger ctl = <span class=\"keyword\">new</span> AtomicInteger(ctlOf(RUNNING, <span class=\"number\">0</span>));</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COUNT_BITS = Integer.SIZE - <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CAPACITY   = (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"> * RUNNING -&gt; SHUTDOWN</div><div class=\"line\">     *    <span class=\"function\">On invocation of <span class=\"title\">shutdown</span><span class=\"params\">()</span>, perhaps implicitly in <span class=\"title\">finalize</span><span class=\"params\">()</span></span></div><div class=\"line\">     * <span class=\"params\">(RUNNING or SHUTDOWN)</span> -&gt; STOP</div><div class=\"line\">     *    On invocation of <span class=\"title\">shutdownNow</span><span class=\"params\">()</span></div><div class=\"line\">     * SHUTDOWN -&gt; TIDYING</div><div class=\"line\">     *    When both queue and pool are empty</div><div class=\"line\">     * STOP -&gt; TIDYING</div><div class=\"line\">     *    When pool is empty</div><div class=\"line\">     * TIDYING -&gt; TERMINATED</div><div class=\"line\">     *    When the <span class=\"title\">terminated</span><span class=\"params\">()</span> hook method has completed</div><div class=\"line\">     **/</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> RUNNING    = -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHUTDOWN   =  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> STOP       =  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TIDYING    =  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TERMINATED =  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;</div></pre></td></tr></table></figure>\n<p>下面的几个static final变量表示runState可能的几个取值。</p>\n<ol>\n<li><strong>RUNNING</strong>：允许接收新任务并且处理队列中的任务。</li>\n<li><strong>SHUTDOWN</strong>：不再接收新的任务，仅消化完队列中的任务。</li>\n<li><strong>STOP</strong>：不仅不再接收新的任务，连队列中的任务都不再消化处理了，并且尝试中断正在执行任务的线程。</li>\n<li><strong>TIDYING</strong>：所有任务被终止了，工作线程数<code>workCount</code>也被设为0，线程的状态也被设为<strong>TIDYING</strong>，并开始调用钩子函数terminated()。</li>\n<li><strong>TERMINATED</strong>：钩子函数<code>terminated()</code>执行完毕。</li>\n</ol>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/threadpoolexcetor/status.png\" algin=\"center\"></div>\n\n<h2 id=\"任务的执行\"><a href=\"#任务的执行\" class=\"headerlink\" title=\"任务的执行\"></a>任务的执行</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BlockingQueue&lt;Runnable&gt; workQueue;              <span class=\"comment\">//任务缓存队列，用来存放等待执行的任务</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock mainLock = <span class=\"keyword\">new</span> ReentrantLock();   <span class=\"comment\">//线程池的主要状态锁，对线程池状态（比如线程池大小/runState等）的改变都要使用这个锁</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashSet&lt;Worker&gt; workers = <span class=\"keyword\">new</span> HashSet&lt;Worker&gt;();  <span class=\"comment\">//用来存放工作集</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> keepAliveTime;    <span class=\"comment\">//线程存活时间   </span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> allowCoreThreadTimeOut;   <span class=\"comment\">//是否允许为核心线程设置存活时间</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> corePoolSize;     <span class=\"comment\">//核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> maximumPoolSize;   <span class=\"comment\">//线程池最大能容忍的线程数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> poolSize;       <span class=\"comment\">//线程池中当前的线程数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> RejectedExecutionHandler handler; <span class=\"comment\">//任务拒绝策略</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> ThreadFactory threadFactory;   <span class=\"comment\">//线程工厂，用来创建线程</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> largestPoolSize;   <span class=\"comment\">//用来记录线程池中曾经出现过的最大线程数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> completedTaskCount;   <span class=\"comment\">//用来记录已经执行完毕的任务个数</span></div></pre></td></tr></table></figure>\n<p>每个变量的作用都已经标明出来了，这里要重点解释一下<em>corePoolSize</em>、<em>maximumPoolSize</em>、<em>largestPoolSize</em>三个变量。</p>\n<ol>\n<li>如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；</li>\n<li>如果当前线程池中的线程数目&gt;=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；</li>\n<li>如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；</li>\n<li>如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。</li>\n</ol>\n<h2 id=\"任务缓存及排队策略\"><a href=\"#任务缓存及排队策略\" class=\"headerlink\" title=\"任务缓存及排队策略\"></a>任务缓存及排队策略</h2><p>在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。workQueue的类型为BlockingQueue<code>&lt;Runnable&gt;</code>，通常可以取下面三种类型：</p>\n<p>1）<strong>ArrayBlockingQueue</strong>：<code>有界队列</code>，有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</p>\n<p>2）<strong>LinkedBlockingQueue</strong>：<code>无界队列</code>，将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize 的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>\n<p>3）<strong>SynchronousQueue</strong>：工作队列的<code>默认选项是 SynchronousQueue</code>，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>\n<h2 id=\"任务拒绝策略\"><a href=\"#任务拒绝策略\" class=\"headerlink\" title=\"任务拒绝策略\"></a>任务拒绝策略</h2><p>当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThreadPoolExecutor.AbortPolicy:\t\t\t丢弃任务并抛出RejectedExecutionException异常。</div><div class=\"line\">ThreadPoolExecutor.DiscardPolicy：   \t也是丢弃任务，但是不抛出异常。</div><div class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy： 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：\t由调用线程处理该任务</div></pre></td></tr></table></figure>\n<h2 id=\"线程池的关闭\"><a href=\"#线程池的关闭\" class=\"headerlink\" title=\"线程池的关闭\"></a>线程池的关闭</h2><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()：</p>\n<ul>\n<li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务。</li>\n<li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。</li>\n</ul>\n<h2 id=\"线程池容量的动态调整\"><a href=\"#线程池容量的动态调整\" class=\"headerlink\" title=\"线程池容量的动态调整\"></a>线程池容量的动态调整</h2><p>ThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()：</p>\n<ul>\n<li>setCorePoolSize：设置核心池大小。</li>\n<li>setMaximumPoolSize：设置线程池最大能创建的线程数目大小。</li>\n</ul>\n<h1 id=\"使用Executors创建线程池\"><a href=\"#使用Executors创建线程池\" class=\"headerlink\" title=\"使用Executors创建线程池\"></a>使用Executors创建线程池</h1><p>Executors提供的工厂方法，可以创建以下四种类型线程池：</p>\n<ul>\n<li><strong>newFixedThreadPool：</strong>该方法将用于创建一个固定大小的线程池（此时corePoolSize = maxPoolSize），每提交一个任务就创建一个线程池，直到线程池达到最大数量，线程池的规模在此后不会发生任何变化；</li>\n</ul>\n<ul>\n<li><strong>newCachedThreadPool：</strong>该方法创建了一个可缓存的线程池，（此时corePoolSize = 0，maxPoolSize = Integer.MAX_VALUE），空闲线程超过60秒就会被自动回收，该线程池存在的风险是，如果服务器应用达到请求高峰期时，会不断创建新的线程，直到内存耗尽；</li>\n</ul>\n<ul>\n<li><strong>newSingleThreadExecutor：</strong>该方法创建了一个单线程的线程池，该线程池按照任务在队列中的顺序串行执行（如：<strong>FIFO</strong>、<strong>LIFO</strong>、优先级）；</li>\n</ul>\n<ul>\n<li><strong>newScheduledThreadPool：</strong>该方法创建了一个固定长度的线程池，可以以延迟或者定时的方式执行任务；</li>\n</ul>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThreadFactory factory = <span class=\"keyword\">new</span> ThreadFactoryBuilder().setNameFormat(<span class=\"string\">\"test\"</span>).build();</div><div class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">200</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">5</span>),factory,<span class=\"keyword\">new</span> ThreadPoolExecutor.CallerRunsPolicy());</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tMyTask myTask = <span class=\"keyword\">new</span> MyTask(i);</div><div class=\"line\">\t\t\texecutor.execute(myTask);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"线程池中线程数目：\"</span> + executor.getPoolSize() + <span class=\"string\">\"，队列中等待执行的任务数目：\"</span> + executor.getQueue().size()</div><div class=\"line\">\t\t\t\t\t+ <span class=\"string\">\"，已执行玩别的任务数目：\"</span> + executor.getCompletedTaskCount());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\texecutor.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> taskNum;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyTask</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.taskNum = num;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"正在执行task \"</span> + taskNum);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.currentThread().sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"task \"</span> + taskNum + <span class=\"string\">\"执行完毕\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/result.png\" algin=\"center\"></div>\n\n<h2 id=\"合理配置线程池大小\"><a href=\"#合理配置线程池大小\" class=\"headerlink\" title=\"合理配置线程池大小\"></a>合理配置线程池大小</h2><p>一般需要根据任务的类型来配置线程池大小：</p>\n<ul>\n<li>如果是<strong>CPU密集型任务</strong>，就需要尽量压榨CPU，参考值可以设为 <strong><em>N</em>CPU+1</strong></li>\n</ul>\n<ul>\n<li>如果是<strong>IO密集型任务</strong>，参考值可以设置为2<em>*N</em>CPU</li>\n</ul>\n<p>这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&amp;mid=2651935366&amp;idx=1&amp;sn=ee82f1deb13192c5f1a20721a0c1abbe&amp;chksm=8d0f3dc8ba78b4de93a26cdb6eea3b3804149a7fe88e9e8114757b0aa2cd39a67ad10e6f42ee&amp;mpshare=1&amp;scene=1&amp;srcid=0317Fqotu8V4wTWmJ07lgTbS#rd\" target=\"_blank\" rel=\"external\"><strong><em>Java并发编程：线程池的使用</em></strong></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>JAVA对于多线程的封装非常丰富，提供了多种适用于不同场景的多并发实现。但如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。这里就引入了线程池来管理线程，其中最基础、最核心的线程池要属ThreadPoolExecutor类了。<div align=center><img width=\"500\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/threadpoolexecutor.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"Java中的ThreadPoolExecutor类\"><a href=\"#Java中的ThreadPoolExecutor类\" class=\"headerlink\" title=\"Java中的ThreadPoolExecutor类\"></a>Java中的ThreadPoolExecutor类</h1><p>java.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类。下面我们来看一下ThreadPoolExecutor类的具体实现源码。</p>\n<p>在ThreadPoolExecutor类中提供了四个构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadPoolExecutor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractExecutorService</span> </span>&#123;</div><div class=\"line\">   .....</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</div><div class=\"line\">           BlockingQueue&lt;Runnable&gt; workQueue)</span></span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</div><div class=\"line\">           BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory)</span></span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</div><div class=\"line\">           BlockingQueue&lt;Runnable&gt; workQueue,RejectedExecutionHandler handler)</span></span>;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,<span class=\"keyword\">int</span> maximumPoolSize,<span class=\"keyword\">long</span> keepAliveTime,TimeUnit unit,</div><div class=\"line\">       BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span></span>;</div><div class=\"line\">   ...</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//corePoolSize： 线程池维护线程的最少数量  </span></div><div class=\"line\"><span class=\"comment\">//maximumPoolSize：线程池维护线程的最大数量  </span></div><div class=\"line\"><span class=\"comment\">//keepAliveTime： 线程池维护线程所允许的空闲时间  </span></div><div class=\"line\"><span class=\"comment\">//unit： 线程池维护线程所允许的空闲时间的单位  </span></div><div class=\"line\"><span class=\"comment\">//workQueue： 线程池所使用的缓冲队列  </span></div><div class=\"line\"><span class=\"comment\">//handler： 线程池对拒绝任务的处理策略</span></div></pre></td></tr></table></figure>\n<p>从上面的代码可以得知，ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造器，事实上，通过观察每个构造器的源码具体实现，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。</p>\n<ul>\n<li><p><strong>corePoolSize</strong>：核心池的大小。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</p>\n</li>\n<li><p><strong>maximumPoolSize</strong>：线程池最大线程数，它表示在线程池中最多能创建多少个线程；</p>\n</li>\n<li><p><strong>keepAliveTime</strong>：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</p>\n</li>\n<li><p><strong>unit</strong>：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">TimeUnit.DAYS;              <span class=\"comment\">//天</span></div><div class=\"line\">TimeUnit.HOURS;             <span class=\"comment\">//小时</span></div><div class=\"line\">TimeUnit.MINUTES;           <span class=\"comment\">//分钟</span></div><div class=\"line\">TimeUnit.SECONDS;           <span class=\"comment\">//秒</span></div><div class=\"line\">TimeUnit.MILLISECONDS;      <span class=\"comment\">//毫秒</span></div><div class=\"line\">TimeUnit.MICROSECONDS;      <span class=\"comment\">//微妙</span></div><div class=\"line\">TimeUnit.NANOSECONDS;       <span class=\"comment\">//纳秒</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>workQueue</strong>：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ArrayBlockingQueue;</div><div class=\"line\">LinkedBlockingQueue;</div><div class=\"line\">SynchronousQueue;</div></pre></td></tr></table></figure>\n<p>ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。</p>\n</li>\n<li><p><strong>threadFactory</strong>：线程工厂，主要用来创建线程；</p>\n</li>\n<li><p><strong>handler</strong>：表示当拒绝处理任务时的策略，有以下四种取值：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 </div><div class=\"line\">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </div><div class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/inherit.png\" algin=\"center\"/></div>\n\n<p>由图中我们可得知ThreadPoolExecutor继承了AbstractExecutorService，AbstractExecutorService是一个抽象类，它实现了ExecutorService接口，而ExecutorService又是继承了Executor接口。</p>\n<h1 id=\"线程池实现原理\"><a href=\"#线程池实现原理\" class=\"headerlink\" title=\"线程池实现原理\"></a>线程池实现原理</h1><h2 id=\"线程池状态\"><a href=\"#线程池状态\" class=\"headerlink\" title=\"线程池状态\"></a>线程池状态</h2><p>在ThreadPoolExecutor中定义了几个static final变量表示线程池的各个状态：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicInteger ctl = <span class=\"keyword\">new</span> AtomicInteger(ctlOf(RUNNING, <span class=\"number\">0</span>));</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> COUNT_BITS = Integer.SIZE - <span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CAPACITY   = (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"> * RUNNING -&gt; SHUTDOWN</div><div class=\"line\">     *    <span class=\"function\">On invocation of <span class=\"title\">shutdown</span><span class=\"params\">()</span>, perhaps implicitly in <span class=\"title\">finalize</span><span class=\"params\">()</span></div><div class=\"line\">     * <span class=\"params\">(RUNNING or SHUTDOWN)</span> -&gt; STOP</div><div class=\"line\">     *    On invocation of <span class=\"title\">shutdownNow</span><span class=\"params\">()</span></div><div class=\"line\">     * SHUTDOWN -&gt; TIDYING</div><div class=\"line\">     *    When both queue and pool are empty</div><div class=\"line\">     * STOP -&gt; TIDYING</div><div class=\"line\">     *    When pool is empty</div><div class=\"line\">     * TIDYING -&gt; TERMINATED</div><div class=\"line\">     *    When the <span class=\"title\">terminated</span><span class=\"params\">()</span> hook method has completed</div><div class=\"line\">     **/</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> RUNNING    </span>= -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SHUTDOWN   =  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> STOP       =  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TIDYING    =  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TERMINATED =  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;</div></pre></td></tr></table></figure>\n<p>下面的几个static final变量表示runState可能的几个取值。</p>\n<ol>\n<li><strong>RUNNING</strong>：允许接收新任务并且处理队列中的任务。</li>\n<li><strong>SHUTDOWN</strong>：不再接收新的任务，仅消化完队列中的任务。</li>\n<li><strong>STOP</strong>：不仅不再接收新的任务，连队列中的任务都不再消化处理了，并且尝试中断正在执行任务的线程。</li>\n<li><strong>TIDYING</strong>：所有任务被终止了，工作线程数<code>workCount</code>也被设为0，线程的状态也被设为<strong>TIDYING</strong>，并开始调用钩子函数terminated()。</li>\n<li><strong>TERMINATED</strong>：钩子函数<code>terminated()</code>执行完毕。</li>\n</ol>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-3/threadpoolexcetor/status.png\" algin=\"center\"/></div>\n\n<h2 id=\"任务的执行\"><a href=\"#任务的执行\" class=\"headerlink\" title=\"任务的执行\"></a>任务的执行</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> BlockingQueue&lt;Runnable&gt; workQueue;              <span class=\"comment\">//任务缓存队列，用来存放等待执行的任务</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReentrantLock mainLock = <span class=\"keyword\">new</span> ReentrantLock();   <span class=\"comment\">//线程池的主要状态锁，对线程池状态（比如线程池大小/runState等）的改变都要使用这个锁</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HashSet&lt;Worker&gt; workers = <span class=\"keyword\">new</span> HashSet&lt;Worker&gt;();  <span class=\"comment\">//用来存放工作集</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">long</span> keepAliveTime;    <span class=\"comment\">//线程存活时间   </span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> allowCoreThreadTimeOut;   <span class=\"comment\">//是否允许为核心线程设置存活时间</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> corePoolSize;     <span class=\"comment\">//核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> maximumPoolSize;   <span class=\"comment\">//线程池最大能容忍的线程数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> poolSize;       <span class=\"comment\">//线程池中当前的线程数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> RejectedExecutionHandler handler; <span class=\"comment\">//任务拒绝策略</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> ThreadFactory threadFactory;   <span class=\"comment\">//线程工厂，用来创建线程</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> largestPoolSize;   <span class=\"comment\">//用来记录线程池中曾经出现过的最大线程数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> completedTaskCount;   <span class=\"comment\">//用来记录已经执行完毕的任务个数</span></div></pre></td></tr></table></figure>\n<p>每个变量的作用都已经标明出来了，这里要重点解释一下<em>corePoolSize</em>、<em>maximumPoolSize</em>、<em>largestPoolSize</em>三个变量。</p>\n<ol>\n<li>如果当前线程池中的线程数目小于corePoolSize，则每来一个任务，就会创建一个线程去执行这个任务；</li>\n<li>如果当前线程池中的线程数目&gt;=corePoolSize，则每来一个任务，会尝试将其添加到任务缓存队列当中，若添加成功，则该任务会等待空闲线程将其取出去执行；若添加失败（一般来说是任务缓存队列已满），则会尝试创建新的线程去执行这个任务；</li>\n<li>如果当前线程池中的线程数目达到maximumPoolSize，则会采取任务拒绝策略进行处理；</li>\n<li>如果线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止，直至线程池中的线程数目不大于corePoolSize；如果允许为核心池中的线程设置存活时间，那么核心池中的线程空闲时间超过keepAliveTime，线程也会被终止。</li>\n</ol>\n<h2 id=\"任务缓存及排队策略\"><a href=\"#任务缓存及排队策略\" class=\"headerlink\" title=\"任务缓存及排队策略\"></a>任务缓存及排队策略</h2><p>在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。workQueue的类型为BlockingQueue<code>&lt;Runnable&gt;</code>，通常可以取下面三种类型：</p>\n<p>1）<strong>ArrayBlockingQueue</strong>：<code>有界队列</code>，有助于防止资源耗尽，但是可能较难调整和控制。队列大小和最大池大小可能需要相互折衷：使用大型队列和小型池可以最大限度地降低 CPU 使用率、操作系统资源和上下文切换开销，但是可能导致人工降低吞吐量。如果任务频繁阻塞（例如，如果它们是 I/O 边界），则系统可能为超过许可的更多线程安排时间。使用小型队列通常要求较大的池大小，CPU 使用率较高，但是可能遇到不可接受的调度开销，这样也会降低吞吐量。</p>\n<p>2）<strong>LinkedBlockingQueue</strong>：<code>无界队列</code>，将导致在所有 corePoolSize 线程都忙时新任务在队列中等待。这样，创建的线程就不会超过 corePoolSize。（因此，maximumPoolSize 的值也就无效了。）当每个任务完全独立于其他任务，即任务执行互不影响时，适合于使用无界队列；例如，在 Web 页服务器中。这种排队可用于处理瞬态突发请求，当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>\n<p>3）<strong>SynchronousQueue</strong>：工作队列的<code>默认选项是 SynchronousQueue</code>，它将任务直接提交给线程而不保持它们。在此，如果不存在可用于立即运行任务的线程，则试图把任务加入队列将失败，因此会构造一个新的线程。此策略可以避免在处理可能具有内部依赖性的请求集时出现锁。直接提交通常要求无界 maximumPoolSizes 以避免拒绝新提交的任务。当命令以超过队列所能处理的平均数连续到达时，此策略允许无界线程具有增长的可能性。</p>\n<h2 id=\"任务拒绝策略\"><a href=\"#任务拒绝策略\" class=\"headerlink\" title=\"任务拒绝策略\"></a>任务拒绝策略</h2><p>当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThreadPoolExecutor.AbortPolicy:\t\t\t丢弃任务并抛出RejectedExecutionException异常。</div><div class=\"line\">ThreadPoolExecutor.DiscardPolicy：   \t也是丢弃任务，但是不抛出异常。</div><div class=\"line\">ThreadPoolExecutor.DiscardOldestPolicy： 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</div><div class=\"line\">ThreadPoolExecutor.CallerRunsPolicy：\t由调用线程处理该任务</div></pre></td></tr></table></figure>\n<h2 id=\"线程池的关闭\"><a href=\"#线程池的关闭\" class=\"headerlink\" title=\"线程池的关闭\"></a>线程池的关闭</h2><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()：</p>\n<ul>\n<li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务。</li>\n<li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。</li>\n</ul>\n<h2 id=\"线程池容量的动态调整\"><a href=\"#线程池容量的动态调整\" class=\"headerlink\" title=\"线程池容量的动态调整\"></a>线程池容量的动态调整</h2><p>ThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()：</p>\n<ul>\n<li>setCorePoolSize：设置核心池大小。</li>\n<li>setMaximumPoolSize：设置线程池最大能创建的线程数目大小。</li>\n</ul>\n<h1 id=\"使用Executors创建线程池\"><a href=\"#使用Executors创建线程池\" class=\"headerlink\" title=\"使用Executors创建线程池\"></a>使用Executors创建线程池</h1><p>Executors提供的工厂方法，可以创建以下四种类型线程池：</p>\n<ul>\n<li><strong>newFixedThreadPool：</strong>该方法将用于创建一个固定大小的线程池（此时corePoolSize = maxPoolSize），每提交一个任务就创建一个线程池，直到线程池达到最大数量，线程池的规模在此后不会发生任何变化；</li>\n</ul>\n<ul>\n<li><strong>newCachedThreadPool：</strong>该方法创建了一个可缓存的线程池，（此时corePoolSize = 0，maxPoolSize = Integer.MAX_VALUE），空闲线程超过60秒就会被自动回收，该线程池存在的风险是，如果服务器应用达到请求高峰期时，会不断创建新的线程，直到内存耗尽；</li>\n</ul>\n<ul>\n<li><strong>newSingleThreadExecutor：</strong>该方法创建了一个单线程的线程池，该线程池按照任务在队列中的顺序串行执行（如：<strong>FIFO</strong>、<strong>LIFO</strong>、优先级）；</li>\n</ul>\n<ul>\n<li><strong>newScheduledThreadPool：</strong>该方法创建了一个固定长度的线程池，可以以延迟或者定时的方式执行任务；</li>\n</ul>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\tThreadFactory factory = <span class=\"keyword\">new</span> ThreadFactoryBuilder().setNameFormat(<span class=\"string\">\"test\"</span>).build();</div><div class=\"line\">\t\tThreadPoolExecutor executor = <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">200</span>, TimeUnit.MILLISECONDS,</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class=\"number\">5</span>),factory,<span class=\"keyword\">new</span> ThreadPoolExecutor.CallerRunsPolicy());</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</div><div class=\"line\">\t\t\tMyTask myTask = <span class=\"keyword\">new</span> MyTask(i);</div><div class=\"line\">\t\t\texecutor.execute(myTask);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"线程池中线程数目：\"</span> + executor.getPoolSize() + <span class=\"string\">\"，队列中等待执行的任务数目：\"</span> + executor.getQueue().size()</div><div class=\"line\">\t\t\t\t\t+ <span class=\"string\">\"，已执行玩别的任务数目：\"</span> + executor.getCompletedTaskCount());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\texecutor.shutdown();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> taskNum;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyTask</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.taskNum = num;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"正在执行task \"</span> + taskNum);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tThread.currentThread().sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"task \"</span> + taskNum + <span class=\"string\">\"执行完毕\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com//2018-3/threadpoolexcetor/result.png\" algin=\"center\"/></div>\n\n<h2 id=\"合理配置线程池大小\"><a href=\"#合理配置线程池大小\" class=\"headerlink\" title=\"合理配置线程池大小\"></a>合理配置线程池大小</h2><p>一般需要根据任务的类型来配置线程池大小：</p>\n<ul>\n<li>如果是<strong>CPU密集型任务</strong>，就需要尽量压榨CPU，参考值可以设为 <strong><em>N</em>CPU+1</strong></li>\n</ul>\n<ul>\n<li>如果是<strong>IO密集型任务</strong>，参考值可以设置为2<em>*N</em>CPU</li>\n</ul>\n<p>这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&amp;mid=2651935366&amp;idx=1&amp;sn=ee82f1deb13192c5f1a20721a0c1abbe&amp;chksm=8d0f3dc8ba78b4de93a26cdb6eea3b3804149a7fe88e9e8114757b0aa2cd39a67ad10e6f42ee&amp;mpshare=1&amp;scene=1&amp;srcid=0317Fqotu8V4wTWmJ07lgTbS#rd\"><strong><em>Java并发编程：线程池的使用</em></strong></a></p>"},{"title":"说说JSON和JSONP","date":"2018-01-16T06:41:09.000Z","_content":"\n# 前言\n\n说到AJAX就会不可避免的面临两个问题，**第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？**这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。\n\nJSON和JSONP虽然只有一个字母的差别，但其实他们根本不是一回事：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种`非官方跨域数据交互协议`。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息传递双方约定的方法。<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/JSON_JSONP/jsonp-json-with-padding.gif\" algin=\"center\"/></div><!-- more -->\n\n# 什么是JSON\n\n前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。\n\n## JSON的优点\n\n1. 基于纯文本，跨平台传递极其简单；\n2. JavaScript原生支持，后台语言几乎全部支持；\n3. 轻量级数据格式，占用字符数量极少，特别适合互联网传递；\n4. 可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；\n5. 容易编写和解析，当然前提是你要知道数据结构；\n\nJSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。\n\n## JSON的格式或者叫规则\n\nJSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。\n\n1. JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号\"\"是定义符。\n2. 大括号{}用来描述一组“不同类型的无序键值对集合”（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组“相同类型的有序数据集合”（可对应OOP的数组）。\n3. 上述两种集合中若有多个子项，则通过英文逗号,进行分隔。\n4. 键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号\"\"，以便于不同语言的解析。\n5. JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。\n\n## JSON的实例\n\n```javascript\n// 描述一个人\nvar person = {\n    \"Name\": \"Bob\",\n    \"Age\": 32,\n    \"Company\": \"IBM\",\n    \"Engineer\": true\n}\n\n// 获取这个人的信息\nvar personAge = person.Age;\n\n// 描述几个人\nvar members = [\n    {\n        \"Name\": \"Bob\",\n        \"Age\": 32,\n        \"Company\": \"IBM\",\n        \"Engineer\": true\n    },\n    {\n        \"Name\": \"John\",\n        \"Age\": 20,\n        \"Company\": \"Oracle\",\n        \"Engineer\": false\n    },\n    {\n        \"Name\": \"Henry\",\n        \"Age\": 45,\n        \"Company\": \"Microsoft\",\n        \"Engineer\": false\n    }\n]\n\n// 读取其中John的公司名称\nvar johnsCompany = members[1].Company;\n\n// 描述一次会议\nvar conference = {\n    \"Conference\": \"Future Marketing\",\n    \"Date\": \"2012-6-1\",\n    \"Address\": \"Beijing\",\n    \"Members\": \n    [\n        {\n            \"Name\": \"Bob\",\n            \"Age\": 32,\n            \"Company\": \"IBM\",\n            \"Engineer\": true\n        },\n        {\n            \"Name\": \"John\",\n            \"Age\": 20,\n            \"Company\": \"Oracle\",\n            \"Engineer\": false\n        },\n        {\n            \"Name\": \"Henry\",\n            \"Age\": 45,\n            \"Company\": \"Microsoft\",\n            \"Engineer\": false\n        }\n    ]\n}\n\n// 读取参会者Henry是否工程师\nvar henryIsAnEngineer = conference.Members[2].Engineer;\n```\n\n关于JSON，就说这么多，更多细节请在开发过程中查阅资料深入学习。\n\n# 什么是JSONP\n\n## JSONP的产生\n\n其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，试着用自己的方式来阐释一下这个问题。\n\n1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；\n\n2、不过我们又发现，Web页面上`调用js文件时则不受是否跨域的影响`（不仅如此，我们还发现凡是拥有\"src\"这个属性的标签都拥有跨域的能力，比如`<script>`、`<img>`、`<iframe>`）；\n\n3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；\n\n4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；\n\n5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。\n\n6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。\n\n7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。\n\n## JSONP的客户端具体实现\n\n不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：\n\n1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。\n\n远程服务器remoteserver.com根目录下有个remote.js文件代码如下：\n\n```javascript\nalert('我是远程文件');\n```\n\n本地服务器localserver.com下有个jsonp.html页面代码如下：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。\n\n2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。\n\njsonp.html页面代码如下：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\">\n    var localHandler = function(data){\n        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);\n    };\n    </script>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```\n\nremote.js文件代码如下：\n\n```javascript\nlocalHandler({\"result\":\"我是远程js带来的数据\"});\n```\n\n运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。\n\n3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。\n\n看jsonp.html页面的代码：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\">\n    // 得到航班信息查询结果后的回调函数\n    var flightHandler = function(data){\n        alert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');\n    };\n    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\n    var url = \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&callback=flightHandler\";\n    // 创建script标签，设置其属性\n    var script = document.createElement('script');\n    script.setAttribute('src', url);\n    // 把script标签加入head，此时调用开始\n    document.getElementsByTagName('head')[0].appendChild(script); \n    </script>\n</head>\n<body>\n</body>\n</html>\n```\n\n这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。\n\n我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。\n\nOK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：\n\n```javascript\nflightHandler({\n    \"code\": \"CA1998\",\n    \"price\": 1780,\n    \"tickets\": 5\n});\n```\n\n我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！\n\n4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。\n\n什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n <html xmlns=\"http://www.w3.org/1999/xhtml\" >\n <head>\n     <title>Untitled Page</title>\n      <script type=\"text/javascript\" src=jquery.min.js\"></script>\n      <script type=\"text/javascript\">\n     jQuery(document).ready(function(){ \n        $.ajax({\n             type: \"get\",\n             async: false,\n             url: \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998\",\n             dataType: \"jsonp\",\n             jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n             jsonpCallback:\"flightHandler\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n             success: function(json){\n                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');\n             },\n             error: function(){\n                 alert('fail');\n             }\n         });\n     });\n     </script>\n     </head>\n  <body>\n  </body>\n </html>\n```\n\n是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？\n\n# 总结\n\n1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；\n\n2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而**jsonp的核心则是动态添加`<script>`标签来调用服务器提供的js脚本**。\n\n3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。\n\n4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。\n\n总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！\n\n转自：[*说说JSON和JSONP，也许你会豁然开朗，含jQuery用例*](http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html)","source":"_posts/说说JSON和JSONP.md","raw":"---\ntitle: 说说JSON和JSONP\ndate: 2018-01-16 14:41:09\ntags: [前端,tips]\ncategories: technology\n---\n\n# 前言\n\n说到AJAX就会不可避免的面临两个问题，**第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？**这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。\n\nJSON和JSONP虽然只有一个字母的差别，但其实他们根本不是一回事：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种`非官方跨域数据交互协议`。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息传递双方约定的方法。<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/JSON_JSONP/jsonp-json-with-padding.gif\" algin=\"center\"/></div><!-- more -->\n\n# 什么是JSON\n\n前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。\n\n## JSON的优点\n\n1. 基于纯文本，跨平台传递极其简单；\n2. JavaScript原生支持，后台语言几乎全部支持；\n3. 轻量级数据格式，占用字符数量极少，特别适合互联网传递；\n4. 可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；\n5. 容易编写和解析，当然前提是你要知道数据结构；\n\nJSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。\n\n## JSON的格式或者叫规则\n\nJSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。\n\n1. JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号\"\"是定义符。\n2. 大括号{}用来描述一组“不同类型的无序键值对集合”（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组“相同类型的有序数据集合”（可对应OOP的数组）。\n3. 上述两种集合中若有多个子项，则通过英文逗号,进行分隔。\n4. 键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号\"\"，以便于不同语言的解析。\n5. JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。\n\n## JSON的实例\n\n```javascript\n// 描述一个人\nvar person = {\n    \"Name\": \"Bob\",\n    \"Age\": 32,\n    \"Company\": \"IBM\",\n    \"Engineer\": true\n}\n\n// 获取这个人的信息\nvar personAge = person.Age;\n\n// 描述几个人\nvar members = [\n    {\n        \"Name\": \"Bob\",\n        \"Age\": 32,\n        \"Company\": \"IBM\",\n        \"Engineer\": true\n    },\n    {\n        \"Name\": \"John\",\n        \"Age\": 20,\n        \"Company\": \"Oracle\",\n        \"Engineer\": false\n    },\n    {\n        \"Name\": \"Henry\",\n        \"Age\": 45,\n        \"Company\": \"Microsoft\",\n        \"Engineer\": false\n    }\n]\n\n// 读取其中John的公司名称\nvar johnsCompany = members[1].Company;\n\n// 描述一次会议\nvar conference = {\n    \"Conference\": \"Future Marketing\",\n    \"Date\": \"2012-6-1\",\n    \"Address\": \"Beijing\",\n    \"Members\": \n    [\n        {\n            \"Name\": \"Bob\",\n            \"Age\": 32,\n            \"Company\": \"IBM\",\n            \"Engineer\": true\n        },\n        {\n            \"Name\": \"John\",\n            \"Age\": 20,\n            \"Company\": \"Oracle\",\n            \"Engineer\": false\n        },\n        {\n            \"Name\": \"Henry\",\n            \"Age\": 45,\n            \"Company\": \"Microsoft\",\n            \"Engineer\": false\n        }\n    ]\n}\n\n// 读取参会者Henry是否工程师\nvar henryIsAnEngineer = conference.Members[2].Engineer;\n```\n\n关于JSON，就说这么多，更多细节请在开发过程中查阅资料深入学习。\n\n# 什么是JSONP\n\n## JSONP的产生\n\n其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，试着用自己的方式来阐释一下这个问题。\n\n1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；\n\n2、不过我们又发现，Web页面上`调用js文件时则不受是否跨域的影响`（不仅如此，我们还发现凡是拥有\"src\"这个属性的标签都拥有跨域的能力，比如`<script>`、`<img>`、`<iframe>`）；\n\n3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；\n\n4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；\n\n5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。\n\n6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。\n\n7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。\n\n## JSONP的客户端具体实现\n\n不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：\n\n1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。\n\n远程服务器remoteserver.com根目录下有个remote.js文件代码如下：\n\n```javascript\nalert('我是远程文件');\n```\n\n本地服务器localserver.com下有个jsonp.html页面代码如下：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```\n\n毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。\n\n2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。\n\njsonp.html页面代码如下：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\">\n    var localHandler = function(data){\n        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);\n    };\n    </script>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n</head>\n<body>\n</body>\n</html>\n```\n\nremote.js文件代码如下：\n\n```javascript\nlocalHandler({\"result\":\"我是远程js带来的数据\"});\n```\n\n运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。\n\n3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。\n\n看jsonp.html页面的代码：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <title></title>\n    <script type=\"text/javascript\">\n    // 得到航班信息查询结果后的回调函数\n    var flightHandler = function(data){\n        alert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');\n    };\n    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\n    var url = \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&callback=flightHandler\";\n    // 创建script标签，设置其属性\n    var script = document.createElement('script');\n    script.setAttribute('src', url);\n    // 把script标签加入head，此时调用开始\n    document.getElementsByTagName('head')[0].appendChild(script); \n    </script>\n</head>\n<body>\n</body>\n</html>\n```\n\n这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。\n\n我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。\n\nOK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：\n\n```javascript\nflightHandler({\n    \"code\": \"CA1998\",\n    \"price\": 1780,\n    \"tickets\": 5\n});\n```\n\n我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！\n\n4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。\n\n什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n <html xmlns=\"http://www.w3.org/1999/xhtml\" >\n <head>\n     <title>Untitled Page</title>\n      <script type=\"text/javascript\" src=jquery.min.js\"></script>\n      <script type=\"text/javascript\">\n     jQuery(document).ready(function(){ \n        $.ajax({\n             type: \"get\",\n             async: false,\n             url: \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998\",\n             dataType: \"jsonp\",\n             jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n             jsonpCallback:\"flightHandler\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n             success: function(json){\n                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');\n             },\n             error: function(){\n                 alert('fail');\n             }\n         });\n     });\n     </script>\n     </head>\n  <body>\n  </body>\n </html>\n```\n\n是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？\n\n# 总结\n\n1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；\n\n2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而**jsonp的核心则是动态添加`<script>`标签来调用服务器提供的js脚本**。\n\n3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。\n\n4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。\n\n总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！\n\n转自：[*说说JSON和JSONP，也许你会豁然开朗，含jQuery用例*](http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html)","slug":"说说JSON和JSONP","published":1,"updated":"2018-03-13T05:54:27.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u4e003c3gfkuuo8p90i","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>说到AJAX就会不可避免的面临两个问题，<strong>第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？</strong>这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。</p>\n<p>JSON和JSONP虽然只有一个字母的差别，但其实他们根本不是一回事：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种<code>非官方跨域数据交互协议</code>。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息传递双方约定的方法。<div align=\"center\"><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/JSON_JSONP/jsonp-json-with-padding.gif\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"什么是JSON\"><a href=\"#什么是JSON\" class=\"headerlink\" title=\"什么是JSON\"></a>什么是JSON</h1><p>前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。</p>\n<h2 id=\"JSON的优点\"><a href=\"#JSON的优点\" class=\"headerlink\" title=\"JSON的优点\"></a>JSON的优点</h2><ol>\n<li>基于纯文本，跨平台传递极其简单；</li>\n<li>JavaScript原生支持，后台语言几乎全部支持；</li>\n<li>轻量级数据格式，占用字符数量极少，特别适合互联网传递；</li>\n<li>可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；</li>\n<li>容易编写和解析，当然前提是你要知道数据结构；</li>\n</ol>\n<p>JSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。</p>\n<h2 id=\"JSON的格式或者叫规则\"><a href=\"#JSON的格式或者叫规则\" class=\"headerlink\" title=\"JSON的格式或者叫规则\"></a>JSON的格式或者叫规则</h2><p>JSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。</p>\n<ol>\n<li>JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号””是定义符。</li>\n<li>大括号{}用来描述一组“不同类型的无序键值对集合”（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组“相同类型的有序数据集合”（可对应OOP的数组）。</li>\n<li>上述两种集合中若有多个子项，则通过英文逗号,进行分隔。</li>\n<li>键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号””，以便于不同语言的解析。</li>\n<li>JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。</li>\n</ol>\n<h2 id=\"JSON的实例\"><a href=\"#JSON的实例\" class=\"headerlink\" title=\"JSON的实例\"></a>JSON的实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 描述一个人</span></div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Age\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">    <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"IBM\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取这个人的信息</span></div><div class=\"line\"><span class=\"keyword\">var</span> personAge = person.Age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 描述几个人</span></div><div class=\"line\"><span class=\"keyword\">var</span> members = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Age\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">        <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"IBM\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Oracle\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Henry\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Age\"</span>: <span class=\"number\">45</span>,</div><div class=\"line\">        <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Microsoft\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 读取其中John的公司名称</span></div><div class=\"line\"><span class=\"keyword\">var</span> johnsCompany = members[<span class=\"number\">1</span>].Company;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 描述一次会议</span></div><div class=\"line\"><span class=\"keyword\">var</span> conference = &#123;</div><div class=\"line\">    <span class=\"string\">\"Conference\"</span>: <span class=\"string\">\"Future Marketing\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Date\"</span>: <span class=\"string\">\"2012-6-1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Address\"</span>: <span class=\"string\">\"Beijing\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Members\"</span>: </div><div class=\"line\">    [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Age\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">            <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"IBM\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Oracle\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Henry\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Age\"</span>: <span class=\"number\">45</span>,</div><div class=\"line\">            <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Microsoft\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 读取参会者Henry是否工程师</span></div><div class=\"line\"><span class=\"keyword\">var</span> henryIsAnEngineer = conference.Members[<span class=\"number\">2</span>].Engineer;</div></pre></td></tr></table></figure>\n<p>关于JSON，就说这么多，更多细节请在开发过程中查阅资料深入学习。</p>\n<h1 id=\"什么是JSONP\"><a href=\"#什么是JSONP\" class=\"headerlink\" title=\"什么是JSONP\"></a>什么是JSONP</h1><h2 id=\"JSONP的产生\"><a href=\"#JSONP的产生\" class=\"headerlink\" title=\"JSONP的产生\"></a>JSONP的产生</h2><p>其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，试着用自己的方式来阐释一下这个问题。</p>\n<p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；</p>\n<p>2、不过我们又发现，Web页面上<code>调用js文件时则不受是否跨域的影响</code>（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>）；</p>\n<p>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</p>\n<p>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</p>\n<p>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</p>\n<p>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</p>\n<p>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>\n<h2 id=\"JSONP的客户端具体实现\"><a href=\"#JSONP的客户端具体实现\" class=\"headerlink\" title=\"JSONP的客户端具体实现\"></a>JSONP的客户端具体实现</h2><p>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>\n<p>1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。</p>\n<p>远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"string\">'我是远程文件'</span>);</div></pre></td></tr></table></figure>\n<p>本地服务器localserver.com下有个jsonp.html页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://remoteserver.com/remote.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</p>\n<p>2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。</p>\n<p>jsonp.html页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> localHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：'</span> + data.result);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://remoteserver.com/remote.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>remote.js文件代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">localHandler(&#123;<span class=\"string\">\"result\"</span>:<span class=\"string\">\"我是远程js带来的数据\"</span>&#125;);</div></pre></td></tr></table></figure>\n<p>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>\n<p>3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</p>\n<p>看jsonp.html页面的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">// 得到航班信息查询结果后的回调函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> flightHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'你查询的航班结果是：票价 '</span> + data.price + <span class=\"string\">' 元，'</span> + <span class=\"string\">'余票 '</span> + data.tickets + <span class=\"string\">' 张。'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 创建script标签，设置其属性</span></div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    script.setAttribute(<span class=\"string\">'src'</span>, url);</div><div class=\"line\">    <span class=\"comment\">// 把script标签加入head，此时调用开始</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script); </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。</p>\n<p>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</p>\n<p>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">flightHandler(&#123;</div><div class=\"line\">    <span class=\"string\">\"code\"</span>: <span class=\"string\">\"CA1998\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">1780</span>,</div><div class=\"line\">    <span class=\"string\">\"tickets\"</span>: <span class=\"number\">5</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>\n<p>4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</p>\n<p>什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span> &gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Untitled Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">jquery.min.js</span>\"&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">     jQuery(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">             <span class=\"attr\">type</span>: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">             <span class=\"attr\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">             <span class=\"attr\">url</span>: <span class=\"string\">\"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998\"</span>,</div><div class=\"line\">             <span class=\"attr\">dataType</span>: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">             <span class=\"attr\">jsonp</span>: <span class=\"string\">\"callback\"</span>,<span class=\"comment\">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></div><div class=\"line\">             jsonpCallback:<span class=\"string\">\"flightHandler\"</span>,<span class=\"comment\">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据</span></div><div class=\"line\">             success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">                 alert(<span class=\"string\">'您查询到航班信息：票价： '</span> + json.price + <span class=\"string\">' 元，余票： '</span> + json.tickets + <span class=\"string\">' 张。'</span>);</div><div class=\"line\">             &#125;,</div><div class=\"line\">             <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                 alert(<span class=\"string\">'fail'</span>);</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;);</div><div class=\"line\">     &#125;);</div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</p>\n<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而<strong>jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本</strong>。</p>\n<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</p>\n<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>\n<p>总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！</p>\n<p>转自：<a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"external\"><em>说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</em></a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>说到AJAX就会不可避免的面临两个问题，<strong>第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？</strong>这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。</p>\n<p>JSON和JSONP虽然只有一个字母的差别，但其实他们根本不是一回事：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种<code>非官方跨域数据交互协议</code>。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息传递双方约定的方法。<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/JSON_JSONP/jsonp-json-with-padding.gif\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"什么是JSON\"><a href=\"#什么是JSON\" class=\"headerlink\" title=\"什么是JSON\"></a>什么是JSON</h1><p>前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。</p>\n<h2 id=\"JSON的优点\"><a href=\"#JSON的优点\" class=\"headerlink\" title=\"JSON的优点\"></a>JSON的优点</h2><ol>\n<li>基于纯文本，跨平台传递极其简单；</li>\n<li>JavaScript原生支持，后台语言几乎全部支持；</li>\n<li>轻量级数据格式，占用字符数量极少，特别适合互联网传递；</li>\n<li>可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；</li>\n<li>容易编写和解析，当然前提是你要知道数据结构；</li>\n</ol>\n<p>JSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。</p>\n<h2 id=\"JSON的格式或者叫规则\"><a href=\"#JSON的格式或者叫规则\" class=\"headerlink\" title=\"JSON的格式或者叫规则\"></a>JSON的格式或者叫规则</h2><p>JSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。</p>\n<ol>\n<li>JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号””是定义符。</li>\n<li>大括号{}用来描述一组“不同类型的无序键值对集合”（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组“相同类型的有序数据集合”（可对应OOP的数组）。</li>\n<li>上述两种集合中若有多个子项，则通过英文逗号,进行分隔。</li>\n<li>键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号””，以便于不同语言的解析。</li>\n<li>JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。</li>\n</ol>\n<h2 id=\"JSON的实例\"><a href=\"#JSON的实例\" class=\"headerlink\" title=\"JSON的实例\"></a>JSON的实例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 描述一个人</span></div><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Age\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">    <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"IBM\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 获取这个人的信息</span></div><div class=\"line\"><span class=\"keyword\">var</span> personAge = person.Age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 描述几个人</span></div><div class=\"line\"><span class=\"keyword\">var</span> members = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Age\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">        <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"IBM\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">        <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Oracle\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Henry\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Age\"</span>: <span class=\"number\">45</span>,</div><div class=\"line\">        <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Microsoft\"</span>,</div><div class=\"line\">        <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 读取其中John的公司名称</span></div><div class=\"line\"><span class=\"keyword\">var</span> johnsCompany = members[<span class=\"number\">1</span>].Company;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 描述一次会议</span></div><div class=\"line\"><span class=\"keyword\">var</span> conference = &#123;</div><div class=\"line\">    <span class=\"string\">\"Conference\"</span>: <span class=\"string\">\"Future Marketing\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Date\"</span>: <span class=\"string\">\"2012-6-1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Address\"</span>: <span class=\"string\">\"Beijing\"</span>,</div><div class=\"line\">    <span class=\"string\">\"Members\"</span>: </div><div class=\"line\">    [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Bob\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Age\"</span>: <span class=\"number\">32</span>,</div><div class=\"line\">            <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"IBM\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"John\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Age\"</span>: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Oracle\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"Name\"</span>: <span class=\"string\">\"Henry\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Age\"</span>: <span class=\"number\">45</span>,</div><div class=\"line\">            <span class=\"string\">\"Company\"</span>: <span class=\"string\">\"Microsoft\"</span>,</div><div class=\"line\">            <span class=\"string\">\"Engineer\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 读取参会者Henry是否工程师</span></div><div class=\"line\"><span class=\"keyword\">var</span> henryIsAnEngineer = conference.Members[<span class=\"number\">2</span>].Engineer;</div></pre></td></tr></table></figure>\n<p>关于JSON，就说这么多，更多细节请在开发过程中查阅资料深入学习。</p>\n<h1 id=\"什么是JSONP\"><a href=\"#什么是JSONP\" class=\"headerlink\" title=\"什么是JSONP\"></a>什么是JSONP</h1><h2 id=\"JSONP的产生\"><a href=\"#JSONP的产生\" class=\"headerlink\" title=\"JSONP的产生\"></a>JSONP的产生</h2><p>其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，试着用自己的方式来阐释一下这个问题。</p>\n<p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；</p>\n<p>2、不过我们又发现，Web页面上<code>调用js文件时则不受是否跨域的影响</code>（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>）；</p>\n<p>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</p>\n<p>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</p>\n<p>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</p>\n<p>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</p>\n<p>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>\n<h2 id=\"JSONP的客户端具体实现\"><a href=\"#JSONP的客户端具体实现\" class=\"headerlink\" title=\"JSONP的客户端具体实现\"></a>JSONP的客户端具体实现</h2><p>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>\n<p>1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。</p>\n<p>远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(<span class=\"string\">'我是远程文件'</span>);</div></pre></td></tr></table></figure>\n<p>本地服务器localserver.com下有个jsonp.html页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://remoteserver.com/remote.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</p>\n<p>2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。</p>\n<p>jsonp.html页面代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> localHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：'</span> + data.result);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://remoteserver.com/remote.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>remote.js文件代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">localHandler(&#123;<span class=\"string\">\"result\"</span>:<span class=\"string\">\"我是远程js带来的数据\"</span>&#125;);</div></pre></td></tr></table></figure>\n<p>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>\n<p>3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</p>\n<p>看jsonp.html页面的代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"comment\">// 得到航班信息查询结果后的回调函数</span></div><div class=\"line\">    <span class=\"keyword\">var</span> flightHandler = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"string\">'你查询的航班结果是：票价 '</span> + data.price + <span class=\"string\">' 元，'</span> + <span class=\"string\">'余票 '</span> + data.tickets + <span class=\"string\">' 张。'</span>);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler\"</span>;</div><div class=\"line\">    <span class=\"comment\">// 创建script标签，设置其属性</span></div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">    script.setAttribute(<span class=\"string\">'src'</span>, url);</div><div class=\"line\">    <span class=\"comment\">// 把script标签加入head，此时调用开始</span></div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(script); </div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。</p>\n<p>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</p>\n<p>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">flightHandler(&#123;</div><div class=\"line\">    <span class=\"string\">\"code\"</span>: <span class=\"string\">\"CA1998\"</span>,</div><div class=\"line\">    <span class=\"string\">\"price\"</span>: <span class=\"number\">1780</span>,</div><div class=\"line\">    <span class=\"string\">\"tickets\"</span>: <span class=\"number\">5</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>\n<p>4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</p>\n<p>什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span> &gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Untitled Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">jquery.min.js</span>\"&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">     jQuery(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">             <span class=\"attr\">type</span>: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">             <span class=\"attr\">async</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">             <span class=\"attr\">url</span>: <span class=\"string\">\"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998\"</span>,</div><div class=\"line\">             <span class=\"attr\">dataType</span>: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">             <span class=\"attr\">jsonp</span>: <span class=\"string\">\"callback\"</span>,<span class=\"comment\">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></div><div class=\"line\">             jsonpCallback:<span class=\"string\">\"flightHandler\"</span>,<span class=\"comment\">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据</span></div><div class=\"line\">             success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>)</span>&#123;</div><div class=\"line\">                 alert(<span class=\"string\">'您查询到航班信息：票价： '</span> + json.price + <span class=\"string\">' 元，余票： '</span> + json.tickets + <span class=\"string\">' 张。'</span>);</div><div class=\"line\">             &#125;,</div><div class=\"line\">             <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                 alert(<span class=\"string\">'fail'</span>);</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;);</div><div class=\"line\">     &#125;);</div><div class=\"line\">     </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</p>\n<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而<strong>jsonp的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器提供的js脚本</strong>。</p>\n<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</p>\n<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>\n<p>总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！</p>\n<p>转自：<a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\"><em>说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</em></a></p>"},{"title":"静态服务器搭建及前端知识点","date":"2017-06-13T06:24:21.000Z","_content":"\n# 引言\n\n​\t虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"/>\n\n</div>\t\n\n<!-- more -->\n\n# NodeJS搭建静态资源服务器\n\n对`Node.js`只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：\n\n1. 下载node.js，进入node.js官网下载[***http://nodejs.cn***](http://nodejs.cn)对应的版本。\n2. 安装node.js。\n3. 启动node.js，在命令行输入命令安装需要的模块，依次执行命令。\n\n```html\nnpm install express\nnpm install request\nnpm install http-server \n```\n\n## 简单的静态服务器\n\n新建server.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar request = require('request');\nvar app = express();\n//启动端口为81\nvar port = process.env.PORT||81;\n \n//静态资源存放的路径\n app.use(express.static('E:/SmallTools/StaticServer'));\nhttp.createServer(app).listen(port);\nconsole.log(\"服务启动成功\");\n```\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"/>\n\n</div>\n\n启动server.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问a.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明搭建成功！\n\n## 带反向代理静态服务器搭建\n\n新建server-kaow-school.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar https = require('https');\nvar request = require('request');\nvar app = express();\n//app.disable('x-powered-by');\nvar port = process.env.PORT||81;\n\napp.use(express.static('E:/SmallTools/StaticServer'));\n\n\nfunction proxy(app,route,remoteDomain){\n    app.use(route,function(req,res){\n      var url = remoteDomain+req.url;\n      req.pipe(request(url)).pipe(res);\n    });\n}\n\n//10.9.4.215:8380  测试服务器ip\nproxy(app,'/163','http://www.163.com');\n//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');\n \nhttp.createServer(app).listen(port);\nconsole.log(\"服务器启动完成,请使用locahost:\"+port+\"访问\");\n```\n\n启动server-kaow-school.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问b.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"/>\n\n</div>\n\n访问/163\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明带反向代理的静态服务器搭建成功！\n\n# 前端知识点\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"/>\n\n</div>\n\n## JS字符串截取空白trim()的原型实现\n\n```javascript\nString.prototype.trim = function(){\n\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");\n}\n```\n\n## JS屏蔽键盘按键\n\n```javascript\n<body oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\" onbeforecopy=\"return false\" onmouseup=document.selection.empty() oncopy=document.selection.empty() onselect=document.selection.empty()></body> \n讲上面红色显示的插入到网页中就可以实现鼠标右击无效\n禁止选择\t\t\t\t\t\tonselectstart=\"return false\"    \t\t\t\n禁止拖放\t\t\t\t\t\tondragstart=\"return false\"\t\t\t\n禁止拷贝\t\t\t\t\t\tncopy=document.selection.empty()\t\t\n禁止保存(放在head里面)\t\t\t<noscript><iframe src=\"*.htm\"></iframe></noscript>\n禁止粘贴\t\t\t\t\t\t<input type=text onpaste=\"return false\">\n关闭输入法\t\t\t\t\t<input style=\"ime-mode:disabled\">\n屏蔽鼠标右键\t\t\t\t\t function document.oncontextmenu(){event.returnValue=false;}\n屏蔽F1帮助\t\t\t\t\tfunction window.onhelp(){return false} \n\n屏蔽其他键\nfunction document.onkeydown() { \n   if ((window.event.altKey)&& \n   \t((window.event.keyCode==37)||\t //屏蔽 Alt+ 方向键 ← \n \t  (window.event.keyCode==39))) \t\t//屏蔽 Alt+ 方向键 → { \n   \t alert(\"不准你使用ALT+方向键前进或后退网页！\"); \n \t   event.returnValue=false; \n   } \n    /* 注：这还不是真正地屏蔽 Alt+ 方向键， \n    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， \n    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 \n    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/ \n   if ((event.keyCode==8)   ||                 //屏蔽退格删除键 \n \t  (event.keyCode==116)||                 //屏蔽 F5 刷新键 \n \t  (event.ctrlKey && event.keyCode==82)){ //Ctrl + R \n \t  event.keyCode=0; \n    \tevent.returnValue=false; \n    } \n屏蔽F11    if (event.keyCode==122){event.keyCode=0;event.returnValue=false;}\n屏蔽\t\t Ctrl+n    if (event.ctrlKey && event.keyCode==78) event.returnValue=false; \n   if (event.shiftKey && event.keyCode==121)   event.returnValue=false;   //屏蔽 shift+F10 \n   if (window.event.srcElement.tagName == \"A\" && window.event.shiftKey)  \n   window.event.returnValue = false;          //屏蔽 shift 加鼠标左键新开一网页 \n   if ((window.event.altKey)&&(window.event.keyCode==115)){        //屏蔽Alt+F4 \n   window.showModelessDialog(\"about:blank\",\"\",\"dialogWidth:1px;dialogheight:1px\"); \n   \t\treturn false; \n   } \n}\n\n屏蔽打印：\n<style> \n@media print{ \n* {display:none} \n} \n</style>\n```\n\n## HTML之间传值(通过解析url)\n\n```javascript\nvar hrefInfo = getUrlVars(window.location.href); // 得到参数信息\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n\t}\n\n//解析url中的参数\nfunction getUrlVars(hrf) {\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n## Jquery获取radio,checkbox\n\n```javascript\n//获取radio的id                          \n$(\"input[name='r']:checked\").attr(\"id\");  \n//获得checkbox数目\n$(\"input[name='c']:checked\").length;\n//遍历checkbox\n$(\"input[name='c']:check\").eq(i).attr(\"id\");\n//全选checkbox\n$(\"input[name='c']:checkbox\").attr(\"checked\",\"true\");\n//获取选中的checkbox  \n$(\"input[name='c']:checked\").map(function(){return $(this).val();}).get().join(\",\");\n//获取下拉框选中的id                     \n$(\"#s option:selected\").attr(\"value\");\n```\n\n## Jquery页面查询(数据量大时禁用)\n\n```javascript\n function search(){\n        var nameSearch = $(\"#itemName\").val(); //搜索框ID\n        var tableObj = $(\"#itemList tr:gt(0)\"); // table的ID\n        if(nameSearch.trim()!=\"\"){\n             tableObj.hide();\n             tableObj.each(function(){\n             \tvar tr = $(this);\n             \tvar fuHe = tr.children(\":eq(0)\").html();\n             \tif(fuHe.indexOf(nameSearch)==0){\n                        tr.show();\n                    }\n                });\n            }else{\n                tableObj.show();\n            } \n}\n```\n\n## Jquery 回车(Enter)移到下一个输入框\n\n```javascript\n$(document).ready(function () {\n            $('input:text:first').focus();\n            $('input:text').bind(\"keydown\", function (e) {\n                if (e.which == 13) {       //Enter key\n                    e.preventDefault();     //to skip default behaviour of enter key\n                    var nextinput = $('input:text')[$('input:text').index(this) + 1];\n                    if (nextinput != undefined) {\n                        nextinput.focus();\n                    } else {\n                        alert(\"没有下一个输入框！\");\n                    }\n                }\n            });\n        });\n```\n\n## JS,Jquery获取各种屏幕的宽度和高度\n\n```javascript\n//Javascript:\n网页可见区域宽： \tdocument.body.clientWidth\n网页可见区域高： \tdocument.body.clientHeight\n网页可见区域宽： \tdocument.body.offsetWidth (包括边线的宽)\n网页可见区域高： \tdocument.body.offsetHeight (包括边线的高)\n网页正文全文宽： \tdocument.body.scrollWidth\n网页正文全文高： \tdocument.body.scrollHeight\n网页被卷去的高： \tdocument.body.scrollTop\n网页被卷去的左： \tdocument.body.scrollLeft\n网页正文部分上： \twindow.screenTop\n网页正文部分左： \twindow.screenLeft\n屏幕分辨率的高： \twindow.screen.height\n屏幕分辨率的宽： \twindow.screen.width\n屏幕可用工作区高度： \twindow.screen.availHeight\n屏幕可用工作区宽度： \twindow.screen.availWidth\n \n//JQuery:\n$(document).ready(function(){\n\talert($(window).height()); //浏览器当前窗口可视区域高度\n\talert($(document).height()); //浏览器当前窗口文档的高度\n\talert($(document.body).height());//浏览器当前窗口文档body的高度\n\talert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\n\talert($(window).width()); //浏览器当前窗口可视区域宽度\n\talert($(document).width());//浏览器当前窗口文档对象宽度\n\talert($(document.body).width());//浏览器当前窗口文档body的宽度\n\talert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n## Ajax,Get时请求异步缓存问题\n\n用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在`异步缓存`的问题。\n\n因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。\n\n解决办法：\n\n1.  ajax get请求时比较简单 只需将cache设置为false就好。\n\n   ```javascript\n   $.ajax({  \n           type: 'get',\t//get请求时  \n           url: '....',  \n           cache: false,\t//不缓存  \n           data: { },  \n           success: function (result) {  \n                 //  \n            }  \n    });  \n   ```\n\n2. 访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]\n\n   设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。","source":"_posts/静态服务器搭建及前端知识点.md","raw":"---\ntitle: 静态服务器搭建及前端知识点\ndate: 2017-06-13 14:24:21\ntags: [前端,tips]\ncategories: technology\n---\n\n# 引言\n\n​\t虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"/>\n\n</div>\t\n\n<!-- more -->\n\n# NodeJS搭建静态资源服务器\n\n对`Node.js`只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：\n\n1. 下载node.js，进入node.js官网下载[***http://nodejs.cn***](http://nodejs.cn)对应的版本。\n2. 安装node.js。\n3. 启动node.js，在命令行输入命令安装需要的模块，依次执行命令。\n\n```html\nnpm install express\nnpm install request\nnpm install http-server \n```\n\n## 简单的静态服务器\n\n新建server.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar request = require('request');\nvar app = express();\n//启动端口为81\nvar port = process.env.PORT||81;\n \n//静态资源存放的路径\n app.use(express.static('E:/SmallTools/StaticServer'));\nhttp.createServer(app).listen(port);\nconsole.log(\"服务启动成功\");\n```\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"/>\n\n</div>\n\n启动server.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问a.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明搭建成功！\n\n## 带反向代理静态服务器搭建\n\n新建server-kaow-school.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar https = require('https');\nvar request = require('request');\nvar app = express();\n//app.disable('x-powered-by');\nvar port = process.env.PORT||81;\n\napp.use(express.static('E:/SmallTools/StaticServer'));\n\n\nfunction proxy(app,route,remoteDomain){\n    app.use(route,function(req,res){\n      var url = remoteDomain+req.url;\n      req.pipe(request(url)).pipe(res);\n    });\n}\n\n//10.9.4.215:8380  测试服务器ip\nproxy(app,'/163','http://www.163.com');\n//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');\n \nhttp.createServer(app).listen(port);\nconsole.log(\"服务器启动完成,请使用locahost:\"+port+\"访问\");\n```\n\n启动server-kaow-school.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问b.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"/>\n\n</div>\n\n访问/163\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明带反向代理的静态服务器搭建成功！\n\n# 前端知识点\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"/>\n\n</div>\n\n## JS字符串截取空白trim()的原型实现\n\n```javascript\nString.prototype.trim = function(){\n\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");\n}\n```\n\n## JS屏蔽键盘按键\n\n```javascript\n<body oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\" onbeforecopy=\"return false\" onmouseup=document.selection.empty() oncopy=document.selection.empty() onselect=document.selection.empty()></body> \n讲上面红色显示的插入到网页中就可以实现鼠标右击无效\n禁止选择\t\t\t\t\t\tonselectstart=\"return false\"    \t\t\t\n禁止拖放\t\t\t\t\t\tondragstart=\"return false\"\t\t\t\n禁止拷贝\t\t\t\t\t\tncopy=document.selection.empty()\t\t\n禁止保存(放在head里面)\t\t\t<noscript><iframe src=\"*.htm\"></iframe></noscript>\n禁止粘贴\t\t\t\t\t\t<input type=text onpaste=\"return false\">\n关闭输入法\t\t\t\t\t<input style=\"ime-mode:disabled\">\n屏蔽鼠标右键\t\t\t\t\t function document.oncontextmenu(){event.returnValue=false;}\n屏蔽F1帮助\t\t\t\t\tfunction window.onhelp(){return false} \n\n屏蔽其他键\nfunction document.onkeydown() { \n   if ((window.event.altKey)&& \n   \t((window.event.keyCode==37)||\t //屏蔽 Alt+ 方向键 ← \n \t  (window.event.keyCode==39))) \t\t//屏蔽 Alt+ 方向键 → { \n   \t alert(\"不准你使用ALT+方向键前进或后退网页！\"); \n \t   event.returnValue=false; \n   } \n    /* 注：这还不是真正地屏蔽 Alt+ 方向键， \n    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， \n    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 \n    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/ \n   if ((event.keyCode==8)   ||                 //屏蔽退格删除键 \n \t  (event.keyCode==116)||                 //屏蔽 F5 刷新键 \n \t  (event.ctrlKey && event.keyCode==82)){ //Ctrl + R \n \t  event.keyCode=0; \n    \tevent.returnValue=false; \n    } \n屏蔽F11    if (event.keyCode==122){event.keyCode=0;event.returnValue=false;}\n屏蔽\t\t Ctrl+n    if (event.ctrlKey && event.keyCode==78) event.returnValue=false; \n   if (event.shiftKey && event.keyCode==121)   event.returnValue=false;   //屏蔽 shift+F10 \n   if (window.event.srcElement.tagName == \"A\" && window.event.shiftKey)  \n   window.event.returnValue = false;          //屏蔽 shift 加鼠标左键新开一网页 \n   if ((window.event.altKey)&&(window.event.keyCode==115)){        //屏蔽Alt+F4 \n   window.showModelessDialog(\"about:blank\",\"\",\"dialogWidth:1px;dialogheight:1px\"); \n   \t\treturn false; \n   } \n}\n\n屏蔽打印：\n<style> \n@media print{ \n* {display:none} \n} \n</style>\n```\n\n## HTML之间传值(通过解析url)\n\n```javascript\nvar hrefInfo = getUrlVars(window.location.href); // 得到参数信息\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n\t}\n\n//解析url中的参数\nfunction getUrlVars(hrf) {\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n## Jquery获取radio,checkbox\n\n```javascript\n//获取radio的id                          \n$(\"input[name='r']:checked\").attr(\"id\");  \n//获得checkbox数目\n$(\"input[name='c']:checked\").length;\n//遍历checkbox\n$(\"input[name='c']:check\").eq(i).attr(\"id\");\n//全选checkbox\n$(\"input[name='c']:checkbox\").attr(\"checked\",\"true\");\n//获取选中的checkbox  \n$(\"input[name='c']:checked\").map(function(){return $(this).val();}).get().join(\",\");\n//获取下拉框选中的id                     \n$(\"#s option:selected\").attr(\"value\");\n```\n\n## Jquery页面查询(数据量大时禁用)\n\n```javascript\n function search(){\n        var nameSearch = $(\"#itemName\").val(); //搜索框ID\n        var tableObj = $(\"#itemList tr:gt(0)\"); // table的ID\n        if(nameSearch.trim()!=\"\"){\n             tableObj.hide();\n             tableObj.each(function(){\n             \tvar tr = $(this);\n             \tvar fuHe = tr.children(\":eq(0)\").html();\n             \tif(fuHe.indexOf(nameSearch)==0){\n                        tr.show();\n                    }\n                });\n            }else{\n                tableObj.show();\n            } \n}\n```\n\n## Jquery 回车(Enter)移到下一个输入框\n\n```javascript\n$(document).ready(function () {\n            $('input:text:first').focus();\n            $('input:text').bind(\"keydown\", function (e) {\n                if (e.which == 13) {       //Enter key\n                    e.preventDefault();     //to skip default behaviour of enter key\n                    var nextinput = $('input:text')[$('input:text').index(this) + 1];\n                    if (nextinput != undefined) {\n                        nextinput.focus();\n                    } else {\n                        alert(\"没有下一个输入框！\");\n                    }\n                }\n            });\n        });\n```\n\n## JS,Jquery获取各种屏幕的宽度和高度\n\n```javascript\n//Javascript:\n网页可见区域宽： \tdocument.body.clientWidth\n网页可见区域高： \tdocument.body.clientHeight\n网页可见区域宽： \tdocument.body.offsetWidth (包括边线的宽)\n网页可见区域高： \tdocument.body.offsetHeight (包括边线的高)\n网页正文全文宽： \tdocument.body.scrollWidth\n网页正文全文高： \tdocument.body.scrollHeight\n网页被卷去的高： \tdocument.body.scrollTop\n网页被卷去的左： \tdocument.body.scrollLeft\n网页正文部分上： \twindow.screenTop\n网页正文部分左： \twindow.screenLeft\n屏幕分辨率的高： \twindow.screen.height\n屏幕分辨率的宽： \twindow.screen.width\n屏幕可用工作区高度： \twindow.screen.availHeight\n屏幕可用工作区宽度： \twindow.screen.availWidth\n \n//JQuery:\n$(document).ready(function(){\n\talert($(window).height()); //浏览器当前窗口可视区域高度\n\talert($(document).height()); //浏览器当前窗口文档的高度\n\talert($(document.body).height());//浏览器当前窗口文档body的高度\n\talert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\n\talert($(window).width()); //浏览器当前窗口可视区域宽度\n\talert($(document).width());//浏览器当前窗口文档对象宽度\n\talert($(document.body).width());//浏览器当前窗口文档body的宽度\n\talert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n## Ajax,Get时请求异步缓存问题\n\n用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在`异步缓存`的问题。\n\n因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。\n\n解决办法：\n\n1.  ajax get请求时比较简单 只需将cache设置为false就好。\n\n   ```javascript\n   $.ajax({  \n           type: 'get',\t//get请求时  \n           url: '....',  \n           cache: false,\t//不缓存  \n           data: { },  \n           success: function (result) {  \n                 //  \n            }  \n    });  \n   ```\n\n2. 访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]\n\n   设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。","slug":"静态服务器搭建及前端知识点","published":1,"updated":"2018-03-25T04:28:42.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u4i003f3gfkkakgdtt8","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。</p>\n<div align=\"center\"><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"><br><br></div>    \n\n<a id=\"more\"></a>\n<h1 id=\"NodeJS搭建静态资源服务器\"><a href=\"#NodeJS搭建静态资源服务器\" class=\"headerlink\" title=\"NodeJS搭建静态资源服务器\"></a>NodeJS搭建静态资源服务器</h1><p>对<code>Node.js</code>只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：</p>\n<ol>\n<li>下载node.js，进入node.js官网下载<a href=\"http://nodejs.cn\" target=\"_blank\" rel=\"external\"><strong><em>http://nodejs.cn</em></strong></a>对应的版本。</li>\n<li>安装node.js。</li>\n<li>启动node.js，在命令行输入命令安装需要的模块，依次执行命令。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express</div><div class=\"line\">npm install request</div><div class=\"line\">npm install http-server</div></pre></td></tr></table></figure>\n<h2 id=\"简单的静态服务器\"><a href=\"#简单的静态服务器\" class=\"headerlink\" title=\"简单的静态服务器\"></a>简单的静态服务器</h2><p>新建server.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//启动端口为81</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//静态资源存放的路径</span></div><div class=\"line\"> app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务启动成功\"</span>);</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"><br><br></div>\n\n<p>启动server.js</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"><br><br></div>\n\n<p>通过http请求访问a.html页面</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"><br><br></div>\n\n<p>可以访问说明搭建成功！</p>\n<h2 id=\"带反向代理静态服务器搭建\"><a href=\"#带反向代理静态服务器搭建\" class=\"headerlink\" title=\"带反向代理静态服务器搭建\"></a>带反向代理静态服务器搭建</h2><p>新建server-kaow-school.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//app.disable('x-powered-by');</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">app,route,remoteDomain</span>)</span>&#123;</div><div class=\"line\">    app.use(route,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> url = remoteDomain+req.url;</div><div class=\"line\">      req.pipe(request(url)).pipe(res);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//10.9.4.215:8380  测试服务器ip</span></div><div class=\"line\">proxy(app,<span class=\"string\">'/163'</span>,<span class=\"string\">'http://www.163.com'</span>);</div><div class=\"line\"><span class=\"comment\">//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');</span></div><div class=\"line\"> </div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器启动完成,请使用locahost:\"</span>+port+<span class=\"string\">\"访问\"</span>);</div></pre></td></tr></table></figure>\n<p>启动server-kaow-school.js</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"><br><br></div>\n\n<p>通过http请求访问b.html页面</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"><br><br></div>\n\n<p>访问/163</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"><br><br></div>\n\n<p>可以访问说明带反向代理的静态服务器搭建成功！</p>\n<h1 id=\"前端知识点\"><a href=\"#前端知识点\" class=\"headerlink\" title=\"前端知识点\"></a>前端知识点</h1><div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"JS字符串截取空白trim-的原型实现\"><a href=\"#JS字符串截取空白trim-的原型实现\" class=\"headerlink\" title=\"JS字符串截取空白trim()的原型实现\"></a>JS字符串截取空白trim()的原型实现</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String.prototype.trim = function()&#123;</div><div class=\"line\">\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"JS屏蔽键盘按键\"><a href=\"#JS屏蔽键盘按键\" class=\"headerlink\" title=\"JS屏蔽键盘按键\"></a>JS屏蔽键盘按键</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body oncontextmenu=<span class=\"string\">\"return false\"</span> onselectstart=<span class=\"string\">\"return false\"</span> ondragstart=<span class=\"string\">\"return false\"</span> onbeforecopy=<span class=\"string\">\"return false\"</span> onmouseup=<span class=\"built_in\">document</span>.selection.empty() oncopy=<span class=\"built_in\">document</span>.selection.empty() onselect=<span class=\"built_in\">document</span>.selection.empty()&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span> </div><div class=\"line\">讲上面红色显示的插入到网页中就可以实现鼠标右击无效</div><div class=\"line\">禁止选择\t\t\t\t\t\tonselectstart=<span class=\"string\">\"return false\"</span>    \t\t\t</div><div class=\"line\">禁止拖放\t\t\t\t\t\tondragstart=<span class=\"string\">\"return false\"</span>\t\t\t</div><div class=\"line\">禁止拷贝\t\t\t\t\t\tncopy=<span class=\"built_in\">document</span>.selection.empty()\t\t</div><div class=\"line\">禁止保存(放在head里面)\t\t\t&lt;noscript&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"*.htm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span></div><div class=\"line\">禁止粘贴\t\t\t\t\t\t&lt;input type=text onpaste=<span class=\"string\">\"return false\"</span>&gt;</div><div class=\"line\">关闭输入法\t\t\t\t\t&lt;input style=<span class=\"string\">\"ime-mode:disabled\"</span>&gt;</div><div class=\"line\">屏蔽鼠标右键\t\t\t\t\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">oncontextmenu</span>(<span class=\"params\"></span>)</span>&#123;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽F1帮助\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">window</span>.<span class=\"title\">onhelp</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125; </div><div class=\"line\"></div><div class=\"line\">屏蔽其他键</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">onkeydown</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp; </div><div class=\"line\">   \t((<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">37</span>)||\t <span class=\"comment\">//屏蔽 Alt+ 方向键 ← </span></div><div class=\"line\"> \t  (<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">39</span>))) \t\t<span class=\"comment\">//屏蔽 Alt+ 方向键 → &#123; </span></div><div class=\"line\">   \t alert(<span class=\"string\">\"不准你使用ALT+方向键前进或后退网页！\"</span>); </div><div class=\"line\"> \t   event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">    <span class=\"comment\">/* 注：这还不是真正地屏蔽 Alt+ 方向键， </span></div><div class=\"line\">    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， </div><div class=\"line\">    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 </div><div class=\"line\">    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/ </div><div class=\"line\">   <span class=\"keyword\">if</span> ((event.keyCode==<span class=\"number\">8</span>)   ||                 <span class=\"comment\">//屏蔽退格删除键 </span></div><div class=\"line\"> \t  (event.keyCode==<span class=\"number\">116</span>)||                 <span class=\"comment\">//屏蔽 F5 刷新键 </span></div><div class=\"line\"> \t  (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">82</span>))&#123; <span class=\"comment\">//Ctrl + R </span></div><div class=\"line\"> \t  event.keyCode=<span class=\"number\">0</span>; </div><div class=\"line\">    \tevent.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">屏蔽F11    <span class=\"keyword\">if</span> (event.keyCode==<span class=\"number\">122</span>)&#123;event.keyCode=<span class=\"number\">0</span>;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽\t\t Ctrl+n    <span class=\"keyword\">if</span> (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">78</span>) event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   <span class=\"keyword\">if</span> (event.shiftKey &amp;&amp; event.keyCode==<span class=\"number\">121</span>)   event.returnValue=<span class=\"literal\">false</span>;   <span class=\"comment\">//屏蔽 shift+F10 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event.srcElement.tagName == <span class=\"string\">\"A\"</span> &amp;&amp; <span class=\"built_in\">window</span>.event.shiftKey)  </div><div class=\"line\">   <span class=\"built_in\">window</span>.event.returnValue = <span class=\"literal\">false</span>;          <span class=\"comment\">//屏蔽 shift 加鼠标左键新开一网页 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp;(<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">115</span>))&#123;        <span class=\"comment\">//屏蔽Alt+F4 </span></div><div class=\"line\">   <span class=\"built_in\">window</span>.showModelessDialog(<span class=\"string\">\"about:blank\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"dialogWidth:1px;dialogheight:1px\"</span>); </div><div class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">屏蔽打印：</div><div class=\"line\">&lt;style&gt; </div><div class=\"line\">@media print&#123; </div><div class=\"line\">* &#123;<span class=\"attr\">display</span>:none&#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"HTML之间传值-通过解析url\"><a href=\"#HTML之间传值-通过解析url\" class=\"headerlink\" title=\"HTML之间传值(通过解析url)\"></a>HTML之间传值(通过解析url)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href); <span class=\"comment\">// 得到参数信息</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解析url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery获取radio-checkbox\"><a href=\"#Jquery获取radio-checkbox\" class=\"headerlink\" title=\"Jquery获取radio,checkbox\"></a>Jquery获取radio,checkbox</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取radio的id                          </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='r']:checked\"</span>).attr(<span class=\"string\">\"id\"</span>);  </div><div class=\"line\"><span class=\"comment\">//获得checkbox数目</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).length;</div><div class=\"line\"><span class=\"comment\">//遍历checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:check\"</span>).eq(i).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\"><span class=\"comment\">//全选checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checkbox\"</span>).attr(<span class=\"string\">\"checked\"</span>,<span class=\"string\">\"true\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取选中的checkbox  </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>).val();&#125;).get().join(<span class=\"string\">\",\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取下拉框选中的id                     </span></div><div class=\"line\">$(<span class=\"string\">\"#s option:selected\"</span>).attr(<span class=\"string\">\"value\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery页面查询-数据量大时禁用\"><a href=\"#Jquery页面查询-数据量大时禁用\" class=\"headerlink\" title=\"Jquery页面查询(数据量大时禁用)\"></a>Jquery页面查询(数据量大时禁用)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nameSearch = $(<span class=\"string\">\"#itemName\"</span>).val(); <span class=\"comment\">//搜索框ID</span></div><div class=\"line\">        <span class=\"keyword\">var</span> tableObj = $(<span class=\"string\">\"#itemList tr:gt(0)\"</span>); <span class=\"comment\">// table的ID</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(nameSearch.trim()!=<span class=\"string\">\"\"</span>)&#123;</div><div class=\"line\">             tableObj.hide();</div><div class=\"line\">             tableObj.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">             \t<span class=\"keyword\">var</span> tr = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">             \t<span class=\"keyword\">var</span> fuHe = tr.children(<span class=\"string\">\":eq(0)\"</span>).html();</div><div class=\"line\">             \t<span class=\"keyword\">if</span>(fuHe.indexOf(nameSearch)==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                        tr.show();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                tableObj.show();</div><div class=\"line\">            &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery-回车-Enter-移到下一个输入框\"><a href=\"#Jquery-回车-Enter-移到下一个输入框\" class=\"headerlink\" title=\"Jquery 回车(Enter)移到下一个输入框\"></a>Jquery 回车(Enter)移到下一个输入框</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'input:text:first'</span>).focus();</div><div class=\"line\">            $(<span class=\"string\">'input:text'</span>).bind(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.which == <span class=\"number\">13</span>) &#123;       <span class=\"comment\">//Enter key</span></div><div class=\"line\">                    e.preventDefault();     <span class=\"comment\">//to skip default behaviour of enter key</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> nextinput = $(<span class=\"string\">'input:text'</span>)[$(<span class=\"string\">'input:text'</span>).index(<span class=\"keyword\">this</span>) + <span class=\"number\">1</span>];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (nextinput != <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                        nextinput.focus();</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        alert(<span class=\"string\">\"没有下一个输入框！\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"JS-Jquery获取各种屏幕的宽度和高度\"><a href=\"#JS-Jquery获取各种屏幕的宽度和高度\" class=\"headerlink\" title=\"JS,Jquery获取各种屏幕的宽度和高度\"></a>JS,Jquery获取各种屏幕的宽度和高度</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Javascript:</span></div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.clientWidth</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.clientHeight</div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)</div><div class=\"line\">网页正文全文宽： \t<span class=\"built_in\">document</span>.body.scrollWidth</div><div class=\"line\">网页正文全文高： \t<span class=\"built_in\">document</span>.body.scrollHeight</div><div class=\"line\">网页被卷去的高： \t<span class=\"built_in\">document</span>.body.scrollTop</div><div class=\"line\">网页被卷去的左： \t<span class=\"built_in\">document</span>.body.scrollLeft</div><div class=\"line\">网页正文部分上： \t<span class=\"built_in\">window</span>.screenTop</div><div class=\"line\">网页正文部分左： \t<span class=\"built_in\">window</span>.screenLeft</div><div class=\"line\">屏幕分辨率的高： \t<span class=\"built_in\">window</span>.screen.height</div><div class=\"line\">屏幕分辨率的宽： \t<span class=\"built_in\">window</span>.screen.width</div><div class=\"line\">屏幕可用工作区高度： \t<span class=\"built_in\">window</span>.screen.availHeight</div><div class=\"line\">屏幕可用工作区宽度： \t<span class=\"built_in\">window</span>.screen.availWidth</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//JQuery:</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).height()); <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).height()); <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).height());<span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).width()); <span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).width());<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).width());<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Ajax-Get时请求异步缓存问题\"><a href=\"#Ajax-Get时请求异步缓存问题\" class=\"headerlink\" title=\"Ajax,Get时请求异步缓存问题\"></a>Ajax,Get时请求异步缓存问题</h2><p>用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在<code>异步缓存</code>的问题。</p>\n<p>因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>ajax get请求时比较简单 只需将cache设置为false就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;  </div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,\t<span class=\"comment\">//get请求时  </span></div><div class=\"line\">        url: <span class=\"string\">'....'</span>,  </div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,\t<span class=\"comment\">//不缓存  </span></div><div class=\"line\">        data: &#123; &#125;,  </div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">              <span class=\"comment\">//  </span></div><div class=\"line\">         &#125;  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]</p>\n<p>设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>​    虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。</p>\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"NodeJS搭建静态资源服务器\"><a href=\"#NodeJS搭建静态资源服务器\" class=\"headerlink\" title=\"NodeJS搭建静态资源服务器\"></a>NodeJS搭建静态资源服务器</h1><p>对<code>Node.js</code>只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：</p>\n<ol>\n<li>下载node.js，进入node.js官网下载<a href=\"http://nodejs.cn\"><strong><em>http://nodejs.cn</em></strong></a>对应的版本。</li>\n<li>安装node.js。</li>\n<li>启动node.js，在命令行输入命令安装需要的模块，依次执行命令。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express</div><div class=\"line\">npm install request</div><div class=\"line\">npm install http-server</div></pre></td></tr></table></figure>\n<h2 id=\"简单的静态服务器\"><a href=\"#简单的静态服务器\" class=\"headerlink\" title=\"简单的静态服务器\"></a>简单的静态服务器</h2><p>新建server.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//启动端口为81</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//静态资源存放的路径</span></div><div class=\"line\"> app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务启动成功\"</span>);</div></pre></td></tr></table></figure>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"/><br><br></div>\n\n<p>启动server.js</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"/><br><br></div>\n\n<p>通过http请求访问a.html页面</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"/><br><br></div>\n\n<p>可以访问说明搭建成功！</p>\n<h2 id=\"带反向代理静态服务器搭建\"><a href=\"#带反向代理静态服务器搭建\" class=\"headerlink\" title=\"带反向代理静态服务器搭建\"></a>带反向代理静态服务器搭建</h2><p>新建server-kaow-school.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//app.disable('x-powered-by');</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">app,route,remoteDomain</span>)</span>&#123;</div><div class=\"line\">    app.use(route,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> url = remoteDomain+req.url;</div><div class=\"line\">      req.pipe(request(url)).pipe(res);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//10.9.4.215:8380  测试服务器ip</span></div><div class=\"line\">proxy(app,<span class=\"string\">'/163'</span>,<span class=\"string\">'http://www.163.com'</span>);</div><div class=\"line\"><span class=\"comment\">//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');</span></div><div class=\"line\"> </div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器启动完成,请使用locahost:\"</span>+port+<span class=\"string\">\"访问\"</span>);</div></pre></td></tr></table></figure>\n<p>启动server-kaow-school.js</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"/><br><br></div>\n\n<p>通过http请求访问b.html页面</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"/><br><br></div>\n\n<p>访问/163</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"/><br><br></div>\n\n<p>可以访问说明带反向代理的静态服务器搭建成功！</p>\n<h1 id=\"前端知识点\"><a href=\"#前端知识点\" class=\"headerlink\" title=\"前端知识点\"></a>前端知识点</h1><div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"JS字符串截取空白trim-的原型实现\"><a href=\"#JS字符串截取空白trim-的原型实现\" class=\"headerlink\" title=\"JS字符串截取空白trim()的原型实现\"></a>JS字符串截取空白trim()的原型实现</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String.prototype.trim = function()&#123;</div><div class=\"line\">\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"JS屏蔽键盘按键\"><a href=\"#JS屏蔽键盘按键\" class=\"headerlink\" title=\"JS屏蔽键盘按键\"></a>JS屏蔽键盘按键</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body oncontextmenu=<span class=\"string\">\"return false\"</span> onselectstart=<span class=\"string\">\"return false\"</span> ondragstart=<span class=\"string\">\"return false\"</span> onbeforecopy=<span class=\"string\">\"return false\"</span> onmouseup=<span class=\"built_in\">document</span>.selection.empty() oncopy=<span class=\"built_in\">document</span>.selection.empty() onselect=<span class=\"built_in\">document</span>.selection.empty()&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span> </div><div class=\"line\">讲上面红色显示的插入到网页中就可以实现鼠标右击无效</div><div class=\"line\">禁止选择\t\t\t\t\t\tonselectstart=<span class=\"string\">\"return false\"</span>    \t\t\t</div><div class=\"line\">禁止拖放\t\t\t\t\t\tondragstart=<span class=\"string\">\"return false\"</span>\t\t\t</div><div class=\"line\">禁止拷贝\t\t\t\t\t\tncopy=<span class=\"built_in\">document</span>.selection.empty()\t\t</div><div class=\"line\">禁止保存(放在head里面)\t\t\t&lt;noscript&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"*.htm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span></div><div class=\"line\">禁止粘贴\t\t\t\t\t\t&lt;input type=text onpaste=<span class=\"string\">\"return false\"</span>&gt;</div><div class=\"line\">关闭输入法\t\t\t\t\t&lt;input style=<span class=\"string\">\"ime-mode:disabled\"</span>&gt;</div><div class=\"line\">屏蔽鼠标右键\t\t\t\t\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">oncontextmenu</span>(<span class=\"params\"></span>)</span>&#123;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽F1帮助\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">window</span>.<span class=\"title\">onhelp</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125; </div><div class=\"line\"></div><div class=\"line\">屏蔽其他键</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">onkeydown</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp; </div><div class=\"line\">   \t((<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">37</span>)||\t <span class=\"comment\">//屏蔽 Alt+ 方向键 ← </span></div><div class=\"line\"> \t  (<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">39</span>))) \t\t<span class=\"comment\">//屏蔽 Alt+ 方向键 → &#123; </span></div><div class=\"line\">   \t alert(<span class=\"string\">\"不准你使用ALT+方向键前进或后退网页！\"</span>); </div><div class=\"line\"> \t   event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">    <span class=\"comment\">/* 注：这还不是真正地屏蔽 Alt+ 方向键， </div><div class=\"line\">    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， </div><div class=\"line\">    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 </div><div class=\"line\">    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/</span> </div><div class=\"line\">   <span class=\"keyword\">if</span> ((event.keyCode==<span class=\"number\">8</span>)   ||                 <span class=\"comment\">//屏蔽退格删除键 </span></div><div class=\"line\"> \t  (event.keyCode==<span class=\"number\">116</span>)||                 <span class=\"comment\">//屏蔽 F5 刷新键 </span></div><div class=\"line\"> \t  (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">82</span>))&#123; <span class=\"comment\">//Ctrl + R </span></div><div class=\"line\"> \t  event.keyCode=<span class=\"number\">0</span>; </div><div class=\"line\">    \tevent.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">屏蔽F11    <span class=\"keyword\">if</span> (event.keyCode==<span class=\"number\">122</span>)&#123;event.keyCode=<span class=\"number\">0</span>;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽\t\t Ctrl+n    <span class=\"keyword\">if</span> (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">78</span>) event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   <span class=\"keyword\">if</span> (event.shiftKey &amp;&amp; event.keyCode==<span class=\"number\">121</span>)   event.returnValue=<span class=\"literal\">false</span>;   <span class=\"comment\">//屏蔽 shift+F10 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event.srcElement.tagName == <span class=\"string\">\"A\"</span> &amp;&amp; <span class=\"built_in\">window</span>.event.shiftKey)  </div><div class=\"line\">   <span class=\"built_in\">window</span>.event.returnValue = <span class=\"literal\">false</span>;          <span class=\"comment\">//屏蔽 shift 加鼠标左键新开一网页 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp;(<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">115</span>))&#123;        <span class=\"comment\">//屏蔽Alt+F4 </span></div><div class=\"line\">   <span class=\"built_in\">window</span>.showModelessDialog(<span class=\"string\">\"about:blank\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"dialogWidth:1px;dialogheight:1px\"</span>); </div><div class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">屏蔽打印：</div><div class=\"line\">&lt;style&gt; </div><div class=\"line\">@media print&#123; </div><div class=\"line\">* &#123;<span class=\"attr\">display</span>:none&#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"HTML之间传值-通过解析url\"><a href=\"#HTML之间传值-通过解析url\" class=\"headerlink\" title=\"HTML之间传值(通过解析url)\"></a>HTML之间传值(通过解析url)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href); <span class=\"comment\">// 得到参数信息</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解析url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery获取radio-checkbox\"><a href=\"#Jquery获取radio-checkbox\" class=\"headerlink\" title=\"Jquery获取radio,checkbox\"></a>Jquery获取radio,checkbox</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取radio的id                          </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='r']:checked\"</span>).attr(<span class=\"string\">\"id\"</span>);  </div><div class=\"line\"><span class=\"comment\">//获得checkbox数目</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).length;</div><div class=\"line\"><span class=\"comment\">//遍历checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:check\"</span>).eq(i).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\"><span class=\"comment\">//全选checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checkbox\"</span>).attr(<span class=\"string\">\"checked\"</span>,<span class=\"string\">\"true\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取选中的checkbox  </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>).val();&#125;).get().join(<span class=\"string\">\",\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取下拉框选中的id                     </span></div><div class=\"line\">$(<span class=\"string\">\"#s option:selected\"</span>).attr(<span class=\"string\">\"value\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery页面查询-数据量大时禁用\"><a href=\"#Jquery页面查询-数据量大时禁用\" class=\"headerlink\" title=\"Jquery页面查询(数据量大时禁用)\"></a>Jquery页面查询(数据量大时禁用)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nameSearch = $(<span class=\"string\">\"#itemName\"</span>).val(); <span class=\"comment\">//搜索框ID</span></div><div class=\"line\">        <span class=\"keyword\">var</span> tableObj = $(<span class=\"string\">\"#itemList tr:gt(0)\"</span>); <span class=\"comment\">// table的ID</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(nameSearch.trim()!=<span class=\"string\">\"\"</span>)&#123;</div><div class=\"line\">             tableObj.hide();</div><div class=\"line\">             tableObj.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">             \t<span class=\"keyword\">var</span> tr = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">             \t<span class=\"keyword\">var</span> fuHe = tr.children(<span class=\"string\">\":eq(0)\"</span>).html();</div><div class=\"line\">             \t<span class=\"keyword\">if</span>(fuHe.indexOf(nameSearch)==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                        tr.show();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                tableObj.show();</div><div class=\"line\">            &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery-回车-Enter-移到下一个输入框\"><a href=\"#Jquery-回车-Enter-移到下一个输入框\" class=\"headerlink\" title=\"Jquery 回车(Enter)移到下一个输入框\"></a>Jquery 回车(Enter)移到下一个输入框</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'input:text:first'</span>).focus();</div><div class=\"line\">            $(<span class=\"string\">'input:text'</span>).bind(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.which == <span class=\"number\">13</span>) &#123;       <span class=\"comment\">//Enter key</span></div><div class=\"line\">                    e.preventDefault();     <span class=\"comment\">//to skip default behaviour of enter key</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> nextinput = $(<span class=\"string\">'input:text'</span>)[$(<span class=\"string\">'input:text'</span>).index(<span class=\"keyword\">this</span>) + <span class=\"number\">1</span>];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (nextinput != <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                        nextinput.focus();</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        alert(<span class=\"string\">\"没有下一个输入框！\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"JS-Jquery获取各种屏幕的宽度和高度\"><a href=\"#JS-Jquery获取各种屏幕的宽度和高度\" class=\"headerlink\" title=\"JS,Jquery获取各种屏幕的宽度和高度\"></a>JS,Jquery获取各种屏幕的宽度和高度</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Javascript:</span></div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.clientWidth</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.clientHeight</div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)</div><div class=\"line\">网页正文全文宽： \t<span class=\"built_in\">document</span>.body.scrollWidth</div><div class=\"line\">网页正文全文高： \t<span class=\"built_in\">document</span>.body.scrollHeight</div><div class=\"line\">网页被卷去的高： \t<span class=\"built_in\">document</span>.body.scrollTop</div><div class=\"line\">网页被卷去的左： \t<span class=\"built_in\">document</span>.body.scrollLeft</div><div class=\"line\">网页正文部分上： \t<span class=\"built_in\">window</span>.screenTop</div><div class=\"line\">网页正文部分左： \t<span class=\"built_in\">window</span>.screenLeft</div><div class=\"line\">屏幕分辨率的高： \t<span class=\"built_in\">window</span>.screen.height</div><div class=\"line\">屏幕分辨率的宽： \t<span class=\"built_in\">window</span>.screen.width</div><div class=\"line\">屏幕可用工作区高度： \t<span class=\"built_in\">window</span>.screen.availHeight</div><div class=\"line\">屏幕可用工作区宽度： \t<span class=\"built_in\">window</span>.screen.availWidth</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//JQuery:</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).height()); <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).height()); <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).height());<span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).width()); <span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).width());<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).width());<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Ajax-Get时请求异步缓存问题\"><a href=\"#Ajax-Get时请求异步缓存问题\" class=\"headerlink\" title=\"Ajax,Get时请求异步缓存问题\"></a>Ajax,Get时请求异步缓存问题</h2><p>用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在<code>异步缓存</code>的问题。</p>\n<p>因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>ajax get请求时比较简单 只需将cache设置为false就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;  </div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,\t<span class=\"comment\">//get请求时  </span></div><div class=\"line\">        url: <span class=\"string\">'....'</span>,  </div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,\t<span class=\"comment\">//不缓存  </span></div><div class=\"line\">        data: &#123; &#125;,  </div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">              <span class=\"comment\">//  </span></div><div class=\"line\">         &#125;  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]</p>\n<p>设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。</p>\n</li>\n</ol>"},{"title":"跨页面(Tab/Window)通信的几种方法","date":"2017-09-01T02:32:43.000Z","_content":"\n​\t今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用`webSocket` 进行通讯，之后通过谷歌和百度找出了更为简便的方法。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"/></div><!-- more -->\n\n# 利用webSocket进行通讯\n\n​\t第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。\n\n# 定时器不断检查cookies变化\n\n在[stackoverflow](https://stackoverflow.com/)上看到一个方案，大致思路是：\n\n1. 在页面A设置一个使用 `setInterval` 定时器不断刷新，检查 `Cookies` 的值是否发生变化，如果变化就进行刷新的操作。\n2. 由于 `Cookies` 是在同域可读的，所以在页面 B 审核的时候改变 `Cookies` 的值，页面 A 自然是可以拿到的。\n   这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。\n\n# localStorage的事件\n\n功夫不负有心人，后来发现 window 有一个 [StorageEvent](https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent) ，每当 `localStorage` 改变的时候可以触发这个事件。（这个原理就像你给一个`DOM` 绑定了 `click` 事件，当你点击它的时候，就会自动触发。）也就是说，我给 `window` 绑定这个事件后，每当我改变 `localStorage` 的时候，他都会触发这个事件。\n\n```\nwindow.addEventListener('storage', function (event) {\n  console.log(event);\n});\n```\n\n这个回调中的`event`与普通的[EVNET](https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties),基本差不多，但是它比其他的`event`多了如下几个属性:\n\n| 属性       | 描述                          |\n| -------- | --------------------------- |\n| key      | 受影响的 `localStorage` 的 `key` |\n| newValue | 新的值                         |\n| oldValue | 旧的值                         |\n| url      | 触发此事件的url                   |\n\n每当一个页面改变了 `localStorage` 的值，都会触发这个事件。也就是说可以很容易的通过改变 `localStorage` 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 `localStorage` 发生**改变**的时候才会被触发，如果没改变则**不会触发**此事件。\n\n```\nlocalStorage.setItem('delete',1); //触发\nlocalStorage.setItem('delete',1); //不触发\nlocalStorage.setItem('delete',2); //触发\n```\n\n在使用的时候务必注意这一点。\n最终实现代码:\n\n**页面A：**\n\n```\n//页面 A\nwindow.addEventListener('storage', function (event) {\n    if(event.key === 'delete_verify_list'){\n        //页面操作\n    }\n});\n```\n\n**页面B：**\n\n```\n//页面 B\n/**\n *  获取一个随机id\n * @return {String} - 返回一个5位的随机字符串\n */\nfunction randomId() {\n    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();\n}\n\n//每当需要页面A更新时 执行此方法\nif (localStorage) {\n\t//为保证每次页面A都执行，此处我设置里一个随机字符串\n    localStorage.setItem('delete_verify_list', randomId());\n}\n```\n\n参考：<https://ponyfoo.com/articles/cross-tab-communication>\n\n","source":"_posts/跨页面-Tab-Window-通信的几种方法.md","raw":"---\ntitle: 跨页面(Tab/Window)通信的几种方法\ndate: 2017-09-01 10:32:43\ntags: [前端,tips]\ncategories: technology\n---\n\n​\t今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用`webSocket` 进行通讯，之后通过谷歌和百度找出了更为简便的方法。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"/></div><!-- more -->\n\n# 利用webSocket进行通讯\n\n​\t第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。\n\n# 定时器不断检查cookies变化\n\n在[stackoverflow](https://stackoverflow.com/)上看到一个方案，大致思路是：\n\n1. 在页面A设置一个使用 `setInterval` 定时器不断刷新，检查 `Cookies` 的值是否发生变化，如果变化就进行刷新的操作。\n2. 由于 `Cookies` 是在同域可读的，所以在页面 B 审核的时候改变 `Cookies` 的值，页面 A 自然是可以拿到的。\n   这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。\n\n# localStorage的事件\n\n功夫不负有心人，后来发现 window 有一个 [StorageEvent](https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent) ，每当 `localStorage` 改变的时候可以触发这个事件。（这个原理就像你给一个`DOM` 绑定了 `click` 事件，当你点击它的时候，就会自动触发。）也就是说，我给 `window` 绑定这个事件后，每当我改变 `localStorage` 的时候，他都会触发这个事件。\n\n```\nwindow.addEventListener('storage', function (event) {\n  console.log(event);\n});\n```\n\n这个回调中的`event`与普通的[EVNET](https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties),基本差不多，但是它比其他的`event`多了如下几个属性:\n\n| 属性       | 描述                          |\n| -------- | --------------------------- |\n| key      | 受影响的 `localStorage` 的 `key` |\n| newValue | 新的值                         |\n| oldValue | 旧的值                         |\n| url      | 触发此事件的url                   |\n\n每当一个页面改变了 `localStorage` 的值，都会触发这个事件。也就是说可以很容易的通过改变 `localStorage` 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 `localStorage` 发生**改变**的时候才会被触发，如果没改变则**不会触发**此事件。\n\n```\nlocalStorage.setItem('delete',1); //触发\nlocalStorage.setItem('delete',1); //不触发\nlocalStorage.setItem('delete',2); //触发\n```\n\n在使用的时候务必注意这一点。\n最终实现代码:\n\n**页面A：**\n\n```\n//页面 A\nwindow.addEventListener('storage', function (event) {\n    if(event.key === 'delete_verify_list'){\n        //页面操作\n    }\n});\n```\n\n**页面B：**\n\n```\n//页面 B\n/**\n *  获取一个随机id\n * @return {String} - 返回一个5位的随机字符串\n */\nfunction randomId() {\n    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();\n}\n\n//每当需要页面A更新时 执行此方法\nif (localStorage) {\n\t//为保证每次页面A都执行，此处我设置里一个随机字符串\n    localStorage.setItem('delete_verify_list', randomId());\n}\n```\n\n参考：<https://ponyfoo.com/articles/cross-tab-communication>\n\n","slug":"跨页面-Tab-Window-通信的几种方法","published":1,"updated":"2018-03-13T05:54:15.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u4q003j3gfklfn0ytvt","content":"<p>​    今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用<code>webSocket</code> 进行通讯，之后通过谷歌和百度找出了更为简便的方法。</p>\n<p><div align=\"center\"><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"利用webSocket进行通讯\"><a href=\"#利用webSocket进行通讯\" class=\"headerlink\" title=\"利用webSocket进行通讯\"></a>利用webSocket进行通讯</h1><p>​    第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。</p>\n<h1 id=\"定时器不断检查cookies变化\"><a href=\"#定时器不断检查cookies变化\" class=\"headerlink\" title=\"定时器不断检查cookies变化\"></a>定时器不断检查cookies变化</h1><p>在<a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"external\">stackoverflow</a>上看到一个方案，大致思路是：</p>\n<ol>\n<li>在页面A设置一个使用 <code>setInterval</code> 定时器不断刷新，检查 <code>Cookies</code> 的值是否发生变化，如果变化就进行刷新的操作。</li>\n<li>由于 <code>Cookies</code> 是在同域可读的，所以在页面 B 审核的时候改变 <code>Cookies</code> 的值，页面 A 自然是可以拿到的。<br>这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。</li>\n</ol>\n<h1 id=\"localStorage的事件\"><a href=\"#localStorage的事件\" class=\"headerlink\" title=\"localStorage的事件\"></a>localStorage的事件</h1><p>功夫不负有心人，后来发现 window 有一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent\" target=\"_blank\" rel=\"external\">StorageEvent</a> ，每当 <code>localStorage</code> 改变的时候可以触发这个事件。（这个原理就像你给一个<code>DOM</code> 绑定了 <code>click</code> 事件，当你点击它的时候，就会自动触发。）也就是说，我给 <code>window</code> 绑定这个事件后，每当我改变 <code>localStorage</code> 的时候，他都会触发这个事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">  console.log(event);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个回调中的<code>event</code>与普通的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties\" target=\"_blank\" rel=\"external\">EVNET</a>,基本差不多，但是它比其他的<code>event</code>多了如下几个属性:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>受影响的 <code>localStorage</code> 的 <code>key</code></td>\n</tr>\n<tr>\n<td>newValue</td>\n<td>新的值</td>\n</tr>\n<tr>\n<td>oldValue</td>\n<td>旧的值</td>\n</tr>\n<tr>\n<td>url</td>\n<td>触发此事件的url</td>\n</tr>\n</tbody>\n</table>\n<p>每当一个页面改变了 <code>localStorage</code> 的值，都会触发这个事件。也就是说可以很容易的通过改变 <code>localStorage</code> 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 <code>localStorage</code> 发生<strong>改变</strong>的时候才会被触发，如果没改变则<strong>不会触发</strong>此事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //不触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,2); //触发</div></pre></td></tr></table></figure>\n<p>在使用的时候务必注意这一点。<br>最终实现代码:</p>\n<p><strong>页面A：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 A</div><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">    if(event.key === &apos;delete_verify_list&apos;)&#123;</div><div class=\"line\">        //页面操作</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>页面B：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 B</div><div class=\"line\">/**</div><div class=\"line\"> *  获取一个随机id</div><div class=\"line\"> * @return &#123;String&#125; - 返回一个5位的随机字符串</div><div class=\"line\"> */</div><div class=\"line\">function randomId() &#123;</div><div class=\"line\">    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//每当需要页面A更新时 执行此方法</div><div class=\"line\">if (localStorage) &#123;</div><div class=\"line\">\t//为保证每次页面A都执行，此处我设置里一个随机字符串</div><div class=\"line\">    localStorage.setItem(&apos;delete_verify_list&apos;, randomId());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://ponyfoo.com/articles/cross-tab-communication\" target=\"_blank\" rel=\"external\">https://ponyfoo.com/articles/cross-tab-communication</a></p>\n","site":{"data":{}},"excerpt":"<p>​    今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用<code>webSocket</code> 进行通讯，之后通过谷歌和百度找出了更为简便的方法。</p>\n<p><div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"利用webSocket进行通讯\"><a href=\"#利用webSocket进行通讯\" class=\"headerlink\" title=\"利用webSocket进行通讯\"></a>利用webSocket进行通讯</h1><p>​    第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。</p>\n<h1 id=\"定时器不断检查cookies变化\"><a href=\"#定时器不断检查cookies变化\" class=\"headerlink\" title=\"定时器不断检查cookies变化\"></a>定时器不断检查cookies变化</h1><p>在<a href=\"https://stackoverflow.com/\">stackoverflow</a>上看到一个方案，大致思路是：</p>\n<ol>\n<li>在页面A设置一个使用 <code>setInterval</code> 定时器不断刷新，检查 <code>Cookies</code> 的值是否发生变化，如果变化就进行刷新的操作。</li>\n<li>由于 <code>Cookies</code> 是在同域可读的，所以在页面 B 审核的时候改变 <code>Cookies</code> 的值，页面 A 自然是可以拿到的。<br>这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。</li>\n</ol>\n<h1 id=\"localStorage的事件\"><a href=\"#localStorage的事件\" class=\"headerlink\" title=\"localStorage的事件\"></a>localStorage的事件</h1><p>功夫不负有心人，后来发现 window 有一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent\">StorageEvent</a> ，每当 <code>localStorage</code> 改变的时候可以触发这个事件。（这个原理就像你给一个<code>DOM</code> 绑定了 <code>click</code> 事件，当你点击它的时候，就会自动触发。）也就是说，我给 <code>window</code> 绑定这个事件后，每当我改变 <code>localStorage</code> 的时候，他都会触发这个事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">  console.log(event);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个回调中的<code>event</code>与普通的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties\">EVNET</a>,基本差不多，但是它比其他的<code>event</code>多了如下几个属性:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>受影响的 <code>localStorage</code> 的 <code>key</code></td>\n</tr>\n<tr>\n<td>newValue</td>\n<td>新的值</td>\n</tr>\n<tr>\n<td>oldValue</td>\n<td>旧的值</td>\n</tr>\n<tr>\n<td>url</td>\n<td>触发此事件的url</td>\n</tr>\n</tbody>\n</table>\n<p>每当一个页面改变了 <code>localStorage</code> 的值，都会触发这个事件。也就是说可以很容易的通过改变 <code>localStorage</code> 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 <code>localStorage</code> 发生<strong>改变</strong>的时候才会被触发，如果没改变则<strong>不会触发</strong>此事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //不触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,2); //触发</div></pre></td></tr></table></figure>\n<p>在使用的时候务必注意这一点。<br>最终实现代码:</p>\n<p><strong>页面A：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 A</div><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">    if(event.key === &apos;delete_verify_list&apos;)&#123;</div><div class=\"line\">        //页面操作</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>页面B：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 B</div><div class=\"line\">/**</div><div class=\"line\"> *  获取一个随机id</div><div class=\"line\"> * @return &#123;String&#125; - 返回一个5位的随机字符串</div><div class=\"line\"> */</div><div class=\"line\">function randomId() &#123;</div><div class=\"line\">    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//每当需要页面A更新时 执行此方法</div><div class=\"line\">if (localStorage) &#123;</div><div class=\"line\">\t//为保证每次页面A都执行，此处我设置里一个随机字符串</div><div class=\"line\">    localStorage.setItem(&apos;delete_verify_list&apos;, randomId());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://ponyfoo.com/articles/cross-tab-communication\">https://ponyfoo.com/articles/cross-tab-communication</a></p>"},{"title":"谈谈敏捷开发","date":"2018-03-15T01:34:03.000Z","_content":"\n# 引言\n\n**敏捷开发**是一种从上个世纪九十年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种**应对快速变化的需求**的一种软件开发能力。常言道：“**天下武功，唯快不破**”，此言用于形容“敏捷”的威力相当合适。敏捷意思为快，但敏捷思想不仅仅求快，它更多强调“**多快好省**”，产出得多，产出得快，产出得好，同时节省各种成本，既经济又实用。它们更强调**程序员团队与业务专家之间的紧密协作**、**面对面的沟通**（认为比书面的文档更有效）、**频繁交付新的软件版本**、**紧凑而自我组织型的团队**、能够很好地**适应需求变化的代码编写和团队组织方法**，也更**注重软件开发过程中人的作用**。<div align=center><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/scrum.png\" algin=\"center\"/></div><!-- more -->\n\n# 敏捷开发宣言和原则\n\n## 敏捷宣言的价值观\n\n- **个体和互动** 高于 流程和工具 \n- **工作的软件** 高于 详尽的文档 \n- **客户合作** 高于 合同谈判\n- **响应变化** 高于 遵循计划\n\n也就是说，尽管**右项有其价值**，我们**更重视左项的价值**。\n\n## 敏捷宣言的原则\n\n- 我们最重要的目标，是通过**持续不断地及早交付有价值的软件**使客户满意。\n- **欣然面对需求变化**，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。\n- **经常地交付可工作的软件**，相隔几星期或一两个月，倾向于采取较短的周期。\n- 业务人员和开发人员必须**相互合作**，项目中的每一天都不例外。\n- **激发个体的斗志**，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。\n- 不论团队内外，传递信息效果最好效率也最高的方式是**面对面的交谈**。\n- **可工作的软件**是进度的首要度量标准。\n- 敏捷过程倡导**可持续开发**。责任人、开发人员和用户要能够共同**维持其步调稳定延续**。\n- 坚持不懈地**追求技术卓越和良好设计**，敏捷能力由此增强。\n- **以简洁为本**，它是极力减少不必要工作量的艺术。\n- **最好的架构、需求和设计出自自组织团队**。\n- 团队**定期地反思**如何能提高成效，并依此调整自身的举止表现。\n\n敏捷宣言中这些价值观和原则，所谓**入门容易精通难**，在旁人或者入门者看来也许略显空洞，所言无物；然而，敏捷精髓的实践者们一直坚信着这些理念，觉得它们字字珠玑，所言极是。不管我们是走敏捷的哪个流派，都不妨在实践敏捷的过程中，回过头来看看这些价值观和原则，想必会常看常新，大有裨益。\n\n# Scrum核心\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/Scrum%20framework.png\" algin=\"center\"/></div>\n\n## 团队密切协作\n\n敏捷开发中，最核心的就是人。\n\n不是说每个人坐在自己的格子间里，各自独立开发，定期向领导汇报工作就完事了，敏捷开发需要做到几个关键点：\n\n1. 定期会面。通过定期高效会议让开发人员保持紧张有序的工作状态。\n2. 及时告知项目进展。鼓励遇到问题一定要及时告知，让所有利益相关者都能够及时了解项目的最新进展。\n3. 知识共享。把知识分享出来，可以提升整个团队的开发能力，是对团队的一种投资。\n4. 代码共享。把代码集中在版本管理工具之中，团队任何人都有访问权限。\n5. 代码审查。针对代码的每个改动，都需要相关人员做代码审查。\n\n## 不断反馈和调整\n\n敏捷开发与传统瀑布式开发一个最大的不同就是，并非一次定终身。\n\n软件开发不是线性过程，它存在很多的不确定性，有一定的动态波动，所以需要不断的反馈、调整，快速响应变化。\n\n- 需求调整。在产品落地前，你是不可能制定出完美需求方案的，客户也并不一定能够清晰的知道他想要的软件产品到底是什么样子。所以，要做好需求不断变化的心理准备，也要有快速响应需求变化的能力。\n\n\n- 功能调整。收集客户反馈、用户反响，来不断调整和优化软件功能。\n\n\n- 代码重构。在开发的过程中，需要不断的重构代码，保持代码清晰、内聚、整洁。\n\n## 保持软件可用\n\n传统软件开发的方式是，等代码编写完毕，所有功能都完成之后，再集中测试和上线，在这之前，软件都是用户不可用的。\n\n在信息快速发展的今天，这显然太落伍了，可能等你软件开发个一年半载，外面都变天了。\n\n敏捷开发，另一大特色，就是保持软件一直可用，在最小可用版本基础之上，不断做功能迭代，不断发布新的版本。\n\n通俗点讲就是，先做一个简化版本出来，让用户一直有软件可用，而后再逐步添加更多的功能，「小步快跑」式的做开发，而非一步到位。\n\n这样做的好处，也是为了能够不断收集用户反馈与需求，及时调整开发方向。\n\n## 短迭代 增量发布\n\n这一条是上一条的延伸。\n\n所谓「迭代」就是，重复下一个开发周期，此刻你可以想象一下 while loop。\n\n用迭代的方法在前一版本之上逐步开发新的功能，发布新的版本，即：增量发布。\n\n迭代周期不宜过长，一年半年显然就太久了，尽量要缩短迭代周期，保持开发过程稳步前进。\n\n但短迭代并不意味着太过频繁，每天或者每周迭代一次的话，很可能会过犹不及，半个月到一个月应该是一个不错的时间节点。当然这只是参考建议，具体的迭代周期还应根据真实情况量力而行。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E8%BF%AD%E4%BB%A3.jpeg\" algin=\"center\"/></div>\n\n## 提早集成 不断集成\n\n「集成」的含义就是，把软件的各个模块，新旧代码统一整合在一起，能够正确编译、运行，并且能够通过一系列的单元测试。\n\n敏捷开发要求开发人员，不要临到软件发布或者交付的当天才开始集成，也不要很久才集成一次，尽可能的做到提早继承、频繁集成。理论上讲，每添加进一些新的代码，最好都要做一次集成。\n\n通过提早集成、不断集成，能够尽早发现代码中的问题，保持软件的状态一直是可用的。\n\n## 自动化集成、测试与部署\n\n敏捷的另一个关键点是，通过技术手段把集成、测试与部署这些非常耗时的操作自动化。\n\n至于为什么要自动化，如果你是一个人开发一个几千行的程序，那确实没必要自动化，确切的说，也没必要应用什么敏捷开发。\n\n针对开发大型软件的团队而言，编译、测试过程有可能都非常的耗时，编译有时会花上半天的时间，测试可能会持续好几天。而且是多人协作共同开发，如果纯手动的话，你想象一下如果两个人想前后脚提交代码，岂不是要等上好几天的时间，等前面那个人集成结束之后，后面那个人才可以开始集成？\n\n把集成、测试与部署自动化的好处就是，把这些耗时的纯体力劳动扔给机器去做，它做完了，只要返回你一个最终结果就好了，而且两个人同时 Check In 时也不会受到影响。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2.png\" algin=\"center\"/></div>\n\n这副图涵盖了自动化集成、测试以及部署的流程。\n\n开发者 Check In 之后的所有工作将都交给机器去做，它们都有专门的工具 ，包括集成工具、测试工具，当然这些工具可以使用第三方的，也可以自己开发。\n\n一般情况下，这一系列的工作都跟版本管理工具绑定在一起，你只要 Check In 就会触发集成、测试，甚至还有部署。而你，只要专心的等待结果就好。\n\n# 总结\n\n在流程上，敏捷最大的特色是迭代式开发。敏捷开发可以用一句话概括：**拥抱变化，轻量文档，团队合作，多个短的冲刺周期**\n\n参考文章：\n\nhttps://www.zybuluo.com/yishuailuo/note/672154?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io","source":"_posts/谈谈敏捷开发.md","raw":"---\ntitle: 谈谈敏捷开发\ndate: 2018-03-15 09:34:03\ntags: [随笔]\ncategories: technology\n---\n\n# 引言\n\n**敏捷开发**是一种从上个世纪九十年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种**应对快速变化的需求**的一种软件开发能力。常言道：“**天下武功，唯快不破**”，此言用于形容“敏捷”的威力相当合适。敏捷意思为快，但敏捷思想不仅仅求快，它更多强调“**多快好省**”，产出得多，产出得快，产出得好，同时节省各种成本，既经济又实用。它们更强调**程序员团队与业务专家之间的紧密协作**、**面对面的沟通**（认为比书面的文档更有效）、**频繁交付新的软件版本**、**紧凑而自我组织型的团队**、能够很好地**适应需求变化的代码编写和团队组织方法**，也更**注重软件开发过程中人的作用**。<div align=center><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/scrum.png\" algin=\"center\"/></div><!-- more -->\n\n# 敏捷开发宣言和原则\n\n## 敏捷宣言的价值观\n\n- **个体和互动** 高于 流程和工具 \n- **工作的软件** 高于 详尽的文档 \n- **客户合作** 高于 合同谈判\n- **响应变化** 高于 遵循计划\n\n也就是说，尽管**右项有其价值**，我们**更重视左项的价值**。\n\n## 敏捷宣言的原则\n\n- 我们最重要的目标，是通过**持续不断地及早交付有价值的软件**使客户满意。\n- **欣然面对需求变化**，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。\n- **经常地交付可工作的软件**，相隔几星期或一两个月，倾向于采取较短的周期。\n- 业务人员和开发人员必须**相互合作**，项目中的每一天都不例外。\n- **激发个体的斗志**，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。\n- 不论团队内外，传递信息效果最好效率也最高的方式是**面对面的交谈**。\n- **可工作的软件**是进度的首要度量标准。\n- 敏捷过程倡导**可持续开发**。责任人、开发人员和用户要能够共同**维持其步调稳定延续**。\n- 坚持不懈地**追求技术卓越和良好设计**，敏捷能力由此增强。\n- **以简洁为本**，它是极力减少不必要工作量的艺术。\n- **最好的架构、需求和设计出自自组织团队**。\n- 团队**定期地反思**如何能提高成效，并依此调整自身的举止表现。\n\n敏捷宣言中这些价值观和原则，所谓**入门容易精通难**，在旁人或者入门者看来也许略显空洞，所言无物；然而，敏捷精髓的实践者们一直坚信着这些理念，觉得它们字字珠玑，所言极是。不管我们是走敏捷的哪个流派，都不妨在实践敏捷的过程中，回过头来看看这些价值观和原则，想必会常看常新，大有裨益。\n\n# Scrum核心\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/Scrum%20framework.png\" algin=\"center\"/></div>\n\n## 团队密切协作\n\n敏捷开发中，最核心的就是人。\n\n不是说每个人坐在自己的格子间里，各自独立开发，定期向领导汇报工作就完事了，敏捷开发需要做到几个关键点：\n\n1. 定期会面。通过定期高效会议让开发人员保持紧张有序的工作状态。\n2. 及时告知项目进展。鼓励遇到问题一定要及时告知，让所有利益相关者都能够及时了解项目的最新进展。\n3. 知识共享。把知识分享出来，可以提升整个团队的开发能力，是对团队的一种投资。\n4. 代码共享。把代码集中在版本管理工具之中，团队任何人都有访问权限。\n5. 代码审查。针对代码的每个改动，都需要相关人员做代码审查。\n\n## 不断反馈和调整\n\n敏捷开发与传统瀑布式开发一个最大的不同就是，并非一次定终身。\n\n软件开发不是线性过程，它存在很多的不确定性，有一定的动态波动，所以需要不断的反馈、调整，快速响应变化。\n\n- 需求调整。在产品落地前，你是不可能制定出完美需求方案的，客户也并不一定能够清晰的知道他想要的软件产品到底是什么样子。所以，要做好需求不断变化的心理准备，也要有快速响应需求变化的能力。\n\n\n- 功能调整。收集客户反馈、用户反响，来不断调整和优化软件功能。\n\n\n- 代码重构。在开发的过程中，需要不断的重构代码，保持代码清晰、内聚、整洁。\n\n## 保持软件可用\n\n传统软件开发的方式是，等代码编写完毕，所有功能都完成之后，再集中测试和上线，在这之前，软件都是用户不可用的。\n\n在信息快速发展的今天，这显然太落伍了，可能等你软件开发个一年半载，外面都变天了。\n\n敏捷开发，另一大特色，就是保持软件一直可用，在最小可用版本基础之上，不断做功能迭代，不断发布新的版本。\n\n通俗点讲就是，先做一个简化版本出来，让用户一直有软件可用，而后再逐步添加更多的功能，「小步快跑」式的做开发，而非一步到位。\n\n这样做的好处，也是为了能够不断收集用户反馈与需求，及时调整开发方向。\n\n## 短迭代 增量发布\n\n这一条是上一条的延伸。\n\n所谓「迭代」就是，重复下一个开发周期，此刻你可以想象一下 while loop。\n\n用迭代的方法在前一版本之上逐步开发新的功能，发布新的版本，即：增量发布。\n\n迭代周期不宜过长，一年半年显然就太久了，尽量要缩短迭代周期，保持开发过程稳步前进。\n\n但短迭代并不意味着太过频繁，每天或者每周迭代一次的话，很可能会过犹不及，半个月到一个月应该是一个不错的时间节点。当然这只是参考建议，具体的迭代周期还应根据真实情况量力而行。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E8%BF%AD%E4%BB%A3.jpeg\" algin=\"center\"/></div>\n\n## 提早集成 不断集成\n\n「集成」的含义就是，把软件的各个模块，新旧代码统一整合在一起，能够正确编译、运行，并且能够通过一系列的单元测试。\n\n敏捷开发要求开发人员，不要临到软件发布或者交付的当天才开始集成，也不要很久才集成一次，尽可能的做到提早继承、频繁集成。理论上讲，每添加进一些新的代码，最好都要做一次集成。\n\n通过提早集成、不断集成，能够尽早发现代码中的问题，保持软件的状态一直是可用的。\n\n## 自动化集成、测试与部署\n\n敏捷的另一个关键点是，通过技术手段把集成、测试与部署这些非常耗时的操作自动化。\n\n至于为什么要自动化，如果你是一个人开发一个几千行的程序，那确实没必要自动化，确切的说，也没必要应用什么敏捷开发。\n\n针对开发大型软件的团队而言，编译、测试过程有可能都非常的耗时，编译有时会花上半天的时间，测试可能会持续好几天。而且是多人协作共同开发，如果纯手动的话，你想象一下如果两个人想前后脚提交代码，岂不是要等上好几天的时间，等前面那个人集成结束之后，后面那个人才可以开始集成？\n\n把集成、测试与部署自动化的好处就是，把这些耗时的纯体力劳动扔给机器去做，它做完了，只要返回你一个最终结果就好了，而且两个人同时 Check In 时也不会受到影响。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2.png\" algin=\"center\"/></div>\n\n这副图涵盖了自动化集成、测试以及部署的流程。\n\n开发者 Check In 之后的所有工作将都交给机器去做，它们都有专门的工具 ，包括集成工具、测试工具，当然这些工具可以使用第三方的，也可以自己开发。\n\n一般情况下，这一系列的工作都跟版本管理工具绑定在一起，你只要 Check In 就会触发集成、测试，甚至还有部署。而你，只要专心的等待结果就好。\n\n# 总结\n\n在流程上，敏捷最大的特色是迭代式开发。敏捷开发可以用一句话概括：**拥抱变化，轻量文档，团队合作，多个短的冲刺周期**\n\n参考文章：\n\nhttps://www.zybuluo.com/yishuailuo/note/672154?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io","slug":"谈谈敏捷开发","published":1,"updated":"2018-03-15T02:35:38.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u4v003m3gfky2m18u5y","content":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p><strong>敏捷开发</strong>是一种从上个世纪九十年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种<strong>应对快速变化的需求</strong>的一种软件开发能力。常言道：“<strong>天下武功，唯快不破</strong>”，此言用于形容“敏捷”的威力相当合适。敏捷意思为快，但敏捷思想不仅仅求快，它更多强调“<strong>多快好省</strong>”，产出得多，产出得快，产出得好，同时节省各种成本，既经济又实用。它们更强调<strong>程序员团队与业务专家之间的紧密协作</strong>、<strong>面对面的沟通</strong>（认为比书面的文档更有效）、<strong>频繁交付新的软件版本</strong>、<strong>紧凑而自我组织型的团队</strong>、能够很好地<strong>适应需求变化的代码编写和团队组织方法</strong>，也更<strong>注重软件开发过程中人的作用</strong>。<div align=\"center\"><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/scrum.png\" algin=\"center\"></div><a id=\"more\"></a></p>\n<h1 id=\"敏捷开发宣言和原则\"><a href=\"#敏捷开发宣言和原则\" class=\"headerlink\" title=\"敏捷开发宣言和原则\"></a>敏捷开发宣言和原则</h1><h2 id=\"敏捷宣言的价值观\"><a href=\"#敏捷宣言的价值观\" class=\"headerlink\" title=\"敏捷宣言的价值观\"></a>敏捷宣言的价值观</h2><ul>\n<li><strong>个体和互动</strong> 高于 流程和工具 </li>\n<li><strong>工作的软件</strong> 高于 详尽的文档 </li>\n<li><strong>客户合作</strong> 高于 合同谈判</li>\n<li><strong>响应变化</strong> 高于 遵循计划</li>\n</ul>\n<p>也就是说，尽管<strong>右项有其价值</strong>，我们<strong>更重视左项的价值</strong>。</p>\n<h2 id=\"敏捷宣言的原则\"><a href=\"#敏捷宣言的原则\" class=\"headerlink\" title=\"敏捷宣言的原则\"></a>敏捷宣言的原则</h2><ul>\n<li>我们最重要的目标，是通过<strong>持续不断地及早交付有价值的软件</strong>使客户满意。</li>\n<li><strong>欣然面对需求变化</strong>，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。</li>\n<li><strong>经常地交付可工作的软件</strong>，相隔几星期或一两个月，倾向于采取较短的周期。</li>\n<li>业务人员和开发人员必须<strong>相互合作</strong>，项目中的每一天都不例外。</li>\n<li><strong>激发个体的斗志</strong>，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。</li>\n<li>不论团队内外，传递信息效果最好效率也最高的方式是<strong>面对面的交谈</strong>。</li>\n<li><strong>可工作的软件</strong>是进度的首要度量标准。</li>\n<li>敏捷过程倡导<strong>可持续开发</strong>。责任人、开发人员和用户要能够共同<strong>维持其步调稳定延续</strong>。</li>\n<li>坚持不懈地<strong>追求技术卓越和良好设计</strong>，敏捷能力由此增强。</li>\n<li><strong>以简洁为本</strong>，它是极力减少不必要工作量的艺术。</li>\n<li><strong>最好的架构、需求和设计出自自组织团队</strong>。</li>\n<li>团队<strong>定期地反思</strong>如何能提高成效，并依此调整自身的举止表现。</li>\n</ul>\n<p>敏捷宣言中这些价值观和原则，所谓<strong>入门容易精通难</strong>，在旁人或者入门者看来也许略显空洞，所言无物；然而，敏捷精髓的实践者们一直坚信着这些理念，觉得它们字字珠玑，所言极是。不管我们是走敏捷的哪个流派，都不妨在实践敏捷的过程中，回过头来看看这些价值观和原则，想必会常看常新，大有裨益。</p>\n<h1 id=\"Scrum核心\"><a href=\"#Scrum核心\" class=\"headerlink\" title=\"Scrum核心\"></a>Scrum核心</h1><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/Scrum%20framework.png\" algin=\"center\"></div>\n\n<h2 id=\"团队密切协作\"><a href=\"#团队密切协作\" class=\"headerlink\" title=\"团队密切协作\"></a>团队密切协作</h2><p>敏捷开发中，最核心的就是人。</p>\n<p>不是说每个人坐在自己的格子间里，各自独立开发，定期向领导汇报工作就完事了，敏捷开发需要做到几个关键点：</p>\n<ol>\n<li>定期会面。通过定期高效会议让开发人员保持紧张有序的工作状态。</li>\n<li>及时告知项目进展。鼓励遇到问题一定要及时告知，让所有利益相关者都能够及时了解项目的最新进展。</li>\n<li>知识共享。把知识分享出来，可以提升整个团队的开发能力，是对团队的一种投资。</li>\n<li>代码共享。把代码集中在版本管理工具之中，团队任何人都有访问权限。</li>\n<li>代码审查。针对代码的每个改动，都需要相关人员做代码审查。</li>\n</ol>\n<h2 id=\"不断反馈和调整\"><a href=\"#不断反馈和调整\" class=\"headerlink\" title=\"不断反馈和调整\"></a>不断反馈和调整</h2><p>敏捷开发与传统瀑布式开发一个最大的不同就是，并非一次定终身。</p>\n<p>软件开发不是线性过程，它存在很多的不确定性，有一定的动态波动，所以需要不断的反馈、调整，快速响应变化。</p>\n<ul>\n<li>需求调整。在产品落地前，你是不可能制定出完美需求方案的，客户也并不一定能够清晰的知道他想要的软件产品到底是什么样子。所以，要做好需求不断变化的心理准备，也要有快速响应需求变化的能力。</li>\n</ul>\n<ul>\n<li>功能调整。收集客户反馈、用户反响，来不断调整和优化软件功能。</li>\n</ul>\n<ul>\n<li>代码重构。在开发的过程中，需要不断的重构代码，保持代码清晰、内聚、整洁。</li>\n</ul>\n<h2 id=\"保持软件可用\"><a href=\"#保持软件可用\" class=\"headerlink\" title=\"保持软件可用\"></a>保持软件可用</h2><p>传统软件开发的方式是，等代码编写完毕，所有功能都完成之后，再集中测试和上线，在这之前，软件都是用户不可用的。</p>\n<p>在信息快速发展的今天，这显然太落伍了，可能等你软件开发个一年半载，外面都变天了。</p>\n<p>敏捷开发，另一大特色，就是保持软件一直可用，在最小可用版本基础之上，不断做功能迭代，不断发布新的版本。</p>\n<p>通俗点讲就是，先做一个简化版本出来，让用户一直有软件可用，而后再逐步添加更多的功能，「小步快跑」式的做开发，而非一步到位。</p>\n<p>这样做的好处，也是为了能够不断收集用户反馈与需求，及时调整开发方向。</p>\n<h2 id=\"短迭代-增量发布\"><a href=\"#短迭代-增量发布\" class=\"headerlink\" title=\"短迭代 增量发布\"></a>短迭代 增量发布</h2><p>这一条是上一条的延伸。</p>\n<p>所谓「迭代」就是，重复下一个开发周期，此刻你可以想象一下 while loop。</p>\n<p>用迭代的方法在前一版本之上逐步开发新的功能，发布新的版本，即：增量发布。</p>\n<p>迭代周期不宜过长，一年半年显然就太久了，尽量要缩短迭代周期，保持开发过程稳步前进。</p>\n<p>但短迭代并不意味着太过频繁，每天或者每周迭代一次的话，很可能会过犹不及，半个月到一个月应该是一个不错的时间节点。当然这只是参考建议，具体的迭代周期还应根据真实情况量力而行。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E8%BF%AD%E4%BB%A3.jpeg\" algin=\"center\"></div>\n\n<h2 id=\"提早集成-不断集成\"><a href=\"#提早集成-不断集成\" class=\"headerlink\" title=\"提早集成 不断集成\"></a>提早集成 不断集成</h2><p>「集成」的含义就是，把软件的各个模块，新旧代码统一整合在一起，能够正确编译、运行，并且能够通过一系列的单元测试。</p>\n<p>敏捷开发要求开发人员，不要临到软件发布或者交付的当天才开始集成，也不要很久才集成一次，尽可能的做到提早继承、频繁集成。理论上讲，每添加进一些新的代码，最好都要做一次集成。</p>\n<p>通过提早集成、不断集成，能够尽早发现代码中的问题，保持软件的状态一直是可用的。</p>\n<h2 id=\"自动化集成、测试与部署\"><a href=\"#自动化集成、测试与部署\" class=\"headerlink\" title=\"自动化集成、测试与部署\"></a>自动化集成、测试与部署</h2><p>敏捷的另一个关键点是，通过技术手段把集成、测试与部署这些非常耗时的操作自动化。</p>\n<p>至于为什么要自动化，如果你是一个人开发一个几千行的程序，那确实没必要自动化，确切的说，也没必要应用什么敏捷开发。</p>\n<p>针对开发大型软件的团队而言，编译、测试过程有可能都非常的耗时，编译有时会花上半天的时间，测试可能会持续好几天。而且是多人协作共同开发，如果纯手动的话，你想象一下如果两个人想前后脚提交代码，岂不是要等上好几天的时间，等前面那个人集成结束之后，后面那个人才可以开始集成？</p>\n<p>把集成、测试与部署自动化的好处就是，把这些耗时的纯体力劳动扔给机器去做，它做完了，只要返回你一个最终结果就好了，而且两个人同时 Check In 时也不会受到影响。<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2.png\" algin=\"center\"></div></p>\n<p>这副图涵盖了自动化集成、测试以及部署的流程。</p>\n<p>开发者 Check In 之后的所有工作将都交给机器去做，它们都有专门的工具 ，包括集成工具、测试工具，当然这些工具可以使用第三方的，也可以自己开发。</p>\n<p>一般情况下，这一系列的工作都跟版本管理工具绑定在一起，你只要 Check In 就会触发集成、测试，甚至还有部署。而你，只要专心的等待结果就好。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在流程上，敏捷最大的特色是迭代式开发。敏捷开发可以用一句话概括：<strong>拥抱变化，轻量文档，团队合作，多个短的冲刺周期</strong></p>\n<p>参考文章：</p>\n<p><a href=\"https://www.zybuluo.com/yishuailuo/note/672154?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">https://www.zybuluo.com/yishuailuo/note/672154?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p><strong>敏捷开发</strong>是一种从上个世纪九十年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种<strong>应对快速变化的需求</strong>的一种软件开发能力。常言道：“<strong>天下武功，唯快不破</strong>”，此言用于形容“敏捷”的威力相当合适。敏捷意思为快，但敏捷思想不仅仅求快，它更多强调“<strong>多快好省</strong>”，产出得多，产出得快，产出得好，同时节省各种成本，既经济又实用。它们更强调<strong>程序员团队与业务专家之间的紧密协作</strong>、<strong>面对面的沟通</strong>（认为比书面的文档更有效）、<strong>频繁交付新的软件版本</strong>、<strong>紧凑而自我组织型的团队</strong>、能够很好地<strong>适应需求变化的代码编写和团队组织方法</strong>，也更<strong>注重软件开发过程中人的作用</strong>。<div align=center><img width=\"600\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/scrum.png\" algin=\"center\"/></div>","more":"</p>\n<h1 id=\"敏捷开发宣言和原则\"><a href=\"#敏捷开发宣言和原则\" class=\"headerlink\" title=\"敏捷开发宣言和原则\"></a>敏捷开发宣言和原则</h1><h2 id=\"敏捷宣言的价值观\"><a href=\"#敏捷宣言的价值观\" class=\"headerlink\" title=\"敏捷宣言的价值观\"></a>敏捷宣言的价值观</h2><ul>\n<li><strong>个体和互动</strong> 高于 流程和工具 </li>\n<li><strong>工作的软件</strong> 高于 详尽的文档 </li>\n<li><strong>客户合作</strong> 高于 合同谈判</li>\n<li><strong>响应变化</strong> 高于 遵循计划</li>\n</ul>\n<p>也就是说，尽管<strong>右项有其价值</strong>，我们<strong>更重视左项的价值</strong>。</p>\n<h2 id=\"敏捷宣言的原则\"><a href=\"#敏捷宣言的原则\" class=\"headerlink\" title=\"敏捷宣言的原则\"></a>敏捷宣言的原则</h2><ul>\n<li>我们最重要的目标，是通过<strong>持续不断地及早交付有价值的软件</strong>使客户满意。</li>\n<li><strong>欣然面对需求变化</strong>，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。</li>\n<li><strong>经常地交付可工作的软件</strong>，相隔几星期或一两个月，倾向于采取较短的周期。</li>\n<li>业务人员和开发人员必须<strong>相互合作</strong>，项目中的每一天都不例外。</li>\n<li><strong>激发个体的斗志</strong>，以他们为核心搭建项目。提供所需的环境和支援，辅以信任，从而达成目标。</li>\n<li>不论团队内外，传递信息效果最好效率也最高的方式是<strong>面对面的交谈</strong>。</li>\n<li><strong>可工作的软件</strong>是进度的首要度量标准。</li>\n<li>敏捷过程倡导<strong>可持续开发</strong>。责任人、开发人员和用户要能够共同<strong>维持其步调稳定延续</strong>。</li>\n<li>坚持不懈地<strong>追求技术卓越和良好设计</strong>，敏捷能力由此增强。</li>\n<li><strong>以简洁为本</strong>，它是极力减少不必要工作量的艺术。</li>\n<li><strong>最好的架构、需求和设计出自自组织团队</strong>。</li>\n<li>团队<strong>定期地反思</strong>如何能提高成效，并依此调整自身的举止表现。</li>\n</ul>\n<p>敏捷宣言中这些价值观和原则，所谓<strong>入门容易精通难</strong>，在旁人或者入门者看来也许略显空洞，所言无物；然而，敏捷精髓的实践者们一直坚信着这些理念，觉得它们字字珠玑，所言极是。不管我们是走敏捷的哪个流派，都不妨在实践敏捷的过程中，回过头来看看这些价值观和原则，想必会常看常新，大有裨益。</p>\n<h1 id=\"Scrum核心\"><a href=\"#Scrum核心\" class=\"headerlink\" title=\"Scrum核心\"></a>Scrum核心</h1><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/Scrum%20framework.png\" algin=\"center\"/></div>\n\n<h2 id=\"团队密切协作\"><a href=\"#团队密切协作\" class=\"headerlink\" title=\"团队密切协作\"></a>团队密切协作</h2><p>敏捷开发中，最核心的就是人。</p>\n<p>不是说每个人坐在自己的格子间里，各自独立开发，定期向领导汇报工作就完事了，敏捷开发需要做到几个关键点：</p>\n<ol>\n<li>定期会面。通过定期高效会议让开发人员保持紧张有序的工作状态。</li>\n<li>及时告知项目进展。鼓励遇到问题一定要及时告知，让所有利益相关者都能够及时了解项目的最新进展。</li>\n<li>知识共享。把知识分享出来，可以提升整个团队的开发能力，是对团队的一种投资。</li>\n<li>代码共享。把代码集中在版本管理工具之中，团队任何人都有访问权限。</li>\n<li>代码审查。针对代码的每个改动，都需要相关人员做代码审查。</li>\n</ol>\n<h2 id=\"不断反馈和调整\"><a href=\"#不断反馈和调整\" class=\"headerlink\" title=\"不断反馈和调整\"></a>不断反馈和调整</h2><p>敏捷开发与传统瀑布式开发一个最大的不同就是，并非一次定终身。</p>\n<p>软件开发不是线性过程，它存在很多的不确定性，有一定的动态波动，所以需要不断的反馈、调整，快速响应变化。</p>\n<ul>\n<li>需求调整。在产品落地前，你是不可能制定出完美需求方案的，客户也并不一定能够清晰的知道他想要的软件产品到底是什么样子。所以，要做好需求不断变化的心理准备，也要有快速响应需求变化的能力。</li>\n</ul>\n<ul>\n<li>功能调整。收集客户反馈、用户反响，来不断调整和优化软件功能。</li>\n</ul>\n<ul>\n<li>代码重构。在开发的过程中，需要不断的重构代码，保持代码清晰、内聚、整洁。</li>\n</ul>\n<h2 id=\"保持软件可用\"><a href=\"#保持软件可用\" class=\"headerlink\" title=\"保持软件可用\"></a>保持软件可用</h2><p>传统软件开发的方式是，等代码编写完毕，所有功能都完成之后，再集中测试和上线，在这之前，软件都是用户不可用的。</p>\n<p>在信息快速发展的今天，这显然太落伍了，可能等你软件开发个一年半载，外面都变天了。</p>\n<p>敏捷开发，另一大特色，就是保持软件一直可用，在最小可用版本基础之上，不断做功能迭代，不断发布新的版本。</p>\n<p>通俗点讲就是，先做一个简化版本出来，让用户一直有软件可用，而后再逐步添加更多的功能，「小步快跑」式的做开发，而非一步到位。</p>\n<p>这样做的好处，也是为了能够不断收集用户反馈与需求，及时调整开发方向。</p>\n<h2 id=\"短迭代-增量发布\"><a href=\"#短迭代-增量发布\" class=\"headerlink\" title=\"短迭代 增量发布\"></a>短迭代 增量发布</h2><p>这一条是上一条的延伸。</p>\n<p>所谓「迭代」就是，重复下一个开发周期，此刻你可以想象一下 while loop。</p>\n<p>用迭代的方法在前一版本之上逐步开发新的功能，发布新的版本，即：增量发布。</p>\n<p>迭代周期不宜过长，一年半年显然就太久了，尽量要缩短迭代周期，保持开发过程稳步前进。</p>\n<p>但短迭代并不意味着太过频繁，每天或者每周迭代一次的话，很可能会过犹不及，半个月到一个月应该是一个不错的时间节点。当然这只是参考建议，具体的迭代周期还应根据真实情况量力而行。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E8%BF%AD%E4%BB%A3.jpeg\" algin=\"center\"/></div>\n\n<h2 id=\"提早集成-不断集成\"><a href=\"#提早集成-不断集成\" class=\"headerlink\" title=\"提早集成 不断集成\"></a>提早集成 不断集成</h2><p>「集成」的含义就是，把软件的各个模块，新旧代码统一整合在一起，能够正确编译、运行，并且能够通过一系列的单元测试。</p>\n<p>敏捷开发要求开发人员，不要临到软件发布或者交付的当天才开始集成，也不要很久才集成一次，尽可能的做到提早继承、频繁集成。理论上讲，每添加进一些新的代码，最好都要做一次集成。</p>\n<p>通过提早集成、不断集成，能够尽早发现代码中的问题，保持软件的状态一直是可用的。</p>\n<h2 id=\"自动化集成、测试与部署\"><a href=\"#自动化集成、测试与部署\" class=\"headerlink\" title=\"自动化集成、测试与部署\"></a>自动化集成、测试与部署</h2><p>敏捷的另一个关键点是，通过技术手段把集成、测试与部署这些非常耗时的操作自动化。</p>\n<p>至于为什么要自动化，如果你是一个人开发一个几千行的程序，那确实没必要自动化，确切的说，也没必要应用什么敏捷开发。</p>\n<p>针对开发大型软件的团队而言，编译、测试过程有可能都非常的耗时，编译有时会花上半天的时间，测试可能会持续好几天。而且是多人协作共同开发，如果纯手动的话，你想象一下如果两个人想前后脚提交代码，岂不是要等上好几天的时间，等前面那个人集成结束之后，后面那个人才可以开始集成？</p>\n<p>把集成、测试与部署自动化的好处就是，把这些耗时的纯体力劳动扔给机器去做，它做完了，只要返回你一个最终结果就好了，而且两个人同时 Check In 时也不会受到影响。<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2018-03/scrum/%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E9%83%A8%E7%BD%B2.png\" algin=\"center\"/></div></p>\n<p>这副图涵盖了自动化集成、测试以及部署的流程。</p>\n<p>开发者 Check In 之后的所有工作将都交给机器去做，它们都有专门的工具 ，包括集成工具、测试工具，当然这些工具可以使用第三方的，也可以自己开发。</p>\n<p>一般情况下，这一系列的工作都跟版本管理工具绑定在一起，你只要 Check In 就会触发集成、测试，甚至还有部署。而你，只要专心的等待结果就好。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在流程上，敏捷最大的特色是迭代式开发。敏捷开发可以用一句话概括：<strong>拥抱变化，轻量文档，团队合作，多个短的冲刺周期</strong></p>\n<p>参考文章：</p>\n<p><a href=\"https://www.zybuluo.com/yishuailuo/note/672154?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">https://www.zybuluo.com/yishuailuo/note/672154?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io</a></p>"},{"title":"Linux下安装Nginx","date":"2018-01-11T07:16:49.000Z","_content":"\n<div align=center><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/index.jpg\" algin=\"center\"/></div><!-- more -->\n\n# Nginx安装环境\n\nNginx是C语言开发，建议在Linxu上运行，下面操作实在Centos6.5上的安装环境。\n\n1. **gcc**\n\n安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc。\n\n安装命令：**yum install gcc-c++** \n\n2. **PCRE**\n\nPCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。\n\n安装命令：**yum install -y pcre pcre-devel**\n\n3. zlib\n\nzlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。\n\n安装命令：**yum install -y zlib zlib-devel**\n\n4. openssl\n\nOpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。\n\n安装命令：**yum install -y openssl openssl-devel**\n\n# 编译安装\n\n将nginx-1.8.0.tar.gz拷贝至Linux服务器后解压。\n\n```java\ntar -zxvf nginx-1.8.0.tar.gz\ncd nginx-1.8.0\n```\n\n1. configure\n\n./configure --help查询详细参数。参数设置如下：\n\n**注意：下边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录**\n\n```java\n./configure \\\n--prefix=/usr/local/nginx \\\n--pid-path=/var/run/nginx/nginx.pid \\\n--lock-path=/var/lock/nginx.lock \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--with-http_gzip_static_module \\\n--http-client-body-temp-path=/var/temp/nginx/client \\\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/temp/nginx/scgi\n```\n\n2. 编译安装\n\n```\nmake\nmake  install\n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/install.png\" algin=\"center\"/>\n\n</div>\n\n# 启动Nginx\n\n```java\ncd /usr/local/nginx/sbin/\n./nginx\n// 查询nginx进程命令\nps aux|grep nginx\n```\n\n**注意：执行./nginx启动nginx，这里可以-c指定加载的nginx配置文件，如下：**\n\n```\n./nginx -c /usr/soft/nginx-1.8.0/conf/nginx.conf\n```\n\n**如果不指定-c，nginx在启动时默认加载/usr/local/nginx/conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数（--conf-path= 指向配置文件（nginx.conf））**\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/start.png\" algin=\"center\"/>\n\n</div>\n\n# 重启Nginx\n\n1. 先停止再启动（建议使用）\n\n   对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。\n\n```\n./nginx -s quit\n./nginx\n```\n\n2. 重新加载配置文件\n\n   当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效。\n\n```\n./nginx -s reload\n```\n\n# 测试\n\nnginx安装成功，启动nginx，即可访问虚拟机上的nginx\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/ok.png\" algin=\"center\"/>\n\n</div>\n\n到这说明nginx上安装成功。","source":"_posts/Linux下安装Nginx.md","raw":"---\ntitle: Linux下安装Nginx\ndate: 2018-01-11 15:16:49\ntags: [nginx, linux]\ncategories: technology\n---\n\n<div align=center><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/index.jpg\" algin=\"center\"/></div><!-- more -->\n\n# Nginx安装环境\n\nNginx是C语言开发，建议在Linxu上运行，下面操作实在Centos6.5上的安装环境。\n\n1. **gcc**\n\n安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc。\n\n安装命令：**yum install gcc-c++** \n\n2. **PCRE**\n\nPCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。\n\n安装命令：**yum install -y pcre pcre-devel**\n\n3. zlib\n\nzlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。\n\n安装命令：**yum install -y zlib zlib-devel**\n\n4. openssl\n\nOpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。\n\n安装命令：**yum install -y openssl openssl-devel**\n\n# 编译安装\n\n将nginx-1.8.0.tar.gz拷贝至Linux服务器后解压。\n\n```java\ntar -zxvf nginx-1.8.0.tar.gz\ncd nginx-1.8.0\n```\n\n1. configure\n\n./configure --help查询详细参数。参数设置如下：\n\n**注意：下边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录**\n\n```java\n./configure \\\n--prefix=/usr/local/nginx \\\n--pid-path=/var/run/nginx/nginx.pid \\\n--lock-path=/var/lock/nginx.lock \\\n--error-log-path=/var/log/nginx/error.log \\\n--http-log-path=/var/log/nginx/access.log \\\n--with-http_gzip_static_module \\\n--http-client-body-temp-path=/var/temp/nginx/client \\\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\n--http-scgi-temp-path=/var/temp/nginx/scgi\n```\n\n2. 编译安装\n\n```\nmake\nmake  install\n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/install.png\" algin=\"center\"/>\n\n</div>\n\n# 启动Nginx\n\n```java\ncd /usr/local/nginx/sbin/\n./nginx\n// 查询nginx进程命令\nps aux|grep nginx\n```\n\n**注意：执行./nginx启动nginx，这里可以-c指定加载的nginx配置文件，如下：**\n\n```\n./nginx -c /usr/soft/nginx-1.8.0/conf/nginx.conf\n```\n\n**如果不指定-c，nginx在启动时默认加载/usr/local/nginx/conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数（--conf-path= 指向配置文件（nginx.conf））**\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/start.png\" algin=\"center\"/>\n\n</div>\n\n# 重启Nginx\n\n1. 先停止再启动（建议使用）\n\n   对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。\n\n```\n./nginx -s quit\n./nginx\n```\n\n2. 重新加载配置文件\n\n   当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效。\n\n```\n./nginx -s reload\n```\n\n# 测试\n\nnginx安装成功，启动nginx，即可访问虚拟机上的nginx\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/ok.png\" algin=\"center\"/>\n\n</div>\n\n到这说明nginx上安装成功。","slug":"Linux下安装Nginx","published":1,"updated":"2018-03-13T05:51:21.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghk6u50003q3gfkci9rq3y0","content":"<div align=\"center\"><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/index.jpg\" algin=\"center\"></div><a id=\"more\"></a><br><br># Nginx安装环境<br><br>Nginx是C语言开发，建议在Linxu上运行，下面操作实在Centos6.5上的安装环境。<br><br>1. <strong>gcc</strong><br><br>安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc。<br><br>安装命令：<strong>yum install gcc-c++</strong><br><br>2. <strong>PCRE</strong><br><br>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。<br><br>安装命令：<strong>yum install -y pcre pcre-devel</strong><br><br>3. zlib<br><br>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。<br><br>安装命令：<strong>yum install -y zlib zlib-devel</strong><br><br>4. openssl<br><br>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。<br><br>安装命令：<strong>yum install -y openssl openssl-devel</strong><br><br># 编译安装<br><br>将nginx-1.8.0.tar.gz拷贝至Linux服务器后解压。<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf nginx-<span class=\"number\">1.8</span>.0.tar.gz</div><div class=\"line\">cd nginx-<span class=\"number\">1.8</span>.0</div></pre></td></tr></table></figure><br><br>1. configure<br><br>./configure –help查询详细参数。参数设置如下：<br><br><strong>注意：下边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录</strong><br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure \\</div><div class=\"line\">--prefix=/usr/local/nginx \\</div><div class=\"line\">--pid-path=/var/run/nginx/nginx.pid \\</div><div class=\"line\">--lock-path=/var/lock/nginx.lock \\</div><div class=\"line\">--error-log-path=/var/log/nginx/error.log \\</div><div class=\"line\">--http-log-path=/var/log/nginx/access.log \\</div><div class=\"line\">--with-http_gzip_static_module \\</div><div class=\"line\">--http-client-body-temp-path=/var/temp/nginx/client \\</div><div class=\"line\">--http-proxy-temp-path=/var/temp/nginx/proxy \\</div><div class=\"line\">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\</div><div class=\"line\">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\</div><div class=\"line\">--http-scgi-temp-path=/var/temp/nginx/scgi</div></pre></td></tr></table></figure><br><br>2. 编译安装<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make  install</div></pre></td></tr></table></figure><br><br><div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/install.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"启动Nginx\"><a href=\"#启动Nginx\" class=\"headerlink\" title=\"启动Nginx\"></a>启动Nginx</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/nginx/sbin/</div><div class=\"line\">./nginx</div><div class=\"line\"><span class=\"comment\">// 查询nginx进程命令</span></div><div class=\"line\">ps aux|grep nginx</div></pre></td></tr></table></figure>\n<p><strong>注意：执行./nginx启动nginx，这里可以-c指定加载的nginx配置文件，如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./nginx -c /usr/soft/nginx-1.8.0/conf/nginx.conf</div></pre></td></tr></table></figure>\n<p><strong>如果不指定-c，nginx在启动时默认加载/usr/local/nginx/conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数（–conf-path= 指向配置文件（nginx.conf））</strong></p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/start.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"重启Nginx\"><a href=\"#重启Nginx\" class=\"headerlink\" title=\"重启Nginx\"></a>重启Nginx</h1><ol>\n<li><p>先停止再启动（建议使用）</p>\n<p>对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./nginx -s quit</div><div class=\"line\">./nginx</div></pre></td></tr></table></figure>\n<ol>\n<li><p>重新加载配置文件</p>\n<p>当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./nginx -s reload</div></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>nginx安装成功，启动nginx，即可访问虚拟机上的nginx</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/ok.png\" algin=\"center\"><br><br></div>\n\n<p>到这说明nginx上安装成功。</p>\n","site":{"data":{}},"excerpt":"<div align=center><img width=\"400\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/index.jpg\" algin=\"center\"/></div>","more":"<br><br># Nginx安装环境<br><br>Nginx是C语言开发，建议在Linxu上运行，下面操作实在Centos6.5上的安装环境。<br><br>1. <strong>gcc</strong><br><br>安装nginx需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有gcc环境，需要安装gcc。<br><br>安装命令：<strong>yum install gcc-c++</strong><br><br>2. <strong>PCRE</strong><br><br>PCRE(Perl Compatible Regular Expressions)是一个Perl库，包括 perl 兼容的正则表达式库。nginx的http模块使用pcre来解析正则表达式，所以需要在linux上安装pcre库。<br><br>安装命令：<strong>yum install -y pcre pcre-devel</strong><br><br>3. zlib<br><br>zlib库提供了很多种压缩和解压缩的方式，nginx使用zlib对http包的内容进行gzip，所以需要在linux上安装zlib库。<br><br>安装命令：<strong>yum install -y zlib zlib-devel</strong><br><br>4. openssl<br><br>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http），所以需要在linux安装openssl库。<br><br>安装命令：<strong>yum install -y openssl openssl-devel</strong><br><br># 编译安装<br><br>将nginx-1.8.0.tar.gz拷贝至Linux服务器后解压。<br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf nginx-<span class=\"number\">1.8</span>.0.tar.gz</div><div class=\"line\">cd nginx-<span class=\"number\">1.8</span>.0</div></pre></td></tr></table></figure><br><br>1. configure<br><br>./configure –help查询详细参数。参数设置如下：<br><br><strong>注意：下边将临时文件目录指定为/var/temp/nginx，需要在/var下创建temp及nginx目录</strong><br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure \\</div><div class=\"line\">--prefix=/usr/local/nginx \\</div><div class=\"line\">--pid-path=/var/run/nginx/nginx.pid \\</div><div class=\"line\">--lock-path=/var/lock/nginx.lock \\</div><div class=\"line\">--error-log-path=/var/log/nginx/error.log \\</div><div class=\"line\">--http-log-path=/var/log/nginx/access.log \\</div><div class=\"line\">--with-http_gzip_static_module \\</div><div class=\"line\">--http-client-body-temp-path=/var/temp/nginx/client \\</div><div class=\"line\">--http-proxy-temp-path=/var/temp/nginx/proxy \\</div><div class=\"line\">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\</div><div class=\"line\">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\</div><div class=\"line\">--http-scgi-temp-path=/var/temp/nginx/scgi</div></pre></td></tr></table></figure><br><br>2. 编译安装<br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make  install</div></pre></td></tr></table></figure><br><br><div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/install.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"启动Nginx\"><a href=\"#启动Nginx\" class=\"headerlink\" title=\"启动Nginx\"></a>启动Nginx</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/local/nginx/sbin/</div><div class=\"line\">./nginx</div><div class=\"line\"><span class=\"comment\">// 查询nginx进程命令</span></div><div class=\"line\">ps aux|grep nginx</div></pre></td></tr></table></figure>\n<p><strong>注意：执行./nginx启动nginx，这里可以-c指定加载的nginx配置文件，如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./nginx -c /usr/soft/nginx-1.8.0/conf/nginx.conf</div></pre></td></tr></table></figure>\n<p><strong>如果不指定-c，nginx在启动时默认加载/usr/local/nginx/conf/nginx.conf文件，此文件的地址也可以在编译安装nginx时指定./configure的参数（–conf-path= 指向配置文件（nginx.conf））</strong></p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/start.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"重启Nginx\"><a href=\"#重启Nginx\" class=\"headerlink\" title=\"重启Nginx\"></a>重启Nginx</h1><ol>\n<li><p>先停止再启动（建议使用）</p>\n<p>对nginx进行重启相当于先停止nginx再启动nginx，即先执行停止命令再执行启动命令。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">./nginx -s quit</div><div class=\"line\">./nginx</div></pre></td></tr></table></figure>\n<ol>\n<li><p>重新加载配置文件</p>\n<p>当nginx的配置文件nginx.conf修改后，要想让配置生效需要重启nginx，使用-s reload不用先停止nginx再启动nginx即可将配置信息在nginx中生效。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./nginx -s reload</div></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>nginx安装成功，启动nginx，即可访问虚拟机上的nginx</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2018-01/linux_nginx/ok.png\" algin=\"center\"/><br><br></div>\n\n<p>到这说明nginx上安装成功。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjghk6tzl00063gfko6yg0oa7","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6tzv000b3gfkr53j69ke"},{"post_id":"cjghk6tz100013gfk5niy7mnf","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u00000f3gfklaeqq0lv"},{"post_id":"cjghk6tzm00073gfkc7223aq9","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u05000i3gfkdoxw98zl"},{"post_id":"cjghk6tzt000a3gfkyc9pvpzz","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u0a000m3gfkqvtdj6vf"},{"post_id":"cjghk6tzb00023gfk1icgof6u","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u0d000p3gfke1rz0999"},{"post_id":"cjghk6tzw000c3gfkwpj23otf","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u0h000t3gfk36un7wkv"},{"post_id":"cjghk6u01000g3gfkise33y0y","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u0l000w3gfkytdxhmd8"},{"post_id":"cjghk6tzj00053gfkcde7gle9","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u0r00103gfkqto9o5rn"},{"post_id":"cjghk6u06000j3gfkpjzrjr6e","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u0u00133gfk4jg81xbe"},{"post_id":"cjghk6u0b000n3gfkrqww8apy","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u0y00173gfk54a2jg1y"},{"post_id":"cjghk6u0e000q3gfkkjmz2hao","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u11001a3gfkulldmo36"},{"post_id":"cjghk6u0i000u3gfku645vchc","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u16001e3gfk0o655dln"},{"post_id":"cjghk6u0s00113gfk31ipjmpi","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u1a001h3gfk26bghtwp"},{"post_id":"cjghk6u0v00143gfk19lee02z","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u1d001l3gfkqpv2hxp4"},{"post_id":"cjghk6u0y00183gfkbdpl12cs","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u1g001o3gfktve18orv"},{"post_id":"cjghk6u12001b3gfkqpo17gs8","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u1o001r3gfk3ejb2rrc"},{"post_id":"cjghk6u17001f3gfkghxtn5uv","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u1y001v3gfki1yruvn3"},{"post_id":"cjghk6u1a001i3gfke1jo39xq","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u26001y3gfkdr053jyq"},{"post_id":"cjghk6u1e001m3gfkdls1qdbu","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u2k00223gfkggxbb7cg"},{"post_id":"cjghk6u1j001p3gfk6dxpop69","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u2q00253gfkeh4o3uv5"},{"post_id":"cjghk6u1q001t3gfk7dm5d529","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u3000293gfkb8uzy1b9"},{"post_id":"cjghk6u20001w3gfkoktudvf6","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u34002c3gfkxf4v4wlq"},{"post_id":"cjghk6u2900203gfkcm39j5s7","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u39002g3gfkoqiboiss"},{"post_id":"cjghk6u2l00233gfkqe1nvik5","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u3f002k3gfk0ki7jqlb"},{"post_id":"cjghk6u2s00263gfkj3f4lecm","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u3j002o3gfk2jl1xh1n"},{"post_id":"cjghk6u32002a3gfk60tfb8eq","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u3o002r3gfkob71d0ml"},{"post_id":"cjghk6u3a002h3gfkh8cgcbs5","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u3t002w3gfkq7hrbr0v"},{"post_id":"cjghk6u3k002p3gfkjk7806e0","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u3y002z3gfkx86ehzw9"},{"post_id":"cjghk6u35002d3gfk7s8wtpxn","category_id":"cjghk6u3e002j3gfkdqzau2xf","_id":"cjghk6u4400343gfkoe44zjh9"},{"post_id":"cjghk6u3u002x3gfkh75nnaov","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u4700373gfkulhxbonb"},{"post_id":"cjghk6u3g002l3gfk9a3hlcfx","category_id":"cjghk6u3e002j3gfkdqzau2xf","_id":"cjghk6u4d003b3gfkv32pwks4"},{"post_id":"cjghk6u3z00303gfk87uaf0uw","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u4h003e3gfk85bot9xe"},{"post_id":"cjghk6u4500353gfkqd6dgwnb","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u4o003i3gfktffahvwg"},{"post_id":"cjghk6u3o002s3gfkif6xcluu","category_id":"cjghk6u4000313gfkts6hurh7","_id":"cjghk6u4v003l3gfkj9cq7v25"},{"post_id":"cjghk6u4700383gfkfbs2r7hp","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u4z003p3gfkqo6wezqe"},{"post_id":"cjghk6u4e003c3gfkuuo8p90i","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u53003s3gfkp4qrzes8"},{"post_id":"cjghk6u4i003f3gfkkakgdtt8","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u55003v3gfkeujjuc1i"},{"post_id":"cjghk6u4q003j3gfklfn0ytvt","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u57003x3gfkgjsjoptj"},{"post_id":"cjghk6u4v003m3gfky2m18u5y","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u5a003z3gfknkzpc7pl"},{"post_id":"cjghk6u50003q3gfkci9rq3y0","category_id":"cjghk6tze00033gfkyrbs9pan","_id":"cjghk6u5d00423gfknf7t2i67"}],"PostTag":[{"post_id":"cjghk6tz100013gfk5niy7mnf","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u03000h3gfkhlm7gg95"},{"post_id":"cjghk6tz100013gfk5niy7mnf","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u08000k3gfkp91d3nhj"},{"post_id":"cjghk6u01000g3gfkise33y0y","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u0c000o3gfkxwje5ko3"},{"post_id":"cjghk6u01000g3gfkise33y0y","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u0g000r3gfkzytmu6xt"},{"post_id":"cjghk6u0b000n3gfkrqww8apy","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u0j000v3gfkwjwgp072"},{"post_id":"cjghk6u0b000n3gfkrqww8apy","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u0p000y3gfkt5l2k8wf"},{"post_id":"cjghk6tzb00023gfk1icgof6u","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u0t00123gfk55ijp7yg"},{"post_id":"cjghk6tzb00023gfk1icgof6u","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u0w00153gfkn6fmxqe9"},{"post_id":"cjghk6u0n000x3gfk0naczwl0","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u1000193gfk7aw4tfse"},{"post_id":"cjghk6tzj00053gfkcde7gle9","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u14001c3gfker2x1zxi"},{"post_id":"cjghk6tzj00053gfkcde7gle9","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u18001g3gfkg9y94seo"},{"post_id":"cjghk6tzl00063gfko6yg0oa7","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u1c001j3gfktg7fweu1"},{"post_id":"cjghk6tzl00063gfko6yg0oa7","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u1f001n3gfk1k3dl1ym"},{"post_id":"cjghk6tzm00073gfkc7223aq9","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u1m001q3gfksqxrh2ff"},{"post_id":"cjghk6tzm00073gfkc7223aq9","tag_id":"cjghk6u15001d3gfkg0mk4xw6","_id":"cjghk6u1u001u3gfknybar4j4"},{"post_id":"cjghk6tzt000a3gfkyc9pvpzz","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u24001x3gfk3wikv8ua"},{"post_id":"cjghk6tzt000a3gfkyc9pvpzz","tag_id":"cjghk6u1d001k3gfkaba8oxzx","_id":"cjghk6u2g00213gfkvwclxpx7"},{"post_id":"cjghk6tzw000c3gfkwpj23otf","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u2o00243gfkfvqdd717"},{"post_id":"cjghk6tzw000c3gfkwpj23otf","tag_id":"cjghk6u1d001k3gfkaba8oxzx","_id":"cjghk6u2x00283gfk48pltv6y"},{"post_id":"cjghk6u06000j3gfkpjzrjr6e","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u33002b3gfkndmbrdoe"},{"post_id":"cjghk6u06000j3gfkpjzrjr6e","tag_id":"cjghk6u27001z3gfkokg41vby","_id":"cjghk6u36002e3gfk6x2a0ao3"},{"post_id":"cjghk6u32002a3gfk60tfb8eq","tag_id":"cjghk6u27001z3gfkokg41vby","_id":"cjghk6u3c002i3gfk136q1q6h"},{"post_id":"cjghk6u32002a3gfk60tfb8eq","tag_id":"cjghk6u15001d3gfkg0mk4xw6","_id":"cjghk6u3h002m3gfk2p5zkpbw"},{"post_id":"cjghk6u3a002h3gfkh8cgcbs5","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u3m002q3gfk6hl5rpp2"},{"post_id":"cjghk6u3a002h3gfkh8cgcbs5","tag_id":"cjghk6u27001z3gfkokg41vby","_id":"cjghk6u3q002u3gfkcyc1qxpr"},{"post_id":"cjghk6u0e000q3gfkkjmz2hao","tag_id":"cjghk6u2v00273gfktpmw6vke","_id":"cjghk6u3w002y3gfksr9qm7dr"},{"post_id":"cjghk6u0e000q3gfkkjmz2hao","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u4100323gfkt6bljom2"},{"post_id":"cjghk6u0e000q3gfkkjmz2hao","tag_id":"cjghk6u38002f3gfklu0iyl94","_id":"cjghk6u4600363gfkt9w6po45"},{"post_id":"cjghk6u3k002p3gfkjk7806e0","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u4a00393gfkfzyune49"},{"post_id":"cjghk6u3k002p3gfkjk7806e0","tag_id":"cjghk6u15001d3gfkg0mk4xw6","_id":"cjghk6u4g003d3gfk8joudihu"},{"post_id":"cjghk6u0i000u3gfku645vchc","tag_id":"cjghk6u27001z3gfkokg41vby","_id":"cjghk6u4l003g3gfkwbi769zu"},{"post_id":"cjghk6u0i000u3gfku645vchc","tag_id":"cjghk6u38002f3gfklu0iyl94","_id":"cjghk6u4t003k3gfklvozkh0m"},{"post_id":"cjghk6u3z00303gfk87uaf0uw","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u4x003n3gfk2lsy7uk4"},{"post_id":"cjghk6u3z00303gfk87uaf0uw","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u52003r3gfkzjxpxwzj"},{"post_id":"cjghk6u4500353gfkqd6dgwnb","tag_id":"cjghk6u2v00273gfktpmw6vke","_id":"cjghk6u54003t3gfk5z02mt9e"},{"post_id":"cjghk6u4500353gfkqd6dgwnb","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u56003w3gfkpuu05ppy"},{"post_id":"cjghk6u0s00113gfk31ipjmpi","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u58003y3gfkjvzu79pr"},{"post_id":"cjghk6u0s00113gfk31ipjmpi","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u5c00413gfkh8uqsqnm"},{"post_id":"cjghk6u0s00113gfk31ipjmpi","tag_id":"cjghk6u38002f3gfklu0iyl94","_id":"cjghk6u5d00433gfkdt8ztlqs"},{"post_id":"cjghk6u4700383gfkfbs2r7hp","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u5e00453gfkzj5n3o52"},{"post_id":"cjghk6u4700383gfkfbs2r7hp","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u5f00463gfk7tk65188"},{"post_id":"cjghk6u0v00143gfk19lee02z","tag_id":"cjghk6u27001z3gfkokg41vby","_id":"cjghk6u5g00473gfkelhzv7pm"},{"post_id":"cjghk6u0y00183gfkbdpl12cs","tag_id":"cjghk6u27001z3gfkokg41vby","_id":"cjghk6u5i00493gfk7wvfa5vw"},{"post_id":"cjghk6u12001b3gfkqpo17gs8","tag_id":"cjghk6u27001z3gfkokg41vby","_id":"cjghk6u5j004a3gfk9tfvriao"},{"post_id":"cjghk6u17001f3gfkghxtn5uv","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u5k004c3gfknlqtk1j2"},{"post_id":"cjghk6u17001f3gfkghxtn5uv","tag_id":"cjghk6u54003u3gfkz983e6it","_id":"cjghk6u5k004d3gfk0xf1hg3z"},{"post_id":"cjghk6u1a001i3gfke1jo39xq","tag_id":"cjghk6u5a00403gfkc070p7y0","_id":"cjghk6u5m004f3gfkytbmxev4"},{"post_id":"cjghk6u1e001m3gfkdls1qdbu","tag_id":"cjghk6u5e00443gfk7xifk0p7","_id":"cjghk6u5n004g3gfkkq0f4ts5"},{"post_id":"cjghk6u1j001p3gfk6dxpop69","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u5q004i3gfkg40gzin4"},{"post_id":"cjghk6u1j001p3gfk6dxpop69","tag_id":"cjghk6u5h00483gfkgogthbot","_id":"cjghk6u5r004j3gfkpjqdt8u5"},{"post_id":"cjghk6u1q001t3gfk7dm5d529","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u5t004l3gfkizwlzrrd"},{"post_id":"cjghk6u1q001t3gfk7dm5d529","tag_id":"cjghk6u5h00483gfkgogthbot","_id":"cjghk6u5t004m3gfk05aelsct"},{"post_id":"cjghk6u20001w3gfkoktudvf6","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u5v004o3gfk0nv05wap"},{"post_id":"cjghk6u20001w3gfkoktudvf6","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u5w004p3gfkq8r3ovdf"},{"post_id":"cjghk6u20001w3gfkoktudvf6","tag_id":"cjghk6u54003u3gfkz983e6it","_id":"cjghk6u5y004r3gfkva3629zj"},{"post_id":"cjghk6u2900203gfkcm39j5s7","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u5y004s3gfks50neduh"},{"post_id":"cjghk6u2900203gfkcm39j5s7","tag_id":"cjghk6u5h00483gfkgogthbot","_id":"cjghk6u60004u3gfkkbe323vd"},{"post_id":"cjghk6u2l00233gfkqe1nvik5","tag_id":"cjghk6tzi00043gfkuk1kc6t0","_id":"cjghk6u60004v3gfkpitim34r"},{"post_id":"cjghk6u2l00233gfkqe1nvik5","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u63004x3gfkny1dgmeo"},{"post_id":"cjghk6u2l00233gfkqe1nvik5","tag_id":"cjghk6u5h00483gfkgogthbot","_id":"cjghk6u64004y3gfk0cs8bvi2"},{"post_id":"cjghk6u2s00263gfkj3f4lecm","tag_id":"cjghk6u2v00273gfktpmw6vke","_id":"cjghk6u6500503gfkouvfx677"},{"post_id":"cjghk6u2s00263gfkj3f4lecm","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u6600513gfksy2xqxda"},{"post_id":"cjghk6u35002d3gfk7s8wtpxn","tag_id":"cjghk6u5x004q3gfkpqrg400s","_id":"cjghk6u6800533gfk2z33pdv7"},{"post_id":"cjghk6u3g002l3gfk9a3hlcfx","tag_id":"cjghk6u5x004q3gfkpqrg400s","_id":"cjghk6u6800543gfktyp4cfco"},{"post_id":"cjghk6u3o002s3gfkif6xcluu","tag_id":"cjghk6u5x004q3gfkpqrg400s","_id":"cjghk6u6900553gfkbw0tgjp9"},{"post_id":"cjghk6u3u002x3gfkh75nnaov","tag_id":"cjghk6u64004z3gfk4ftesgjz","_id":"cjghk6u6b00573gfkf3zm7g3e"},{"post_id":"cjghk6u3u002x3gfkh75nnaov","tag_id":"cjghk6u6700523gfkg4p46aea","_id":"cjghk6u6b00583gfktqyzab1d"},{"post_id":"cjghk6u4e003c3gfkuuo8p90i","tag_id":"cjghk6u6700523gfkg4p46aea","_id":"cjghk6u6d005a3gfkol4oxg78"},{"post_id":"cjghk6u4e003c3gfkuuo8p90i","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u6e005b3gfk1fn4p90w"},{"post_id":"cjghk6u4i003f3gfkkakgdtt8","tag_id":"cjghk6u6700523gfkg4p46aea","_id":"cjghk6u6g005d3gfkm0zj0ppy"},{"post_id":"cjghk6u4i003f3gfkkakgdtt8","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u6g005e3gfkmknbzkff"},{"post_id":"cjghk6u4q003j3gfklfn0ytvt","tag_id":"cjghk6u6700523gfkg4p46aea","_id":"cjghk6u6i005g3gfk2l7ax9wr"},{"post_id":"cjghk6u4q003j3gfklfn0ytvt","tag_id":"cjghk6tzq00093gfkcmookr56","_id":"cjghk6u6i005h3gfk85u9ql09"},{"post_id":"cjghk6u4v003m3gfky2m18u5y","tag_id":"cjghk6u5x004q3gfkpqrg400s","_id":"cjghk6u6k005j3gfk0fgfhcea"},{"post_id":"cjghk6u50003q3gfkci9rq3y0","tag_id":"cjghk6u5a00403gfkc070p7y0","_id":"cjghk6u6l005k3gfkjey1cu61"},{"post_id":"cjghk6u50003q3gfkci9rq3y0","tag_id":"cjghk6u38002f3gfklu0iyl94","_id":"cjghk6u6n005l3gfkpm5cayfb"}],"Tag":[{"name":"java","_id":"cjghk6tzi00043gfkuk1kc6t0"},{"name":"tips","_id":"cjghk6tzq00093gfkcmookr56"},{"name":"tool","_id":"cjghk6u15001d3gfkg0mk4xw6"},{"name":"jvm","_id":"cjghk6u1d001k3gfkaba8oxzx"},{"name":"mysql","_id":"cjghk6u27001z3gfkokg41vby"},{"name":"tomcat","_id":"cjghk6u2v00273gfktpmw6vke"},{"name":"linux","_id":"cjghk6u38002f3gfklu0iyl94"},{"name":"mybatis","_id":"cjghk6u54003u3gfkz983e6it"},{"name":"nginx","_id":"cjghk6u5a00403gfkc070p7y0"},{"name":"redis","_id":"cjghk6u5e00443gfk7xifk0p7"},{"name":"spring","_id":"cjghk6u5h00483gfkgogthbot"},{"name":"随笔","_id":"cjghk6u5x004q3gfkpqrg400s"},{"name":"移动端","_id":"cjghk6u64004z3gfk4ftesgjz"},{"name":"前端","_id":"cjghk6u6700523gfkg4p46aea"}]}}
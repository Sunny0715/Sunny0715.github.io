{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinPay.jpg","path":"images/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/1.png","path":"uploads/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/header-bk.jpg","path":"uploads/header-bk.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/weixinPay.jpg","path":"uploads/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"578e1d55dcc56999bea63e923e2fe8c822a15ea0","modified":1496540493000},{"_id":"source/CNAME","hash":"68f171e51cfb4edfbc77d45b70fc2562088c67df","modified":1496540493000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1496540493000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1496540493000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1496540493000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1496540493000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1496540493000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1496540493000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1496540493000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1496540493000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1496540493000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1496540493000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1496540493000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1496540493000},{"_id":"themes/next/_config.yml","hash":"56349ba7c8abd3b3849e89d5f6cd39d3557d6348","modified":1496540493000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1496540493000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1496540493000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1496540493000},{"_id":"source/_posts/JAVA定时调度-Timer和Executors.md","hash":"c796ff3f49dd18ca72e632f60d073e26fa51f341","modified":1503811442506},{"_id":"source/_posts/JAVA实现HTML转PDF.md","hash":"6f1c146692d6e6b85e55c83690b7d170e70d5281","modified":1505277111218},{"_id":"source/_posts/JAVA实现简单爬虫.md","hash":"3801a3f794cbc656e2c5a839b5605664ceeacaa7","modified":1496540493000},{"_id":"source/_posts/JVM入门.md","hash":"1ae460e828dc0dc9c928d8c0a9d47b8bf15e2af0","modified":1512436968397},{"_id":"source/_posts/Java-String-intern方法.md","hash":"19b654624c4a87eaaa8e8e8d59a71e0bfcd7a89b","modified":1512626765734},{"_id":"source/_posts/Java备份和还原MySQL数据库.md","hash":"19810e7c16b2d68787a87318329b117d264a1cde","modified":1506301195751},{"_id":"source/_posts/Java生成PDF.md","hash":"f657720b776cc665561b3491fb6412a37914185b","modified":1510629341506},{"_id":"source/_posts/Linux基本命令.md","hash":"f1064a9f9b1376094a836f68568a1782a22e6873","modified":1496540493000},{"_id":"source/_posts/Markdown语法.md","hash":"478e074003e7029e9ed3856a50cb3a858e510dcf","modified":1496540493000},{"_id":"source/_posts/MySQL优化.md","hash":"d7cec6cf4f9869b129f58a207b72102c8b802552","modified":1503811062660},{"_id":"source/_posts/Spring-AOP两种配置方式.md","hash":"3b2e79e4f10692842bdf8fb3a0f7f8c72f37ef6c","modified":1505527370879},{"_id":"source/_posts/Spring-Mybatis之Mapper热部署.md","hash":"0391352327ccd5f8e21b634ff7632baa9738bcfb","modified":1506045463704},{"_id":"source/_posts/分布式下ID生成算法-SnowFlake.md","hash":"7d0b74c820f8805822fa6559eed67aa6b9eb9373","modified":1509347596586},{"_id":"source/_posts/博客建成第一天.md","hash":"7b965577a692db315a78580cdfe5fac19d97448e","modified":1496540493000},{"_id":"source/_posts/微信公众号网页开发.md","hash":"e220695dcb060bb8050ab5b07e423d6ca0694a8c","modified":1496540493000},{"_id":"source/_posts/浅谈共享单车.md","hash":"da764d80cedc68a3215a4d76367ede0751ddd77d","modified":1496540493000},{"_id":"source/_posts/系统中功能点的版本控制.md","hash":"256186a3c2feeaa13d042a5619a985c98112faf5","modified":1506325694578},{"_id":"source/_posts/跨页面-Tab-Window-通信的几种方法.md","hash":"1d5399ef44bf3b72e8acadbb9a993215ce3111a1","modified":1505284387650},{"_id":"source/_posts/静态服务器搭建及前端知识点.md","hash":"432140fe229918d47f45224249685133aaadc180","modified":1505289585005},{"_id":"source/about/index.md","hash":"98440174c0a5feee882109b861955d345f85e531","modified":1496540493000},{"_id":"source/categories/index.md","hash":"90bb103e21f9645871d8ce6122db99407c76ea87","modified":1496540493000},{"_id":"source/tags/index.md","hash":"11c6ba3279f347c97931477f61bc326b07f0714e","modified":1496540493000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1496540493000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1496540493000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1496540493000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1496540493000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1496540493000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1496540493000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1496540493000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1496540493000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1496540493000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1496540493000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1496540493000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1496540493000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1496540493000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1496540493000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1496540493000},{"_id":"themes/next/layout/_layout.swig","hash":"577b57ef558343fe184221a02589efc068cc6370","modified":1496540493000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1496540493000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1496540493000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1496540493000},{"_id":"themes/next/layout/page.swig","hash":"2166316fcd0e93bf9f8a54ce55a8f675eeab23ae","modified":1496540493000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1496540493000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1496540493000},{"_id":"themes/next/layout/tag.swig","hash":"9f71c3428ce3c21e14e0c4fd0eb21d97170eb492","modified":1496540493000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1496540493000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1496540493000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1496540493000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1496540493000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1496540493000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496540493000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1496540493000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1496540493000},{"_id":"themes/next/layout/_macro/post.swig","hash":"3ac53a81c7a1abede8f533008eb0034aabec0ad6","modified":1496540493000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496540493000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1496540493000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e373ae99e1ffe14c9892ffc0efa93a52a715924b","modified":1496540493000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1496540493000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3543660367ff829abb3c56e0a9c04c209bcfbf8d","modified":1496540493000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3610c011f285501132e5655ae4d1819e6d33e7de","modified":1496540493000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1496540493000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1496540493000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1496540493000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1496540493000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1496540493000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1496540493000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1496540493000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1496540493000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1496540493000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1496540493000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1496540493000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1496540493000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1496540493000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1496540493000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1496540493000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1496540493000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1496540493000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1496540493000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1496540493000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1496540493000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1496540493000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1496540493000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496540493000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496540493000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1496540493000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1496540493000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496540493000},{"_id":"themes/next/source/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496540493000},{"_id":"themes/next/source/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1496540493000},{"_id":"themes/next/source/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1496540493000},{"_id":"themes/next/source/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1496540493000},{"_id":"source/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1504510516600},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1496540493000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1496540493000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1496540493000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1496540493000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c9dfa6b127661e34fe976df36a34ae42d07f175e","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1496540493000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1496540493000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"9fbdeb83a3a824fc27c16865ed3706889e99a04e","modified":1496540493000},{"_id":"themes/next/source/css/_variables/donate.styl","hash":"5ce88441b2400ebda1e13ae0903880f9ceaa3593","modified":1496540493000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496540493000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496540493000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496540493000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496540493000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496540493000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496540493000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496540493000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496540493000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1496540493000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1496540493000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496540493000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496540493000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496540493000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1496540493000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1496540493000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496540493000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496540493000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"737f317cb83de04002f3bfda24f996775ff05f8e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"0f0d6d0f2a3a45df70acf8c553d1fc5aac2fdff2","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496540493000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496540493000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496540493000},{"_id":"public/baidusitemap.xml","hash":"d95574d3f1a68996ecbbd35be07ac2d9ef3cbe32","modified":1512626785214},{"_id":"public/search.xml","hash":"a0cabc7978e36d7c0a9104e01db4bce4c74a1e21","modified":1512626785315},{"_id":"public/sitemap.xml","hash":"88ce4b77fcc56e29def418c7491028774787b1e4","modified":1512626785315},{"_id":"public/404.html","hash":"213d3a1ffcb0464a2cc5bbe985cce8aea66a2eed","modified":1512626785337},{"_id":"public/about/index.html","hash":"835ddf1df1508aad97f28e8817495252d6fb3f34","modified":1512626785337},{"_id":"public/categories/index.html","hash":"956f90dde6665fb6fbc81977c201cf95436756d4","modified":1512626785338},{"_id":"public/tags/index.html","hash":"3ee9c3d8cb8575255700dfc733519c849d9bfb1e","modified":1512626785338},{"_id":"public/2017/03/07/博客建成第一天/index.html","hash":"6951b3a13a632c5aaacae601b7be0c1fe64f7765","modified":1512626785338},{"_id":"public/2017/03/21/Markdown语法/index.html","hash":"fd1f4f5c07d57dba3677a01f5275fdcc13cb1530","modified":1512626785338},{"_id":"public/2017/03/24/浅谈共享单车/index.html","hash":"255978b7783b7cd89143195a9d676d1315ea7b28","modified":1512626785338},{"_id":"public/2017/03/27/JAVA定时调度-Timer和Executors/index.html","hash":"79dd41959b5f827409894169033f187b797ba023","modified":1512626785338},{"_id":"public/2017/04/01/JAVA实现简单爬虫/index.html","hash":"161d7099ea74973f0657ab35472d36404b3c420b","modified":1512626785338},{"_id":"public/2017/04/07/Linux基本命令/index.html","hash":"a384bc6c7e1e3f718818ed6cbdf6a54d5ec4f5e4","modified":1512626785339},{"_id":"public/2017/04/17/MySQL优化/index.html","hash":"17ea387f934450f48bde6cd55bbfaac453af9cc0","modified":1512626785339},{"_id":"public/2017/06/01/微信公众号网页开发/index.html","hash":"4dc5b7f600e093a2a1b9b3c83a69d5ee5d4e18a6","modified":1512626785339},{"_id":"public/2017/06/13/静态服务器搭建及前端知识点/index.html","hash":"07976f21f383955ba042bf66e064966a1a2cd291","modified":1512626785339},{"_id":"public/2017/07/27/JAVA实现HTML转PDF/index.html","hash":"87ea0a2476f70829182452c13352a439ac4880cf","modified":1512626785339},{"_id":"public/2017/09/01/跨页面-Tab-Window-通信的几种方法/index.html","hash":"295cad4ad413afe21d8e3cae6ca2362875464e41","modified":1512626785339},{"_id":"public/2017/09/09/Spring-AOP两种配置方式/index.html","hash":"d34fddc250d59a3a05cef0b4be72f35135751522","modified":1512626785339},{"_id":"public/2017/09/15/Spring-Mybatis之Mapper热部署/index.html","hash":"42851a039f7249f7a97013b963ccdb4074cc248a","modified":1512626785339},{"_id":"public/2017/09/21/系统中功能点的版本控制/index.html","hash":"bf1143f3617b3acc7a4bf3bd490df03d9d3b53f1","modified":1512626785339},{"_id":"public/2017/09/24/Java备份和还原MySQL数据库/index.html","hash":"31496a4b2a0ad5ec72300e2e04902e0582275779","modified":1512626785340},{"_id":"public/2017/10/30/分布式下ID生成算法-SnowFlake/index.html","hash":"adbdd734698baf6c659a3bb203537b55fdf424eb","modified":1512626785340},{"_id":"public/2017/11/13/Java生成PDF/index.html","hash":"02f525e8d881eb058fe418d3903ca229314975c2","modified":1512626785340},{"_id":"public/2017/11/20/JVM入门/index.html","hash":"9ab49eb2bef9ba25f7ce8f3bfaf100e7ed7060e5","modified":1512626785340},{"_id":"public/2017/12/01/Java-String-intern方法/index.html","hash":"145beb6c7767962c5deaeaae620b17b00e35a91b","modified":1512626785341},{"_id":"public/archives/index.html","hash":"5a7d88344f21950df89738c5a088c8660748496e","modified":1512626785341},{"_id":"public/archives/page/2/index.html","hash":"d7ccb0ff3bd2c5b25ed075dcd71bd74ef0df4293","modified":1512626785341},{"_id":"public/archives/page/3/index.html","hash":"17d2e07eaaa0543259fd0988d3bad2349f979229","modified":1512626785341},{"_id":"public/archives/page/4/index.html","hash":"3b34c78dee9b40ac68f51f2cb74f28d2aad88579","modified":1512626785341},{"_id":"public/archives/2017/index.html","hash":"980705bae4c9df14f84707fd8f8aa35bce139ba5","modified":1512626785341},{"_id":"public/archives/2017/page/2/index.html","hash":"10267e9703376230adf29695c2e28f990b6710da","modified":1512626785341},{"_id":"public/archives/2017/page/3/index.html","hash":"715cc886d0bd663429c0a8f07d3972ab3bbb4d06","modified":1512626785341},{"_id":"public/archives/2017/page/4/index.html","hash":"e4f88a3f0d765c42f2075448f8809657860cc3a5","modified":1512626785341},{"_id":"public/archives/2017/03/index.html","hash":"f71a73c14a345fef4f3b0323e11b0d2d41b99470","modified":1512626785341},{"_id":"public/archives/2017/04/index.html","hash":"fdd578b5ef7f55c954d190706f724e872bd1a604","modified":1512626785341},{"_id":"public/archives/2017/06/index.html","hash":"99e23afd82c49c763119d70c8c26c2504b7d9e9c","modified":1512626785341},{"_id":"public/archives/2017/07/index.html","hash":"aced9487a57463c0d25850faf073923771754a1c","modified":1512626785341},{"_id":"public/archives/2017/09/index.html","hash":"a59feed19ba8c17e62bbb168c232aceef5292d8e","modified":1512626785341},{"_id":"public/archives/2017/10/index.html","hash":"36bb06aa07c94a87bef18597715d22819fdb0bd9","modified":1512626785342},{"_id":"public/archives/2017/11/index.html","hash":"62ec48b88adce6f838d158416ea61af2b0d5d6e3","modified":1512626785342},{"_id":"public/archives/2017/12/index.html","hash":"14704fe248ba61aad1be48218b5d6838da3a62f8","modified":1512626785342},{"_id":"public/index.html","hash":"167d79512d364e8868ceb18d3b2c2661e2aa3289","modified":1512626785342},{"_id":"public/page/2/index.html","hash":"d0be51602da48f4131acbbb9ff4f7aa8d1c64b0c","modified":1512626785342},{"_id":"public/page/3/index.html","hash":"e6f7a98ea162e215a54fd19ea7f174ff45fdb3f8","modified":1512626785342},{"_id":"public/page/4/index.html","hash":"2983a175c7b8c65a3b2b0af25c551fa708f1f1f6","modified":1512626785342},{"_id":"public/categories/technology/index.html","hash":"44357c8dccb159bb9657a2ab09ecaac71480e848","modified":1512626785342},{"_id":"public/categories/technology/page/2/index.html","hash":"184327bcf771a29eaa81b7112e94adf56b159870","modified":1512626785342},{"_id":"public/categories/technology/page/3/index.html","hash":"a8b5b3a825c8a89f5a992e9605581606c58bc9ef","modified":1512626785342},{"_id":"public/categories/technology/page/4/index.html","hash":"0e178c8d648af1e4c3bb78061124de962cf6b257","modified":1512626785342},{"_id":"public/categories/life/index.html","hash":"4ca8dba43b9d69635a29b542328af9ab1decd5e9","modified":1512626785343},{"_id":"public/categories/society/index.html","hash":"b70e97a57b44a243251789341f0939244b393c86","modified":1512626785343},{"_id":"public/tags/java/index.html","hash":"f8bf77cbae5576414444a0aad9f22a833938e40c","modified":1512626785343},{"_id":"public/tags/java/page/2/index.html","hash":"4f7c5f5d69269201ea1e84118a476a37fad59643","modified":1512626785343},{"_id":"public/tags/java/page/3/index.html","hash":"68e7b13b86bc1aaa2196705fa6d56f3909de0044","modified":1512626785343},{"_id":"public/tags/tips/index.html","hash":"2470b2a2daf603904e151a0ff78c311822385183","modified":1512626785343},{"_id":"public/tags/tips/page/2/index.html","hash":"e25b8183aea6fa489110330630ea63563bdfc408","modified":1512626785343},{"_id":"public/tags/extendKW/index.html","hash":"8920021f80df9e498da1dd72b1496f4bade6682f","modified":1512626785343},{"_id":"public/tags/jvm/index.html","hash":"55fa095afbc93af2151f2c04fd688752288f04a8","modified":1512626785343},{"_id":"public/tags/mysql/index.html","hash":"bdf3b0404e48d17f2a9e66a414e1eb67ff0d23c9","modified":1512626785343},{"_id":"public/tags/sql/index.html","hash":"ede7a6d2ca380f19d4f315ab4bc334f4d11b6936","modified":1512626785343},{"_id":"public/tags/spring/index.html","hash":"b352b243330e5fdbf0438652b54d761c307df68c","modified":1512626785343},{"_id":"public/tags/firstday/index.html","hash":"f49baa698d17ef708843a7441aa252b629c9a931","modified":1512626785343},{"_id":"public/tags/js/index.html","hash":"9c42a929e8bbb7dd5242be3253f34e99a6d3a08b","modified":1512626785343},{"_id":"public/tags/移动端/index.html","hash":"df667ef9105bb4048e9bcec9fc87b0afe785e971","modified":1512626785343},{"_id":"public/tags/nowHot/index.html","hash":"ac4cbcd8d278a4d499e988fcb08937f804e7c32a","modified":1512626785343},{"_id":"public/tags/前端/index.html","hash":"a3e83fd898f4d662cc6185edc4b9136379bb7d0a","modified":1512626785344},{"_id":"public/CNAME","hash":"68f171e51cfb4edfbc77d45b70fc2562088c67df","modified":1512626785400},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1512626785400},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1512626785400},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1512626785400},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1512626785400},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1512626785400},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1512626785400},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1512626785400},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1512626785400},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512626785400},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1512626785400},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1512626785400},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1512626785400},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1512626785400},{"_id":"public/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1512626785400},{"_id":"public/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1512626785400},{"_id":"public/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1512626785400},{"_id":"public/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1512626785400},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1512626785400},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1512626785400},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1512626785400},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1512626785400},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1512626785400},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1512626785400},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1512626785400},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1512626785400},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1512626785400},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1512626785400},{"_id":"public/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1512626786794},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1512626786794},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1512626786810},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1512626786825},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1512626786825},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1512626786825},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1512626786825},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1512626786825},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1512626786825},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1512626786825},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1512626786825},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1512626786825},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1512626786825},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1512626786825},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1512626786825},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1512626786825},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1512626786825},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1512626786825},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1512626786825},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1512626786825},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1512626786825},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1512626786825},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1512626786825},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1512626786825},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1512626786825},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1512626786825},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1512626786825},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1512626786825},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1512626786825},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1512626786825},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1512626786825},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1512626786825},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1512626786825},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1512626786825},{"_id":"public/css/main.css","hash":"78287461da2c3683e1c1a2811b9090d20858f581","modified":1512626786825},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1512626786825},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1512626786825},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1512626786825},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1512626786825},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1512626786825},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1512626786825},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1512626786825},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1512626786825},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1512626786825},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1512626786825},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1512626786825},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1512626786825},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1512626786825},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1512626786825},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1512626786825},{"_id":"public/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1512626786937},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1512626786937}],"Category":[{"name":"technology","_id":"cjaw2xf900005swg6byb6odt3"},{"name":"life","_id":"cjaw2xfat001aswg6s0yb9r4y"},{"name":"society","_id":"cjaw2xfb9001kswg6a7f17gat"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-08-14T09:26:38.043Z","updated":"2017-06-04T01:41:33.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjaw2xevu0000swg64ttebszl","content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"About","date":"2017-03-07T01:00:07.000Z","_content":"\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","source":"about/index.md","raw":"---\ntitle: About\ndate: 2017-03-07 09:00:07\n---\n\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","updated":"2017-06-04T01:41:33.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjaw2xf8k0002swg6h2al1vln","content":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n"},{"title":"分类","date":"2017-03-22T01:01:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-22 09:01:55\ntype: \"categories\"\n---\n","updated":"2017-06-04T01:41:33.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjaw2xf8k0004swg64c7uev14","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-03-22T01:01:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-22 09:01:22\ntype: \"tags\"\n---\n","updated":"2017-06-04T01:41:33.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjaw2xf900008swg6jap97ufo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JAVA定时调度 Timer和Executors","date":"2017-03-27T09:42:49.000Z","_content":"\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。\n\n<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","source":"_posts/JAVA定时调度-Timer和Executors.md","raw":"---\ntitle: 'JAVA定时调度 Timer和Executors'\ndate: 2017-03-27 17:42:49\ntags: [java,tips]\ncategories: technology\n---\n\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。\n\n<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","slug":"JAVA定时调度-Timer和Executors","published":1,"updated":"2017-08-27T05:24:02.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf8k0001swg6wxp8dt8z","content":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。</p>\n<a id=\"more\"></a>\n<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。</p>","more":"<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA实现HTML转PDF","date":"2017-07-27T05:22:32.000Z","_content":"\n​\t最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：\n\n1. 使用`wkhtmltox`\n2. 使用`iText+Flying Saucer`\n\n但是还是强烈推荐用第一种方法。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 使用wkhtmltox(推荐)\n\nwkhtmltox实现网页转换成图片或PDF\n\n## 命令实现\n\n1. 进入wkhtmltox官网软件下载  ：https://wkhtmltopdf.org/downloads.html\n2. 安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别`wkhtmltoimage.exe`是将HTML转化为image，`wkhtmltopdf.exe`是将HTML转化为PDF文件，这正是我们想要的。\n\n![path](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png)\n\n3. 进入${home}/bin目录下打开cmd输入以下命令验证 \n\n```java\nwkhtmltopdf HTML路径 保存路径\n如： wkhtmltopdf www.baidu.com d:\\test.pdf\n```\n\n![command](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png)\n\n生成完成后会出现Done。\n\n## 代码实现\n\nJAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段\n\n```java\n/**\n * HTMLTOPPDF\n * 利用wkhtmltopdf生成PDF\n */\npublic class HtmlToPDF {\n    //wkhtmltopdf.exe安装路径\n    public static final String toPdfTool = \"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\";\n    //需要生成PDF的URL\n    public static final String srcPath = \"http://www.jianshu.com/p/4d65857ffe5e\";\n\n    public static void main(String[] args) throws Exception{\n \t\t//设置纸张大小: A4, Letter, etc.\n        String pageSize = \"A4\";\n\t\t//生成后存放路径\n        String destPath = \"E:\\\\PDF生成教程及讲解.pdf\"; \n        convert(pageSize, destPath);\n    }\n\n    public static void convert(String pageSize, String destPath){\n        File file = new File(destPath);\n        File parent = file.getParentFile();\n        if (!parent.exists()){\n            parent.mkdirs();\n        }\n        StringBuilder cmd = new StringBuilder();\n        cmd.append(toPdfTool).append(\" \");\n        cmd.append(\"--page-size \");\n        cmd.append(pageSize).append(\" \");\n        cmd.append(srcPath).append(\" \");\n        cmd.append(destPath);\n\n        try {\n            Runtime.getRuntime().exec(cmd.toString());\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n详细参数说明可参考：<http://www.jianshu.com/p/4d65857ffe5e>\n\n\n\n# 使用iText+Flying Saucer\n\n```\n itext可实现 \n 1.可以进行块的创建\n 2.表格的使用\n 3.设置页面的事件\n 4.字体的设置\n 5.图片的设置（包含水印）\n 6.HTML转化成PDF（支持css,javascript）\n 7.表单创建\n 8.PDF之间的操作等详细的内容可以查看网站的说明。\n```\n\n## Maven配置\n\n```xml\n<dependency>\n   <groupId>com.itextpdf</groupId>\n   <artifactId>itextpdf</artifactId>\n   <version>5.8.8</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.6</version>\n</dependency>\n```\n\n## 代码片段\n\n```java\n/**\n * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。\n */\npublic class HtmlToPDF {\n    public static void main(String[] args) throws Exception{\n\n        Document document = new Document(PageSize.A4.rotate()); //设置为A4纸大小\n\n        ITextRenderer renderer = new ITextRenderer();\n        ITextFontResolver fontResolver = renderer.getFontResolver();\n        fontResolver.addFont(\"D:/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n        // step 2\n        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\"D:\\\\pdf.pdf\"));\n        // step 3\n        document.open();\n        // step 4\n        XMLWorkerHelper.getInstance().parseXHtml(writer, document,\n                new FileInputStream(\"D:/a.html\"));\n        //step 5\n        document.close();\n        System.out.println( \"PDF Created!\" );\n    }\n}\n```\n\n## 注意事项\n\n1. .输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：\n\n   ```html\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n   <html xmlns=\"http://www.w3.org/1999/xhtml\"> \n   ```\n\n\n2. 生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(\"C:/Windows/Fonts/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style='font-family:SimSun'，要是使用其他字符生成pdf时候，中文就会不显示生成PDF\n3. 设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小\n4. 所需的jar包，[下载点我](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip)。核心jar是修改后的\n\n\n\n# 比较和总结\n\n## 比较\n\nitext\n\n```\n1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。\n2. 并且itext中文适配不是很好和换行问题。\n3. 且对HTML格式要求严格。\n```\n\nwkhtmltopdf\n\n```\n1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。\n2. 小巧方便，转换速度快。\n3. 跨平台，在Liunx下用，在win下也可以用。\n```\n\n## 总结\n\n​\t综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。","source":"_posts/JAVA实现HTML转PDF.md","raw":"---\ntitle: JAVA实现HTML转PDF\ndate: 2017-07-27 13:22:32\ntags: [java,tips]\ncategories: technology\n---\n\n​\t最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：\n\n1. 使用`wkhtmltox`\n2. 使用`iText+Flying Saucer`\n\n但是还是强烈推荐用第一种方法。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 使用wkhtmltox(推荐)\n\nwkhtmltox实现网页转换成图片或PDF\n\n## 命令实现\n\n1. 进入wkhtmltox官网软件下载  ：https://wkhtmltopdf.org/downloads.html\n2. 安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别`wkhtmltoimage.exe`是将HTML转化为image，`wkhtmltopdf.exe`是将HTML转化为PDF文件，这正是我们想要的。\n\n![path](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png)\n\n3. 进入${home}/bin目录下打开cmd输入以下命令验证 \n\n```java\nwkhtmltopdf HTML路径 保存路径\n如： wkhtmltopdf www.baidu.com d:\\test.pdf\n```\n\n![command](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png)\n\n生成完成后会出现Done。\n\n## 代码实现\n\nJAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段\n\n```java\n/**\n * HTMLTOPPDF\n * 利用wkhtmltopdf生成PDF\n */\npublic class HtmlToPDF {\n    //wkhtmltopdf.exe安装路径\n    public static final String toPdfTool = \"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\";\n    //需要生成PDF的URL\n    public static final String srcPath = \"http://www.jianshu.com/p/4d65857ffe5e\";\n\n    public static void main(String[] args) throws Exception{\n \t\t//设置纸张大小: A4, Letter, etc.\n        String pageSize = \"A4\";\n\t\t//生成后存放路径\n        String destPath = \"E:\\\\PDF生成教程及讲解.pdf\"; \n        convert(pageSize, destPath);\n    }\n\n    public static void convert(String pageSize, String destPath){\n        File file = new File(destPath);\n        File parent = file.getParentFile();\n        if (!parent.exists()){\n            parent.mkdirs();\n        }\n        StringBuilder cmd = new StringBuilder();\n        cmd.append(toPdfTool).append(\" \");\n        cmd.append(\"--page-size \");\n        cmd.append(pageSize).append(\" \");\n        cmd.append(srcPath).append(\" \");\n        cmd.append(destPath);\n\n        try {\n            Runtime.getRuntime().exec(cmd.toString());\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n详细参数说明可参考：<http://www.jianshu.com/p/4d65857ffe5e>\n\n\n\n# 使用iText+Flying Saucer\n\n```\n itext可实现 \n 1.可以进行块的创建\n 2.表格的使用\n 3.设置页面的事件\n 4.字体的设置\n 5.图片的设置（包含水印）\n 6.HTML转化成PDF（支持css,javascript）\n 7.表单创建\n 8.PDF之间的操作等详细的内容可以查看网站的说明。\n```\n\n## Maven配置\n\n```xml\n<dependency>\n   <groupId>com.itextpdf</groupId>\n   <artifactId>itextpdf</artifactId>\n   <version>5.8.8</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.6</version>\n</dependency>\n```\n\n## 代码片段\n\n```java\n/**\n * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。\n */\npublic class HtmlToPDF {\n    public static void main(String[] args) throws Exception{\n\n        Document document = new Document(PageSize.A4.rotate()); //设置为A4纸大小\n\n        ITextRenderer renderer = new ITextRenderer();\n        ITextFontResolver fontResolver = renderer.getFontResolver();\n        fontResolver.addFont(\"D:/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n        // step 2\n        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\"D:\\\\pdf.pdf\"));\n        // step 3\n        document.open();\n        // step 4\n        XMLWorkerHelper.getInstance().parseXHtml(writer, document,\n                new FileInputStream(\"D:/a.html\"));\n        //step 5\n        document.close();\n        System.out.println( \"PDF Created!\" );\n    }\n}\n```\n\n## 注意事项\n\n1. .输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：\n\n   ```html\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n   <html xmlns=\"http://www.w3.org/1999/xhtml\"> \n   ```\n\n\n2. 生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(\"C:/Windows/Fonts/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style='font-family:SimSun'，要是使用其他字符生成pdf时候，中文就会不显示生成PDF\n3. 设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小\n4. 所需的jar包，[下载点我](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip)。核心jar是修改后的\n\n\n\n# 比较和总结\n\n## 比较\n\nitext\n\n```\n1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。\n2. 并且itext中文适配不是很好和换行问题。\n3. 且对HTML格式要求严格。\n```\n\nwkhtmltopdf\n\n```\n1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。\n2. 小巧方便，转换速度快。\n3. 跨平台，在Liunx下用，在win下也可以用。\n```\n\n## 总结\n\n​\t综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。","slug":"JAVA实现HTML转PDF","published":1,"updated":"2017-09-13T04:31:51.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf8k0003swg6fdbivtpy","content":"<p>​    最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：</p>\n<ol>\n<li>使用<code>wkhtmltox</code></li>\n<li>使用<code>iText+Flying Saucer</code></li>\n</ol>\n<p>但是还是强烈推荐用第一种方法。</p>\n<div align=\"center\"><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"使用wkhtmltox-推荐\"><a href=\"#使用wkhtmltox-推荐\" class=\"headerlink\" title=\"使用wkhtmltox(推荐)\"></a>使用wkhtmltox(推荐)</h1><p>wkhtmltox实现网页转换成图片或PDF</p>\n<h2 id=\"命令实现\"><a href=\"#命令实现\" class=\"headerlink\" title=\"命令实现\"></a>命令实现</h2><ol>\n<li>进入wkhtmltox官网软件下载  ：<a href=\"https://wkhtmltopdf.org/downloads.html\" target=\"_blank\" rel=\"external\">https://wkhtmltopdf.org/downloads.html</a></li>\n<li>安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别<code>wkhtmltoimage.exe</code>是将HTML转化为image，<code>wkhtmltopdf.exe</code>是将HTML转化为PDF文件，这正是我们想要的。</li>\n</ol>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png\" alt=\"path\"></p>\n<ol>\n<li>进入${home}/bin目录下打开cmd输入以下命令验证 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wkhtmltopdf HTML路径 保存路径</div><div class=\"line\">如： wkhtmltopdf www.baidu.com d:\\test.pdf</div></pre></td></tr></table></figure>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png\" alt=\"command\"></p>\n<p>生成完成后会出现Done。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>JAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * HTMLTOPPDF</div><div class=\"line\"> * 利用wkhtmltopdf生成PDF</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//wkhtmltopdf.exe安装路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String toPdfTool = <span class=\"string\">\"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\"</span>;</div><div class=\"line\">    <span class=\"comment\">//需要生成PDF的URL</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String srcPath = <span class=\"string\">\"http://www.jianshu.com/p/4d65857ffe5e\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//设置纸张大小: A4, Letter, etc.</span></div><div class=\"line\">        String pageSize = <span class=\"string\">\"A4\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//生成后存放路径</span></div><div class=\"line\">        String destPath = <span class=\"string\">\"E:\\\\PDF生成教程及讲解.pdf\"</span>; </div><div class=\"line\">        convert(pageSize, destPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">convert</span><span class=\"params\">(String pageSize, String destPath)</span></span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(destPath);</div><div class=\"line\">        File parent = file.getParentFile();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!parent.exists())&#123;</div><div class=\"line\">            parent.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder cmd = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        cmd.append(toPdfTool).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(<span class=\"string\">\"--page-size \"</span>);</div><div class=\"line\">        cmd.append(pageSize).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(srcPath).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(destPath);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Runtime.getRuntime().exec(cmd.toString());</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细参数说明可参考：<a href=\"http://www.jianshu.com/p/4d65857ffe5e\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/4d65857ffe5e</a></p>\n<h1 id=\"使用iText-Flying-Saucer\"><a href=\"#使用iText-Flying-Saucer\" class=\"headerlink\" title=\"使用iText+Flying Saucer\"></a>使用iText+Flying Saucer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext可实现 </div><div class=\"line\">1.可以进行块的创建</div><div class=\"line\">2.表格的使用</div><div class=\"line\">3.设置页面的事件</div><div class=\"line\">4.字体的设置</div><div class=\"line\">5.图片的设置（包含水印）</div><div class=\"line\">6.HTML转化成PDF（支持css,javascript）</div><div class=\"line\">7.表单创建</div><div class=\"line\">8.PDF之间的操作等详细的内容可以查看网站的说明。</div></pre></td></tr></table></figure>\n<h2 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Document document = <span class=\"keyword\">new</span> Document(PageSize.A4.rotate()); <span class=\"comment\">//设置为A4纸大小</span></div><div class=\"line\"></div><div class=\"line\">        ITextRenderer renderer = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">        ITextFontResolver fontResolver = renderer.getFontResolver();</div><div class=\"line\">        fontResolver.addFont(<span class=\"string\">\"D:/simsun.ttc\"</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">        <span class=\"comment\">// step 2</span></div><div class=\"line\">        PdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\pdf.pdf\"</span>));</div><div class=\"line\">        <span class=\"comment\">// step 3</span></div><div class=\"line\">        document.open();</div><div class=\"line\">        <span class=\"comment\">// step 4</span></div><div class=\"line\">        XMLWorkerHelper.getInstance().parseXHtml(writer, document,</div><div class=\"line\">                <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"D:/a.html\"</span>));</div><div class=\"line\">        <span class=\"comment\">//step 5</span></div><div class=\"line\">        document.close();</div><div class=\"line\">        System.out.println( <span class=\"string\">\"PDF Created!\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>.输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(“C:/Windows/Fonts/simsun.ttc”, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style=’font-family:SimSun’，要是使用其他字符生成pdf时候，中文就会不显示生成PDF</p>\n</li>\n<li>设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小</li>\n<li>所需的jar包，<a href=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip\" target=\"_blank\" rel=\"external\">下载点我</a>。核心jar是修改后的</li>\n</ol>\n<h1 id=\"比较和总结\"><a href=\"#比较和总结\" class=\"headerlink\" title=\"比较和总结\"></a>比较和总结</h1><h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>itext</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。</div><div class=\"line\">2. 并且itext中文适配不是很好和换行问题。</div><div class=\"line\">3. 且对HTML格式要求严格。</div></pre></td></tr></table></figure>\n<p>wkhtmltopdf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。</div><div class=\"line\">2. 小巧方便，转换速度快。</div><div class=\"line\">3. 跨平台，在Liunx下用，在win下也可以用。</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。</p>\n","site":{"data":{}},"excerpt":"<p>​    最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：</p>\n<ol>\n<li>使用<code>wkhtmltox</code></li>\n<li>使用<code>iText+Flying Saucer</code></li>\n</ol>\n<p>但是还是强烈推荐用第一种方法。</p>\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html_to_pdf.png\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"使用wkhtmltox-推荐\"><a href=\"#使用wkhtmltox-推荐\" class=\"headerlink\" title=\"使用wkhtmltox(推荐)\"></a>使用wkhtmltox(推荐)</h1><p>wkhtmltox实现网页转换成图片或PDF</p>\n<h2 id=\"命令实现\"><a href=\"#命令实现\" class=\"headerlink\" title=\"命令实现\"></a>命令实现</h2><ol>\n<li>进入wkhtmltox官网软件下载  ：<a href=\"https://wkhtmltopdf.org/downloads.html\">https://wkhtmltopdf.org/downloads.html</a></li>\n<li>安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别<code>wkhtmltoimage.exe</code>是将HTML转化为image，<code>wkhtmltopdf.exe</code>是将HTML转化为PDF文件，这正是我们想要的。</li>\n</ol>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png\" alt=\"path\"></p>\n<ol>\n<li>进入${home}/bin目录下打开cmd输入以下命令验证 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wkhtmltopdf HTML路径 保存路径</div><div class=\"line\">如： wkhtmltopdf www.baidu.com d:\\test.pdf</div></pre></td></tr></table></figure>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png\" alt=\"command\"></p>\n<p>生成完成后会出现Done。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>JAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * HTMLTOPPDF</div><div class=\"line\"> * 利用wkhtmltopdf生成PDF</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//wkhtmltopdf.exe安装路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String toPdfTool = <span class=\"string\">\"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\"</span>;</div><div class=\"line\">    <span class=\"comment\">//需要生成PDF的URL</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String srcPath = <span class=\"string\">\"http://www.jianshu.com/p/4d65857ffe5e\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//设置纸张大小: A4, Letter, etc.</span></div><div class=\"line\">        String pageSize = <span class=\"string\">\"A4\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//生成后存放路径</span></div><div class=\"line\">        String destPath = <span class=\"string\">\"E:\\\\PDF生成教程及讲解.pdf\"</span>; </div><div class=\"line\">        convert(pageSize, destPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">convert</span><span class=\"params\">(String pageSize, String destPath)</span></span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(destPath);</div><div class=\"line\">        File parent = file.getParentFile();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!parent.exists())&#123;</div><div class=\"line\">            parent.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder cmd = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        cmd.append(toPdfTool).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(<span class=\"string\">\"--page-size \"</span>);</div><div class=\"line\">        cmd.append(pageSize).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(srcPath).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(destPath);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Runtime.getRuntime().exec(cmd.toString());</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细参数说明可参考：<a href=\"http://www.jianshu.com/p/4d65857ffe5e\">http://www.jianshu.com/p/4d65857ffe5e</a></p>\n<h1 id=\"使用iText-Flying-Saucer\"><a href=\"#使用iText-Flying-Saucer\" class=\"headerlink\" title=\"使用iText+Flying Saucer\"></a>使用iText+Flying Saucer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext可实现 </div><div class=\"line\">1.可以进行块的创建</div><div class=\"line\">2.表格的使用</div><div class=\"line\">3.设置页面的事件</div><div class=\"line\">4.字体的设置</div><div class=\"line\">5.图片的设置（包含水印）</div><div class=\"line\">6.HTML转化成PDF（支持css,javascript）</div><div class=\"line\">7.表单创建</div><div class=\"line\">8.PDF之间的操作等详细的内容可以查看网站的说明。</div></pre></td></tr></table></figure>\n<h2 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Document document = <span class=\"keyword\">new</span> Document(PageSize.A4.rotate()); <span class=\"comment\">//设置为A4纸大小</span></div><div class=\"line\"></div><div class=\"line\">        ITextRenderer renderer = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">        ITextFontResolver fontResolver = renderer.getFontResolver();</div><div class=\"line\">        fontResolver.addFont(<span class=\"string\">\"D:/simsun.ttc\"</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">        <span class=\"comment\">// step 2</span></div><div class=\"line\">        PdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\pdf.pdf\"</span>));</div><div class=\"line\">        <span class=\"comment\">// step 3</span></div><div class=\"line\">        document.open();</div><div class=\"line\">        <span class=\"comment\">// step 4</span></div><div class=\"line\">        XMLWorkerHelper.getInstance().parseXHtml(writer, document,</div><div class=\"line\">                <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"D:/a.html\"</span>));</div><div class=\"line\">        <span class=\"comment\">//step 5</span></div><div class=\"line\">        document.close();</div><div class=\"line\">        System.out.println( <span class=\"string\">\"PDF Created!\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>.输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(“C:/Windows/Fonts/simsun.ttc”, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style=’font-family:SimSun’，要是使用其他字符生成pdf时候，中文就会不显示生成PDF</p>\n</li>\n<li>设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小</li>\n<li>所需的jar包，<a href=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip\">下载点我</a>。核心jar是修改后的</li>\n</ol>\n<h1 id=\"比较和总结\"><a href=\"#比较和总结\" class=\"headerlink\" title=\"比较和总结\"></a>比较和总结</h1><h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>itext</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。</div><div class=\"line\">2. 并且itext中文适配不是很好和换行问题。</div><div class=\"line\">3. 且对HTML格式要求严格。</div></pre></td></tr></table></figure>\n<p>wkhtmltopdf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。</div><div class=\"line\">2. 小巧方便，转换速度快。</div><div class=\"line\">3. 跨平台，在Liunx下用，在win下也可以用。</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。</p>"},{"title":"JAVA实现简单网络爬虫","date":"2017-04-01T06:17:39.000Z","_content":"\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","source":"_posts/JAVA实现简单爬虫.md","raw":"---\ntitle: JAVA实现简单网络爬虫\ndate: 2017-04-01 14:17:39\ntags: [java, extendKW]\ncategories: technology\n---\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","slug":"JAVA实现简单爬虫","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf900007swg6jwdwkpff","content":"<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"external\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\" target=\"_blank\" rel=\"external\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\" target=\"_blank\" rel=\"external\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>\n","site":{"data":{}},"excerpt":"<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>","more":"<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>"},{"title":"JVM入门","date":"2017-11-20T07:27:10.000Z","_content":"\n# 前言\n\nJVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 运行时数据区域\n\nJVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： \n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"/>\n\n</div>\n\n## **程序计数器(线程私有)**\n\n程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，`分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成`。\n\n由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。\n\n此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。\n\n## Java虚拟机栈(线程私有)\n\n生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。\n\n局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。\n\n这个区域可能出现的两种异常：\n\n- 一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。\n- 另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，\n\n## 本地方法栈\n\n本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而`本地方法栈是为Native方法服务`。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。\n\n## Java堆(线程共享区域)\n\nJava堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：**所有对象实例及数组都要在堆上分配**。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。\n\nJava堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。\n\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。\n\n当堆无法再扩展时，会抛出OutOfMemoryError异常。\n\n## **方法区(线程共享区域)**\n\n**方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据**。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。\n\n```\n运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。\n```\n\n另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 \n\n# GC算法\n\nJava与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。\n\n## 标记-清除算法(Mark-Sweep)\n\n最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。\n\n它的不足主要有两个：\n\n1. 效率问题，标记和清除两个过程效率都不高；\n2. 空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"/>\n\n</div>\n\n## 复制算法(Copy)\n\n为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。\n\n但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。\n\n研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。\n\n当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"/>\n\n</div>\n\n## 标记整理(Mark-Compact)\n\n复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n\n标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"/>\n\n</div>\n\n## 分代收集算法\n\n当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。\n\n在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。\n\n# HotSpot算法实现\n\n## 枚举根节点\n\n可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。\n在jvm中，做为GCRoots的对象：\n\n1. 虚拟机栈(栈桢中的本地变量表)中的引用的对象;\n2. 方法区中的类静态属性引用的对象;\n3. 方法区中的常量引用的对象;\n4. 本地方法栈中JNI的引用的对象 。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"/>\n\n</div>\n\n从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。\n\n可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，*即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。*\n\n## 垃圾收集器\n\n如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。\n\nJava虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"/>\n\n</div>\n\n图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。\n\n### 概念理解\n\n1. **并发和并行**\n   这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。\n\n   - **并行（Parallel）**：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。\n   - **并发（Concurrent）**：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。\n\n2. **Minor GC 和 Full GC**\n\n   - **新生代GC（Minor GC）**：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n   - **老年代GC（Major GC / Full GC）**：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。\n\n3. **吞吐量**\n\n   吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。\n   虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。\n\n### Serial收集器\n\nSerial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。\n\n\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   这个收集器是一个`单线程`的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。`Stop The World`(STW)\n2. **应用场景：**\n   Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。\n3. **优势：**\n   简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。\n\n### ParNew收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   ParNew收集器其实就是Serial收集器的**多线程版本**，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。\n2. **应用场景：**\n   ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。\n\n很重要的原因是：`除了Serial收集器外，目前只有它能与CMS收集器配合工作。`\n在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。\n不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。\n\n**Serial收集器 VS ParNew收集器：**\nParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。\n然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。\n\n### Parallel Scavenge收集器\n\n1. **特性：**\n   Parallel Scavenge收集器是一个**新生代收集器**，它也是使用**复制算法**的收集器，又是**并行**的多线程收集器。\n2. **应用场景：**\n   停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n3. **对比分析：**\n\n- **Parallel Scavenge收集器 VS CMS等收集器：**\n  Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个**可控制的吞吐量**（Throughput）。\n  由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。\n\n- **Parallel Scavenge收集器 VS ParNew收集器：**\n  Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。\n\n  **GC自适应的调节策略**：\n  Parallel Scavenge收集器有一个参数-`XX:+UseAdaptiveSizePolicy`。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。\n\n### Serial Old收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Serial Old是Serial收集器的**老年代版本**，它同样是一个**单线程收集器**，使用**标记－整理**算法。\n2. **应用场景：**\n\n- **Client模式**\n  Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。\n- **Server模式**\n  如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。\n\n### **Parallel Old收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Parallel Old是Parallel Scavenge收集器的**老年代版本**，使用**多线程**和**“标记－整理”**算法。\n2. **应用场景：**\n   在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。\n\n这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。\n\n### **CMS收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"/>\n\n</div>\n\n1. 特性：\n\n   CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。`CMS收集器是基于“标记—清除”算法实现的`，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：\n\n- **初始标记（CMS initial mark）**\n  初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。\n- **并发标记（CMS concurrent mark）**\n  并发标记阶段就是进行GC Roots Tracing的过程。\n- **重新标记（CMS remark）**\n  重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。\n- **并发清除（CMS concurrent sweep）**\n  并发清除阶段会清除对象。\n\n由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。\n\n1. **优点：**\n   CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：**并发收集**、**低停顿**。\n2. **缺点：**\n\n- **CMS收集器对CPU资源非常敏感**\n  其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。\n  CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。\n\n- **CMS收集器无法处理浮动垃圾**\n  CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。\n\n  由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。\n  也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。\n\n- **CMS收集器会产生大量空间碎片**\n  CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。\n\n  空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。\n\n### **G1收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   G1（Garbage-First）是一款面向**服务端应用**的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。\n\n- **并行与并发**\n  G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。\n- **分代收集**\n  与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。\n- **空间整合**\n  与CMS的“标记—清理”算法不同，G1从**整体来看是基于“标记—整理”**算法实现的收集器，从**局部（两个Region之间）上来看是基于“复制”**算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。\n- **可预测的停顿**\n  这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。\n\n在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n\nG1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。\n\n1. **执行过程：**\n   G1收集器的运作大致可划分为以下几个步骤：\n\n- **初始标记（Initial Marking）**\n  初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。\n- **并发标记（Concurrent Marking）**\n  并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。\n- **最终标记（Final Marking）**\n  最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程`Remembered Set Logs`里面，最终标记阶段需要把`Remembered Set Logs`的数据合并到`Remembered Set`中，这阶段需要停顿线程，但是可并行执行。\n- **筛选回收（Live Data Counting and Evacuation）**\n  筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。\n\n**CMS收集器 VS G1收集器：**\n\nG1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。\n\n# 总结\n\n内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。\n\n虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。","source":"_posts/JVM入门.md","raw":"---\ntitle: JVM入门\ndate: 2017-11-20 15:27:10\ntags: [java,jvm]\ncategories: technology\n---\n\n# 前言\n\nJVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 运行时数据区域\n\nJVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： \n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"/>\n\n</div>\n\n## **程序计数器(线程私有)**\n\n程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，`分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成`。\n\n由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。\n\n此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。\n\n## Java虚拟机栈(线程私有)\n\n生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。\n\n局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。\n\n这个区域可能出现的两种异常：\n\n- 一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。\n- 另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，\n\n## 本地方法栈\n\n本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而`本地方法栈是为Native方法服务`。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。\n\n## Java堆(线程共享区域)\n\nJava堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：**所有对象实例及数组都要在堆上分配**。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。\n\nJava堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。\n\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。\n\n当堆无法再扩展时，会抛出OutOfMemoryError异常。\n\n## **方法区(线程共享区域)**\n\n**方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据**。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。\n\n```\n运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。\n```\n\n另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 \n\n# GC算法\n\nJava与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。\n\n## 标记-清除算法(Mark-Sweep)\n\n最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。\n\n它的不足主要有两个：\n\n1. 效率问题，标记和清除两个过程效率都不高；\n2. 空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"/>\n\n</div>\n\n## 复制算法(Copy)\n\n为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。\n\n但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。\n\n研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。\n\n当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"/>\n\n</div>\n\n## 标记整理(Mark-Compact)\n\n复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。\n\n标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"/>\n\n</div>\n\n## 分代收集算法\n\n当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。\n\n在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。\n\n# HotSpot算法实现\n\n## 枚举根节点\n\n可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。\n在jvm中，做为GCRoots的对象：\n\n1. 虚拟机栈(栈桢中的本地变量表)中的引用的对象;\n2. 方法区中的类静态属性引用的对象;\n3. 方法区中的常量引用的对象;\n4. 本地方法栈中JNI的引用的对象 。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"/>\n\n</div>\n\n从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。\n\n可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，*即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。*\n\n## 垃圾收集器\n\n如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。\n\nJava虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"/>\n\n</div>\n\n图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。\n\n### 概念理解\n\n1. **并发和并行**\n   这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。\n\n   - **并行（Parallel）**：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。\n   - **并发（Concurrent）**：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。\n\n2. **Minor GC 和 Full GC**\n\n   - **新生代GC（Minor GC）**：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n   - **老年代GC（Major GC / Full GC）**：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。\n\n3. **吞吐量**\n\n   吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。\n   虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。\n\n### Serial收集器\n\nSerial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。\n\n\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   这个收集器是一个`单线程`的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。`Stop The World`(STW)\n2. **应用场景：**\n   Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。\n3. **优势：**\n   简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。\n\n### ParNew收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   ParNew收集器其实就是Serial收集器的**多线程版本**，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。\n2. **应用场景：**\n   ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。\n\n很重要的原因是：`除了Serial收集器外，目前只有它能与CMS收集器配合工作。`\n在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。\n不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。\n\n**Serial收集器 VS ParNew收集器：**\nParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。\n然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。\n\n### Parallel Scavenge收集器\n\n1. **特性：**\n   Parallel Scavenge收集器是一个**新生代收集器**，它也是使用**复制算法**的收集器，又是**并行**的多线程收集器。\n2. **应用场景：**\n   停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。\n3. **对比分析：**\n\n- **Parallel Scavenge收集器 VS CMS等收集器：**\n  Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个**可控制的吞吐量**（Throughput）。\n  由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。\n\n- **Parallel Scavenge收集器 VS ParNew收集器：**\n  Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。\n\n  **GC自适应的调节策略**：\n  Parallel Scavenge收集器有一个参数-`XX:+UseAdaptiveSizePolicy`。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。\n\n### Serial Old收集器\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Serial Old是Serial收集器的**老年代版本**，它同样是一个**单线程收集器**，使用**标记－整理**算法。\n2. **应用场景：**\n\n- **Client模式**\n  Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。\n- **Server模式**\n  如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。\n\n### **Parallel Old收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   Parallel Old是Parallel Scavenge收集器的**老年代版本**，使用**多线程**和**“标记－整理”**算法。\n2. **应用场景：**\n   在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。\n\n这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。\n\n### **CMS收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"/>\n\n</div>\n\n1. 特性：\n\n   CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。`CMS收集器是基于“标记—清除”算法实现的`，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：\n\n- **初始标记（CMS initial mark）**\n  初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。\n- **并发标记（CMS concurrent mark）**\n  并发标记阶段就是进行GC Roots Tracing的过程。\n- **重新标记（CMS remark）**\n  重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。\n- **并发清除（CMS concurrent sweep）**\n  并发清除阶段会清除对象。\n\n由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。\n\n1. **优点：**\n   CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：**并发收集**、**低停顿**。\n2. **缺点：**\n\n- **CMS收集器对CPU资源非常敏感**\n  其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。\n  CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。\n\n- **CMS收集器无法处理浮动垃圾**\n  CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。\n\n  由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。\n  也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。\n\n- **CMS收集器会产生大量空间碎片**\n  CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。\n\n  空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。\n\n### **G1收集器**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"/>\n\n</div>\n\n1. **特性：**\n   G1（Garbage-First）是一款面向**服务端应用**的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。\n\n- **并行与并发**\n  G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。\n- **分代收集**\n  与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。\n- **空间整合**\n  与CMS的“标记—清理”算法不同，G1从**整体来看是基于“标记—整理”**算法实现的收集器，从**局部（两个Region之间）上来看是基于“复制”**算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。\n- **可预测的停顿**\n  这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。\n\n在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。\n\nG1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。\n\n1. **执行过程：**\n   G1收集器的运作大致可划分为以下几个步骤：\n\n- **初始标记（Initial Marking）**\n  初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。\n- **并发标记（Concurrent Marking）**\n  并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。\n- **最终标记（Final Marking）**\n  最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程`Remembered Set Logs`里面，最终标记阶段需要把`Remembered Set Logs`的数据合并到`Remembered Set`中，这阶段需要停顿线程，但是可并行执行。\n- **筛选回收（Live Data Counting and Evacuation）**\n  筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。\n\n**CMS收集器 VS G1收集器：**\n\nG1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。\n\n# 总结\n\n内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。\n\n虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。","slug":"JVM入门","published":1,"updated":"2017-12-05T01:22:48.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf900009swg63xd6r7ga","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>JVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h1><p>JVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： </p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"程序计数器-线程私有\"><a href=\"#程序计数器-线程私有\" class=\"headerlink\" title=\"程序计数器(线程私有)\"></a><strong>程序计数器(线程私有)</strong></h2><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，<code>分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</code>。</p>\n<p>由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。</p>\n<p>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>\n<h2 id=\"Java虚拟机栈-线程私有\"><a href=\"#Java虚拟机栈-线程私有\" class=\"headerlink\" title=\"Java虚拟机栈(线程私有)\"></a>Java虚拟机栈(线程私有)</h2><p>生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。</p>\n<p>局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。</p>\n<p>这个区域可能出现的两种异常：</p>\n<ul>\n<li>一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。</li>\n<li>另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，</li>\n</ul>\n<h2 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h2><p>本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而<code>本地方法栈是为Native方法服务</code>。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p>\n<h2 id=\"Java堆-线程共享区域\"><a href=\"#Java堆-线程共享区域\" class=\"headerlink\" title=\"Java堆(线程共享区域)\"></a>Java堆(线程共享区域)</h2><p>Java堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：<strong>所有对象实例及数组都要在堆上分配</strong>。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。</p>\n<p>Java堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。</p>\n<p>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。</p>\n<p>当堆无法再扩展时，会抛出OutOfMemoryError异常。</p>\n<h2 id=\"方法区-线程共享区域\"><a href=\"#方法区-线程共享区域\" class=\"headerlink\" title=\"方法区(线程共享区域)\"></a><strong>方法区(线程共享区域)</strong></h2><p><strong>方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</div></pre></td></tr></table></figure>\n<p>另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 </p>\n<h1 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h1><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。</p>\n<h2 id=\"标记-清除算法-Mark-Sweep\"><a href=\"#标记-清除算法-Mark-Sweep\" class=\"headerlink\" title=\"标记-清除算法(Mark-Sweep)\"></a>标记-清除算法(Mark-Sweep)</h2><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>\n<p>它的不足主要有两个：</p>\n<ol>\n<li>效率问题，标记和清除两个过程效率都不高；</li>\n<li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ol>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"复制算法-Copy\"><a href=\"#复制算法-Copy\" class=\"headerlink\" title=\"复制算法(Copy)\"></a>复制算法(Copy)</h2><p>为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。</p>\n<p>但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。</p>\n<p>研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。</p>\n<p>当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"标记整理-Mark-Compact\"><a href=\"#标记整理-Mark-Compact\" class=\"headerlink\" title=\"标记整理(Mark-Compact)\"></a>标记整理(Mark-Compact)</h2><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p>\n<p>标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>\n<p>在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。</p>\n<h1 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h1><h2 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h2><p>可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。<br>在jvm中，做为GCRoots的对象：</p>\n<ol>\n<li>虚拟机栈(栈桢中的本地变量表)中的引用的对象;</li>\n<li>方法区中的类静态属性引用的对象;</li>\n<li>方法区中的常量引用的对象;</li>\n<li>本地方法栈中JNI的引用的对象 。</li>\n</ol>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"><br><br></div>\n\n<p>从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。</p>\n<p>可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，<em>即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</em></p>\n<h2 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h2><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</p>\n<p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"><br><br></div>\n\n<p>图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。</p>\n<h3 id=\"概念理解\"><a href=\"#概念理解\" class=\"headerlink\" title=\"概念理解\"></a>概念理解</h3><ol>\n<li><p><strong>并发和并行</strong><br>这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。</p>\n<ul>\n<li><strong>并行（Parallel）</strong>：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li>\n<li><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。</li>\n</ul>\n</li>\n<li><p><strong>Minor GC 和 Full GC</strong></p>\n<ul>\n<li><strong>新生代GC（Minor GC）</strong>：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li>\n<li><strong>老年代GC（Major GC / Full GC）</strong>：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li>\n</ul>\n</li>\n<li><p><strong>吞吐量</strong></p>\n<p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。<br>虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>\n</li>\n</ol>\n<h3 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h3><p>Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>这个收集器是一个<code>单线程</code>的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。<code>Stop The World</code>(STW)</li>\n<li><strong>应用场景：</strong><br>Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。</li>\n<li><strong>优势：</strong><br>简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</li>\n</ol>\n<h3 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>ParNew收集器其实就是Serial收集器的<strong>多线程版本</strong>，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。</li>\n<li><strong>应用场景：</strong><br>ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。</li>\n</ol>\n<p>很重要的原因是：<code>除了Serial收集器外，目前只有它能与CMS收集器配合工作。</code><br>在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。<br>不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>\n<p><strong>Serial收集器 VS ParNew收集器：</strong><br>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。<br>然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。</p>\n<h3 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h3><ol>\n<li><strong>特性：</strong><br>Parallel Scavenge收集器是一个<strong>新生代收集器</strong>，它也是使用<strong>复制算法</strong>的收集器，又是<strong>并行</strong>的多线程收集器。</li>\n<li><strong>应用场景：</strong><br>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</li>\n<li><strong>对比分析：</strong></li>\n</ol>\n<ul>\n<li><p><strong>Parallel Scavenge收集器 VS CMS等收集器：</strong><br>Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个<strong>可控制的吞吐量</strong>（Throughput）。<br>由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。</p>\n</li>\n<li><p><strong>Parallel Scavenge收集器 VS ParNew收集器：</strong><br>Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。</p>\n<p><strong>GC自适应的调节策略</strong>：<br>Parallel Scavenge收集器有一个参数-<code>XX:+UseAdaptiveSizePolicy</code>。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。</p>\n</li>\n</ul>\n<h3 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Serial Old是Serial收集器的<strong>老年代版本</strong>，它同样是一个<strong>单线程收集器</strong>，使用<strong>标记－整理</strong>算法。</li>\n<li><strong>应用场景：</strong></li>\n</ol>\n<ul>\n<li><strong>Client模式</strong><br>Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。</li>\n<li><strong>Server模式</strong><br>如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li>\n</ul>\n<h3 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a><strong>Parallel Old收集器</strong></h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Parallel Old是Parallel Scavenge收集器的<strong>老年代版本</strong>，使用<strong>多线程</strong>和<strong>“标记－整理”</strong>算法。</li>\n<li><strong>应用场景：</strong><br>在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</li>\n</ol>\n<p>这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。</p>\n<h3 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a><strong>CMS收集器</strong></h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><p>特性：</p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。<code>CMS收集器是基于“标记—清除”算法实现的</code>，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：</p>\n</li>\n</ol>\n<ul>\n<li><strong>初始标记（CMS initial mark）</strong><br>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。</li>\n<li><strong>并发标记（CMS concurrent mark）</strong><br>并发标记阶段就是进行GC Roots Tracing的过程。</li>\n<li><strong>重新标记（CMS remark）</strong><br>重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。</li>\n<li><strong>并发清除（CMS concurrent sweep）</strong><br>并发清除阶段会清除对象。</li>\n</ul>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>\n<ol>\n<li><strong>优点：</strong><br>CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：<strong>并发收集</strong>、<strong>低停顿</strong>。</li>\n<li><strong>缺点：</strong></li>\n</ol>\n<ul>\n<li><p><strong>CMS收集器对CPU资源非常敏感</strong><br>其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。<br>CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。</p>\n</li>\n<li><p><strong>CMS收集器无法处理浮动垃圾</strong><br>CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</p>\n<p>由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。<br>也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>\n</li>\n<li><p><strong>CMS收集器会产生大量空间碎片</strong><br>CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。</p>\n<p>空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。</p>\n</li>\n</ul>\n<h3 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a><strong>G1收集器</strong></h3><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>G1（Garbage-First）是一款面向<strong>服务端应用</strong>的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。</li>\n</ol>\n<ul>\n<li><strong>并行与并发</strong><br>G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li>\n<li><strong>分代收集</strong><br>与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong><br>与CMS的“标记—清理”算法不同，G1从<strong>整体来看是基于“标记—整理”</strong>算法实现的收集器，从<strong>局部（两个Region之间）上来看是基于“复制”</strong>算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li>\n<li><strong>可预测的停顿</strong><br>这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</li>\n</ul>\n<p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</p>\n<p>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</p>\n<ol>\n<li><strong>执行过程：</strong><br>G1收集器的运作大致可划分为以下几个步骤：</li>\n</ol>\n<ul>\n<li><strong>初始标记（Initial Marking）</strong><br>初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</li>\n<li><strong>并发标记（Concurrent Marking）</strong><br>并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</li>\n<li><strong>最终标记（Final Marking）</strong><br>最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程<code>Remembered Set Logs</code>里面，最终标记阶段需要把<code>Remembered Set Logs</code>的数据合并到<code>Remembered Set</code>中，这阶段需要停顿线程，但是可并行执行。</li>\n<li><strong>筛选回收（Live Data Counting and Evacuation）</strong><br>筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li>\n</ul>\n<p><strong>CMS收集器 VS G1收集器：</strong></p>\n<p>G1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。</p>\n<p>虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>JVM（Java Virtual Machine）Java 虚拟机是整个 Java 平台的基石，是 Java 系统实现硬件无关与操作系统无关的关键部分，是保障用户机器免于恶意代码损害的屏障。Java开发人员不需要了解JVM是如何工作的，但是，了解 JVM 有助于我们更好的开发java 程序。近些天一直在看周志明的《深入理解Java虚拟机》这本书，这本书写的堪称经典，对于JVM的学习非常有帮助。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jvm.png\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h1><p>JVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器。JVM运行时数据区如下： </p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jmm.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"程序计数器-线程私有\"><a href=\"#程序计数器-线程私有\" class=\"headerlink\" title=\"程序计数器(线程私有)\"></a><strong>程序计数器(线程私有)</strong></h2><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，<code>分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成</code>。</p>\n<p>由于Java虚拟机的虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，一个处理器都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，所以程序计数器是私有空间。</p>\n<p>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>\n<h2 id=\"Java虚拟机栈-线程私有\"><a href=\"#Java虚拟机栈-线程私有\" class=\"headerlink\" title=\"Java虚拟机栈(线程私有)\"></a>Java虚拟机栈(线程私有)</h2><p>生命周期与线程相同。“栈”就是虚拟机栈，或者说是虚拟机栈中局部变量表部分。</p>\n<p>局部变量表存放了编译期可知的基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（指向了一条字节码指令的地址）。其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用一个。</p>\n<p>这个区域可能出现的两种异常：</p>\n<ul>\n<li>一种是StackOverflowError，当前线程请求的栈深度大于虚拟机所允许的深度时，会抛出这个异常。制造这种异常很简单：将一个函数反复递归自己，最终会出现栈溢出错误（StackOverflowError）。</li>\n<li>另一种异常是OutOfMemoryError异常，当虚拟机栈可以动态扩展时（当前大部分虚拟机都可以），如果无法申请足够多的内存就会抛出OutOfMemoryError，</li>\n</ul>\n<h2 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h2><p>本地方法栈与虚拟机所发挥的作用很相似，他们的区别在于虚拟机栈为执行Java代码方法服务，而<code>本地方法栈是为Native方法服务</code>。与虚拟机栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p>\n<h2 id=\"Java堆-线程共享区域\"><a href=\"#Java堆-线程共享区域\" class=\"headerlink\" title=\"Java堆(线程共享区域)\"></a>Java堆(线程共享区域)</h2><p>Java堆是Java虚拟机所管理内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此区域内存的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。在Java虚拟机规范中的描述就是：<strong>所有对象实例及数组都要在堆上分配</strong>。随着JIT编译器的发展，所有对象在堆上分配渐渐变得不那么“绝对”了。</p>\n<p>Java堆是垃圾收集器管理的主要区域。由于现在的收集器基本上采用的都是分代收集算法，所有Java堆可以细分为：新生代和老年代。在细致分就是把新生代分为：Eden空间、From Survivor空间、To Survivor空间。</p>\n<p>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。</p>\n<p>当堆无法再扩展时，会抛出OutOfMemoryError异常。</p>\n<h2 id=\"方法区-线程共享区域\"><a href=\"#方法区-线程共享区域\" class=\"headerlink\" title=\"方法区(线程共享区域)\"></a><strong>方法区(线程共享区域)</strong></h2><p><strong>方法区存放的是类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>。方法区是各个线程共享区域，我们在写Java代码时，每个线程度可以访问同一个类的静态变量对象。由于使用反射机制的原因，虚拟机很难推测那个类信息不再使用，因此这块区域的回收很难。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</div></pre></td></tr></table></figure>\n<p>另外，对这块区域主要是针对常量池回收，值得注意的是JDK1.7已经把常量池转移到堆里面了。同样，当方法区无法满足内存分配需求时，会抛出OutOfMemoryError。 </p>\n<h1 id=\"GC算法\"><a href=\"#GC算法\" class=\"headerlink\" title=\"GC算法\"></a>GC算法</h1><p>Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的“高墙”，墙外面的人想进去，墙里面的人却想出来。</p>\n<h2 id=\"标记-清除算法-Mark-Sweep\"><a href=\"#标记-清除算法-Mark-Sweep\" class=\"headerlink\" title=\"标记-清除算法(Mark-Sweep)\"></a>标记-清除算法(Mark-Sweep)</h2><p>最基础的收集算法是“标记-清除”（Mark-Sweep）算法，如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。</p>\n<p>它的不足主要有两个：</p>\n<ol>\n<li>效率问题，标记和清除两个过程效率都不高；</li>\n<li>空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ol>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Mark-Sweep.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"复制算法-Copy\"><a href=\"#复制算法-Copy\" class=\"headerlink\" title=\"复制算法(Copy)\"></a>复制算法(Copy)</h2><p>为了解决效率问题，复制算法是将内存分为大小相同的两块，每次只使用其中一块。当这块内存用完了，就将还存活的对象复制到另一块内存上面。然后再把已经使用过的内存一次清理掉。这使得每次只对半个区域进行垃圾回收，内存分配时也不用考虑内存碎片情况。</p>\n<p>但是，这代价实在是让人无法接受，需要牺牲一般的内存空间。</p>\n<p>研究发现，大部分对象(70%~95%)都是“朝生夕死”，所以不需要安装1:1比例划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden空间和一块Survivor空间，默认比例为Eden：Survivor=8:1。新生代区域就是这么划分，每次实例在Eden和一块Survivor中分配，回收时，将存活的对象复制到剩下的另一块Survivor。这样只有10%的内存会被浪费，但是带来的效率却很高。</p>\n<p>当剩下的Survivor内存不足时，可以去老年代内存进行分配担保。如何理解分配担保呢，其实就是，内存不足时，去老年代内存空间分配，然后等新生代内存缓过来了之后，把内存归还给老年代，保持新生代中的Eden：Survivor=8:1.另外，两个Survivor分别有自己的名称：From Survivor、To Survivor。二者身份经常调换，即有时这块内存与Eden一起参与分配，有时是另一块。因为他们之间经常相互复制。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/copy.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"标记整理-Mark-Compact\"><a href=\"#标记整理-Mark-Compact\" class=\"headerlink\" title=\"标记整理(Mark-Compact)\"></a>标记整理(Mark-Compact)</h2><p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会降低。更关键的是，如果不想浪费50%的空间，就需要有额外打的空间进行分配担保，以应对被使用的内存中所有对象都100%存活的极端情况，所以在老年代一般不能直接选用这种算法。</p>\n<p>标记整理算法很简单，就是先标记需要回收的对象，然后把所有存活的对象移动到内存的一端，最后直接清理掉边界意外的内存。这样的好处是避免了内存碎片。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/gc_mark_compact.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法，这种算法只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。</p>\n<p>在新生代中，每次垃圾收集时都发现有大批对象死去（70%-95%），只有少量存活，那就采用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高，没有额外的空间对它进行分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。</p>\n<h1 id=\"HotSpot算法实现\"><a href=\"#HotSpot算法实现\" class=\"headerlink\" title=\"HotSpot算法实现\"></a>HotSpot算法实现</h1><h2 id=\"枚举根节点\"><a href=\"#枚举根节点\" class=\"headerlink\" title=\"枚举根节点\"></a>枚举根节点</h2><p>可达性分析判断jvm对象是否存活。GCRoots的对象做为起点，从起点开始向下搜索，搜索走过路径叫引用链，当一个对象到GCRoots没有引用链时，判断对象死亡。<br>在jvm中，做为GCRoots的对象：</p>\n<ol>\n<li>虚拟机栈(栈桢中的本地变量表)中的引用的对象;</li>\n<li>方法区中的类静态属性引用的对象;</li>\n<li>方法区中的常量引用的对象;</li>\n<li>本地方法栈中JNI的引用的对象 。</li>\n</ol>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/reachability.jpg\" algin=\"center\"/><br><br></div>\n\n<p>从可达性分析中从GC Roots节点找引用链这个操作为例，可做为GC Roots的节点主要在全局性的引用（类如常量或类静态变量）与执行上下文（类如栈桢的本地变量表）中，现在很多应用仅仅方法区就有数百兆，如果要逐个检查这里面的应用，那么必然会逍遥很多的时间。</p>\n<p>可达性分析对执行时间的敏感还体现在GC停顿上，因为分析工作必须要再一个能确保一致性的快照中进行这是导致GC进行时必须停顿所有Java线程（STW）的其中一个重要原因，<em>即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</em></p>\n<h2 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h2><p>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。</p>\n<p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定，因此不同的厂商、不同版本的虚拟机所提供的垃圾收集器都可能会有很大差别，并且一般都会提供参数供用户根据自己的应用特点和要求组合出各个年代所使用的收集器。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg\" algin=\"center\"/><br><br></div>\n\n<p>图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。虚拟机所处的区域，则表示它是属于新生代收集器还是老年代收集器。</p>\n<h3 id=\"概念理解\"><a href=\"#概念理解\" class=\"headerlink\" title=\"概念理解\"></a>概念理解</h3><ol>\n<li><p><strong>并发和并行</strong><br>这两个名词都是并发编程中的概念，在谈论垃圾收集器的上下文语境中，它们可以解释如下。</p>\n<ul>\n<li><strong>并行（Parallel）</strong>：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li>\n<li><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上。</li>\n</ul>\n</li>\n<li><p><strong>Minor GC 和 Full GC</strong></p>\n<ul>\n<li><strong>新生代GC（Minor GC）</strong>：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li>\n<li><strong>老年代GC（Major GC / Full GC）</strong>：指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li>\n</ul>\n</li>\n<li><p><strong>吞吐量</strong></p>\n<p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。<br>虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p>\n</li>\n</ol>\n<h3 id=\"Serial收集器\"><a href=\"#Serial收集器\" class=\"headerlink\" title=\"Serial收集器\"></a>Serial收集器</h3><p>Serial收集器是最基本、发展历史最悠久的收集器，曾经（在JDK 1.3.1之前）是虚拟机新生代收集的唯一选择。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/serial.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>这个收集器是一个<code>单线程</code>的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。<code>Stop The World</code>(STW)</li>\n<li><strong>应用场景：</strong><br>Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。</li>\n<li><strong>优势：</strong><br>简单而高效（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。</li>\n</ol>\n<h3 id=\"ParNew收集器\"><a href=\"#ParNew收集器\" class=\"headerlink\" title=\"ParNew收集器\"></a>ParNew收集器</h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/parnew.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>ParNew收集器其实就是Serial收集器的<strong>多线程版本</strong>，除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样，在实现上，这两种收集器也共用了相当多的代码。</li>\n<li><strong>应用场景：</strong><br>ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。</li>\n</ol>\n<p>很重要的原因是：<code>除了Serial收集器外，目前只有它能与CMS收集器配合工作。</code><br>在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。<br>不幸的是，CMS作为老年代的收集器，却无法与JDK 1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作，所以在JDK 1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p>\n<p><strong>Serial收集器 VS ParNew收集器：</strong><br>ParNew收集器在单CPU的环境中绝对不会有比Serial收集器更好的效果，甚至由于存在线程交互的开销，该收集器在通过超线程技术实现的两个CPU的环境中都不能百分之百地保证可以超越Serial收集器。<br>然而，随着可以使用的CPU的数量的增加，它对于GC时系统资源的有效利用还是很有好处的。</p>\n<h3 id=\"Parallel-Scavenge收集器\"><a href=\"#Parallel-Scavenge收集器\" class=\"headerlink\" title=\"Parallel Scavenge收集器\"></a>Parallel Scavenge收集器</h3><ol>\n<li><strong>特性：</strong><br>Parallel Scavenge收集器是一个<strong>新生代收集器</strong>，它也是使用<strong>复制算法</strong>的收集器，又是<strong>并行</strong>的多线程收集器。</li>\n<li><strong>应用场景：</strong><br>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</li>\n<li><strong>对比分析：</strong></li>\n</ol>\n<ul>\n<li><p><strong>Parallel Scavenge收集器 VS CMS等收集器：</strong><br>Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个<strong>可控制的吞吐量</strong>（Throughput）。<br>由于与吞吐量关系密切，Parallel Scavenge收集器也经常称为“吞吐量优先”收集器。</p>\n</li>\n<li><p><strong>Parallel Scavenge收集器 VS ParNew收集器：</strong><br>Parallel Scavenge收集器与ParNew收集器的一个重要区别是它具有自适应调节策略。</p>\n<p><strong>GC自适应的调节策略</strong>：<br>Parallel Scavenge收集器有一个参数-<code>XX:+UseAdaptiveSizePolicy</code>。当这个参数打开之后，就不需要手工指定新生代的大小、Eden与Survivor区的比例、晋升老年代对象年龄等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC Ergonomics）。</p>\n</li>\n</ul>\n<h3 id=\"Serial-Old收集器\"><a href=\"#Serial-Old收集器\" class=\"headerlink\" title=\"Serial Old收集器\"></a>Serial Old收集器</h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Serial-Old.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Serial Old是Serial收集器的<strong>老年代版本</strong>，它同样是一个<strong>单线程收集器</strong>，使用<strong>标记－整理</strong>算法。</li>\n<li><strong>应用场景：</strong></li>\n</ol>\n<ul>\n<li><strong>Client模式</strong><br>Serial Old收集器的主要意义也是在于给Client模式下的虚拟机使用。</li>\n<li><strong>Server模式</strong><br>如果在Server模式下，那么它主要还有两大用途：一种用途是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另一种用途就是作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用。</li>\n</ul>\n<h3 id=\"Parallel-Old收集器\"><a href=\"#Parallel-Old收集器\" class=\"headerlink\" title=\"Parallel Old收集器\"></a><strong>Parallel Old收集器</strong></h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/Parallel-Old.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>Parallel Old是Parallel Scavenge收集器的<strong>老年代版本</strong>，使用<strong>多线程</strong>和<strong>“标记－整理”</strong>算法。</li>\n<li><strong>应用场景：</strong><br>在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge加Parallel Old收集器。</li>\n</ol>\n<p>这个收集器是在JDK 1.6中才开始提供的，在此之前，新生代的Parallel Scavenge收集器一直处于比较尴尬的状态。原因是，如果新生代选择了Parallel Scavenge收集器，老年代除了Serial Old收集器外别无选择（Parallel Scavenge收集器无法与CMS收集器配合工作）。由于老年代Serial Old收集器在服务端应用性能上的“拖累”，使用了Parallel Scavenge收集器也未必能在整体应用上获得吞吐量最大化的效果，由于单线程的老年代收集中无法充分利用服务器多CPU的处理能力，在老年代很大而且硬件比较高级的环境中，这种组合的吞吐量甚至还不一定有ParNew加CMS的组合“给力”。直到Parallel Old收集器出现后，“吞吐量优先”收集器终于有了比较名副其实的应用组合。</p>\n<h3 id=\"CMS收集器\"><a href=\"#CMS收集器\" class=\"headerlink\" title=\"CMS收集器\"></a><strong>CMS收集器</strong></h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/CMS.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><p>特性：</p>\n<p>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。<code>CMS收集器是基于“标记—清除”算法实现的</code>，它的运作过程相对于前面几种收集器来说更复杂一些，整个过程分为4个步骤：</p>\n</li>\n</ol>\n<ul>\n<li><strong>初始标记（CMS initial mark）</strong><br>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，需要“Stop The World”。</li>\n<li><strong>并发标记（CMS concurrent mark）</strong><br>并发标记阶段就是进行GC Roots Tracing的过程。</li>\n<li><strong>重新标记（CMS remark）</strong><br>重新标记阶段是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段稍长一些，但远比并发标记的时间短，仍然需要“Stop The World”。</li>\n<li><strong>并发清除（CMS concurrent sweep）</strong><br>并发清除阶段会清除对象。</li>\n</ul>\n<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p>\n<ol>\n<li><strong>优点：</strong><br>CMS是一款优秀的收集器，它的主要优点在名字上已经体现出来了：<strong>并发收集</strong>、<strong>低停顿</strong>。</li>\n<li><strong>缺点：</strong></li>\n</ol>\n<ul>\n<li><p><strong>CMS收集器对CPU资源非常敏感</strong><br>其实，面向并发设计的程序都对CPU资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但是会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。<br>CMS默认启动的回收线程数是（CPU数量+3）/ 4，也就是当CPU在4个以上时，并发回收时垃圾收集线程不少于25%的CPU资源，并且随着CPU数量的增加而下降。但是当CPU不足4个（譬如2个）时，CMS对用户程序的影响就可能变得很大。</p>\n</li>\n<li><p><strong>CMS收集器无法处理浮动垃圾</strong><br>CMS收集器无法处理浮动垃圾，可能出现“Concurrent Mode Failure”失败而导致另一次Full GC的产生。</p>\n<p>由于CMS并发清理阶段用户线程还在运行着，伴随程序运行自然就还会有新的垃圾不断产生，这一部分垃圾出现在标记过程之后，CMS无法在当次收集中处理掉它们，只好留待下一次GC时再清理掉。这一部分垃圾就称为“浮动垃圾”。<br>也是由于在垃圾收集阶段用户线程还需要运行，那也就还需要预留有足够的内存空间给用户线程使用，因此CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，需要预留一部分空间提供并发收集时的程序运作使用。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial Old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>\n</li>\n<li><p><strong>CMS收集器会产生大量空间碎片</strong><br>CMS是一款基于“标记—清除”算法实现的收集器，这意味着收集结束时会有大量空间碎片产生。</p>\n<p>空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很大空间剩余，但是无法找到足够大的连续空间来分配当前对象，不得不提前触发一次Full GC。</p>\n</li>\n</ul>\n<h3 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a><strong>G1收集器</strong></h3><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/G1.png\" algin=\"center\"/><br><br></div>\n\n<ol>\n<li><strong>特性：</strong><br>G1（Garbage-First）是一款面向<strong>服务端应用</strong>的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。</li>\n</ol>\n<ul>\n<li><strong>并行与并发</strong><br>G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</li>\n<li><strong>分代收集</strong><br>与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li><strong>空间整合</strong><br>与CMS的“标记—清理”算法不同，G1从<strong>整体来看是基于“标记—整理”</strong>算法实现的收集器，从<strong>局部（两个Region之间）上来看是基于“复制”</strong>算法实现的，但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</li>\n<li><strong>可预测的停顿</strong><br>这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</li>\n</ul>\n<p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。</p>\n<p>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region（这也就是Garbage-First名称的来由）。这种使用Region划分内存空间以及有优先级的区域回收方式，保证了G1收集器在有限的时间内可以获取尽可能高的收集效率。</p>\n<ol>\n<li><strong>执行过程：</strong><br>G1收集器的运作大致可划分为以下几个步骤：</li>\n</ol>\n<ul>\n<li><strong>初始标记（Initial Marking）</strong><br>初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</li>\n<li><strong>并发标记（Concurrent Marking）</strong><br>并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</li>\n<li><strong>最终标记（Final Marking）</strong><br>最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程<code>Remembered Set Logs</code>里面，最终标记阶段需要把<code>Remembered Set Logs</code>的数据合并到<code>Remembered Set</code>中，这阶段需要停顿线程，但是可并行执行。</li>\n<li><strong>筛选回收（Live Data Counting and Evacuation）</strong><br>筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li>\n</ul>\n<p><strong>CMS收集器 VS G1收集器：</strong></p>\n<p>G1收集器几乎可以说还没有经过实际应用的考验，网络上关于G1收集器的性能测试也非常贫乏，如果现在采用的收集器没有出现任何问题，那就没有理由现在去选择G1，如果应用追求低停顿，那G1现在已经可以作为一个可尝试的选择，如果应用追求吞吐量，那么G1并不会带来什么特别的好处。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>内存回收与垃圾收集器在很多时候都是影响系统性能、并发能力的主要因素之一，虚拟机之所以提供多种不同的收集器以及提供大量的调节参数，是因为只有根据实际应用需求，实现方式选择最优的收集方式才能获取最高的性能，没有固定收集器、参数组合，也就没有最优的调优方法，虚拟机也有没有什么必然的内存回收行为。</p>\n<p>虽然我们是在对各个收集器进行比较，但并非为了挑选出一个最好的收集器。因为直到现在为止还没有最好的收集器出现，更加没有万能的收集器，所以我们选择的只是对具体应用最合适的收集器。这点不需要多加解释就能证明：如果有一种放之四海皆准、任何场景下都适用的完美收集器存在，那HotSpot虚拟机就没必要实现那么多不同的收集器了。</p>"},{"title":"Java String intern方法","date":"2017-12-01T02:27:19.000Z","_content":"\n# 前言\n\nString类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。\n\nintern()方法设计的初衷，就是重用String对象，以节省内存消耗。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 案例\n\n```java\nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n在**JDK1.7**下输出结果为：\n\n```java\ntrue\ntrue\n```\n\n再将上面的例子加上一行代码：\n\n```java\nString str2 = \"rainbowhorse\";\t//新加的一行代码，其余不变  \nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n再运行，结果为：\n\n```java\nfalse\nfalse\n```\n\n在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。\n\n# 为什么使用intern()方法\n\n就如引言所说的，**intern()方法设计的初衷，就是重用String对象，以节省内存消耗**。下面通过例子来说明：\n\n```java\npublic class Test {\n\tstatic final int MAX = 100000;\n\tstatic final String[] arr = new String[MAX];\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 为长度为10的Integer数组随机赋值\n\t\tInteger[] sample = new Integer[10];\n\t\tRandom random = new Random(1000);\n\t\tfor (int i = 0; i < sample.length; i++) {\n\t\t\tsample[i] = random.nextInt();\n\t\t}\n\t\t// 记录程序开始时间\n\t\tlong t = System.currentTimeMillis();\n\t\t// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数\n\t\tfor (int i = 0; i < MAX; i++) {\n\t\t\tarr[i] = new String(String.valueOf(sample[i % sample.length]));\n\t\t\t// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();\n\t\t}\n\t\tSystem.out.println((System.currentTimeMillis() - t) + \"ms\");\n\t\tSystem.gc();\n\t}\n}\n```\n\n这个主要是为了证明`使用intern()比不使用intern()消耗的内存更少`。\n\n先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window ---> Preferences --> Java --> Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过[MAT](http://download.eclipse.org/mat/)插件查看该hprof文件。\n\n不使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"/>\n\n</div>\n\n使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"/>\n\n</div>\n\n从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。\n\n但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 \n\n# 深入理解intern()方法\n\n**JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。**\n\n看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false true  \n```\n\n再分别调整上面代码2、3行，7、8行的顺序：\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false false  \n```\n\n## **JDK1.6**\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"/>\n\n</div>\n\n在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。\n\n使用**引号声明的字符串都是会直接在字符串常量池中生成**的，而**new 出来的String对象是放在堆空间中**的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。\n\nintern()方法在JDK1.6中的作用是：比如String s = new String(\"rainbowhorse\")，再调用s.intern()，此时返回值还是字符串\"rainbowhorse\"，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在\"rainbowhorse\"这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把\"rainbowhorse\"添加到字符串池中，然后再返回它的引用。\n\n## JDK1.7\n\n### 例一分析\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，**生成了常量池中的“1” 和堆空间中的字符串对象**。\n\ns.intern()，这一行的作用是s对象去常量池中寻找后发现\"1\"**已经存在于常量池中了**。\n\nString s2 = \"1\"，这行代码是生成一个s2的引用**指向常量池中的“1”对象**。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意**此时常量池中是没有 “11”对象**的。\n\ns3.intern()，这一行代码，是将 s3中的**“11”字符串放入 String 常量池中**，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 \"11\" 的对象。\n\n**但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用**。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。\n\nString s4 = \"11\"， 这一行代码会**直接去常量池中创建**，但是发现已经有这个对象了，此时也就是**指向 s3 引用对象的一个引用**。因此s3 == s4返回了true。\n\n### 例二分析\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，生成了**常量池中的“1” 和堆空间中的字符串对象**。\n\nString s2 = \"1\"，这行代码是生成一个s2的**引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它**。\n\ns.intern()，这一行在这里就没什么实际作用了。因为\"1\"已经存在了。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意此时常量池中是没有 “11”对象的。\n\nString s4 = \"11\"， 这一行代码会**直接去生成常量池中的\"11\"**。\n\ns3.intern()，这一行在这里就没什么实际作用了。因为\"11\"已经存在了。\n\n结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。\n\n# 总结\n\n从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，**如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用**。","source":"_posts/Java-String-intern方法.md","raw":"---\ntitle: Java String intern方法\ndate: 2017-11-31 10:27:19\ntags: [java,tips]\ncategories: technology\n---\n\n# 前言\n\nString类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。\n\nintern()方法设计的初衷，就是重用String对象，以节省内存消耗。\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 案例\n\n```java\nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n在**JDK1.7**下输出结果为：\n\n```java\ntrue\ntrue\n```\n\n再将上面的例子加上一行代码：\n\n```java\nString str2 = \"rainbowhorse\";\t//新加的一行代码，其余不变  \nString str1 = new String(\"rainbow\") + new String(\"horse\");\nSystem.out.println(str1.intern() == str1);\nSystem.out.println(str1 == \"rainbowhorse\");\n```\n\n再运行，结果为：\n\n```java\nfalse\nfalse\n```\n\n在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。\n\n# 为什么使用intern()方法\n\n就如引言所说的，**intern()方法设计的初衷，就是重用String对象，以节省内存消耗**。下面通过例子来说明：\n\n```java\npublic class Test {\n\tstatic final int MAX = 100000;\n\tstatic final String[] arr = new String[MAX];\n\n\tpublic static void main(String[] args) throws Exception {\n\t\t// 为长度为10的Integer数组随机赋值\n\t\tInteger[] sample = new Integer[10];\n\t\tRandom random = new Random(1000);\n\t\tfor (int i = 0; i < sample.length; i++) {\n\t\t\tsample[i] = random.nextInt();\n\t\t}\n\t\t// 记录程序开始时间\n\t\tlong t = System.currentTimeMillis();\n\t\t// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数\n\t\tfor (int i = 0; i < MAX; i++) {\n\t\t\tarr[i] = new String(String.valueOf(sample[i % sample.length]));\n\t\t\t// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();\n\t\t}\n\t\tSystem.out.println((System.currentTimeMillis() - t) + \"ms\");\n\t\tSystem.gc();\n\t}\n}\n```\n\n这个主要是为了证明`使用intern()比不使用intern()消耗的内存更少`。\n\n先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window ---> Preferences --> Java --> Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过[MAT](http://download.eclipse.org/mat/)插件查看该hprof文件。\n\n不使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"/>\n\n</div>\n\n使用intern()方法\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"/>\n\n</div>\n\n从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。\n\n但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 \n\n# 深入理解intern()方法\n\n**JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。**\n\n看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false true  \n```\n\n再分别调整上面代码2、3行，7、8行的顺序：\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4);  \n```\n\n输出结果为：\n\n```java\nJDK1.6以及以下：false false  \nJDK1.7以及以上：false false  \n```\n\n## **JDK1.6**\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"/>\n\n</div>\n\n在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。\n\n使用**引号声明的字符串都是会直接在字符串常量池中生成**的，而**new 出来的String对象是放在堆空间中**的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。\n\nintern()方法在JDK1.6中的作用是：比如String s = new String(\"rainbowhorse\")，再调用s.intern()，此时返回值还是字符串\"rainbowhorse\"，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在\"rainbowhorse\"这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把\"rainbowhorse\"添加到字符串池中，然后再返回它的引用。\n\n## JDK1.7\n\n### 例一分析\n\n```java\nString s = new String(\"1\");  \ns.intern();  \nString s2 = \"1\";  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \ns3.intern();  \nString s4 = \"11\";  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，**生成了常量池中的“1” 和堆空间中的字符串对象**。\n\ns.intern()，这一行的作用是s对象去常量池中寻找后发现\"1\"**已经存在于常量池中了**。\n\nString s2 = \"1\"，这行代码是生成一个s2的引用**指向常量池中的“1”对象**。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意**此时常量池中是没有 “11”对象**的。\n\ns3.intern()，这一行代码，是将 s3中的**“11”字符串放入 String 常量池中**，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 \"11\" 的对象。\n\n**但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用**。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。\n\nString s4 = \"11\"， 这一行代码会**直接去常量池中创建**，但是发现已经有这个对象了，此时也就是**指向 s3 引用对象的一个引用**。因此s3 == s4返回了true。\n\n### 例二分析\n\n```java\nString s = new String(\"1\");  \nString s2 = \"1\";  \ns.intern();  \nSystem.out.println(s == s2);  \n  \nString s3 = new String(\"1\") + new String(\"1\");  \nString s4 = \"11\";  \ns3.intern();  \nSystem.out.println(s3 == s4); \n```\n\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"/>\n\n</div>\n\nString s = newString(\"1\")，生成了**常量池中的“1” 和堆空间中的字符串对象**。\n\nString s2 = \"1\"，这行代码是生成一个s2的**引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它**。\n\ns.intern()，这一行在这里就没什么实际作用了。因为\"1\"已经存在了。\n\n结果就是 s 和 s2 的引用地址明显不同。因此返回了false。\n\n\n\nString s3 = new String(\"1\") + newString(\"1\")，这行代码**在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为\"11\"）**。注意此时常量池中是没有 “11”对象的。\n\nString s4 = \"11\"， 这一行代码会**直接去生成常量池中的\"11\"**。\n\ns3.intern()，这一行在这里就没什么实际作用了。因为\"11\"已经存在了。\n\n结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。\n\n# 总结\n\n从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，**如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用**。","slug":"Java-String-intern方法","published":1,"updated":"2017-12-07T06:06:05.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf9g000aswg6g9lthz1m","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>String类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。</p>\n<p>intern()方法设计的初衷，就是重用String对象，以节省内存消耗。</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>在<strong>JDK1.7</strong>下输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再将上面的例子加上一行代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str2 = <span class=\"string\">\"rainbowhorse\"</span>;\t<span class=\"comment\">//新加的一行代码，其余不变  </span></div><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>再运行，结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<p>在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。</p>\n<h1 id=\"为什么使用intern-方法\"><a href=\"#为什么使用intern-方法\" class=\"headerlink\" title=\"为什么使用intern()方法\"></a>为什么使用intern()方法</h1><p>就如引言所说的，<strong>intern()方法设计的初衷，就是重用String对象，以节省内存消耗</strong>。下面通过例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">100000</span>;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] arr = <span class=\"keyword\">new</span> String[MAX];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 为长度为10的Integer数组随机赋值</span></div><div class=\"line\">\t\tInteger[] sample = <span class=\"keyword\">new</span> Integer[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sample.length; i++) &#123;</div><div class=\"line\">\t\t\tsample[i] = random.nextInt();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 记录程序开始时间</span></div><div class=\"line\">\t\t<span class=\"keyword\">long</span> t = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"comment\">// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) &#123;</div><div class=\"line\">\t\t\tarr[i] = <span class=\"keyword\">new</span> String(String.valueOf(sample[i % sample.length]));</div><div class=\"line\">\t\t\t<span class=\"comment\">// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println((System.currentTimeMillis() - t) + <span class=\"string\">\"ms\"</span>);</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个主要是为了证明<code>使用intern()比不使用intern()消耗的内存更少</code>。</p>\n<p>先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window —&gt; Preferences –&gt; Java –&gt; Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过<a href=\"http://download.eclipse.org/mat/\" target=\"_blank\" rel=\"external\">MAT</a>插件查看该hprof文件。</p>\n<p>不使用intern()方法</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"><br><br></div>\n\n<p>使用intern()方法</p>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"><br><br></div>\n\n<p>从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。</p>\n<p>但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 </p>\n<h1 id=\"深入理解intern-方法\"><a href=\"#深入理解intern-方法\" class=\"headerlink\" title=\"深入理解intern()方法\"></a>深入理解intern()方法</h1><p><strong>JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。</strong></p>\n<p>看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再分别调整上面代码2、3行，7、8行的顺序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"JDK1-6\"><a href=\"#JDK1-6\" class=\"headerlink\" title=\"JDK1.6\"></a><strong>JDK1.6</strong></h2><div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"><br><br></div>\n\n<p>在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。</p>\n<p>使用<strong>引号声明的字符串都是会直接在字符串常量池中生成</strong>的，而<strong>new 出来的String对象是放在堆空间中</strong>的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。</p>\n<p>intern()方法在JDK1.6中的作用是：比如String s = new String(“rainbowhorse”)，再调用s.intern()，此时返回值还是字符串”rainbowhorse”，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在”rainbowhorse”这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把”rainbowhorse”添加到字符串池中，然后再返回它的引用。</p>\n<h2 id=\"JDK1-7\"><a href=\"#JDK1-7\" class=\"headerlink\" title=\"JDK1.7\"></a>JDK1.7</h2><h3 id=\"例一分析\"><a href=\"#例一分析\" class=\"headerlink\" title=\"例一分析\"></a>例一分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"><br><br></div>\n\n<p>String s = newString(“1”)，<strong>生成了常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>s.intern()，这一行的作用是s对象去常量池中寻找后发现”1”<strong>已经存在于常量池中了</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的引用<strong>指向常量池中的“1”对象</strong>。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意<strong>此时常量池中是没有 “11”对象</strong>的。</p>\n<p>s3.intern()，这一行代码，是将 s3中的<strong>“11”字符串放入 String 常量池中</strong>，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 “11” 的对象。</p>\n<p><strong>但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用</strong>。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去常量池中创建</strong>，但是发现已经有这个对象了，此时也就是<strong>指向 s3 引用对象的一个引用</strong>。因此s3 == s4返回了true。</p>\n<h3 id=\"例二分析\"><a href=\"#例二分析\" class=\"headerlink\" title=\"例二分析\"></a>例二分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"><br><br></div>\n\n<p>String s = newString(“1”)，生成了<strong>常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的<strong>引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它</strong>。</p>\n<p>s.intern()，这一行在这里就没什么实际作用了。因为”1”已经存在了。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意此时常量池中是没有 “11”对象的。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去生成常量池中的”11”</strong>。</p>\n<p>s3.intern()，这一行在这里就没什么实际作用了。因为”11”已经存在了。</p>\n<p>结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，<strong>如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用</strong>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>String类我们经常使用，但是它的intern()方法之前还真的不太了解，通过谷歌百度一番之后终于搞明白了。</p>\n<p>intern()方法设计的初衷，就是重用String对象，以节省内存消耗。</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/creating-java-strings.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>在<strong>JDK1.7</strong>下输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">true</span></div><div class=\"line\"><span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再将上面的例子加上一行代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">String str2 = <span class=\"string\">\"rainbowhorse\"</span>;\t<span class=\"comment\">//新加的一行代码，其余不变  </span></div><div class=\"line\">String str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"rainbow\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"horse\"</span>);</div><div class=\"line\">System.out.println(str1.intern() == str1);</div><div class=\"line\">System.out.println(str1 == <span class=\"string\">\"rainbowhorse\"</span>);</div></pre></td></tr></table></figure>\n<p>再运行，结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">false</span></div><div class=\"line\"><span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<p>在JVM运行时数据区中的方法区有一个常量池，但是发现在JDK1.6以后常量池被放置在了堆空间，因此常量池位置的不同影响到了String的intern()方法的表现。</p>\n<h1 id=\"为什么使用intern-方法\"><a href=\"#为什么使用intern-方法\" class=\"headerlink\" title=\"为什么使用intern()方法\"></a>为什么使用intern()方法</h1><p>就如引言所说的，<strong>intern()方法设计的初衷，就是重用String对象，以节省内存消耗</strong>。下面通过例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX = <span class=\"number\">100000</span>;</div><div class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String[] arr = <span class=\"keyword\">new</span> String[MAX];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 为长度为10的Integer数组随机赋值</span></div><div class=\"line\">\t\tInteger[] sample = <span class=\"keyword\">new</span> Integer[<span class=\"number\">10</span>];</div><div class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random(<span class=\"number\">1000</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sample.length; i++) &#123;</div><div class=\"line\">\t\t\tsample[i] = random.nextInt();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 记录程序开始时间</span></div><div class=\"line\">\t\t<span class=\"keyword\">long</span> t = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"comment\">// 使用/不使用intern方法为10万个String赋值，值来自于Integer数组的10个数</span></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX; i++) &#123;</div><div class=\"line\">\t\t\tarr[i] = <span class=\"keyword\">new</span> String(String.valueOf(sample[i % sample.length]));</div><div class=\"line\">\t\t\t<span class=\"comment\">// arr[i] = new String(String.valueOf(sample[i % sample.length])).intern();</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tSystem.out.println((System.currentTimeMillis() - t) + <span class=\"string\">\"ms\"</span>);</div><div class=\"line\">\t\tSystem.gc();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个主要是为了证明<code>使用intern()比不使用intern()消耗的内存更少</code>。</p>\n<p>先定义一个长度为10的Integer数组，并随机为其赋值，在通过for循环为长度为10万的String对象依次赋值，这些值都来自于Integer数组。两种情况分别运行，可通过Window —&gt; Preferences –&gt; Java –&gt; Installed JREs设置JVM启动参数为-agentlib:hprof=heap=dump,format=b，将程序运行完后的hprof置于工程目录下。再通过<a href=\"http://download.eclipse.org/mat/\">MAT</a>插件查看该hprof文件。</p>\n<p>不使用intern()方法</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/no-intern.png\" algin=\"center\"/><br><br></div>\n\n<p>使用intern()方法</p>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/use-intern.png\" algin=\"center\"/><br><br></div>\n\n<p>从运行结果来看，不使用intern()的情况下，程序生成了101762个String对象，而使用了intern()方法时，程序仅生成了1772个String对象。证明了intern()节省内存的结论。</p>\n<p>但是会发现使用了intern()方法后程序运行时间有所增加。这是因为程序中每次都是用了new String后又进行intern()操作的耗时时间，但是不使用intern()占用内存空间导致GC的时间是要远远大于这点时间的。 </p>\n<h1 id=\"深入理解intern-方法\"><a href=\"#深入理解intern-方法\" class=\"headerlink\" title=\"深入理解intern()方法\"></a>深入理解intern()方法</h1><p><strong>JDK1.7后，常量池被放入到堆空间中，这导致intern()函数的功能不同。这点很重要。</strong></p>\n<p>看看下面代码，这个例子是网上流传较广的一个例子，我也是照抄过来的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">true</span></div></pre></td></tr></table></figure>\n<p>再分别调整上面代码2、3行，7、8行的顺序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">JDK1.6以及以下：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span>  </div><div class=\"line\">JDK1.7以及以上：<span class=\"keyword\">false</span> <span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h2 id=\"JDK1-6\"><a href=\"#JDK1-6\" class=\"headerlink\" title=\"JDK1.6\"></a><strong>JDK1.6</strong></h2><div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.6.png\" algin=\"center\"/><br><br></div>\n\n<p>在JDK1.6中所有的输出结果都是 false，因为JDK1.6以及以前版本中，常量池是放在 Perm 区（属于方法区）中的，Perm区是和堆区完全分开的。</p>\n<p>使用<strong>引号声明的字符串都是会直接在字符串常量池中生成</strong>的，而<strong>new 出来的String对象是放在堆空间中</strong>的。所以两者的内存地址肯定是不相同的，即使调用了intern()方法也是不影响的。</p>\n<p>intern()方法在JDK1.6中的作用是：比如String s = new String(“rainbowhorse”)，再调用s.intern()，此时返回值还是字符串”rainbowhorse”，表面上看起来好像这个方法没什么用处。但实际上，在JDK1.6中它做了个小动作：检查字符串池里是否存在”rainbowhorse”这么一个字符串，如果存在，就返回池里的字符串；如果不存在，该方法把”rainbowhorse”添加到字符串池中，然后再返回它的引用。</p>\n<h2 id=\"JDK1-7\"><a href=\"#JDK1-7\" class=\"headerlink\" title=\"JDK1.7\"></a>JDK1.7</h2><h3 id=\"例一分析\"><a href=\"#例一分析\" class=\"headerlink\" title=\"例一分析\"></a>例一分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s.intern();  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-04/JVM/jdk1.7.png\" algin=\"center\"/><br><br></div>\n\n<p>String s = newString(“1”)，<strong>生成了常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>s.intern()，这一行的作用是s对象去常量池中寻找后发现”1”<strong>已经存在于常量池中了</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的引用<strong>指向常量池中的“1”对象</strong>。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意<strong>此时常量池中是没有 “11”对象</strong>的。</p>\n<p>s3.intern()，这一行代码，是将 s3中的<strong>“11”字符串放入 String 常量池中</strong>，此时常量池中不存在“11”字符串，JDK1.6的做法是直接在常量池中生成一个 “11” 的对象。</p>\n<p><strong>但是在JDK1.7中，常量池中不需要再存储一份对象了，可以直接存储堆中的引用</strong>。这份引用直接指向 s3 引用的对象，也就是说s3.intern() ==s3会返回true。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去常量池中创建</strong>，但是发现已经有这个对象了，此时也就是<strong>指向 s3 引用对象的一个引用</strong>。因此s3 == s4返回了true。</p>\n<h3 id=\"例二分析\"><a href=\"#例二分析\" class=\"headerlink\" title=\"例二分析\"></a>例二分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s2 = <span class=\"string\">\"1\"</span>;  </div><div class=\"line\">s.intern();  </div><div class=\"line\">System.out.println(s == s2);  </div><div class=\"line\">  </div><div class=\"line\">String s3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"1\"</span>);  </div><div class=\"line\">String s4 = <span class=\"string\">\"11\"</span>;  </div><div class=\"line\">s3.intern();  </div><div class=\"line\">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>\n<div align=center><img width=\"700\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-12-7/String_intern/jdk1.7-2.png\" algin=\"center\"/><br><br></div>\n\n<p>String s = newString(“1”)，生成了<strong>常量池中的“1” 和堆空间中的字符串对象</strong>。</p>\n<p>String s2 = “1”，这行代码是生成一个s2的<strong>引用指向常量池中的“1”对象，但是发现已经存在了，那么就直接指向了它</strong>。</p>\n<p>s.intern()，这一行在这里就没什么实际作用了。因为”1”已经存在了。</p>\n<p>结果就是 s 和 s2 的引用地址明显不同。因此返回了false。</p>\n<p>String s3 = new String(“1”) + newString(“1”)，这行代码<strong>在字符串常量池中生成“1” ，并在堆空间中生成s3引用指向的对象（内容为”11”）</strong>。注意此时常量池中是没有 “11”对象的。</p>\n<p>String s4 = “11”， 这一行代码会<strong>直接去生成常量池中的”11”</strong>。</p>\n<p>s3.intern()，这一行在这里就没什么实际作用了。因为”11”已经存在了。</p>\n<p>结果就是 s3 和 s4 的引用地址明显不同。因此返回了false。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>从JDK 1.7后，HotSpot 将常量池从永久代移到了元空间，正因为如此，JDK 1.7 后的intern方法在实现上发生了比较大的改变，JDK 1.7后，intern方法还是会先去查询常量池中是否有已经存在，如果存在，则返回常量池中的引用，这一点与之前没有区别，区别在于，<strong>如果在常量池找不到对应的字符串，则不会再将字符串拷贝到常量池，而只是在常量池中生成一个对原字符串的引用</strong>。</p>"},{"title":"Java备份和还原MySQL数据库","date":"2017-09-24T09:43:10.000Z","_content":"\n# 前言\n\n​\t在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 使用MySQL自带工具\n\n## 备份\n\n备份使用MySQL的`mysqldump`命令来实现，示例代码\n\n```java\n\t  final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);\n\n    /**\n     * Java代码实现MySQL数据库导出\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param savePath     数据库导出文件保存路径\n     * @param fileName     数据库导出文件文件名\n     * @param databaseName 要导出的数据库名\n     * @return 返回true表示导出成功，否则返回false。\n     * @author maxu\n     */\n    public static boolean backUpDatabase(String hostIP, String userName, String password, String databaseName, String savePath, String fileName) throws InterruptedException {\n        File saveFile = new File(savePath);\n        if (!saveFile.exists()) {// 如果目录不存在\n            saveFile.mkdirs();// 创建文件夹\n        }\n        if (!savePath.endsWith(File.separator)) {\n            savePath = savePath + File.separator;\n        }\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n            printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(savePath + fileName), \"utf8\"));\n            Process process = Runtime.getRuntime().exec(\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --set-charset=UTF8 \" + databaseName);\n            InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream(), \"utf8\");\n            bufferedReader = new BufferedReader(inputStreamReader);\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                printWriter.println(line);\n            }\n            printWriter.flush();\n            if (process.waitFor() == 0) {//0 表示线程正常终止。\n                logger.info(\"数据库已备份到——>>\" + savePath);\n                return true;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (printWriter != null) {\n                    printWriter.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return false;\n    }\n```\n\n## 还原\n\n```java\n  \n   final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  \n\t\n   /**\n     * Java代码实现MySQL数据库还原\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param path         需要还原数据库文件的路径\n     * @param fileName     需要还原数据库文件的名称\n     * @param databaseName 需要还原的数据库名称\n     * @return 返回true表示还原成功，否则返回false。\n     */\n    public static boolean restoreDatabase(String hostIP, String userName, String password, String databaseName, String path, String fileName) throws InterruptedException {\n\n        OutputStream out = null;\n        BufferedReader br = null;\n        PrintStream ps = null;\n        try {\n            // 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况\n            Process process = Runtime.getRuntime().exec(\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --default-character-set=utf8 \" + databaseName);\n            out = process.getOutputStream();//控制台的输入信息作为输出流\n            StringBuffer sb = new StringBuffer(\"\");\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(path + fileName), \"utf8\"));\n            String outStr;\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line + \"\\r\\n\");\n            }\n            outStr = sb.toString();\n\n            ps = new PrintStream(out, true, \"utf8\");\n            ps.write(outStr.getBytes());\n//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");\n//            writer.write(outStr);\n            // 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免\n//            writer.flush();\n//            writer.close();\n            if (process.waitFor() == 0) {   //0 表示线程正常终止。\n               return true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            try {\n                if (ps != null) {\n                    ps.close();\n                }\n                if (br != null) {\n                    br.close();\n                }\n                if (out != null){\n                    out.close();\n                }\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n        return false;\n}\n```\n\n测试\n\n```java\npublic static void main(String[] args){\n\n        //数据库备份\n        /*try {\n            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库成功备份！！\");\n            } else {\n                logger.info(\"数据库备份失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }*/\n        //数据库恢复\n        try {\n            if (restoreDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库恢复成功！！\");\n            } else {\n                logger.info(\"数据库恢复失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n代码下载点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java)\n\n# Windows下bat命令\n\n工作环境 Windows Server 2003 ，`MySQL`安装目录 D:\\DevTools\\MySQL ,\n\n`WinRAR` 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe \n\n备份数据存储的路径为 D:\\\\数据备份，好了下面开始写`DOS批处理命令`了。代码如下:\n\n```python\ncolor 9\nrem ---------------------数据库备份开始-----------------------\n@echo off\n\nset \"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\" \nREM 日期格式：20170924200727 \nmd \"D:\\%ymd%\" \n\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\" --opt -Q taotao -uroot -proot > D:\\%Ymd%\\taotao.sql\nREM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码\nREM echo Winrar loading... \nREM  \"C:\\Program Files\\WinRAR\\WinRAR.exe\" a -ep1 -r -o+ -m5 -df \"D:\\数据备份\\%Ymd%.rar\" \"D:\\数据备份\\%Ymd%\" \n@echo on\nrem ---------------------数据库备份完成-----------------------\n\npause\n```\n\n把上面的命令保存为 *backup.bat* ，双击运行，就开始备份数据了。 \n\n第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 \n\n第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 \n\n第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 \n\n最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 \n\n如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。\n\n但是用windows下bat命令备份有一个致命缺点：**备份时数据库会暂时断开。(30M断开5s左右)**\n\n# 总结\n\n第二种方式的缺点太致命：**备份时数据库会暂时断开**。\n\n所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。","source":"_posts/Java备份和还原MySQL数据库.md","raw":"---\ntitle: Java备份和还原MySQL数据库\ndate: 2017-09-24 17:43:10\ntags: [java,mysql]\ncategories: technology\n---\n\n# 前言\n\n​\t在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 使用MySQL自带工具\n\n## 备份\n\n备份使用MySQL的`mysqldump`命令来实现，示例代码\n\n```java\n\t  final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);\n\n    /**\n     * Java代码实现MySQL数据库导出\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param savePath     数据库导出文件保存路径\n     * @param fileName     数据库导出文件文件名\n     * @param databaseName 要导出的数据库名\n     * @return 返回true表示导出成功，否则返回false。\n     * @author maxu\n     */\n    public static boolean backUpDatabase(String hostIP, String userName, String password, String databaseName, String savePath, String fileName) throws InterruptedException {\n        File saveFile = new File(savePath);\n        if (!saveFile.exists()) {// 如果目录不存在\n            saveFile.mkdirs();// 创建文件夹\n        }\n        if (!savePath.endsWith(File.separator)) {\n            savePath = savePath + File.separator;\n        }\n\n        PrintWriter printWriter = null;\n        BufferedReader bufferedReader = null;\n        try {\n            printWriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(savePath + fileName), \"utf8\"));\n            Process process = Runtime.getRuntime().exec(\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --set-charset=UTF8 \" + databaseName);\n            InputStreamReader inputStreamReader = new InputStreamReader(process.getInputStream(), \"utf8\");\n            bufferedReader = new BufferedReader(inputStreamReader);\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                printWriter.println(line);\n            }\n            printWriter.flush();\n            if (process.waitFor() == 0) {//0 表示线程正常终止。\n                logger.info(\"数据库已备份到——>>\" + savePath);\n                return true;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (printWriter != null) {\n                    printWriter.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return false;\n    }\n```\n\n## 还原\n\n```java\n  \n   final static Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  \n\t\n   /**\n     * Java代码实现MySQL数据库还原\n     *\n     * @param hostIP       MySQL数据库所在服务器地址IP\n     * @param userName     进入数据库所需要的用户名\n     * @param password     进入数据库所需要的密码\n     * @param path         需要还原数据库文件的路径\n     * @param fileName     需要还原数据库文件的名称\n     * @param databaseName 需要还原的数据库名称\n     * @return 返回true表示还原成功，否则返回false。\n     */\n    public static boolean restoreDatabase(String hostIP, String userName, String password, String databaseName, String path, String fileName) throws InterruptedException {\n\n        OutputStream out = null;\n        BufferedReader br = null;\n        PrintStream ps = null;\n        try {\n            // 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况\n            Process process = Runtime.getRuntime().exec(\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\" + hostIP + \" -u\" + userName + \" -p\" + password + \" --default-character-set=utf8 \" + databaseName);\n            out = process.getOutputStream();//控制台的输入信息作为输出流\n            StringBuffer sb = new StringBuffer(\"\");\n            br = new BufferedReader(new InputStreamReader(new FileInputStream(path + fileName), \"utf8\"));\n            String outStr;\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line + \"\\r\\n\");\n            }\n            outStr = sb.toString();\n\n            ps = new PrintStream(out, true, \"utf8\");\n            ps.write(outStr.getBytes());\n//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");\n//            writer.write(outStr);\n            // 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免\n//            writer.flush();\n//            writer.close();\n            if (process.waitFor() == 0) {   //0 表示线程正常终止。\n               return true;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        } finally {\n            try {\n                if (ps != null) {\n                    ps.close();\n                }\n                if (br != null) {\n                    br.close();\n                }\n                if (out != null){\n                    out.close();\n                }\n            } catch (IOException e1) {\n                e1.printStackTrace();\n            }\n        }\n        return false;\n}\n```\n\n测试\n\n```java\npublic static void main(String[] args){\n\n        //数据库备份\n        /*try {\n            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库成功备份！！\");\n            } else {\n                logger.info(\"数据库备份失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }*/\n        //数据库恢复\n        try {\n            if (restoreDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) {\n                logger.info(\"数据库恢复成功！！\");\n            } else {\n                logger.info(\"数据库恢复失败！！\");\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```\n\n代码下载点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java)\n\n# Windows下bat命令\n\n工作环境 Windows Server 2003 ，`MySQL`安装目录 D:\\DevTools\\MySQL ,\n\n`WinRAR` 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe \n\n备份数据存储的路径为 D:\\\\数据备份，好了下面开始写`DOS批处理命令`了。代码如下:\n\n```python\ncolor 9\nrem ---------------------数据库备份开始-----------------------\n@echo off\n\nset \"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\" \nREM 日期格式：20170924200727 \nmd \"D:\\%ymd%\" \n\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\" --opt -Q taotao -uroot -proot > D:\\%Ymd%\\taotao.sql\nREM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码\nREM echo Winrar loading... \nREM  \"C:\\Program Files\\WinRAR\\WinRAR.exe\" a -ep1 -r -o+ -m5 -df \"D:\\数据备份\\%Ymd%.rar\" \"D:\\数据备份\\%Ymd%\" \n@echo on\nrem ---------------------数据库备份完成-----------------------\n\npause\n```\n\n把上面的命令保存为 *backup.bat* ，双击运行，就开始备份数据了。 \n\n第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 \n\n第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 \n\n第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 \n\n最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 \n\n如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。\n\n但是用windows下bat命令备份有一个致命缺点：**备份时数据库会暂时断开。(30M断开5s左右)**\n\n# 总结\n\n第二种方式的缺点太致命：**备份时数据库会暂时断开**。\n\n所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。","slug":"Java备份和还原MySQL数据库","published":1,"updated":"2017-09-25T00:59:55.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf9g000dswg63uogux7u","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"使用MySQL自带工具\"><a href=\"#使用MySQL自带工具\" class=\"headerlink\" title=\"使用MySQL自带工具\"></a>使用MySQL自带工具</h1><h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>备份使用MySQL的<code>mysqldump</code>命令来实现，示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * Java代码实现MySQL数据库导出</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">  * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">  * <span class=\"doctag\">@param</span> savePath     数据库导出文件保存路径</div><div class=\"line\">  * <span class=\"doctag\">@param</span> fileName     数据库导出文件文件名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> databaseName 要导出的数据库名</div><div class=\"line\">  * <span class=\"doctag\">@return</span> 返回true表示导出成功，否则返回false。</div><div class=\"line\">  * <span class=\"doctag\">@author</span> maxu</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backUpDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String savePath, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">     File saveFile = <span class=\"keyword\">new</span> File(savePath);</div><div class=\"line\">     <span class=\"keyword\">if</span> (!saveFile.exists()) &#123;<span class=\"comment\">// 如果目录不存在</span></div><div class=\"line\">         saveFile.mkdirs();<span class=\"comment\">// 创建文件夹</span></div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!savePath.endsWith(File.separator)) &#123;</div><div class=\"line\">         savePath = savePath + File.separator;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     PrintWriter printWriter = <span class=\"keyword\">null</span>;</div><div class=\"line\">     BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(savePath + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">         Process process = Runtime.getRuntime().exec(<span class=\"string\">\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --set-charset=UTF8 \"</span> + databaseName);</div><div class=\"line\">         InputStreamReader inputStreamReader = <span class=\"keyword\">new</span> InputStreamReader(process.getInputStream(), <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">         bufferedReader = <span class=\"keyword\">new</span> BufferedReader(inputStreamReader);</div><div class=\"line\">         String line;</div><div class=\"line\">         <span class=\"keyword\">while</span> ((line = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             printWriter.println(line);</div><div class=\"line\">         &#125;</div><div class=\"line\">         printWriter.flush();</div><div class=\"line\">         <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">             logger.info(<span class=\"string\">\"数据库已备份到——&gt;&gt;\"</span> + savePath);</div><div class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (bufferedReader != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 bufferedReader.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">if</span> (printWriter != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 printWriter.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">             e.printStackTrace();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  </div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">     * Java代码实现MySQL数据库还原</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">     * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">     * <span class=\"doctag\">@param</span> path         需要还原数据库文件的路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> fileName     需要还原数据库文件的名称</div><div class=\"line\">     * <span class=\"doctag\">@param</span> databaseName 需要还原的数据库名称</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回true表示还原成功，否则返回false。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">restoreDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String path, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        OutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</div><div class=\"line\">        PrintStream ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况</span></div><div class=\"line\">            Process process = Runtime.getRuntime().exec(<span class=\"string\">\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --default-character-set=utf8 \"</span> + databaseName);</div><div class=\"line\">            out = process.getOutputStream();<span class=\"comment\">//控制台的输入信息作为输出流</span></div><div class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(path + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">            String outStr;</div><div class=\"line\">            String line;</div><div class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                sb.append(line + <span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            outStr = sb.toString();</div><div class=\"line\"></div><div class=\"line\">            ps = <span class=\"keyword\">new</span> PrintStream(out, <span class=\"keyword\">true</span>, <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">            ps.write(outStr.getBytes());</div><div class=\"line\"><span class=\"comment\">//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");</span></div><div class=\"line\"><span class=\"comment\">//            writer.write(outStr);</span></div><div class=\"line\">            <span class=\"comment\">// 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免</span></div><div class=\"line\"><span class=\"comment\">//            writer.flush();</span></div><div class=\"line\"><span class=\"comment\">//            writer.close();</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;   <span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    ps.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (br != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    br.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</div><div class=\"line\">                e1.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//数据库备份</span></div><div class=\"line\">        <span class=\"comment\">/*try &#123;</span></div><div class=\"line\">            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) &#123;</div><div class=\"line\">                logger.info(\"数据库成功备份！！\");</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                logger.info(\"数据库备份失败！！\");</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;*/</div><div class=\"line\">        <span class=\"comment\">//数据库恢复</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (restoreDatabase(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"taotao\"</span>, <span class=\"string\">\"D:/\"</span>, <span class=\"string\">\"taotao.sql\"</span>)) &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复成功！！\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复失败！！\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>代码下载点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java\" target=\"_blank\" rel=\"external\"><em>下载</em></a></p>\n<h1 id=\"Windows下bat命令\"><a href=\"#Windows下bat命令\" class=\"headerlink\" title=\"Windows下bat命令\"></a>Windows下bat命令</h1><p>工作环境 Windows Server 2003 ，<code>MySQL</code>安装目录 D:\\DevTools\\MySQL ,</p>\n<p><code>WinRAR</code> 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe </p>\n<p>备份数据存储的路径为 D:\\数据备份，好了下面开始写<code>DOS批处理命令</code>了。代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">color <span class=\"number\">9</span></div><div class=\"line\">rem ---------------------数据库备份开始-----------------------</div><div class=\"line\"><span class=\"meta\">@echo off</span></div><div class=\"line\"></div><div class=\"line\">set <span class=\"string\">\"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\"</span> </div><div class=\"line\">REM 日期格式：<span class=\"number\">20170924200727</span> </div><div class=\"line\">md <span class=\"string\">\"D:\\%ymd%\"</span> </div><div class=\"line\"><span class=\"string\">\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\"</span> --opt -Q taotao -uroot -proot &gt; D:\\%Ymd%\\taotao.sql</div><div class=\"line\">REM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码</div><div class=\"line\">REM echo Winrar loading... </div><div class=\"line\">REM  <span class=\"string\">\"C:\\Program Files\\WinRAR\\WinRAR.exe\"</span> a -ep1 -r -o+ -m5 -df <span class=\"string\">\"D:\\数据备份\\%Ymd%.rar\"</span> <span class=\"string\">\"D:\\数据备份\\%Ymd%\"</span> </div><div class=\"line\"><span class=\"meta\">@echo on</span></div><div class=\"line\">rem ---------------------数据库备份完成-----------------------</div><div class=\"line\"></div><div class=\"line\">pause</div></pre></td></tr></table></figure>\n<p>把上面的命令保存为 <em>backup.bat</em> ，双击运行，就开始备份数据了。 </p>\n<p>第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 </p>\n<p>第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 </p>\n<p>第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 </p>\n<p>最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 </p>\n<p>如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。</p>\n<p>但是用windows下bat命令备份有一个致命缺点：<strong>备份时数据库会暂时断开。(30M断开5s左右)</strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>第二种方式的缺点太致命：<strong>备份时数据库会暂时断开</strong>。</p>\n<p>所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    在项目中经常会用到Java程序备份和还原MySQL数据库的内容，都是大同小异，但程序也会出现各种各样的问题（运行时异常，乱码等）。实现上都是用Runtime执行MySQL的命令行工具，然后读写IO流数据；也有可能是由于使用Java的Runtime来实现备份还原功能，而由于大家的运行时环境有差异才导致代码运行不成功。在这里记录一下自己使用的工具和方法。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/mysql-index.png\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"使用MySQL自带工具\"><a href=\"#使用MySQL自带工具\" class=\"headerlink\" title=\"使用MySQL自带工具\"></a>使用MySQL自带工具</h1><h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><p>备份使用MySQL的<code>mysqldump</code>命令来实现，示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);</div><div class=\"line\"></div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * Java代码实现MySQL数据库导出</div><div class=\"line\">  *</div><div class=\"line\">  * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">  * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">  * <span class=\"doctag\">@param</span> savePath     数据库导出文件保存路径</div><div class=\"line\">  * <span class=\"doctag\">@param</span> fileName     数据库导出文件文件名</div><div class=\"line\">  * <span class=\"doctag\">@param</span> databaseName 要导出的数据库名</div><div class=\"line\">  * <span class=\"doctag\">@return</span> 返回true表示导出成功，否则返回false。</div><div class=\"line\">  * <span class=\"doctag\">@author</span> maxu</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backUpDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String savePath, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">     File saveFile = <span class=\"keyword\">new</span> File(savePath);</div><div class=\"line\">     <span class=\"keyword\">if</span> (!saveFile.exists()) &#123;<span class=\"comment\">// 如果目录不存在</span></div><div class=\"line\">         saveFile.mkdirs();<span class=\"comment\">// 创建文件夹</span></div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">if</span> (!savePath.endsWith(File.separator)) &#123;</div><div class=\"line\">         savePath = savePath + File.separator;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">     PrintWriter printWriter = <span class=\"keyword\">null</span>;</div><div class=\"line\">     BufferedReader bufferedReader = <span class=\"keyword\">null</span>;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">         printWriter = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(savePath + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">         Process process = Runtime.getRuntime().exec(<span class=\"string\">\" D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysqldump.exe -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --set-charset=UTF8 \"</span> + databaseName);</div><div class=\"line\">         InputStreamReader inputStreamReader = <span class=\"keyword\">new</span> InputStreamReader(process.getInputStream(), <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">         bufferedReader = <span class=\"keyword\">new</span> BufferedReader(inputStreamReader);</div><div class=\"line\">         String line;</div><div class=\"line\">         <span class=\"keyword\">while</span> ((line = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">             printWriter.println(line);</div><div class=\"line\">         &#125;</div><div class=\"line\">         printWriter.flush();</div><div class=\"line\">         <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">             logger.info(<span class=\"string\">\"数据库已备份到——&gt;&gt;\"</span> + savePath);</div><div class=\"line\">             <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">         e.printStackTrace();</div><div class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">             <span class=\"keyword\">if</span> (bufferedReader != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 bufferedReader.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">             <span class=\"keyword\">if</span> (printWriter != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                 printWriter.close();</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">             e.printStackTrace();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"还原\"><a href=\"#还原\" class=\"headerlink\" title=\"还原\"></a>还原</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Logger logger = LoggerFactory.getLogger(MySQLDatabaseBackupAndRestore.class);  </div><div class=\"line\">\t</div><div class=\"line\">   <span class=\"comment\">/**</div><div class=\"line\">     * Java代码实现MySQL数据库还原</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> hostIP       MySQL数据库所在服务器地址IP</div><div class=\"line\">     * <span class=\"doctag\">@param</span> userName     进入数据库所需要的用户名</div><div class=\"line\">     * <span class=\"doctag\">@param</span> password     进入数据库所需要的密码</div><div class=\"line\">     * <span class=\"doctag\">@param</span> path         需要还原数据库文件的路径</div><div class=\"line\">     * <span class=\"doctag\">@param</span> fileName     需要还原数据库文件的名称</div><div class=\"line\">     * <span class=\"doctag\">@param</span> databaseName 需要还原的数据库名称</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 返回true表示还原成功，否则返回false。</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">restoreDatabase</span><span class=\"params\">(String hostIP, String userName, String password, String databaseName, String path, String fileName)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        OutputStream out = <span class=\"keyword\">null</span>;</div><div class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</div><div class=\"line\">        PrintStream ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 调用mysql的cmd:cmd命令在后台执行，没有命令窗口出现或者一闪而过的情况</span></div><div class=\"line\">            Process process = Runtime.getRuntime().exec(<span class=\"string\">\"cmd /c start /b  D:\\\\DevTools\\\\MySQL\\\\MySQL5.7\\\\bin\\\\mysql -h\"</span> + hostIP + <span class=\"string\">\" -u\"</span> + userName + <span class=\"string\">\" -p\"</span> + password + <span class=\"string\">\" --default-character-set=utf8 \"</span> + databaseName);</div><div class=\"line\">            out = process.getOutputStream();<span class=\"comment\">//控制台的输入信息作为输出流</span></div><div class=\"line\">            StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer(<span class=\"string\">\"\"</span>);</div><div class=\"line\">            br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(path + fileName), <span class=\"string\">\"utf8\"</span>));</div><div class=\"line\">            String outStr;</div><div class=\"line\">            String line;</div><div class=\"line\">            <span class=\"keyword\">while</span> ((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                sb.append(line + <span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            outStr = sb.toString();</div><div class=\"line\"></div><div class=\"line\">            ps = <span class=\"keyword\">new</span> PrintStream(out, <span class=\"keyword\">true</span>, <span class=\"string\">\"utf8\"</span>);</div><div class=\"line\">            ps.write(outStr.getBytes());</div><div class=\"line\"><span class=\"comment\">//            OutputStreamWriter writer = new OutputStreamWriter(out, \"utf8\");</span></div><div class=\"line\"><span class=\"comment\">//            writer.write(outStr);</span></div><div class=\"line\">            <span class=\"comment\">// 注：这里如果用缓冲方式写入文件的话，会导致中文乱码，用flush()方法则可以避免</span></div><div class=\"line\"><span class=\"comment\">//            writer.flush();</span></div><div class=\"line\"><span class=\"comment\">//            writer.close();</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (process.waitFor() == <span class=\"number\">0</span>) &#123;   <span class=\"comment\">//0 表示线程正常终止。</span></div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    ps.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (br != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    br.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (out != <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    out.close();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e1) &#123;</div><div class=\"line\">                e1.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//数据库备份</span></div><div class=\"line\">        <span class=\"comment\">/*try &#123;</div><div class=\"line\">            if (backUpDatabase(\"localhost\", \"root\", \"root\", \"taotao\", \"D:/\", \"taotao.sql\")) &#123;</div><div class=\"line\">                logger.info(\"数据库成功备份！！\");</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                logger.info(\"数据库备份失败！！\");</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;*/</span></div><div class=\"line\">        <span class=\"comment\">//数据库恢复</span></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (restoreDatabase(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"taotao\"</span>, <span class=\"string\">\"D:/\"</span>, <span class=\"string\">\"taotao.sql\"</span>)) &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复成功！！\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                logger.info(<span class=\"string\">\"数据库恢复失败！！\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>代码下载点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/MySQLbackUpAndRestore/MySQLDatabaseBackupAndRestore.java\"><em>下载</em></a></p>\n<h1 id=\"Windows下bat命令\"><a href=\"#Windows下bat命令\" class=\"headerlink\" title=\"Windows下bat命令\"></a>Windows下bat命令</h1><p>工作环境 Windows Server 2003 ，<code>MySQL</code>安装目录 D:\\DevTools\\MySQL ,</p>\n<p><code>WinRAR</code> 安装目录 C:\\Program Files\\WinRAR\\WinRAR.exe </p>\n<p>备份数据存储的路径为 D:\\数据备份，好了下面开始写<code>DOS批处理命令</code>了。代码如下:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">color <span class=\"number\">9</span></div><div class=\"line\">rem ---------------------数据库备份开始-----------------------</div><div class=\"line\"><span class=\"meta\">@echo off</span></div><div class=\"line\"></div><div class=\"line\">set <span class=\"string\">\"Ymd=%DATE:~0,4%%DATE:~5,2%%DATE:~8,2%%TIME:~0,2%%TIME:~3,2%%TIME:~6,2%\"</span> </div><div class=\"line\">REM 日期格式：<span class=\"number\">20170924200727</span> </div><div class=\"line\">md <span class=\"string\">\"D:\\%ymd%\"</span> </div><div class=\"line\"><span class=\"string\">\"D:\\DevTools\\MySQL\\MySQL5.7\\bin\\mysqldump.exe\"</span> --opt -Q taotao -uroot -proot &gt; D:\\%Ymd%\\taotao.sql</div><div class=\"line\">REM ..... 这里可以添加更多的命令，要看你有多少个数据库，其中 -Q 后面是数据库名称 -p紧跟后面是密码</div><div class=\"line\">REM echo Winrar loading... </div><div class=\"line\">REM  <span class=\"string\">\"C:\\Program Files\\WinRAR\\WinRAR.exe\"</span> a -ep1 -r -o+ -m5 -df <span class=\"string\">\"D:\\数据备份\\%Ymd%.rar\"</span> <span class=\"string\">\"D:\\数据备份\\%Ymd%\"</span> </div><div class=\"line\"><span class=\"meta\">@echo on</span></div><div class=\"line\">rem ---------------------数据库备份完成-----------------------</div><div class=\"line\"></div><div class=\"line\">pause</div></pre></td></tr></table></figure>\n<p>把上面的命令保存为 <em>backup.bat</em> ，双击运行，就开始备份数据了。 </p>\n<p>第 一句是建立一个变量 %Ymd% ，通过 %date% 这个系统变量得到日期，%date:~,4% 表示取日期的前面4个字符就是年份，%%date:~5,2% 表示取日期第5个字符开始的2个字符就是月份，%date:~8,2% 这个就是日期号数，如 2017-09-24 这个日期最后得到的结果是 20170924 </p>\n<p>第二句就是使用变量 %Ymd% 的值建立一个空的文件夹。 </p>\n<p>第三句开始就是使用MySQL的命令对数据库mysql进行备份，并存储在 D:\\数据备份\\%ymd% 这个文件夹下面，这里可以有很多类似的命令，备份多个数据库。 </p>\n<p>最后就是使用 WinRAR 对备份的数据进行压缩，并存储为以 %Ymd% 变量值建立的RAR文件名，同时删除备份的 %Ymd% 目录。 </p>\n<p>如果你想让系统自动定期备份，就可以通过系统的任务计划定期执行这个命令。</p>\n<p>但是用windows下bat命令备份有一个致命缺点：<strong>备份时数据库会暂时断开。(30M断开5s左右)</strong></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>第二种方式的缺点太致命：<strong>备份时数据库会暂时断开</strong>。</p>\n<p>所以第一种方式将会是我们在开发中首选的方式，因为第二种方式的缺点对用户体验的影响太大了。</p>"},{"title":"Java生成PDF","date":"2017-11-13T07:51:53.000Z","_content":"\n# 前言\n\n在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于**JAVA实现HTML转PDF**，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。\n\n本博客项目地址：https://github.com/Sunny0715/java_pdf_demo\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"/>\n\n</div>\n\n<!-- more -->\n\n# iText介绍\n\niText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。\n\niText 官网：http://itextpdf.com/\n\niText 开发文档： http://developers.itextpdf.com/developers-home\n\niText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\n\n# iText简单使用\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf -->\n<dependency>\n    <groupId>com.itextpdf</groupId>\n    <artifactId>itextpdf</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n测试代码：JavaToPdf\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 不支持中文\n * ClassName: JavaToPdf \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdf {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld.pdf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tdocument.add(new Paragraph(\"hello world\"));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"/>\n\n</div>\n\n# iText中文支持\n\niText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf\n\n可参考文档：http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\n\n测试代码：JavaToPdfCN\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Font;\nimport com.itextpdf.text.FontFactory;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 支持中文\n * ClassName: JavaToPdfCN \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfCN {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN.pdf\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\tdocument.add(new Paragraph(\"hello world，我是rainbowhorse。\", font));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"/>\n\n</div>\n\n# iText-HTML渲染\n\n在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF\n\n可参考文档：http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker -->\n<dependency>\n    <groupId>com.itextpdf.tool</groupId>\n    <artifactId>xmlworker</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n添加模板：template.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.red {\n\tcolor: red;\n}\n</style>\n</head>\n<body>\n\t<div class=\"red\">你好，rainbowhorse</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtml\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\n/**\n * HTML转PDF\n * ClassName: JavaToPdfHtml \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtml {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = PathUtil.getCurrentPath() + \"/template.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new FileInputStream(HTML), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"/>\n\n</div>\n\n**注意：**\n\n1. HTML中必须使用标准的语法，标签一定需要闭合。\n2. HTML中如果有中文，需要在样式中添加对应字体的样式。\n\n# iText-HTML-Freemarker渲染\n\n在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。\n\n添加FreeMarke依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.freemarker/freemarker -->\n<dependency>\n    <groupId>org.freemarker</groupId>\n    <artifactId>freemarker</artifactId>\n    <version>2.3.19</version>\n</dependency>\n```\n\n添加模板：template_freemarker.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.blue {\n\tcolor: blue;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 100px;\n\ttop: 150px\n}\n</style>\n</head>\n<body>\n\t<div class=\"blue pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\tpublic static void createPdf(String content, String dest) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dest));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new ByteArrayInputStream(content.getBytes()), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out);\n\t\t\t// 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"/>\n\n</div>\n\n目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。\n\n# Flying Saucer-CSS高级特性支持\n\nFlying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.\n\nFlying Saucer是基于iText的，支持对CSS高级特性的解析。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.5</version>\n</dependency>\n  \n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf-itext5</artifactId>\n    <version>9.1.5</version>\n</dependency>\n```\n\n添加模板：template_freemarker_fs.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\n @page {\n \tsize:297mm 230mm;\n        @top-left{\n            content:element(header-left);\n        };\n        @top-right {\n            content: element(header-right)\n        };\n        @bottom-left {\n            content: element(footer-left)\n        };\n        @bottom-right {\n            content: element(footer-right)\n        };\n    }\n\nbody {\n\tfont-family: SimHei;\n}\n\n.color {\n\tcolor: green;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 200px;\n\ttop: 200px;\n\twidth: 200px;\n\tfont-size: 20px;\n}\n</style>\n</head>\n<body>\n\t<img src=\"logo.jpg\" />\n\t<div class=\"color pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker：\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF Flying Saucer\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\t// 图片路径\n\tprivate static final String LOGO_PATH = \"file:/\" + PathUtil.getCurrentPath() + \"/\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static void createPdf(String content, String dest)\n\t\t\tthrows IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\trender.createPDF(new FileOutputStream(dest));\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"/>\n\n</div>\n\n在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。\n\n**对于生成的pdf页面大小，可以用css的@page属性设置。**\n\n# PDF转图片\n\n在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl -->\n<dependency>\n    <groupId>org.jpedal</groupId>\n    <artifactId>jpedal-lgpl</artifactId>\n    <version>4.74b27</version>\n</dependency>\n```\n\n测试代码：JavaToPdfImgHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.imageio.ImageIO;\n\nimport org.jpedal.PdfDecoder;\nimport org.jpedal.exception.PdfException;\nimport org.jpedal.fonts.FontMappings;\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * Jpedal把pdf转成图片 \n * ClassName: JavaToPdfImgHtmlFreeMarker\n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfImgHtmlFreeMarker {\n\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\";\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static final String LOGO_PATH = \"file://\" + PathUtil.getCurrentPath() + \"/logo.png\";\n\tprivate static final String IMG_EXT = \"png\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\n\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);\n\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), 2, 1, IMG_EXT);\n\n\t\tFileOutputStream fileStream = new FileOutputStream(new File(DEST));\n\t\tfileStream.write(imgSteam.toByteArray());\n\t\tfileStream.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据模板生成pdf文件流\n\t */\n\tpublic static ByteArrayOutputStream createPdf(String content) {\n\t\tByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\ttry {\n\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\ttry {\n\t\t\trender.createPDF(outStream);\n\t\t\treturn outStream;\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\toutStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据pdf二进制文件 生成图片文件\n\t *\n\t * @param bytes\n\t *            pdf二进制\n\t * @param scaling\n\t *            清晰度\n\t * @param pageNum\n\t *            页数\n\t */\n\tpublic static ByteArrayOutputStream pdfToImg(byte[] bytes, float scaling, int pageNum, String formatName) {\n\t\t// 推荐的方法打开PdfDecoder\n\t\tPdfDecoder pdfDecoder = new PdfDecoder(true);\n\t\tFontMappings.setFontReplacements();\n\t\t// 修改图片的清晰度\n\t\tpdfDecoder.scaling = scaling;\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\ttry {\n\t\t\t// 打开pdf文件，生成PdfDecoder对象\n\t\t\tpdfDecoder.openPdfArray(bytes); // bytes is byte[] array with PDF\n\t\t\t// 获取第pageNum页的pdf\n\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);\n\n\t\t\tImageIO.write(img, formatName, out);\n\t\t} catch (PdfException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn out;\n\t}\n}\n```\n\n输出结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"/>\n\n</div>\n\nJpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。\n\n# 总结\n\n对于电子凭证的技术方案，总结如下:\n\n1. HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。\n2. 渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。\n3. 在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。","source":"_posts/Java生成PDF.md","raw":"---\ntitle: Java生成PDF\ndate: 2017-11-13 15:51:53\ntags: [java,tips]\ncategories: technology\n---\n\n# 前言\n\n在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于**JAVA实现HTML转PDF**，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。\n\n本博客项目地址：https://github.com/Sunny0715/java_pdf_demo\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"/>\n\n</div>\n\n<!-- more -->\n\n# iText介绍\n\niText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。\n\niText 官网：http://itextpdf.com/\n\niText 开发文档： http://developers.itextpdf.com/developers-home\n\niText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\n\n# iText简单使用\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf -->\n<dependency>\n    <groupId>com.itextpdf</groupId>\n    <artifactId>itextpdf</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n测试代码：JavaToPdf\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 不支持中文\n * ClassName: JavaToPdf \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdf {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld.pdf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tdocument.add(new Paragraph(\"hello world\"));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"/>\n\n</div>\n\n# iText中文支持\n\niText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf\n\n可参考文档：http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\n\n测试代码：JavaToPdfCN\n\n```java\npackage com.rainbowhorse.test;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.Font;\nimport com.itextpdf.text.FontFactory;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.itextpdf.text.pdf.PdfWriter;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\n\n/**\n * 支持中文\n * ClassName: JavaToPdfCN \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfCN {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN.pdf\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws FileNotFoundException, DocumentException {\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\tdocument.add(new Paragraph(\"hello world，我是rainbowhorse。\", font));\n\t\tdocument.close();\n\t\twriter.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"/>\n\n</div>\n\n# iText-HTML渲染\n\n在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF\n\n可参考文档：http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker -->\n<dependency>\n    <groupId>com.itextpdf.tool</groupId>\n    <artifactId>xmlworker</artifactId>\n    <version>5.5.11</version>\n</dependency>\n```\n\n添加模板：template.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.red {\n\tcolor: red;\n}\n</style>\n</head>\n<body>\n\t<div class=\"red\">你好，rainbowhorse</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtml\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\n/**\n * HTML转PDF\n * ClassName: JavaToPdfHtml \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtml {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = PathUtil.getCurrentPath() + \"/template.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(DEST));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new FileInputStream(HTML), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"/>\n\n</div>\n\n**注意：**\n\n1. HTML中必须使用标准的语法，标签一定需要闭合。\n2. HTML中如果有中文，需要在样式中添加对应字体的样式。\n\n# iText-HTML-Freemarker渲染\n\n在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。\n\n添加FreeMarke依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.freemarker/freemarker -->\n<dependency>\n    <groupId>org.freemarker</groupId>\n    <artifactId>freemarker</artifactId>\n    <version>2.3.19</version>\n</dependency>\n```\n\n添加模板：template_freemarker.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\nbody {\n\tfont-family: SimHei;\n}\n\n.blue {\n\tcolor: blue;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 100px;\n\ttop: 150px\n}\n</style>\n</head>\n<body>\n\t<div class=\"blue pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.tool.xml.XMLWorkerFontProvider;\nimport com.itextpdf.tool.xml.XMLWorkerHelper;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\tpublic static void createPdf(String content, String dest) throws IOException, DocumentException {\n\n\t\tDocument document = new Document();\n\t\tPdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(dest));\n\t\tdocument.open();\n\t\tXMLWorkerFontProvider fontImp = new XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);\n\t\tfontImp.register(FONT);\n\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, new ByteArrayInputStream(content.getBytes()), null,\n\t\t\t\tCharset.forName(\"UTF-8\"), fontImp);\n\t\tdocument.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out);\n\t\t\t// 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"/>\n\n</div>\n\n目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。\n\n# Flying Saucer-CSS高级特性支持\n\nFlying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.\n\nFlying Saucer是基于iText的，支持对CSS高级特性的解析。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.5</version>\n</dependency>\n  \n<!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 -->\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf-itext5</artifactId>\n    <version>9.1.5</version>\n</dependency>\n```\n\n添加模板：template_freemarker_fs.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\" />\n<title>Title</title>\n<style>\n @page {\n \tsize:297mm 230mm;\n        @top-left{\n            content:element(header-left);\n        };\n        @top-right {\n            content: element(header-right)\n        };\n        @bottom-left {\n            content: element(footer-left)\n        };\n        @bottom-right {\n            content: element(footer-right)\n        };\n    }\n\nbody {\n\tfont-family: SimHei;\n}\n\n.color {\n\tcolor: green;\n}\n\n.pos {\n\tposition: absolute;\n\tleft: 200px;\n\ttop: 200px;\n\twidth: 200px;\n\tfont-size: 20px;\n}\n</style>\n</head>\n<body>\n\t<img src=\"logo.jpg\" />\n\t<div class=\"color pos\">你好，${name}</div>\n</body>\n</html>\n```\n\n测试代码：JavaToPdfHtmlFreeMarker：\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * FreeMarker模板的HTML转PDF Flying Saucer\n * ClassName: JavaToPdfHtmlFreeMarker \n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfHtmlFreeMarker {\n\n\t// 生成PDF路径\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\";\n\t// 模板路径\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\t// 中文字体（黑体）\n\tprivate static final String FONT = \"simhei.ttf\";\n\t// 图片路径\n\tprivate static final String LOGO_PATH = \"file:/\" + PathUtil.getCurrentPath() + \"/\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic static void createPdf(String content, String dest)\n\t\t\tthrows IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\trender.createPDF(new FileOutputStream(dest));\n\t}\n}\n```\n\n运行结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"/>\n\n</div>\n\n在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。\n\n**对于生成的pdf页面大小，可以用css的@page属性设置。**\n\n# PDF转图片\n\n在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。\n\n添加依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl -->\n<dependency>\n    <groupId>org.jpedal</groupId>\n    <artifactId>jpedal-lgpl</artifactId>\n    <version>4.74b27</version>\n</dependency>\n```\n\n测试代码：JavaToPdfImgHtmlFreeMarker\n\n```java\npackage com.rainbowhorse.test.flyingsaucer;\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.io.Writer;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.imageio.ImageIO;\n\nimport org.jpedal.PdfDecoder;\nimport org.jpedal.exception.PdfException;\nimport org.jpedal.fonts.FontMappings;\nimport org.xhtmlrenderer.pdf.ITextFontResolver;\nimport org.xhtmlrenderer.pdf.ITextRenderer;\n\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.pdf.BaseFont;\nimport com.rainbowhorse.test.util.PathUtil;\n\nimport freemarker.template.Configuration;\nimport freemarker.template.Template;\n\n/**\n * Jpedal把pdf转成图片 \n * ClassName: JavaToPdfImgHtmlFreeMarker\n * @Description: TODO\n * @author max\n * @date 2017年11月13日\n */\npublic class JavaToPdfImgHtmlFreeMarker {\n\n\tprivate static final String DEST = \"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\";\n\tprivate static final String HTML = \"template_freemarker_fs.html\";\n\tprivate static final String FONT = \"simhei.ttf\";\n\tprivate static final String LOGO_PATH = \"file://\" + PathUtil.getCurrentPath() + \"/logo.png\";\n\tprivate static final String IMG_EXT = \"png\";\n\n\tprivate static Configuration freemarkerCfg = null;\n\n\tstatic {\n\t\tfreemarkerCfg = new Configuration();\n\t\t// freemarker的模板目录\n\t\ttry {\n\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(new File(PathUtil.getCurrentPath()));\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws IOException, DocumentException, com.lowagie.text.DocumentException {\n\t\tMap<String, Object> data = new HashMap<String, Object>(16);\n\t\tdata.put(\"name\", \"rainbowhorse\");\n\n\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);\n\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);\n\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), 2, 1, IMG_EXT);\n\n\t\tFileOutputStream fileStream = new FileOutputStream(new File(DEST));\n\t\tfileStream.write(imgSteam.toByteArray());\n\t\tfileStream.close();\n\n\t}\n\n\t/**\n\t * freemarker渲染html\n\t */\n\tpublic static String freeMarkerRender(Map<String, Object> data, String htmlTmp) {\n\t\tWriter out = new StringWriter();\n\t\ttry {\n\t\t\t// 获取模板,并设置编码方式\n\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);\n\t\t\ttemplate.setEncoding(\"UTF-8\");\n\t\t\t// 合并数据模型与模板\n\t\t\ttemplate.process(data, out); // 将合并后的数据和模板写入到流中，这里使用的字符流\n\t\t\tout.flush();\n\t\t\treturn out.toString();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tout.close();\n\t\t\t} catch (IOException ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据模板生成pdf文件流\n\t */\n\tpublic static ByteArrayOutputStream createPdf(String content) {\n\t\tByteArrayOutputStream outStream = new ByteArrayOutputStream();\n\t\tITextRenderer render = new ITextRenderer();\n\t\tITextFontResolver fontResolver = render.getFontResolver();\n\t\ttry {\n\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 解析html生成pdf\n\t\trender.setDocumentFromString(content);\n\t\t// 解决图片相对路径的问题\n\t\trender.getSharedContext().setBaseURL(LOGO_PATH);\n\t\trender.layout();\n\t\ttry {\n\t\t\trender.createPDF(outStream);\n\t\t\treturn outStream;\n\t\t} catch (com.lowagie.text.DocumentException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\toutStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * 根据pdf二进制文件 生成图片文件\n\t *\n\t * @param bytes\n\t *            pdf二进制\n\t * @param scaling\n\t *            清晰度\n\t * @param pageNum\n\t *            页数\n\t */\n\tpublic static ByteArrayOutputStream pdfToImg(byte[] bytes, float scaling, int pageNum, String formatName) {\n\t\t// 推荐的方法打开PdfDecoder\n\t\tPdfDecoder pdfDecoder = new PdfDecoder(true);\n\t\tFontMappings.setFontReplacements();\n\t\t// 修改图片的清晰度\n\t\tpdfDecoder.scaling = scaling;\n\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\ttry {\n\t\t\t// 打开pdf文件，生成PdfDecoder对象\n\t\t\tpdfDecoder.openPdfArray(bytes); // bytes is byte[] array with PDF\n\t\t\t// 获取第pageNum页的pdf\n\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);\n\n\t\t\tImageIO.write(img, formatName, out);\n\t\t} catch (PdfException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn out;\n\t}\n}\n```\n\n输出结果\n\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"/>\n\n</div>\n\nJpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。\n\n# 总结\n\n对于电子凭证的技术方案，总结如下:\n\n1. HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。\n2. 渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。\n3. 在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。","slug":"Java生成PDF","published":1,"updated":"2017-11-14T03:15:41.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf9g000fswg6njxy4upb","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于<strong>JAVA实现HTML转PDF</strong>，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。</p>\n<p>本博客项目地址：<a href=\"https://github.com/Sunny0715/java_pdf_demo\" target=\"_blank\" rel=\"external\">https://github.com/Sunny0715/java_pdf_demo</a></p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"iText介绍\"><a href=\"#iText介绍\" class=\"headerlink\" title=\"iText介绍\"></a>iText介绍</h1><p>iText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。</p>\n<p>iText 官网：<a href=\"http://itextpdf.com/\" target=\"_blank\" rel=\"external\">http://itextpdf.com/</a></p>\n<p>iText 开发文档： <a href=\"http://developers.itextpdf.com/developers-home\" target=\"_blank\" rel=\"external\">http://developers.itextpdf.com/developers-home</a></p>\n<p>iText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在<a href=\"http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\" target=\"_blank\" rel=\"external\">http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。</a></p>\n<h1 id=\"iText简单使用\"><a href=\"#iText简单使用\" class=\"headerlink\" title=\"iText简单使用\"></a>iText简单使用</h1><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 不支持中文</div><div class=\"line\"> * ClassName: JavaToPdf </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdf</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld.pdf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world\"</span>));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"iText中文支持\"><a href=\"#iText中文支持\" class=\"headerlink\" title=\"iText中文支持\"></a>iText中文支持</h1><p>iText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\" target=\"_blank\" rel=\"external\">http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java</a></p>\n<p>测试代码：JavaToPdfCN</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.FontFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 支持中文</div><div class=\"line\"> * ClassName: JavaToPdfCN </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfCN</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world，我是rainbowhorse。\"</span>, font));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"iText-HTML渲染\"><a href=\"#iText-HTML渲染\" class=\"headerlink\" title=\"iText-HTML渲染\"></a>iText-HTML渲染</h1><p>在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\" target=\"_blank\" rel=\"external\">http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples</a></p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf.tool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>xmlworker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.red &#123;</div><div class=\"line\">\tcolor: red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red\"</span>&gt;</span>你好，rainbowhorse<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtml </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtml</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = PathUtil.getCurrentPath() + <span class=\"string\">\"/template.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> FileInputStream(HTML), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"><br><br></div>\n\n<p><strong>注意：</strong></p>\n<ol>\n<li>HTML中必须使用标准的语法，标签一定需要闭合。</li>\n<li>HTML中如果有中文，需要在样式中添加对应字体的样式。</li>\n</ol>\n<h1 id=\"iText-HTML-Freemarker渲染\"><a href=\"#iText-HTML-Freemarker渲染\" class=\"headerlink\" title=\"iText-HTML-Freemarker渲染\"></a>iText-HTML-Freemarker渲染</h1><p>在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。</p>\n<p>添加FreeMarke依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.freemarker<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>freemarker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blue &#123;</div><div class=\"line\">\tcolor: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 100px;</div><div class=\"line\">\ttop: 150px</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blue pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * FreeMarker模板的HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> ByteArrayInputStream(content.getBytes()), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"><br><br></div>\n\n<p>目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。</p>\n<h1 id=\"Flying-Saucer-CSS高级特性支持\"><a href=\"#Flying-Saucer-CSS高级特性支持\" class=\"headerlink\" title=\"Flying Saucer-CSS高级特性支持\"></a>Flying Saucer-CSS高级特性支持</h1><p>Flying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.</p>\n<p>Flying Saucer是基于iText的，支持对CSS高级特性的解析。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf-itext5<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker_fs.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"> @page &#123;</div><div class=\"line\"> \tsize:297mm 230mm;</div><div class=\"line\">        @top-left&#123;</div><div class=\"line\">            content:element(header-left);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @top-right &#123;</div><div class=\"line\">            content: element(header-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-left &#123;</div><div class=\"line\">            content: element(footer-left)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-right &#123;</div><div class=\"line\">            content: element(footer-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.color &#123;</div><div class=\"line\">\tcolor: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 200px;</div><div class=\"line\">\ttop: 200px;</div><div class=\"line\">\twidth: 200px;</div><div class=\"line\">\tfont-size: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.jpg\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * FreeMarker模板的HTML转PDF Flying Saucer</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 图片路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file:/\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span></span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException &#123;</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\trender.createPDF(<span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"><br><br></div>\n\n<p>在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。</p>\n<p><strong>对于生成的pdf页面大小，可以用css的@page属性设置。</strong></p>\n<h1 id=\"PDF转图片\"><a href=\"#PDF转图片\" class=\"headerlink\" title=\"PDF转图片\"></a>PDF转图片</h1><p>在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jpedal<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jpedal-lgpl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.74b27<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfImgHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.PdfDecoder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.exception.PdfException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.fonts.FontMappings;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Jpedal把pdf转成图片 </div><div class=\"line\"> * ClassName: JavaToPdfImgHtmlFreeMarker</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfImgHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file://\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/logo.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMG_EXT = <span class=\"string\">\"png\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);</div><div class=\"line\">\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), <span class=\"number\">2</span>, <span class=\"number\">1</span>, IMG_EXT);</div><div class=\"line\"></div><div class=\"line\">\t\tFileOutputStream fileStream = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(DEST));</div><div class=\"line\">\t\tfileStream.write(imgSteam.toByteArray());</div><div class=\"line\">\t\tfileStream.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 根据模板生成pdf文件流</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">createPdf</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\trender.createPDF(outStream);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> outStream;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\toutStream.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 根据pdf二进制文件 生成图片文件</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bytes</div><div class=\"line\">\t *            pdf二进制</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> scaling</div><div class=\"line\">\t *            清晰度</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> pageNum</div><div class=\"line\">\t *            页数</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">pdfToImg</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes, <span class=\"keyword\">float</span> scaling, <span class=\"keyword\">int</span> pageNum, String formatName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 推荐的方法打开PdfDecoder</span></div><div class=\"line\">\t\tPdfDecoder pdfDecoder = <span class=\"keyword\">new</span> PdfDecoder(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tFontMappings.setFontReplacements();</div><div class=\"line\">\t\t<span class=\"comment\">// 修改图片的清晰度</span></div><div class=\"line\">\t\tpdfDecoder.scaling = scaling;</div><div class=\"line\">\t\tByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 打开pdf文件，生成PdfDecoder对象</span></div><div class=\"line\">\t\t\tpdfDecoder.openPdfArray(bytes); <span class=\"comment\">// bytes is byte[] array with PDF</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取第pageNum页的pdf</span></div><div class=\"line\">\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);</div><div class=\"line\"></div><div class=\"line\">\t\t\tImageIO.write(img, formatName, out);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (PdfException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> out;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<div align=\"center\"><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"><br><br></div>\n\n<p>Jpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于电子凭证的技术方案，总结如下:</p>\n<ol>\n<li>HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。</li>\n<li>渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。</li>\n<li>在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在某些业务场景中，需要提供相关的电子凭证，比如网银/支付宝中转账的电子回单，签约的电子合同、证书等。方便用户查看，下载，打印。目前常用的解决方案是，把相关数据信息，生成对应的PDF文件返回给用户。之前有写过一篇博客关于<strong>JAVA实现HTML转PDF</strong>，不同场景下的业务不同，现在需要使用PDF生成证书，这篇博客主要介绍iText的使用。</p>\n<p>本博客项目地址：<a href=\"https://github.com/Sunny0715/java_pdf_demo\">https://github.com/Sunny0715/java_pdf_demo</a></p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/0.png\"/><br><br></div>","more":"<h1 id=\"iText介绍\"><a href=\"#iText介绍\" class=\"headerlink\" title=\"iText介绍\"></a>iText介绍</h1><p>iText是著名的开放源码的站点sourceforge一个项目，是用于生成PDF文档的一个JAVA类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、HTML文件转化为PDF文件。</p>\n<p>iText 官网：<a href=\"http://itextpdf.com/\">http://itextpdf.com/</a></p>\n<p>iText 开发文档： <a href=\"http://developers.itextpdf.com/developers-home\">http://developers.itextpdf.com/developers-home</a></p>\n<p>iText目前有两套版本iText5和iText7。iText5应该是网上用的比较多的一个版本。iText5因为是很多开发者参与贡献代码，因此在一些规范和设计上存在不合理的地方。iText7是后来官方针对iText5的重构，两个版本差别还是挺大的。不过在实际使用中，一般用到的都比较简单，所以不用特别拘泥于使用哪个版本。比如我们在<a href=\"http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。\">http://mvnrepository.com/中搜索iText，出来的都是iText5的依赖。</a></p>\n<h1 id=\"iText简单使用\"><a href=\"#iText简单使用\" class=\"headerlink\" title=\"iText简单使用\"></a>iText简单使用</h1><p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf/itextpdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdf</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 不支持中文</div><div class=\"line\"> * ClassName: JavaToPdf </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdf</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld.pdf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world\"</span>));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/1.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"iText中文支持\"><a href=\"#iText中文支持\" class=\"headerlink\" title=\"iText中文支持\"></a>iText中文支持</h1><p>iText默认是不支持中文的，因此需要添加对应的中文字体,比如黑体simhei.ttf</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java\">http://developers.itextpdf.com/examples/font-examples/using-fonts#1227-tengwarquenya1.java</a></p>\n<p>测试代码：JavaToPdfCN</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Font;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.FontFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Paragraph;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 支持中文</div><div class=\"line\"> * ClassName: JavaToPdfCN </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfCN</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> FileNotFoundException, DocumentException </span>&#123;</div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tFont font = FontFactory.getFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\tdocument.add(<span class=\"keyword\">new</span> Paragraph(<span class=\"string\">\"hello world，我是rainbowhorse。\"</span>, font));</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t\twriter.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/2.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"iText-HTML渲染\"><a href=\"#iText-HTML渲染\" class=\"headerlink\" title=\"iText-HTML渲染\"></a>iText-HTML渲染</h1><p>在一些比较复杂的PDF布局中，我们可以通过HTML去生成PDF</p>\n<p>可参考文档：<a href=\"http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples\">http://developers.itextpdf.com/examples/xml-worker-itext5/xml-worker-examples</a></p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/com.itextpdf.tool/xmlworker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf.tool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>xmlworker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.5.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.red &#123;</div><div class=\"line\">\tcolor: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"red\"</span>&gt;</span>你好，rainbowhorse<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtml</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtml </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtml</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = PathUtil.getCurrentPath() + <span class=\"string\">\"/template.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(DEST));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> FileInputStream(HTML), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/3.png\" algin=\"center\"/><br><br></div>\n\n<p><strong>注意：</strong></p>\n<ol>\n<li>HTML中必须使用标准的语法，标签一定需要闭合。</li>\n<li>HTML中如果有中文，需要在样式中添加对应字体的样式。</li>\n</ol>\n<h1 id=\"iText-HTML-Freemarker渲染\"><a href=\"#iText-HTML-Freemarker渲染\" class=\"headerlink\" title=\"iText-HTML-Freemarker渲染\"></a>iText-HTML-Freemarker渲染</h1><p>在实际使用中，HTML内容都是动态渲染的，因此我们需要加入模板引擎支持，可以使用FreeMarker/Velocity，这里使用FreeMarker举例。</p>\n<p>添加FreeMarke依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.freemarker/freemarker --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.freemarker<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>freemarker<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.19<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.blue &#123;</div><div class=\"line\">\tcolor: blue;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 100px;</div><div class=\"line\">\ttop: 150px</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"blue pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.Document;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.PdfWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerFontProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.tool.xml.XMLWorkerHelper;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * FreeMarker模板的HTML转PDF</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span> <span class=\"keyword\">throws</span> IOException, DocumentException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t\tDocument document = <span class=\"keyword\">new</span> Document();</div><div class=\"line\">\t\tPdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t\tdocument.open();</div><div class=\"line\">\t\tXMLWorkerFontProvider fontImp = <span class=\"keyword\">new</span> XMLWorkerFontProvider(XMLWorkerFontProvider.DONTLOOKFORFONTS);</div><div class=\"line\">\t\tfontImp.register(FONT);</div><div class=\"line\">\t\tXMLWorkerHelper.getInstance().parseXHtml(writer, document, <span class=\"keyword\">new</span> ByteArrayInputStream(content.getBytes()), <span class=\"keyword\">null</span>,</div><div class=\"line\">\t\t\t\tCharset.forName(<span class=\"string\">\"UTF-8\"</span>), fontImp);</div><div class=\"line\">\t\tdocument.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/4.png\" algin=\"center\"/><br><br></div>\n\n<p>目前为止，我们已经实现了iText通过HTML模板生成PDF的功能，但是实际应用中，我们发现iText并不能对高级的CSS样式进行解析，比如CSS中的position属性等，因此我们要引入新的组件。</p>\n<h1 id=\"Flying-Saucer-CSS高级特性支持\"><a href=\"#Flying-Saucer-CSS高级特性支持\" class=\"headerlink\" title=\"Flying Saucer-CSS高级特性支持\"></a>Flying Saucer-CSS高级特性支持</h1><p>Flying Saucer is a pure-Java library for rendering arbitrary well-formed XML (or XHTML) using CSS 2.1 for layout and formatting, output to Swing panels, PDF, and images.</p>\n<p>Flying Saucer是基于iText的，支持对CSS高级特性的解析。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.xhtmlrenderer/flying-saucer-pdf-itext5 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf-itext5<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.5<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>添加模板：template_freemarker_fs.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\"> @page &#123;</div><div class=\"line\"> \tsize:297mm 230mm;</div><div class=\"line\">        @top-left&#123;</div><div class=\"line\">            content:element(header-left);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @top-right &#123;</div><div class=\"line\">            content: element(header-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-left &#123;</div><div class=\"line\">            content: element(footer-left)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        @bottom-right &#123;</div><div class=\"line\">            content: element(footer-right)</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">body &#123;</div><div class=\"line\">\tfont-family: SimHei;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.color &#123;</div><div class=\"line\">\tcolor: green;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.pos &#123;</div><div class=\"line\">\tposition: absolute;</div><div class=\"line\">\tleft: 200px;</div><div class=\"line\">\ttop: 200px;</div><div class=\"line\">\twidth: 200px;</div><div class=\"line\">\tfont-size: 20px;</div><div class=\"line\">&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"logo.jpg\"</span> /&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"color pos\"</span>&gt;</span>你好，$&#123;name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfHtmlFreeMarker：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * FreeMarker模板的HTML转PDF Flying Saucer</div><div class=\"line\"> * ClassName: JavaToPdfHtmlFreeMarker </div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 生成PDF路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS.pdf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 模板路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 中文字体（黑体）</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"comment\">// 图片路径</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file:/\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\">\t\tString content = JavaToPdfHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tJavaToPdfHtmlFreeMarker.createPdf(content, DEST);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createPdf</span><span class=\"params\">(String content, String dest)</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\trender.createPDF(<span class=\"keyword\">new</span> FileOutputStream(dest));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>运行结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/5.png\" algin=\"center\"/><br><br></div>\n\n<p>在某些场景下，HTML中的静态资源是在本地，我们可以使用render.getSharedContext().setBaseURL()加载文件资源,注意资源URL需要使用文件协议 “file://”。</p>\n<p><strong>对于生成的pdf页面大小，可以用css的@page属性设置。</strong></p>\n<h1 id=\"PDF转图片\"><a href=\"#PDF转图片\" class=\"headerlink\" title=\"PDF转图片\"></a>PDF转图片</h1><p>在某些场景中，我们可能只需要返回图片格式的电子凭证，我们可以使用Jpedal组件，把PDF转成图片。</p>\n<p>添加依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.jpedal/jpedal-lgpl --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jpedal<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jpedal-lgpl<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.74b27<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>测试代码：JavaToPdfImgHtmlFreeMarker</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.rainbowhorse.test.flyingsaucer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ByteArrayOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.StringWriter;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Writer;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.PdfDecoder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.exception.PdfException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.jpedal.fonts.FontMappings;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextFontResolver;</div><div class=\"line\"><span class=\"keyword\">import</span> org.xhtmlrenderer.pdf.ITextRenderer;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.DocumentException;</div><div class=\"line\"><span class=\"keyword\">import</span> com.itextpdf.text.pdf.BaseFont;</div><div class=\"line\"><span class=\"keyword\">import</span> com.rainbowhorse.test.util.PathUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> freemarker.template.Template;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Jpedal把pdf转成图片 </div><div class=\"line\"> * ClassName: JavaToPdfImgHtmlFreeMarker</div><div class=\"line\"> * <span class=\"doctag\">@Description</span>: TODO</div><div class=\"line\"> * <span class=\"doctag\">@author</span> max</div><div class=\"line\"> * <span class=\"doctag\">@date</span> 2017年11月13日</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JavaToPdfImgHtmlFreeMarker</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEST = <span class=\"string\">\"target/HelloWorld_CN_HTML_FREEMARKER_FS_IMG.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HTML = <span class=\"string\">\"template_freemarker_fs.html\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FONT = <span class=\"string\">\"simhei.ttf\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LOGO_PATH = <span class=\"string\">\"file://\"</span> + PathUtil.getCurrentPath() + <span class=\"string\">\"/logo.png\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String IMG_EXT = <span class=\"string\">\"png\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Configuration freemarkerCfg = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">static</span> &#123;</div><div class=\"line\">\t\tfreemarkerCfg = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">\t\t<span class=\"comment\">// freemarker的模板目录</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfreemarkerCfg.setDirectoryForTemplateLoading(<span class=\"keyword\">new</span> File(PathUtil.getCurrentPath()));</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, DocumentException, com.lowagie.text.DocumentException </span>&#123;</div><div class=\"line\">\t\tMap&lt;String, Object&gt; data = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"number\">16</span>);</div><div class=\"line\">\t\tdata.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"rainbowhorse\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\tString content = JavaToPdfImgHtmlFreeMarker.freeMarkerRender(data, HTML);</div><div class=\"line\">\t\tByteArrayOutputStream pdfStream = JavaToPdfImgHtmlFreeMarker.createPdf(content);</div><div class=\"line\">\t\tByteArrayOutputStream imgSteam = JavaToPdfImgHtmlFreeMarker.pdfToImg(pdfStream.toByteArray(), <span class=\"number\">2</span>, <span class=\"number\">1</span>, IMG_EXT);</div><div class=\"line\"></div><div class=\"line\">\t\tFileOutputStream fileStream = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(DEST));</div><div class=\"line\">\t\tfileStream.write(imgSteam.toByteArray());</div><div class=\"line\">\t\tfileStream.close();</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * freemarker渲染html</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">freeMarkerRender</span><span class=\"params\">(Map&lt;String, Object&gt; data, String htmlTmp)</span> </span>&#123;</div><div class=\"line\">\t\tWriter out = <span class=\"keyword\">new</span> StringWriter();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取模板,并设置编码方式</span></div><div class=\"line\">\t\t\tTemplate template = freemarkerCfg.getTemplate(htmlTmp);</div><div class=\"line\">\t\t\ttemplate.setEncoding(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">// 合并数据模型与模板</span></div><div class=\"line\">\t\t\ttemplate.process(data, out); <span class=\"comment\">// 将合并后的数据和模板写入到流中，这里使用的字符流</span></div><div class=\"line\">\t\t\tout.flush();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> out.toString();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tout.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</div><div class=\"line\">\t\t\t\tex.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 根据模板生成pdf文件流</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">createPdf</span><span class=\"params\">(String content)</span> </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStream = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\tITextRenderer render = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">\t\tITextFontResolver fontResolver = render.getFontResolver();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tfontResolver.addFont(FONT, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 解析html生成pdf</span></div><div class=\"line\">\t\trender.setDocumentFromString(content);</div><div class=\"line\">\t\t<span class=\"comment\">// 解决图片相对路径的问题</span></div><div class=\"line\">\t\trender.getSharedContext().setBaseURL(LOGO_PATH);</div><div class=\"line\">\t\trender.layout();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\trender.createPDF(outStream);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> outStream;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (com.lowagie.text.DocumentException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\toutStream.close();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 根据pdf二进制文件 生成图片文件</div><div class=\"line\">\t *</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> bytes</div><div class=\"line\">\t *            pdf二进制</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> scaling</div><div class=\"line\">\t *            清晰度</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> pageNum</div><div class=\"line\">\t *            页数</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ByteArrayOutputStream <span class=\"title\">pdfToImg</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes, <span class=\"keyword\">float</span> scaling, <span class=\"keyword\">int</span> pageNum, String formatName)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 推荐的方法打开PdfDecoder</span></div><div class=\"line\">\t\tPdfDecoder pdfDecoder = <span class=\"keyword\">new</span> PdfDecoder(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\tFontMappings.setFontReplacements();</div><div class=\"line\">\t\t<span class=\"comment\">// 修改图片的清晰度</span></div><div class=\"line\">\t\tpdfDecoder.scaling = scaling;</div><div class=\"line\">\t\tByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 打开pdf文件，生成PdfDecoder对象</span></div><div class=\"line\">\t\t\tpdfDecoder.openPdfArray(bytes); <span class=\"comment\">// bytes is byte[] array with PDF</span></div><div class=\"line\">\t\t\t<span class=\"comment\">// 获取第pageNum页的pdf</span></div><div class=\"line\">\t\t\tBufferedImage img = pdfDecoder.getPageAsImage(pageNum);</div><div class=\"line\"></div><div class=\"line\">\t\t\tImageIO.write(img, formatName, out);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (PdfException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> out;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<div align=center><img width=\"800\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-11-13/iText/6.png\" algin=\"center\"/><br><br></div>\n\n<p>Jpedal支持将指定页PDF生成图片，pdfDecoder.scaling设置图片的分辨率(不同分辨率下文件大小不同) ，支持多种图片格式，具体更多可自行研究。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>对于电子凭证的技术方案，总结如下:</p>\n<ol>\n<li>HTML模板+model数据，通过freemarker进行渲染，便于维护和修改。</li>\n<li>渲染后的HTML流，可通过Flying Saucer组件生成HTML文件流，或者生成HTML后再转成jpg文件流。</li>\n<li>在Web项目中，对应的文件流，可以通过ContentType设置，在线查看/下载，不需通过附件服务。</li>\n</ol>"},{"title":"Linux基本命令","date":"2017-04-07T07:59:22.000Z","_content":"\n# 前言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看`http://www.cnblogs.com/skillup/articles/1877812.html`","source":"_posts/Linux基本命令.md","raw":"---\ntitle: Linux基本命令\ndate: 2017-04-07 15:59:22\ntags: [java, tips]\ncategories: technology\n---\n\n# 前言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看`http://www.cnblogs.com/skillup/articles/1877812.html`","slug":"Linux基本命令","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xf9x000jswg6hkty714w","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\" target=\"_blank\" rel=\"external\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\" target=\"_blank\" rel=\"external\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\" target=\"_blank\" rel=\"external\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<code>http://www.cnblogs.com/skillup/articles/1877812.html</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<code>http://www.cnblogs.com/skillup/articles/1877812.html</code></p>"},{"title":"Markdown语法指南","date":"2017-03-21T14:51:10.000Z","_content":"花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>\n\n<!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","source":"_posts/Markdown语法.md","raw":"---\ntitle: Markdown语法指南\ndate: 2017-03-21 22:51:10\ntags: [tips]\n---\n花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>\n\n<!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","slug":"Markdown语法","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfa1000mswg69m8hm9de","content":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\" target=\"_blank\" rel=\"external\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\" target=\"_blank\" rel=\"external\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\" target=\"_blank\" rel=\"external\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\" target=\"_blank\" rel=\"external\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\" target=\"_blank\" rel=\"external\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`<span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span></span> 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span> 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>\n","site":{"data":{}},"excerpt":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>","more":"<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`</span><span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span></span> 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span> 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>"},{"title":"MySQL优化","date":"2017-04-17T04:31:55.000Z","_content":"\n# 前言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","source":"_posts/MySQL优化.md","raw":"---\ntitle: MySQL优化\ndate: 2017-04-17 12:31:55\ntags: [sql]\ncategories: technology\n---\n\n# 前言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","slug":"MySQL优化","published":1,"updated":"2017-08-27T05:17:42.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfa8000qswg6w2qe76cu","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\" target=\"_blank\" rel=\"external\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=\"center\"><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>"},{"title":"Spring-AOP两种配置方式","date":"2017-09-09T11:44:46.000Z","_content":"\n# 前言\n\n## AOP\n\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：**核心关注点**和**横切关注点**。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如`权限认证`、`日志`、`事务`。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n## AOP核心概念\n\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（Aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（Joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（Pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（Advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（Weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（Introduction）\n\n在不修改代码的前提下，引入可以在**运行期**为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\n**Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理**。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、**默认使用Java动态代理来创建AOP代理**，这样就可以为任何接口实例创建代理了\n\n2、**当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理**，也可强制使用CGLIB\n\nAOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：**代理对象的方法=增强处理+被代理对象**的方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/>\n\n</div>\n\n# Spring配置AOP的两种方式\n\n## 注解配置AOP\n\n注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： \n\n1. 使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). \n2. 开发需要被拦截的类。 \n3. 将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 \n\n\napplicationContext的配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n  \n  \t<!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->\n     <!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->\n\t<!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能-->\n\t<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\t\n  \t<!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 -->\n\t<context:component-scan base-package=\"com.spring.aop\"/>\n  \n\t<!-- 切面 -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\" />\n\n</beans>\n```\n\n为Aspect`切面`类添加注解\n\n```java\npackage com.spring.aop.aspect;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n/**\n * 系统服务组件Aspect切面Bean\n */\n\n//声明这是一个组件\n@Component\n//声明这是一个切面Bean\n@Aspect\npublic class ServiceAspect {\n\n\tprivate final static Log log = LogFactory.getLog(ServiceAspect.class);\n\t\n\t//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点\n\t@Pointcut(\"execution(* com.spring.aop.service..*(..))\")\n\tpublic void aspect(){\t}\n\t\n\t/*\n\t * 配置前置通知,使用在方法aspect()上注册的切入点\n\t * 同时接受JoinPoint切入点对象,可以没有该参数\n\t */\n\t@Before(\"aspect()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"before \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置后置通知,使用在方法aspect()上注册的切入点\n\t@After(\"aspect()\")\n\tpublic void after(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"after \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置环绕通知,使用在方法aspect()上注册的切入点\n\t@Around(\"aspect()\")\n\tpublic void around(JoinPoint joinPoint){\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t((ProceedingJoinPoint) joinPoint).proceed();\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms!\");\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms with exception : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//配置后置返回通知,使用在方法aspect()上注册的切入点\n\t@AfterReturning(\"aspect()\")\n\tpublic void afterReturn(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterReturn \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置抛出异常后通知,使用在方法aspect()上注册的切入点\n\t@AfterThrowing(pointcut=\"aspect()\", throwing=\"ex\")\n\tpublic void afterThrow(JoinPoint joinPoint, Exception ex){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterThrow \" + joinPoint + \"\\t\" + ex.getMessage());\n\t\t}\n\t}\n\t\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n测试代码\n\n```java\npackage com.spring.aop;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.aop.service.UserService;\nimport com.spring.mvc.bean.User;\n\n/**\n * Spring AOP测试\n */\npublic class Tester {\n\n\tprivate final static Log log = LogFactory.getLog(Tester.class);\n\t\n\tpublic static void main(String[] args) {\n\t\t//启动Spring容器\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取service组件\n\t\tUserService service = (UserService) context.getBean(\"userService\");\n\t\t//以普通的方式调用UserService对象的三个方法\n\t\tUser user = service.get(1L);\n\t\tservice.save(user);\n\t\ttry {\n\t\t\tservice.delete(1L);\n\t\t} catch (Exception e) {\n\t\t\tif(log.isWarnEnabled()){\n\t\t\t\tlog.warn(\"Delete user : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n控制台输出如下：\n\n```java\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.service.UserService:19] getUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(User com.spring.aop.service.UserService.get(long))\tUse time : 42 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.service.UserService:26] saveUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(void com.spring.aop.service.UserService.save(User))\tUse time : 2 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.service.UserService:32] delete method . . .\n INFO [spring.aop.aspect.ServiceAspect:65] around execution(boolean com.spring.aop.service.UserService.delete(long))\tUse time : 5 ms with exception : spring aop ThrowAdvice演示\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(boolean com.spring.aop.service.UserService.delete(long))\n WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type for: public boolean com.spring.aop.service.UserService.delete(long) throws java.lang.Exception\n```\n\n可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。\n\n## XML配置AOP\n\nXML配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 系统服务组件的切面Bean -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\"/>\n\t<!-- AOP配置 -->\n\t<aop:config>\n\t\t<!-- 声明一个切面,并注入切面Bean,相当于@Aspect -->\n\t\t<aop:aspect id=\"simpleAspect\" ref=\"serviceAspect\">\n\t\t\t<!-- 配置一个切入点,相当于@Pointcut -->\n\t\t\t<aop:pointcut expression=\"execution(* com.spring.aop.service..*(..))\" id=\"simplePointcut\"/>\n\t\t\t<!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing -->\n\t\t\t<aop:before pointcut-ref=\"simplePointcut\" method=\"before\"/>\n\t\t\t<aop:after pointcut-ref=\"simplePointcut\" method=\"after\"/>\n\t\t\t<aop:after-returning pointcut-ref=\"simplePointcut\" method=\"afterReturn\"/>\n\t\t\t<aop:after-throwing pointcut-ref=\"simplePointcut\" method=\"afterThrow\" throwing=\"ex\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n```\n\nServiceAspect.java\n\n```java\n//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法\n@Before(\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\")\npublic void beforeReturnUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeReturnUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法\n@Before(\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\")\npublic void beforeArgUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中\n@Before(\"aspect()&&args(id)\")\npublic void beforeArgId(JoinPoint joinPoint, long id){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgId \" + joinPoint + \"\\tID:\" + id);\n\t}\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n# 总结\n\nSpringAop可以用来：\n\n1. Spring声明式事务管理配置。\n2. 在执行方法前,判断是否具有权限。\n3. 对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。\n4. 使用Spring AOP实现MySQL数据库读写分离。\n5. 信息过滤\n6. ......","source":"_posts/Spring-AOP两种配置方式.md","raw":"---\ntitle: Spring-AOP两种配置方式\ndate: 2017-09-09 19:44:46\ntags: [java,spring]\ncategories: technology\n---\n\n# 前言\n\n## AOP\n\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：**核心关注点**和**横切关注点**。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如`权限认证`、`日志`、`事务`。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n## AOP核心概念\n\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（Aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（Joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（Pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（Advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（Weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（Introduction）\n\n在不修改代码的前提下，引入可以在**运行期**为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\n**Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理**。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、**默认使用Java动态代理来创建AOP代理**，这样就可以为任何接口实例创建代理了\n\n2、**当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理**，也可强制使用CGLIB\n\nAOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：**代理对象的方法=增强处理+被代理对象**的方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/>\n\n</div>\n\n# Spring配置AOP的两种方式\n\n## 注解配置AOP\n\n注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： \n\n1. 使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). \n2. 开发需要被拦截的类。 \n3. 将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 \n\n\napplicationContext的配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n  \n  \t<!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->\n     <!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->\n\t<!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能-->\n\t<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\t\n  \t<!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 -->\n\t<context:component-scan base-package=\"com.spring.aop\"/>\n  \n\t<!-- 切面 -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\" />\n\n</beans>\n```\n\n为Aspect`切面`类添加注解\n\n```java\npackage com.spring.aop.aspect;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n/**\n * 系统服务组件Aspect切面Bean\n */\n\n//声明这是一个组件\n@Component\n//声明这是一个切面Bean\n@Aspect\npublic class ServiceAspect {\n\n\tprivate final static Log log = LogFactory.getLog(ServiceAspect.class);\n\t\n\t//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点\n\t@Pointcut(\"execution(* com.spring.aop.service..*(..))\")\n\tpublic void aspect(){\t}\n\t\n\t/*\n\t * 配置前置通知,使用在方法aspect()上注册的切入点\n\t * 同时接受JoinPoint切入点对象,可以没有该参数\n\t */\n\t@Before(\"aspect()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"before \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置后置通知,使用在方法aspect()上注册的切入点\n\t@After(\"aspect()\")\n\tpublic void after(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"after \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置环绕通知,使用在方法aspect()上注册的切入点\n\t@Around(\"aspect()\")\n\tpublic void around(JoinPoint joinPoint){\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t((ProceedingJoinPoint) joinPoint).proceed();\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms!\");\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms with exception : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//配置后置返回通知,使用在方法aspect()上注册的切入点\n\t@AfterReturning(\"aspect()\")\n\tpublic void afterReturn(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterReturn \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置抛出异常后通知,使用在方法aspect()上注册的切入点\n\t@AfterThrowing(pointcut=\"aspect()\", throwing=\"ex\")\n\tpublic void afterThrow(JoinPoint joinPoint, Exception ex){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterThrow \" + joinPoint + \"\\t\" + ex.getMessage());\n\t\t}\n\t}\n\t\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n测试代码\n\n```java\npackage com.spring.aop;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.aop.service.UserService;\nimport com.spring.mvc.bean.User;\n\n/**\n * Spring AOP测试\n */\npublic class Tester {\n\n\tprivate final static Log log = LogFactory.getLog(Tester.class);\n\t\n\tpublic static void main(String[] args) {\n\t\t//启动Spring容器\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取service组件\n\t\tUserService service = (UserService) context.getBean(\"userService\");\n\t\t//以普通的方式调用UserService对象的三个方法\n\t\tUser user = service.get(1L);\n\t\tservice.save(user);\n\t\ttry {\n\t\t\tservice.delete(1L);\n\t\t} catch (Exception e) {\n\t\t\tif(log.isWarnEnabled()){\n\t\t\t\tlog.warn(\"Delete user : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n控制台输出如下：\n\n```java\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.service.UserService:19] getUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(User com.spring.aop.service.UserService.get(long))\tUse time : 42 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.service.UserService:26] saveUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(void com.spring.aop.service.UserService.save(User))\tUse time : 2 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.service.UserService:32] delete method . . .\n INFO [spring.aop.aspect.ServiceAspect:65] around execution(boolean com.spring.aop.service.UserService.delete(long))\tUse time : 5 ms with exception : spring aop ThrowAdvice演示\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(boolean com.spring.aop.service.UserService.delete(long))\n WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type for: public boolean com.spring.aop.service.UserService.delete(long) throws java.lang.Exception\n```\n\n可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。\n\n## XML配置AOP\n\nXML配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 系统服务组件的切面Bean -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\"/>\n\t<!-- AOP配置 -->\n\t<aop:config>\n\t\t<!-- 声明一个切面,并注入切面Bean,相当于@Aspect -->\n\t\t<aop:aspect id=\"simpleAspect\" ref=\"serviceAspect\">\n\t\t\t<!-- 配置一个切入点,相当于@Pointcut -->\n\t\t\t<aop:pointcut expression=\"execution(* com.spring.aop.service..*(..))\" id=\"simplePointcut\"/>\n\t\t\t<!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing -->\n\t\t\t<aop:before pointcut-ref=\"simplePointcut\" method=\"before\"/>\n\t\t\t<aop:after pointcut-ref=\"simplePointcut\" method=\"after\"/>\n\t\t\t<aop:after-returning pointcut-ref=\"simplePointcut\" method=\"afterReturn\"/>\n\t\t\t<aop:after-throwing pointcut-ref=\"simplePointcut\" method=\"afterThrow\" throwing=\"ex\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n```\n\nServiceAspect.java\n\n```java\n//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法\n@Before(\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\")\npublic void beforeReturnUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeReturnUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法\n@Before(\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\")\npublic void beforeArgUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中\n@Before(\"aspect()&&args(id)\")\npublic void beforeArgId(JoinPoint joinPoint, long id){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgId \" + joinPoint + \"\\tID:\" + id);\n\t}\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n# 总结\n\nSpringAop可以用来：\n\n1. Spring声明式事务管理配置。\n2. 在执行方法前,判断是否具有权限。\n3. 对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。\n4. 使用Spring AOP实现MySQL数据库读写分离。\n5. 信息过滤\n6. ......","slug":"Spring-AOP两种配置方式","published":1,"updated":"2017-09-16T02:02:50.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfae000tswg6wdgulhc0","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如<code>权限认证</code>、<code>日志</code>、<code>事务</code>。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（Aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（Joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（Pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（Advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（Weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（Introduction）</p>\n<p>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p><strong>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</strong>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、<strong>默认使用Java动态代理来创建AOP代理</strong>，这样就可以为任何接口实例创建代理了</p>\n<p>2、<strong>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</strong>，也可强制使用CGLIB</p>\n<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<strong>代理对象的方法=增强处理+被代理对象</strong>的方法。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"Spring配置AOP的两种方式\"><a href=\"#Spring配置AOP的两种方式\" class=\"headerlink\" title=\"Spring配置AOP的两种方式\"></a>Spring配置AOP的两种方式</h1><h2 id=\"注解配置AOP\"><a href=\"#注解配置AOP\" class=\"headerlink\" title=\"注解配置AOP\"></a>注解配置AOP</h2><p>注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： </p>\n<ol>\n<li>使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). </li>\n<li>开发需要被拦截的类。 </li>\n<li>将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 </li>\n</ol>\n<p>applicationContext的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;</div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  --&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib --&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.spring.aop\"</span>/&gt;</span></div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 切面 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>为Aspect<code>切面</code>类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.aspect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 系统服务组件Aspect切面Bean</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明这是一个组件</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"comment\">//声明这是一个切面Bean</span></div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceAspect</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(ServiceAspect.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span></span>&#123;\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/*</span></div><div class=\"line\">\t * 配置前置通知,使用在方法aspect()上注册的切入点</div><div class=\"line\">\t * 同时接受JoinPoint切入点对象,可以没有该参数</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"before \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"after \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置环绕通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t((ProceedingJoinPoint) joinPoint).proceed();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置返回通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterReturn \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置抛出异常后通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterThrowing</span>(pointcut=<span class=\"string\">\"aspect()\"</span>, throwing=<span class=\"string\">\"ex\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterThrow \"</span> + joinPoint + <span class=\"string\">\"\\t\"</span> + ex.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.aop.service.UserService;</div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Spring AOP测试</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tester</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(Tester.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//启动Spring容器</span></div><div class=\"line\">\t\tApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//获取service组件</span></div><div class=\"line\">\t\tUserService service = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//以普通的方式调用UserService对象的三个方法</span></div><div class=\"line\">\t\tUser user = service.get(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\tservice.save(user);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tservice.delete(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isWarnEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.warn(<span class=\"string\">\"Delete user : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:<span class=\"number\">40</span>] <span class=\"function\">before <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</span></div><div class=\"line\">INFO [spring.aop.service.UserService:19] getUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)\tUse time : 42 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:26] saveUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)\tUse time : 2 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:32] delete method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:65] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)\tUse time : 5 ms with exception : spring aop ThrowAdvice演示</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type <span class=\"keyword\">for</span>: <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.<span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span>)</span> <span class=\"keyword\">throws</span> java.lang.Exception</div></pre></td></tr></table></figure>\n<p>可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。</p>\n<h2 id=\"XML配置AOP\"><a href=\"#XML配置AOP\" class=\"headerlink\" title=\"XML配置AOP\"></a>XML配置AOP</h2><p>XML配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 系统服务组件的切面Bean --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- AOP配置 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simpleAspect\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"serviceAspect\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置一个切入点,相当于@Pointcut --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simplePointcut\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"after\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterReturn\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterThrow\"</span> <span class=\"attr\">throwing</span>=<span class=\"string\">\"ex\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ServiceAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeReturnUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeReturnUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()&amp;&amp;args(id)\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgId</span><span class=\"params\">(JoinPoint joinPoint, <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgId \"</span> + joinPoint + <span class=\"string\">\"\\tID:\"</span> + id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>SpringAop可以用来：</p>\n<ol>\n<li>Spring声明式事务管理配置。</li>\n<li>在执行方法前,判断是否具有权限。</li>\n<li>对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。</li>\n<li>使用Spring AOP实现MySQL数据库读写分离。</li>\n<li>信息过滤</li>\n<li>……</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/><br><br></div>","more":"<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如<code>权限认证</code>、<code>日志</code>、<code>事务</code>。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（Aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（Joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（Pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（Advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（Weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（Introduction）</p>\n<p>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p><strong>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</strong>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、<strong>默认使用Java动态代理来创建AOP代理</strong>，这样就可以为任何接口实例创建代理了</p>\n<p>2、<strong>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</strong>，也可强制使用CGLIB</p>\n<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<strong>代理对象的方法=增强处理+被代理对象</strong>的方法。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"Spring配置AOP的两种方式\"><a href=\"#Spring配置AOP的两种方式\" class=\"headerlink\" title=\"Spring配置AOP的两种方式\"></a>Spring配置AOP的两种方式</h1><h2 id=\"注解配置AOP\"><a href=\"#注解配置AOP\" class=\"headerlink\" title=\"注解配置AOP\"></a>注解配置AOP</h2><p>注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： </p>\n<ol>\n<li>使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). </li>\n<li>开发需要被拦截的类。 </li>\n<li>将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 </li>\n</ol>\n<p>applicationContext的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"</span>&gt;</span></div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  --&gt;</span></div><div class=\"line\">     <span class=\"comment\">&lt;!-- 对于单例模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib --&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活自动代理功能 打开aop对@Aspectj的注解支持 ,相当于为注解提供解析功能--&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">  \t<span class=\"comment\">&lt;!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.spring.aop\"</span>/&gt;</span></div><div class=\"line\">  </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 切面 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>为Aspect<code>切面</code>类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.aspect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 系统服务组件Aspect切面Bean</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明这是一个组件</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"comment\">//声明这是一个切面Bean</span></div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceAspect</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(ServiceAspect.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span></span>&#123;\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/*</div><div class=\"line\">\t * 配置前置通知,使用在方法aspect()上注册的切入点</div><div class=\"line\">\t * 同时接受JoinPoint切入点对象,可以没有该参数</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"before \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"after \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置环绕通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t((ProceedingJoinPoint) joinPoint).proceed();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置返回通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterReturn \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置抛出异常后通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterThrowing</span>(pointcut=<span class=\"string\">\"aspect()\"</span>, throwing=<span class=\"string\">\"ex\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterThrow \"</span> + joinPoint + <span class=\"string\">\"\\t\"</span> + ex.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.aop.service.UserService;</div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Spring AOP测试</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tester</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(Tester.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//启动Spring容器</span></div><div class=\"line\">\t\tApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//获取service组件</span></div><div class=\"line\">\t\tUserService service = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//以普通的方式调用UserService对象的三个方法</span></div><div class=\"line\">\t\tUser user = service.get(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\tservice.save(user);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tservice.delete(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isWarnEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.warn(<span class=\"string\">\"Delete user : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:<span class=\"number\">40</span>] <span class=\"function\">before <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:19] getUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)\tUse time : 42 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:26] saveUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)\tUse time : 2 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:32] delete method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:65] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)\tUse time : 5 ms with exception : spring aop ThrowAdvice演示</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type <span class=\"keyword\">for</span>: <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.<span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span>)</span> <span class=\"keyword\">throws</span> java.lang.Exception</span></div></pre></td></tr></table></figure>\n<p>可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。</p>\n<h2 id=\"XML配置AOP\"><a href=\"#XML配置AOP\" class=\"headerlink\" title=\"XML配置AOP\"></a>XML配置AOP</h2><p>XML配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 系统服务组件的切面Bean --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- AOP配置 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simpleAspect\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"serviceAspect\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置一个切入点,相当于@Pointcut --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simplePointcut\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"after\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterReturn\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterThrow\"</span> <span class=\"attr\">throwing</span>=<span class=\"string\">\"ex\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ServiceAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeReturnUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeReturnUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()&amp;&amp;args(id)\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgId</span><span class=\"params\">(JoinPoint joinPoint, <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgId \"</span> + joinPoint + <span class=\"string\">\"\\tID:\"</span> + id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>SpringAop可以用来：</p>\n<ol>\n<li>Spring声明式事务管理配置。</li>\n<li>在执行方法前,判断是否具有权限。</li>\n<li>对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。</li>\n<li>使用Spring AOP实现MySQL数据库读写分离。</li>\n<li>信息过滤</li>\n<li>……</li>\n</ol>"},{"title":"分布式下ID生成算法 SnowFlake","date":"2017-10-30T06:26:21.000Z","_content":"\n# 前言\n\n在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 数据库自增长序列或字段\n\n最常见的方式，利用数据库，全表中唯一。如MySQL的`AUTO_INCREMENT`。\n\n## 优点\n\n1. 简单，代码方便，性能可以接受。\n2. 数字ID天然排序，对分页或者需要排序的结果很有帮助。\n\n## 缺点\n\n1. 不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。\n2. 在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。\n3. 在性能达不到要求的情况下，比较难于扩展。\n4. 如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。\n5. 分表分库的时候会有麻烦。\n\n## 优化方案\n\n针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。\n\n# UUID\n\n常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。\n\n## 优点\n\n1. 简单，代码方便。\n2. 生成ID性能非常好，基本不会有性能问题。\n3. 全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。\n\n## 缺点\n\n1. 没有排序，无法保证趋势递增。\n2. UUID往往是使用字符串存储，查询的效率比较低。\n3. 存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。\n4. 传输数据量大。\n5. 不可读。\n\n# Twitter-SnowFlake算法\n\n有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 [*SnowFlake*](https://github.com/twitter/snowflake) 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。\n\n## 算法原理\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"/>\n\n</div>\n\n除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。\n\n### SnowFlake – 时间戳\n\n这里时间戳的细度是**毫秒级**，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。\n\n### SnowFake – 工作机器ID\n\n严格意义上来说这个bit段的使用可以是**进程级**，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。\n\n### SnowFlake – 序列号\n\n序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。\n\n## 具体实现\n\n### Sequence类\n\n```java\n/**\n * Snowflake 生成的 64 位 long 类型的 ID，结构如下:<br>\n * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>\n * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0<br>\n * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，\n *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。\n * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年<br>\n * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId<br>\n * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号<br>\n *\n * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。\n */\npublic class Sequence {\n\t\n\t/** 开始时间截 */\n\tprivate final long twepoch = 1288834974657L;\n\t/** 机器id所占的位数 */\n\tprivate final long workerIdBits = 5L;\n\t/** 数据标识id所占的位数 */\n\tprivate final long datacenterIdBits = 5L;\n\t/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */\n\tprivate final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n\t/** 支持的最大数据标识id，结果是31 */\n\tprivate final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\n\t/** 序列在id中占的位数 */\n\tprivate final long sequenceBits = 12L;\n\t/** 机器ID向左移12位 */\n\tprivate final long workerIdShift = sequenceBits;\n\t/** 数据标识id向左移17位(12+5) */\n\tprivate final long datacenterIdShift = sequenceBits + workerIdBits;\n\t/** 时间截向左移22位(5+5+12) */\n\tprivate final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\n\t/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */\n\tprivate final long sequenceMask = -1L ^ (-1L << sequenceBits);\n\n\t/** 工作机器ID(0~31) */\n\tprivate long workerId;\n\t/** 数据中心ID(0~31) */\n\tprivate long datacenterId;\n\t/** 毫秒内序列(0~4095) */\n\tprivate long sequence = 0L;\n\t/** 上次生成ID的时间截 */\n\tprivate long lastTimestamp = -1L;\n\n\n\tpublic Sequence() {\n\t\tdatacenterId = getDatacenterId(maxDatacenterId);\n\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);\n    }\n\t\n\tpublic Sequence(long workerId, long datacenterId) {\n\t\tif (workerId > maxWorkerId || workerId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n\t\t}\n\t\t\n\t\tif (datacenterId > maxDatacenterId || datacenterId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"datacenter Id can't be greater than %d or less than 0\", maxDatacenterId));\n\t\t}\n\t\t\n\t\tthis.workerId = workerId;\n\t\tthis.datacenterId = datacenterId;\n\t}\n\t\n\n\t/**\n\t * 获取 maxWorkerId\n\t * @param datacenterId\t 数据中心id\n\t * @param maxWorkerId\t 机器id\n\t * @return\tmaxWorkerId\n\t */\n\tprotected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {\n\t\tStringBuilder mpid = new StringBuilder();\n\t\tmpid.append(datacenterId);\n\t\tString name = ManagementFactory.getRuntimeMXBean().getName();\n\t\tif (name != null && !\"\".equals(name)) {\n\t\t\t// GET jvmPid\n\t\t\tmpid.append(name.split(\"@\")[0]);\n\t\t}\n\t\t//MAC + PID 的 hashcode 获取16个低位\n\t\treturn (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);\n\t}\n\n\t/**\n\t * <p>\n     * 数据标识id部分\n     * </p>\n\t * @param maxDatacenterId\n\t * @return \n\t */\n\tprotected static long getDatacenterId(long maxDatacenterId) {\n\t\tlong id = 0L;\n\t\ttry {\n\t\t\tInetAddress ip = InetAddress.getLocalHost();\n\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\t\t\tif (network == null) {\n\t\t\t\tid = 1L;\n\t\t\t} else {\n\t\t\t\tbyte[] mac = network.getHardwareAddress();\n\t\t\t\tif (null != mac) {\n\t\t\t\t\tid = ((0x000000FF & (long) mac[mac.length - 1]) | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;\n\t\t\t\t\tid = id % (maxDatacenterId + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\" getDatacenterId: \" + e.getMessage());\n\t\t}\n\t\treturn id;\n    }\n\t\n\t/**\n\t * 获得下一个ID (该方法是线程安全的)\n\t * \n\t * @return nextId\n\t */\n\tpublic synchronized long nextId() {\n\t\tlong timestamp = timeGen();\n\n\t\t// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常\n\t\tif (timestamp < lastTimestamp) {// 闰秒\n\t\t\tlong offset = lastTimestamp - timestamp;\n\t\t\tif (offset <= 5) {\n\t\t\t\ttry {\n\t\t\t\t\twait(offset << 1);\n\t\t\t\t\ttimestamp = timeGen();\n\t\t\t\t\tif (timestamp < lastTimestamp) {\n\t\t\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t}\n\t\t}\n\t\t\n\t\t//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t\tsequence = (sequence + 1) & sequenceMask;\n\t\t\t// 毫秒内序列溢出\n\t\t\tif (sequence == 0) {\n\t\t\t\t// 阻塞到下一个毫秒,获得新的时间戳\n\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);\n\t\t\t}\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t\tsequence = 0L;\n\t\t}\n\t\t/**\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t    long old = sequence;\n\t\t    sequence = (sequence + 1) & sequenceMask;\n\t\t    // 毫秒内序列溢出\n\t\t    if (sequence == old) {\n\t\t        // 阻塞到下一个毫秒,获得新的时间戳\n\t\t        timestamp = tilNextMillis(lastTimestamp);\n\t\t    }\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);\n\t\t}\n\t\t**/\n\n\t\t// 上次生成ID的时间截\n\t\tlastTimestamp = timestamp;\n\n\t\t// 移位并通过或运算拼到一起组成64位的ID\n\t\treturn ((timestamp - twepoch) << timestampLeftShift) //\n\t\t\t\t| (datacenterId << datacenterIdShift) //\n\t\t\t\t| (workerId << workerIdShift) //\n\t\t\t\t| sequence;\n\t}\n\n\t/**\n\t * 阻塞到下一个毫秒，直到获得新的时间戳\n\t * \n\t * @param lastTimestamp 上次生成ID的时间截\n\t * @return 当前时间戳\n\t */\n\tprotected long tilNextMillis(long lastTimestamp) {\n\t\tlong timestamp = timeGen();\n\t\twhile (timestamp <= lastTimestamp) {\n\t\t\ttimestamp = timeGen();\n\t\t}\n\t\t\n\t\treturn timestamp;\n\t}\n\n\t/**\n\t * 返回以毫秒为单位的当前时间\n\t * \n\t * @return 当前时间(毫秒)\n\t */\n\tprotected long timeGen() {\n\t\treturn SystemClock.now();\n\t}\n\n}\n```\n\n### SystemClock类\n\n```java\n/**\n * 高并发场景下System.currentTimeMillis()的性能问题的优化\n * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）<p>\n * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道<p>\n * 后台定时更新时钟，JVM退出时，线程自动回收<p>\n * 10亿：43410,206,210.72815533980582%<p>\n * 1亿：4699,29,162.0344827586207%<p>\n * 1000万：480,12,40.0%<p>\n * 100万：50,10,5.0%<p>\n */\npublic class SystemClock {\n\n    private final long period;\n    private final AtomicLong now;\n\n    private SystemClock(long period) {\n        this.period = period;\n        this.now = new AtomicLong(System.currentTimeMillis());\n        scheduleClockUpdating();\n    }\n\n    private static class InstanceHolder {\n        public static final SystemClock INSTANCE = new SystemClock(1);\n    }\n\n    private static SystemClock instance() {\n        return InstanceHolder.INSTANCE;\n    }\n\n    private void scheduleClockUpdating() {\n        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n            public Thread newThread(Runnable runnable) {\n                Thread thread = new Thread(runnable, \"System Clock\");\n                thread.setDaemon(true);\n                return thread;\n            }\n        });\n        scheduler.scheduleAtFixedRate(new Runnable() {\n            public void run() {\n                now.set(System.currentTimeMillis());\n            }\n        }, period, period, TimeUnit.MILLISECONDS);\n    }\n\n    private long currentTimeMillis() {\n        return now.get();\n    }\n\n    public static long now() {\n        return instance().currentTimeMillis();\n    }\n    \n\tpublic static String nowDate() {\n\t\treturn new Timestamp(instance().currentTimeMillis()).toString();\n\t}\n\n}\n```\n\n### 测试\n\n```java\npublic class IdGen {\n    private static Sequence sequence = new Sequence();\n  \t/**\n\t * 使用Sequence生成主键，利用Snowflake算法\n\t */\n  \tpublic static String sequenceId() {\n            long nextId = sequence.nextId();\n            return String.valueOf(nextId);\n    }\n  \n  \t//测试代码\n\tpublic static void main(String[] args) {\n        \n        for (int i = 0; i < 1000; i++) {\n            long id = sequenceId();\n            //System.out.println(Long.toBinaryString(id));\n            System.out.println(id);\n        }\n}\n```\n\nSnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。\n\n#### 优点\n\n1. 不依赖于数据库，灵活方便，且性能优于数据库。\n2. ID按照时间在单机上是递增的。\n\n#### 缺点\n\n在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。\n\n# 总结\n\n在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。","source":"_posts/分布式下ID生成算法-SnowFlake.md","raw":"---\ntitle: 分布式下ID生成算法 SnowFlake\ndate: 2017-10-30 14:26:21\ntags: [java,mysql]\ncategories: technology\n---\n\n# 前言\n\n在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 数据库自增长序列或字段\n\n最常见的方式，利用数据库，全表中唯一。如MySQL的`AUTO_INCREMENT`。\n\n## 优点\n\n1. 简单，代码方便，性能可以接受。\n2. 数字ID天然排序，对分页或者需要排序的结果很有帮助。\n\n## 缺点\n\n1. 不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。\n2. 在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。\n3. 在性能达不到要求的情况下，比较难于扩展。\n4. 如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。\n5. 分表分库的时候会有麻烦。\n\n## 优化方案\n\n针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。\n\n# UUID\n\n常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。\n\n## 优点\n\n1. 简单，代码方便。\n2. 生成ID性能非常好，基本不会有性能问题。\n3. 全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。\n\n## 缺点\n\n1. 没有排序，无法保证趋势递增。\n2. UUID往往是使用字符串存储，查询的效率比较低。\n3. 存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。\n4. 传输数据量大。\n5. 不可读。\n\n# Twitter-SnowFlake算法\n\n有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 [*SnowFlake*](https://github.com/twitter/snowflake) 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。\n\n## 算法原理\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"/>\n\n</div>\n\n除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。\n\n### SnowFlake – 时间戳\n\n这里时间戳的细度是**毫秒级**，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。\n\n### SnowFake – 工作机器ID\n\n严格意义上来说这个bit段的使用可以是**进程级**，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。\n\n### SnowFlake – 序列号\n\n序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。\n\n## 具体实现\n\n### Sequence类\n\n```java\n/**\n * Snowflake 生成的 64 位 long 类型的 ID，结构如下:<br>\n * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>\n * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0<br>\n * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，\n *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。\n * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年<br>\n * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId<br>\n * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号<br>\n *\n * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。\n */\npublic class Sequence {\n\t\n\t/** 开始时间截 */\n\tprivate final long twepoch = 1288834974657L;\n\t/** 机器id所占的位数 */\n\tprivate final long workerIdBits = 5L;\n\t/** 数据标识id所占的位数 */\n\tprivate final long datacenterIdBits = 5L;\n\t/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */\n\tprivate final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n\t/** 支持的最大数据标识id，结果是31 */\n\tprivate final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\n\t/** 序列在id中占的位数 */\n\tprivate final long sequenceBits = 12L;\n\t/** 机器ID向左移12位 */\n\tprivate final long workerIdShift = sequenceBits;\n\t/** 数据标识id向左移17位(12+5) */\n\tprivate final long datacenterIdShift = sequenceBits + workerIdBits;\n\t/** 时间截向左移22位(5+5+12) */\n\tprivate final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\n\t/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */\n\tprivate final long sequenceMask = -1L ^ (-1L << sequenceBits);\n\n\t/** 工作机器ID(0~31) */\n\tprivate long workerId;\n\t/** 数据中心ID(0~31) */\n\tprivate long datacenterId;\n\t/** 毫秒内序列(0~4095) */\n\tprivate long sequence = 0L;\n\t/** 上次生成ID的时间截 */\n\tprivate long lastTimestamp = -1L;\n\n\n\tpublic Sequence() {\n\t\tdatacenterId = getDatacenterId(maxDatacenterId);\n\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);\n    }\n\t\n\tpublic Sequence(long workerId, long datacenterId) {\n\t\tif (workerId > maxWorkerId || workerId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n\t\t}\n\t\t\n\t\tif (datacenterId > maxDatacenterId || datacenterId < 0) {\n\t\t\tthrow new IllegalArgumentException(String.format(\"datacenter Id can't be greater than %d or less than 0\", maxDatacenterId));\n\t\t}\n\t\t\n\t\tthis.workerId = workerId;\n\t\tthis.datacenterId = datacenterId;\n\t}\n\t\n\n\t/**\n\t * 获取 maxWorkerId\n\t * @param datacenterId\t 数据中心id\n\t * @param maxWorkerId\t 机器id\n\t * @return\tmaxWorkerId\n\t */\n\tprotected static long getMaxWorkerId(long datacenterId, long maxWorkerId) {\n\t\tStringBuilder mpid = new StringBuilder();\n\t\tmpid.append(datacenterId);\n\t\tString name = ManagementFactory.getRuntimeMXBean().getName();\n\t\tif (name != null && !\"\".equals(name)) {\n\t\t\t// GET jvmPid\n\t\t\tmpid.append(name.split(\"@\")[0]);\n\t\t}\n\t\t//MAC + PID 的 hashcode 获取16个低位\n\t\treturn (mpid.toString().hashCode() & 0xffff) % (maxWorkerId + 1);\n\t}\n\n\t/**\n\t * <p>\n     * 数据标识id部分\n     * </p>\n\t * @param maxDatacenterId\n\t * @return \n\t */\n\tprotected static long getDatacenterId(long maxDatacenterId) {\n\t\tlong id = 0L;\n\t\ttry {\n\t\t\tInetAddress ip = InetAddress.getLocalHost();\n\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\t\t\tif (network == null) {\n\t\t\t\tid = 1L;\n\t\t\t} else {\n\t\t\t\tbyte[] mac = network.getHardwareAddress();\n\t\t\t\tif (null != mac) {\n\t\t\t\t\tid = ((0x000000FF & (long) mac[mac.length - 1]) | (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;\n\t\t\t\t\tid = id % (maxDatacenterId + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\" getDatacenterId: \" + e.getMessage());\n\t\t}\n\t\treturn id;\n    }\n\t\n\t/**\n\t * 获得下一个ID (该方法是线程安全的)\n\t * \n\t * @return nextId\n\t */\n\tpublic synchronized long nextId() {\n\t\tlong timestamp = timeGen();\n\n\t\t// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常\n\t\tif (timestamp < lastTimestamp) {// 闰秒\n\t\t\tlong offset = lastTimestamp - timestamp;\n\t\t\tif (offset <= 5) {\n\t\t\t\ttry {\n\t\t\t\t\twait(offset << 1);\n\t\t\t\t\ttimestamp = timeGen();\n\t\t\t\t\tif (timestamp < lastTimestamp) {\n\t\t\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new RuntimeException(String.format(\"Clock moved backwards.  Refusing to generate id for %d milliseconds\", offset));\n\t\t\t}\n\t\t}\n\t\t\n\t\t//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t\tsequence = (sequence + 1) & sequenceMask;\n\t\t\t// 毫秒内序列溢出\n\t\t\tif (sequence == 0) {\n\t\t\t\t// 阻塞到下一个毫秒,获得新的时间戳\n\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);\n\t\t\t}\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t\tsequence = 0L;\n\t\t}\n\t\t/**\n\t\t// 如果是同一时间生成的，则进行毫秒内序列\n\t\tif (lastTimestamp == timestamp) {\n\t\t    long old = sequence;\n\t\t    sequence = (sequence + 1) & sequenceMask;\n\t\t    // 毫秒内序列溢出\n\t\t    if (sequence == old) {\n\t\t        // 阻塞到下一个毫秒,获得新的时间戳\n\t\t        timestamp = tilNextMillis(lastTimestamp);\n\t\t    }\n\t\t} else {// 时间戳改变，毫秒内序列重置\n\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);\n\t\t}\n\t\t**/\n\n\t\t// 上次生成ID的时间截\n\t\tlastTimestamp = timestamp;\n\n\t\t// 移位并通过或运算拼到一起组成64位的ID\n\t\treturn ((timestamp - twepoch) << timestampLeftShift) //\n\t\t\t\t| (datacenterId << datacenterIdShift) //\n\t\t\t\t| (workerId << workerIdShift) //\n\t\t\t\t| sequence;\n\t}\n\n\t/**\n\t * 阻塞到下一个毫秒，直到获得新的时间戳\n\t * \n\t * @param lastTimestamp 上次生成ID的时间截\n\t * @return 当前时间戳\n\t */\n\tprotected long tilNextMillis(long lastTimestamp) {\n\t\tlong timestamp = timeGen();\n\t\twhile (timestamp <= lastTimestamp) {\n\t\t\ttimestamp = timeGen();\n\t\t}\n\t\t\n\t\treturn timestamp;\n\t}\n\n\t/**\n\t * 返回以毫秒为单位的当前时间\n\t * \n\t * @return 当前时间(毫秒)\n\t */\n\tprotected long timeGen() {\n\t\treturn SystemClock.now();\n\t}\n\n}\n```\n\n### SystemClock类\n\n```java\n/**\n * 高并发场景下System.currentTimeMillis()的性能问题的优化\n * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）<p>\n * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道<p>\n * 后台定时更新时钟，JVM退出时，线程自动回收<p>\n * 10亿：43410,206,210.72815533980582%<p>\n * 1亿：4699,29,162.0344827586207%<p>\n * 1000万：480,12,40.0%<p>\n * 100万：50,10,5.0%<p>\n */\npublic class SystemClock {\n\n    private final long period;\n    private final AtomicLong now;\n\n    private SystemClock(long period) {\n        this.period = period;\n        this.now = new AtomicLong(System.currentTimeMillis());\n        scheduleClockUpdating();\n    }\n\n    private static class InstanceHolder {\n        public static final SystemClock INSTANCE = new SystemClock(1);\n    }\n\n    private static SystemClock instance() {\n        return InstanceHolder.INSTANCE;\n    }\n\n    private void scheduleClockUpdating() {\n        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n            public Thread newThread(Runnable runnable) {\n                Thread thread = new Thread(runnable, \"System Clock\");\n                thread.setDaemon(true);\n                return thread;\n            }\n        });\n        scheduler.scheduleAtFixedRate(new Runnable() {\n            public void run() {\n                now.set(System.currentTimeMillis());\n            }\n        }, period, period, TimeUnit.MILLISECONDS);\n    }\n\n    private long currentTimeMillis() {\n        return now.get();\n    }\n\n    public static long now() {\n        return instance().currentTimeMillis();\n    }\n    \n\tpublic static String nowDate() {\n\t\treturn new Timestamp(instance().currentTimeMillis()).toString();\n\t}\n\n}\n```\n\n### 测试\n\n```java\npublic class IdGen {\n    private static Sequence sequence = new Sequence();\n  \t/**\n\t * 使用Sequence生成主键，利用Snowflake算法\n\t */\n  \tpublic static String sequenceId() {\n            long nextId = sequence.nextId();\n            return String.valueOf(nextId);\n    }\n  \n  \t//测试代码\n\tpublic static void main(String[] args) {\n        \n        for (int i = 0; i < 1000; i++) {\n            long id = sequenceId();\n            //System.out.println(Long.toBinaryString(id));\n            System.out.println(id);\n        }\n}\n```\n\nSnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。\n\n#### 优点\n\n1. 不依赖于数据库，灵活方便，且性能优于数据库。\n2. ID按照时间在单机上是递增的。\n\n#### 缺点\n\n在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。\n\n# 总结\n\n在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。","slug":"分布式下ID生成算法-SnowFlake","published":1,"updated":"2017-10-30T07:13:16.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfae000xswg61e2p1jbd","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"数据库自增长序列或字段\"><a href=\"#数据库自增长序列或字段\" class=\"headerlink\" title=\"数据库自增长序列或字段\"></a>数据库自增长序列或字段</h1><p>最常见的方式，利用数据库，全表中唯一。如MySQL的<code>AUTO_INCREMENT</code>。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便，性能可以接受。</li>\n<li>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</li>\n<li>在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</li>\n<li>在性能达不到要求的情况下，比较难于扩展。</li>\n<li>如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</li>\n<li>分表分库的时候会有麻烦。</li>\n</ol>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><p>针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p>\n<h1 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h1><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。</p>\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便。</li>\n<li>生成ID性能非常好，基本不会有性能问题。</li>\n<li>全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</li>\n</ol>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>没有排序，无法保证趋势递增。</li>\n<li>UUID往往是使用字符串存储，查询的效率比较低。</li>\n<li>存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</li>\n<li>传输数据量大。</li>\n<li>不可读。</li>\n</ol>\n<h1 id=\"Twitter-SnowFlake算法\"><a href=\"#Twitter-SnowFlake算法\" class=\"headerlink\" title=\"Twitter-SnowFlake算法\"></a>Twitter-SnowFlake算法</h1><p>有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 <a href=\"https://github.com/twitter/snowflake\" target=\"_blank\" rel=\"external\"><em>SnowFlake</em></a> 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。</p>\n<h2 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h2><div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"><br><br></div>\n\n<p>除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。</p>\n<h3 id=\"SnowFlake-–-时间戳\"><a href=\"#SnowFlake-–-时间戳\" class=\"headerlink\" title=\"SnowFlake – 时间戳\"></a>SnowFlake – 时间戳</h3><p>这里时间戳的细度是<strong>毫秒级</strong>，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。</p>\n<h3 id=\"SnowFake-–-工作机器ID\"><a href=\"#SnowFake-–-工作机器ID\" class=\"headerlink\" title=\"SnowFake – 工作机器ID\"></a>SnowFake – 工作机器ID</h3><p>严格意义上来说这个bit段的使用可以是<strong>进程级</strong>，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。</p>\n<h3 id=\"SnowFlake-–-序列号\"><a href=\"#SnowFlake-–-序列号\" class=\"headerlink\" title=\"SnowFlake – 序列号\"></a>SnowFlake – 序列号</h3><p>序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"Sequence类\"><a href=\"#Sequence类\" class=\"headerlink\" title=\"Sequence类\"></a>Sequence类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Snowflake 生成的 64 位 long 类型的 ID，结构如下:&lt;br&gt;</div><div class=\"line\"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</div><div class=\"line\"> * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0&lt;br&gt;</div><div class=\"line\"> * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，</div><div class=\"line\"> *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。</div><div class=\"line\"> * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年&lt;br&gt;</div><div class=\"line\"> * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId&lt;br&gt;</div><div class=\"line\"> * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号&lt;br&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sequence</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/** 开始时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> twepoch = <span class=\"number\">1288834974657L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxWorkerId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; workerIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大数据标识id，结果是31 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxDatacenterId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; datacenterIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 序列在id中占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceBits = <span class=\"number\">12L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器ID向左移12位 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdShift = sequenceBits;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id向左移17位(12+5) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdShift = sequenceBits + workerIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 时间截向左移22位(5+5+12) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceMask = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; sequenceBits);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** 工作机器ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerId;</div><div class=\"line\">\t<span class=\"comment\">/** 数据中心ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId;</div><div class=\"line\">\t<span class=\"comment\">/** 毫秒内序列(0~4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 上次生成ID的时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastTimestamp = -<span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tdatacenterId = getDatacenterId(maxDatacenterId);</div><div class=\"line\">\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> datacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"worker Id can't be greater than %d or less than 0\"</span>, maxWorkerId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"datacenter Id can't be greater than %d or less than 0\"</span>, maxDatacenterId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.workerId = workerId;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.datacenterId = datacenterId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获取 maxWorkerId</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> datacenterId\t 数据中心id</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxWorkerId\t 机器id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span>\tmaxWorkerId</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMaxWorkerId</span><span class=\"params\">(<span class=\"keyword\">long</span> datacenterId, <span class=\"keyword\">long</span> maxWorkerId)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder mpid = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tmpid.append(datacenterId);</div><div class=\"line\">\t\tString name = ManagementFactory.getRuntimeMXBean().getName();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// GET jvmPid</span></div><div class=\"line\">\t\t\tmpid.append(name.split(<span class=\"string\">\"@\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//MAC + PID 的 hashcode 获取16个低位</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (mpid.toString().hashCode() &amp; <span class=\"number\">0xffff</span>) % (maxWorkerId + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * &lt;p&gt;</div><div class=\"line\">     * 数据标识id部分</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxDatacenterId</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> </div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getDatacenterId</span><span class=\"params\">(<span class=\"keyword\">long</span> maxDatacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> id = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tInetAddress ip = InetAddress.getLocalHost();</div><div class=\"line\">\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (network == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tid = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] mac = network.getHardwareAddress();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mac) &#123;</div><div class=\"line\">\t\t\t\t\tid = ((<span class=\"number\">0x000000FF</span> &amp; (<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">1</span>]) | (<span class=\"number\">0x0000FF00</span> &amp; (((<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">8</span>))) &gt;&gt; <span class=\"number\">6</span>;</div><div class=\"line\">\t\t\t\t\tid = id % (maxDatacenterId + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.err.println(<span class=\"string\">\" getDatacenterId: \"</span> + e.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 获得下一个ID (该方法是线程安全的)</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> nextId</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">nextId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;<span class=\"comment\">// 闰秒</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> offset = lastTimestamp - timestamp;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (offset &lt;= <span class=\"number\">5</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\twait(offset &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果是同一时间生成的，则进行毫秒内序列</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t\tsequence = (sequence + <span class=\"number\">1</span>) &amp; sequenceMask;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 毫秒内序列溢出</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (sequence == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 阻塞到下一个毫秒,获得新的时间戳</span></div><div class=\"line\">\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 时间戳改变，毫秒内序列重置</span></div><div class=\"line\">\t\t\tsequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">/**</span></div><div class=\"line\">\t\t// 如果是同一时间生成的，则进行毫秒内序列</div><div class=\"line\">\t\tif (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t    long old = sequence;</div><div class=\"line\">\t\t    sequence = (sequence + 1) &amp; sequenceMask;</div><div class=\"line\">\t\t    // 毫秒内序列溢出</div><div class=\"line\">\t\t    if (sequence == old) &#123;</div><div class=\"line\">\t\t        // 阻塞到下一个毫秒,获得新的时间戳</div><div class=\"line\">\t\t        timestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t&#125; else &#123;// 时间戳改变，毫秒内序列重置</div><div class=\"line\">\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t**/</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 上次生成ID的时间截</span></div><div class=\"line\">\t\tlastTimestamp = timestamp;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 移位并通过或运算拼到一起组成64位的ID</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (datacenterId &lt;&lt; datacenterIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (workerId &lt;&lt; workerIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| sequence;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 阻塞到下一个毫秒，直到获得新的时间戳</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> lastTimestamp 上次生成ID的时间截</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间戳</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">tilNextMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> lastTimestamp)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (timestamp &lt;= lastTimestamp) &#123;</div><div class=\"line\">\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> timestamp;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 返回以毫秒为单位的当前时间</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间(毫秒)</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">timeGen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SystemClock.now();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SystemClock类\"><a href=\"#SystemClock类\" class=\"headerlink\" title=\"SystemClock类\"></a>SystemClock类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 高并发场景下System.currentTimeMillis()的性能问题的优化</div><div class=\"line\"> * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）&lt;p&gt;</div><div class=\"line\"> * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道&lt;p&gt;</div><div class=\"line\"> * 后台定时更新时钟，JVM退出时，线程自动回收&lt;p&gt;</div><div class=\"line\"> * 10亿：43410,206,210.72815533980582%&lt;p&gt;</div><div class=\"line\"> * 1亿：4699,29,162.0344827586207%&lt;p&gt;</div><div class=\"line\"> * 1000万：480,12,40.0%&lt;p&gt;</div><div class=\"line\"> * 100万：50,10,5.0%&lt;p&gt;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemClock</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> period;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicLong now;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SystemClock</span><span class=\"params\">(<span class=\"keyword\">long</span> period)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.period = period;</div><div class=\"line\">        <span class=\"keyword\">this</span>.now = <span class=\"keyword\">new</span> AtomicLong(System.currentTimeMillis());</div><div class=\"line\">        scheduleClockUpdating();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstanceHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SystemClock INSTANCE = <span class=\"keyword\">new</span> SystemClock(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SystemClock <span class=\"title\">instance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> InstanceHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleClockUpdating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(<span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(runnable, <span class=\"string\">\"System Clock\"</span>);</div><div class=\"line\">                thread.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> thread;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        scheduler.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                now.set(System.currentTimeMillis());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, period, period, TimeUnit.MILLISECONDS);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> now.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">now</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance().currentTimeMillis();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">nowDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Timestamp(instance().currentTimeMillis()).toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdGen</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Sequence sequence = <span class=\"keyword\">new</span> Sequence();</div><div class=\"line\">  \t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 使用Sequence生成主键，利用Snowflake算法</div><div class=\"line\">\t */</div><div class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">sequenceId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> nextId = sequence.nextId();</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(nextId);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">//测试代码</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> id = sequenceId();</div><div class=\"line\">            <span class=\"comment\">//System.out.println(Long.toBinaryString(id));</span></div><div class=\"line\">            System.out.println(id);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>不依赖于数据库，灵活方便，且性能优于数据库。</li>\n<li>ID按照时间在单机上是递增的。</li>\n</ol>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在做系统开发时，系统唯一ID是我们在设计一个系统的时候经常遇到的问题，也常常为这个问题纠结。生成ID的方法有很多，适应不同的场景、需求及性能要求。所以有些比较复杂的系统会有多个ID生成策略。在这里总结一下常用到的ID生成策略。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/index.png\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"数据库自增长序列或字段\"><a href=\"#数据库自增长序列或字段\" class=\"headerlink\" title=\"数据库自增长序列或字段\"></a>数据库自增长序列或字段</h1><p>最常见的方式，利用数据库，全表中唯一。如MySQL的<code>AUTO_INCREMENT</code>。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便，性能可以接受。</li>\n<li>数字ID天然排序，对分页或者需要排序的结果很有帮助。</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。</li>\n<li>在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。</li>\n<li>在性能达不到要求的情况下，比较难于扩展。</li>\n<li>如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。</li>\n<li>分表分库的时候会有麻烦。</li>\n</ol>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><p>针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1, 4, 7, 10，Master2生成的是2, 5, 8, 11，Master3生成的是3, 6, 9, 12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。</p>\n<h1 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h1><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。</p>\n<h2 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>简单，代码方便。</li>\n<li>生成ID性能非常好，基本不会有性能问题。</li>\n<li>全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</li>\n</ol>\n<h2 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>没有排序，无法保证趋势递增。</li>\n<li>UUID往往是使用字符串存储，查询的效率比较低。</li>\n<li>存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。</li>\n<li>传输数据量大。</li>\n<li>不可读。</li>\n</ol>\n<h1 id=\"Twitter-SnowFlake算法\"><a href=\"#Twitter-SnowFlake算法\" class=\"headerlink\" title=\"Twitter-SnowFlake算法\"></a>Twitter-SnowFlake算法</h1><p>有些时候我们希望能使用简单一些的 ID，并且希望 ID 能够按照时间有序生成，为了解决这个问题，Twitter 发明了 <a href=\"https://github.com/twitter/snowflake\"><em>SnowFlake</em></a> 算法，不依赖第三方介质例如 Redis、数据库，本地生成程序生成分布式自增 ID，这个 ID 只能保证在工作组中的机器生成的 ID 唯一，不能像 UUID 那样保证时空唯一。</p>\n<h2 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h2><div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/%E8%87%AA%E5%A2%9EID/snowflake.png\" algin=\"center\"/><br><br></div>\n\n<p>除了最高位bit标记为不可用以外，其余三组bit占位均可浮动，看具体的业务需求而定。默认情况下41bit的时间戳可以支持该算法使用到2082年，10bit的工作机器id可以支持1023台机器，序列号支持1毫秒产生4095个自增序列id。</p>\n<h3 id=\"SnowFlake-–-时间戳\"><a href=\"#SnowFlake-–-时间戳\" class=\"headerlink\" title=\"SnowFlake – 时间戳\"></a>SnowFlake – 时间戳</h3><p>这里时间戳的细度是<strong>毫秒级</strong>，建议使用64位linux系统机器，因为有vdso，gettimeofday()在用户态就可以完成操作，减少了进入内核态的损耗。</p>\n<h3 id=\"SnowFake-–-工作机器ID\"><a href=\"#SnowFake-–-工作机器ID\" class=\"headerlink\" title=\"SnowFake – 工作机器ID\"></a>SnowFake – 工作机器ID</h3><p>严格意义上来说这个bit段的使用可以是<strong>进程级</strong>，机器级的话你可以使用MAC地址来唯一标示工作机器，工作进程级可以使用IP+Path来区分工作进程。如果工作机器比较少，可以使用配置文件来设置这个id是一个不错的选择，如果机器过多配置文件的维护是一个灾难性的事情。</p>\n<h3 id=\"SnowFlake-–-序列号\"><a href=\"#SnowFlake-–-序列号\" class=\"headerlink\" title=\"SnowFlake – 序列号\"></a>SnowFlake – 序列号</h3><p>序列号就是一系列的自增id（多线程建议使用atomic），为了处理在同一毫秒内需要给多条消息分配id，若同一毫秒把序列号用完了，则 “等待至下一毫秒”。</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"Sequence类\"><a href=\"#Sequence类\" class=\"headerlink\" title=\"Sequence类\"></a>Sequence类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Snowflake 生成的 64 位 long 类型的 ID，结构如下:&lt;br&gt;</div><div class=\"line\"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</div><div class=\"line\"> * 1) 01 位标识，由于 long 在 Java 中是有符号的，最高位是符号位，正数是 0，负数是 1，ID 一般使用正数，所以最高位是 0&lt;br&gt;</div><div class=\"line\"> * 2) 41 位时间截(毫秒级)，注意，41 位时间截不是存储当前时间的时间截，而是存储时间截的差值(当前时间 - 开始时间)得到的值，</div><div class=\"line\"> *       开始时间截，一般是业务开始的时间，由我们程序来指定，如 SnowflakeIdWorker 中的 startTimestamp 属性。</div><div class=\"line\"> * 41 位的时间截，可以使用 70 年: (2^41)/(1000*60*60*24*365) = 69.7 年&lt;br&gt;</div><div class=\"line\"> * 3) 10 位的数据机器位，可以部署在 1024 个节点，包括 5 位 datacenterId 和 5 位 workerId&lt;br&gt;</div><div class=\"line\"> * 4) 12 位序列，毫秒内的计数，12 位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生 4096 个 ID 序号&lt;br&gt;</div><div class=\"line\"> *</div><div class=\"line\"> * SnowFlake 的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生 ID 碰撞(由数据中心 ID 和机器 ID 作区分)，并且效率较   高，经测试，SnowFlake 每秒能够产生约 26 万个 ID。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sequence</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/** 开始时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> twepoch = <span class=\"number\">1288834974657L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id所占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdBits = <span class=\"number\">5L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxWorkerId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; workerIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 支持的最大数据标识id，结果是31 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> maxDatacenterId = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; datacenterIdBits);</div><div class=\"line\">\t<span class=\"comment\">/** 序列在id中占的位数 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceBits = <span class=\"number\">12L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 机器ID向左移12位 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> workerIdShift = sequenceBits;</div><div class=\"line\">\t<span class=\"comment\">/** 数据标识id向左移17位(12+5) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> datacenterIdShift = sequenceBits + workerIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 时间截向左移22位(5+5+12) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</div><div class=\"line\">\t<span class=\"comment\">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> sequenceMask = -<span class=\"number\">1L</span> ^ (-<span class=\"number\">1L</span> &lt;&lt; sequenceBits);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/** 工作机器ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> workerId;</div><div class=\"line\">\t<span class=\"comment\">/** 数据中心ID(0~31) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> datacenterId;</div><div class=\"line\">\t<span class=\"comment\">/** 毫秒内序列(0~4095) */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> sequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t<span class=\"comment\">/** 上次生成ID的时间截 */</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> lastTimestamp = -<span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\tdatacenterId = getDatacenterId(maxDatacenterId);</div><div class=\"line\">\t\tworkerId = getMaxWorkerId(datacenterId, maxWorkerId);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sequence</span><span class=\"params\">(<span class=\"keyword\">long</span> workerId, <span class=\"keyword\">long</span> datacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"worker Id can't be greater than %d or less than 0\"</span>, maxWorkerId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(String.format(<span class=\"string\">\"datacenter Id can't be greater than %d or less than 0\"</span>, maxDatacenterId));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.workerId = workerId;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.datacenterId = datacenterId;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获取 maxWorkerId</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> datacenterId\t 数据中心id</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxWorkerId\t 机器id</div><div class=\"line\">\t * <span class=\"doctag\">@return</span>\tmaxWorkerId</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getMaxWorkerId</span><span class=\"params\">(<span class=\"keyword\">long</span> datacenterId, <span class=\"keyword\">long</span> maxWorkerId)</span> </span>&#123;</div><div class=\"line\">\t\tStringBuilder mpid = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\tmpid.append(datacenterId);</div><div class=\"line\">\t\tString name = ManagementFactory.getRuntimeMXBean().getName();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span> &amp;&amp; !<span class=\"string\">\"\"</span>.equals(name)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// GET jvmPid</span></div><div class=\"line\">\t\t\tmpid.append(name.split(<span class=\"string\">\"@\"</span>)[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">//MAC + PID 的 hashcode 获取16个低位</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> (mpid.toString().hashCode() &amp; <span class=\"number\">0xffff</span>) % (maxWorkerId + <span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * &lt;p&gt;</div><div class=\"line\">     * 数据标识id部分</div><div class=\"line\">     * &lt;/p&gt;</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> maxDatacenterId</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> </div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">getDatacenterId</span><span class=\"params\">(<span class=\"keyword\">long</span> maxDatacenterId)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> id = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tInetAddress ip = InetAddress.getLocalHost();</div><div class=\"line\">\t\t\tNetworkInterface network = NetworkInterface.getByInetAddress(ip);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (network == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\tid = <span class=\"number\">1L</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">byte</span>[] mac = network.getHardwareAddress();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != mac) &#123;</div><div class=\"line\">\t\t\t\t\tid = ((<span class=\"number\">0x000000FF</span> &amp; (<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">1</span>]) | (<span class=\"number\">0x0000FF00</span> &amp; (((<span class=\"keyword\">long</span>) mac[mac.length - <span class=\"number\">2</span>]) &lt;&lt; <span class=\"number\">8</span>))) &gt;&gt; <span class=\"number\">6</span>;</div><div class=\"line\">\t\t\t\t\tid = id % (maxDatacenterId + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\tSystem.err.println(<span class=\"string\">\" getDatacenterId: \"</span> + e.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> id;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 获得下一个ID (该方法是线程安全的)</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> nextId</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">long</span> <span class=\"title\">nextId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;<span class=\"comment\">// 闰秒</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> offset = lastTimestamp - timestamp;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (offset &lt;= <span class=\"number\">5</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t\twait(offset &lt;&lt; <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (timestamp &lt; lastTimestamp) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(String.format(<span class=\"string\">\"Clock moved backwards.  Refusing to generate id for %d milliseconds\"</span>, offset));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"comment\">//$NON-NLS-解决跨毫秒生成ID序列号始终为偶数的缺陷$</span></div><div class=\"line\">\t\t<span class=\"comment\">// 如果是同一时间生成的，则进行毫秒内序列</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t\tsequence = (sequence + <span class=\"number\">1</span>) &amp; sequenceMask;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 毫秒内序列溢出</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (sequence == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 阻塞到下一个毫秒,获得新的时间戳</span></div><div class=\"line\">\t\t\t\ttimestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 时间戳改变，毫秒内序列重置</span></div><div class=\"line\">\t\t\tsequence = <span class=\"number\">0L</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">/**</div><div class=\"line\">\t\t// 如果是同一时间生成的，则进行毫秒内序列</div><div class=\"line\">\t\tif (lastTimestamp == timestamp) &#123;</div><div class=\"line\">\t\t    long old = sequence;</div><div class=\"line\">\t\t    sequence = (sequence + 1) &amp; sequenceMask;</div><div class=\"line\">\t\t    // 毫秒内序列溢出</div><div class=\"line\">\t\t    if (sequence == old) &#123;</div><div class=\"line\">\t\t        // 阻塞到下一个毫秒,获得新的时间戳</div><div class=\"line\">\t\t        timestamp = tilNextMillis(lastTimestamp);</div><div class=\"line\">\t\t    &#125;</div><div class=\"line\">\t\t&#125; else &#123;// 时间戳改变，毫秒内序列重置</div><div class=\"line\">\t\t    sequence = ThreadLocalRandom.current().nextLong(0, 2);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t**/</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 上次生成ID的时间截</span></div><div class=\"line\">\t\tlastTimestamp = timestamp;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">// 移位并通过或运算拼到一起组成64位的ID</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (datacenterId &lt;&lt; datacenterIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| (workerId &lt;&lt; workerIdShift) <span class=\"comment\">//</span></div><div class=\"line\">\t\t\t\t| sequence;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 阻塞到下一个毫秒，直到获得新的时间戳</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@param</span> lastTimestamp 上次生成ID的时间截</div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间戳</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">tilNextMillis</span><span class=\"params\">(<span class=\"keyword\">long</span> lastTimestamp)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> timestamp = timeGen();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (timestamp &lt;= lastTimestamp) &#123;</div><div class=\"line\">\t\t\ttimestamp = timeGen();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> timestamp;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 返回以毫秒为单位的当前时间</div><div class=\"line\">\t * </div><div class=\"line\">\t * <span class=\"doctag\">@return</span> 当前时间(毫秒)</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">timeGen</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> SystemClock.now();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SystemClock类\"><a href=\"#SystemClock类\" class=\"headerlink\" title=\"SystemClock类\"></a>SystemClock类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 高并发场景下System.currentTimeMillis()的性能问题的优化</div><div class=\"line\"> * System.currentTimeMillis()的调用比new一个普通对象要耗时的多（具体耗时高出多少我还没测试过，有人说是100倍左右）&lt;p&gt;</div><div class=\"line\"> * System.currentTimeMillis()之所以慢是因为去跟系统打了一次交道&lt;p&gt;</div><div class=\"line\"> * 后台定时更新时钟，JVM退出时，线程自动回收&lt;p&gt;</div><div class=\"line\"> * 10亿：43410,206,210.72815533980582%&lt;p&gt;</div><div class=\"line\"> * 1亿：4699,29,162.0344827586207%&lt;p&gt;</div><div class=\"line\"> * 1000万：480,12,40.0%&lt;p&gt;</div><div class=\"line\"> * 100万：50,10,5.0%&lt;p&gt;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SystemClock</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> period;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> AtomicLong now;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SystemClock</span><span class=\"params\">(<span class=\"keyword\">long</span> period)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.period = period;</div><div class=\"line\">        <span class=\"keyword\">this</span>.now = <span class=\"keyword\">new</span> AtomicLong(System.currentTimeMillis());</div><div class=\"line\">        scheduleClockUpdating();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InstanceHolder</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> SystemClock INSTANCE = <span class=\"keyword\">new</span> SystemClock(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SystemClock <span class=\"title\">instance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> InstanceHolder.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleClockUpdating</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor(<span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(runnable, <span class=\"string\">\"System Clock\"</span>);</div><div class=\"line\">                thread.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span> thread;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        scheduler.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                now.set(System.currentTimeMillis());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;, period, period, TimeUnit.MILLISECONDS);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> <span class=\"title\">currentTimeMillis</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> now.get();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">long</span> <span class=\"title\">now</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> instance().currentTimeMillis();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">nowDate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Timestamp(instance().currentTimeMillis()).toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IdGen</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Sequence sequence = <span class=\"keyword\">new</span> Sequence();</div><div class=\"line\">  \t<span class=\"comment\">/**</div><div class=\"line\">\t * 使用Sequence生成主键，利用Snowflake算法</div><div class=\"line\">\t */</span></div><div class=\"line\">  \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">sequenceId</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> nextId = sequence.nextId();</div><div class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(nextId);</div><div class=\"line\">    &#125;</div><div class=\"line\">  </div><div class=\"line\">  \t<span class=\"comment\">//测试代码</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">long</span> id = sequenceId();</div><div class=\"line\">            <span class=\"comment\">//System.out.println(Long.toBinaryString(id));</span></div><div class=\"line\">            System.out.println(id);</div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SnowFlake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。</p>\n<h4 id=\"优点-2\"><a href=\"#优点-2\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>不依赖于数据库，灵活方便，且性能优于数据库。</li>\n<li>ID按照时间在单机上是递增的。</li>\n</ol>\n<h4 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在项目中SnowFlake算法生成ID是第一选择，兼具性能和灵活性。</p>"},{"title":"Spring+Mybatis之Mapper热部署","date":"2017-09-15T08:52:07.000Z","_content":"\n# 前言\n\n​\tSpring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。\n\n​\t功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且**只加载被修改的mapper文件**！这个可省事了，效率又高，简直爽到爆。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 创建MapperRefresh刷新类\n\n在src下创建一个util包，包下面创建一个类，类名为：**MapperRefresh**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"/>\n\n</div>\n\n代码为下面的一串，注意修改下**mybatis-refresh.properties** 的路径。\n\n```java\npackage com.talkweb.nets.netsTestLib.data.util;\n\nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileNotFoundException;  \nimport java.io.InputStream;  \nimport java.lang.reflect.Field;  \nimport java.util.ArrayList;  \nimport java.util.HashMap;  \nimport java.util.List;  \nimport java.util.Map;  \nimport java.util.Properties;  \nimport java.util.Set;  \n\nimport org.apache.commons.lang3.StringUtils;  \nimport org.apache.ibatis.builder.xml.XMLMapperBuilder;  \nimport org.apache.ibatis.executor.ErrorContext;  \nimport org.apache.ibatis.session.Configuration;  \nimport org.apache.log4j.Logger;  \nimport org.springframework.core.NestedIOException;  \nimport org.springframework.core.io.Resource;  \n\nimport com.google.common.collect.Sets;  \n\n/** \n * 刷新MyBatis Mapper XML 线程 \n * @author ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪\n * @version 2016-5-29 \n */  \npublic class MapperRefresh implements java.lang.Runnable {  \n\n    public static Logger log = Logger.getLogger(MapperRefresh.class);  \n\n    private static String filename = \"mybatis-refresh.properties\";  //注意修改路径\n    private static Properties prop = new Properties();  \n\n    private static boolean enabled;         // 是否启用Mapper刷新线程功能  \n    private static boolean refresh;         // 刷新启用后，是否启动了刷新线程  \n\n    private Set<String> location;         // Mapper实际资源路径  \n\n    private Resource[] mapperLocations;     // Mapper资源路径  \n    private Configuration configuration;        // MyBatis配置对象  \n\n    private Long beforeTime = 0L;           // 上一次刷新时间  \n    private static int delaySeconds;        // 延迟刷新秒数  \n    private static int sleepSeconds;        // 休眠时间  \n    private static String mappingPath;      // xml文件夹匹配字符串，需要根据需要修改  \n\n    static {  \n\n        try {  \n            prop.load(MapperRefresh.class.getResourceAsStream(filename));  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n            System.out.println(\"Load mybatis-refresh “\"+filename+\"” file error.\");  \n        }  \n\n        enabled = \"true\".equalsIgnoreCase(getPropString(\"enabled\"));  \n\n        delaySeconds = getPropInt(\"delaySeconds\");  \n        sleepSeconds = getPropInt(\"sleepSeconds\");  \n        mappingPath = getPropString(\"mappingPath\");  \n\n        delaySeconds = delaySeconds == 0 ? 50 : delaySeconds;  \n        sleepSeconds = sleepSeconds == 0 ? 3 : sleepSeconds;  \n        mappingPath = StringUtils.isBlank(mappingPath) ? \"mappings\" : mappingPath;  \n\n        log.debug(\"[enabled] \" + enabled);  \n        log.debug(\"[delaySeconds] \" + delaySeconds);  \n        log.debug(\"[sleepSeconds] \" + sleepSeconds);  \n        log.debug(\"[mappingPath] \" + mappingPath);  \n    }  \n\n    public static boolean isRefresh() {  \n        return refresh;  \n    }  \n\n    public MapperRefresh(Resource[] mapperLocations, Configuration configuration) {  \n        this.mapperLocations = mapperLocations;  \n        this.configuration = configuration;  \n    }  \n\n    @Override  \n    public void run() {  \n\n        beforeTime = System.currentTimeMillis();  \n\n        log.debug(\"[location] \" + location);  \n        log.debug(\"[configuration] \" + configuration);  \n\n        if (enabled) {  \n            // 启动刷新线程  \n            final MapperRefresh runnable = this;  \n            new Thread(new java.lang.Runnable() {  \n                @Override  \n                public void run() {  \n\n                    if (location == null){  \n                        location = Sets.newHashSet();  \n                        log.debug(\"MapperLocation's length:\" + mapperLocations.length);  \n                        for (Resource mapperLocation : mapperLocations) {  \n                            String s = mapperLocation.toString().replaceAll(\"\\\\\\\\\", \"/\");  \n                            s = s.substring(\"file [\".length(), s.lastIndexOf(mappingPath) + mappingPath.length());  \n                            if (!location.contains(s)) {  \n                                location.add(s);  \n                                log.debug(\"Location:\" + s);  \n                            }  \n                        }  \n                        log.debug(\"Locarion's size:\" + location.size());  \n                    }  \n\n                    try {  \n                        Thread.sleep(delaySeconds * 1000);  \n                    } catch (InterruptedException e2) {  \n                        e2.printStackTrace();  \n                    }  \n                    refresh = true;  \n\n                    System.out.println(\"========= Enabled refresh mybatis mapper =========\");  \n\n                    while (true) {  \n                        try {  \n                            for (String s : location) {  \n                                runnable.refresh(s, beforeTime);  \n                            }  \n                        } catch (Exception e1) {  \n                            e1.printStackTrace();  \n                        }  \n                        try {  \n                            Thread.sleep(sleepSeconds * 1000);  \n                        } catch (InterruptedException e) {  \n                            e.printStackTrace();  \n                        }  \n\n                    }  \n                }  \n            }, \"MyBatis-Mapper-Refresh\").start();  \n        }  \n    }  \n\n    /** \n     * 执行刷新 \n     * @param filePath 刷新目录 \n     * @param beforeTime 上次刷新时间 \n     * @throws NestedIOException 解析异常 \n     * @throws FileNotFoundException 文件未找到 \n     * @author ThinkGem \n     */  \n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })  \n    private void refresh(String filePath, Long beforeTime) throws Exception {  \n\n        // 本次刷新时间  \n        Long refrehTime = System.currentTimeMillis();  \n\n        // 获取需要刷新的Mapper文件列表  \n        List<File> fileList = this.getRefreshFile(new File(filePath), beforeTime);  \n        if (fileList.size() > 0) {  \n            log.debug(\"Refresh file: \" + fileList.size());  \n        }  \n        for (int i = 0; i < fileList.size(); i++) {  \n            InputStream inputStream = new FileInputStream(fileList.get(i));  \n            String resource = fileList.get(i).getAbsolutePath();  \n            try {  \n\n                // 清理原有资源，更新为自己的StrictMap方便，增量重新加载  \n                String[] mapFieldNames = new String[]{  \n                    \"mappedStatements\", \"caches\",  \n                    \"resultMaps\", \"parameterMaps\",  \n                    \"keyGenerators\", \"sqlFragments\"  \n                };  \n                for (String fieldName : mapFieldNames){  \n                    Field field = configuration.getClass().getDeclaredField(fieldName);  \n                    field.setAccessible(true);  \n                    Map map = ((Map)field.get(configuration));  \n                    if (!(map instanceof StrictMap)){  \n                        Map newMap = new StrictMap(StringUtils.capitalize(fieldName) + \"collection\");  \n                        for (Object key : map.keySet()){  \n                            try {  \n                                newMap.put(key, map.get(key));  \n                            }catch(IllegalArgumentException ex){  \n                                newMap.put(key, ex.getMessage());  \n                            }  \n                        }  \n                        field.set(configuration, newMap);  \n                    }  \n                }  \n\n                // 清理已加载的资源标识，方便让它重新加载。  \n                Field loadedResourcesField = configuration.getClass().getDeclaredField(\"loadedResources\");  \n                loadedResourcesField.setAccessible(true);  \n                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  \n                loadedResourcesSet.remove(resource);  \n\n                //重新编译加载资源文件。  \n                XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(inputStream, configuration,   \n                        resource, configuration.getSqlFragments());  \n                xmlMapperBuilder.parse();  \n            } catch (Exception e) {  \n                throw new NestedIOException(\"Failed to parse mapping resource: '\" + resource + \"'\", e);  \n            } finally {  \n                ErrorContext.instance().reset();  \n            }  \n            System.out.println(\"Refresh file: \" + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  \n            if (log.isDebugEnabled()) {  \n                log.debug(\"Refresh file: \" + fileList.get(i).getAbsolutePath());  \n                log.debug(\"Refresh filename: \" + fileList.get(i).getName());  \n            }  \n        }  \n        // 如果刷新了文件，则修改刷新时间，否则不修改  \n        if (fileList.size() > 0) {  \n            this.beforeTime = refrehTime;  \n        }  \n    }  \n\n    /** \n     * 获取需要刷新的文件列表 \n     * @param dir 目录 \n     * @param beforeTime 上次刷新时间 \n     * @return 刷新文件列表 \n     */  \n    private List<File> getRefreshFile(File dir, Long beforeTime) {  \n        List<File> fileList = new ArrayList<File>();  \n\n        File[] files = dir.listFiles();  \n        if (files != null) {  \n            for (int i = 0; i < files.length; i++) {  \n                File file = files[i];  \n                if (file.isDirectory()) {  \n                    fileList.addAll(this.getRefreshFile(file, beforeTime));  \n                } else if (file.isFile()) {  \n                    if (this.checkFile(file, beforeTime)) {  \n                        fileList.add(file);  \n                    }  \n                } else {  \n                    System.out.println(\"Error file.\" + file.getName());  \n                }  \n            }  \n        }  \n        return fileList;  \n    }  \n\n    /** \n     * 判断文件是否需要刷新 \n     * @param file 文件 \n     * @param beforeTime 上次刷新时间 \n     * @return 需要刷新返回true，否则返回false \n     */  \n    private boolean checkFile(File file, Long beforeTime) {  \n        if (file.lastModified() > beforeTime) {  \n            return true;  \n        }  \n        return false;  \n    }  \n\n    /** \n     * 获取整数属性 \n     * @param key \n     * @return \n     */  \n    private static int getPropInt(String key) {  \n        int i = 0;  \n        try {  \n            i = Integer.parseInt(getPropString(key));  \n        } catch (Exception e) {  \n        }  \n        return i;  \n    }  \n\n    /** \n     * 获取字符串属性 \n     * @param key \n     * @return \n     */  \n    private static String getPropString(String key) {  \n        return prop == null ? null : prop.getProperty(key);  \n    }  \n\n    /** \n     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 \n     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 \n     */  \n    public static class StrictMap<V> extends HashMap<String, V> {  \n\n        private static final long serialVersionUID = -4950446264854982944L;  \n        private String name;  \n\n        public StrictMap(String name, int initialCapacity, float loadFactor) {  \n            super(initialCapacity, loadFactor);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, int initialCapacity) {  \n            super(initialCapacity);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name) {  \n            super();  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, Map<String, ? extends V> m) {  \n            super(m);  \n            this.name = name;  \n        }  \n\n        @SuppressWarnings(\"unchecked\")  \n        public V put(String key, V value) {  \n            // ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  \n            if (MapperRefresh.isRefresh()) {  \n                remove(key);  \n                MapperRefresh.log.debug(\"refresh key:\" + key.substring(key.lastIndexOf(\".\") + 1));  \n            }  \n            // ThinkGem end  \n            if (containsKey(key)) {  \n                throw new IllegalArgumentException(name + \" already contains value for \" + key);  \n            }  \n            if (key.contains(\".\")) {  \n                final String shortKey = getShortName(key);  \n                if (super.get(shortKey) == null) {  \n                    super.put(shortKey, value);  \n                } else {  \n                    super.put(shortKey, (V) new Ambiguity(shortKey));  \n                }  \n            }  \n            return super.put(key, value);  \n        }  \n\n        public V get(Object key) {  \n            V value = super.get(key);  \n            if (value == null) {  \n                throw new IllegalArgumentException(name + \" does not contain value for \" + key);  \n            }  \n            if (value instanceof Ambiguity) {  \n                throw new IllegalArgumentException(((Ambiguity) value).getSubject() + \" is ambiguous in \" + name  \n                        + \" (try using the full name including the namespace, or rename one of the entries)\");  \n            }  \n            return value;  \n        }  \n\n        private String getShortName(String key) {  \n            final String[] keyparts = key.split(\"\\\\.\");  \n            return keyparts[keyparts.length - 1];  \n        }  \n\n        protected static class Ambiguity {  \n            private String subject;  \n\n            public Ambiguity(String subject) {  \n                this.subject = subject;  \n            }  \n\n            public String getSubject() {  \n                return subject;  \n            }  \n        }  \n    }  \n}\n```\n\n# 重写SqlSessionFactoryBean\n\nMyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：\n\n1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n3、加入启动MapperRefresh.java线程服务。\n\n思路就是用我们**自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class**。\n\n1. 在当前项目下新建一个包：右键 *src > new Package >* *org.mybatis.spring*，创建SqlSessionFactoryBean.java类。\n\n   <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"/>\n\n   </div>\n\n2. 复制下面一串代码到SqlSessionFactoryBean.java，注意导入`MapperRefresh`正确的包。\n\n   ```java\n   package org.mybatis.spring;\n\n   import java.io.IOException;\n   import java.sql.SQLException;\n   import java.util.Properties;\n\n   import javax.sql.DataSource;\n\n   import org.apache.ibatis.builder.xml.XMLConfigBuilder;\n   import org.apache.ibatis.builder.xml.XMLMapperBuilder;\n   import org.apache.ibatis.executor.ErrorContext;\n   import org.apache.ibatis.logging.Log;\n   import org.apache.ibatis.logging.LogFactory;\n   import org.apache.ibatis.mapping.DatabaseIdProvider;\n   import org.apache.ibatis.mapping.Environment;\n   import org.apache.ibatis.plugin.Interceptor;\n   import org.apache.ibatis.reflection.factory.ObjectFactory;\n   import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\n   import org.apache.ibatis.session.Configuration;\n   import org.apache.ibatis.session.SqlSessionFactory;\n   import org.apache.ibatis.session.SqlSessionFactoryBuilder;\n   import org.apache.ibatis.transaction.TransactionFactory;\n   import org.apache.ibatis.type.TypeAliasRegistry;\n   import org.apache.ibatis.type.TypeHandler;\n   import org.apache.ibatis.type.TypeHandlerRegistry;\n   import org.mybatis.spring.transaction.SpringManagedTransactionFactory;\n   import org.springframework.beans.factory.FactoryBean;\n   import org.springframework.beans.factory.InitializingBean;\n   import org.springframework.context.ApplicationEvent;\n   import org.springframework.context.ApplicationListener;\n   import org.springframework.context.event.ContextRefreshedEvent;\n   import org.springframework.core.NestedIOException;\n   import org.springframework.core.io.Resource;\n   import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\n   import org.springframework.util.Assert;\n   import org.springframework.util.ObjectUtils;\n   import org.springframework.util.StringUtils;\n\n   import com.talkweb.nets.netsTestLib.data.util.MapperRefresh;\n\n   public class SqlSessionFactoryBean\n           implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n       private static final Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);\n       private Resource configLocation;\n       private Resource[] mapperLocations;\n       private DataSource dataSource;\n       private TransactionFactory transactionFactory;\n       private Properties configurationProperties;\n       private SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n       private SqlSessionFactory sqlSessionFactory;\n       private String environment = SqlSessionFactoryBean.class.getSimpleName();\n       private boolean failFast;\n       private Interceptor[] plugins;\n       private TypeHandler<?>[] typeHandlers;\n       private String typeHandlersPackage;\n       private Class<?>[] typeAliases;\n       private String typeAliasesPackage;\n       private Class<?> typeAliasesSuperType;\n       private DatabaseIdProvider databaseIdProvider;\n       private ObjectFactory objectFactory;\n       private ObjectWrapperFactory objectWrapperFactory;\n\n       public void setObjectFactory(ObjectFactory objectFactory) {\n           this.objectFactory = objectFactory;\n       }\n\n       public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n           this.objectWrapperFactory = objectWrapperFactory;\n       }\n\n       public DatabaseIdProvider getDatabaseIdProvider() {\n           return this.databaseIdProvider;\n       }\n\n       public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {\n           this.databaseIdProvider = databaseIdProvider;\n       }\n\n       public void setPlugins(Interceptor[] plugins) {\n           this.plugins = plugins;\n       }\n\n       public void setTypeAliasesPackage(String typeAliasesPackage) {\n           this.typeAliasesPackage = typeAliasesPackage;\n       }\n\n       public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {\n           this.typeAliasesSuperType = typeAliasesSuperType;\n       }\n\n       public void setTypeHandlersPackage(String typeHandlersPackage) {\n           this.typeHandlersPackage = typeHandlersPackage;\n       }\n\n       public void setTypeHandlers(TypeHandler<?>[] typeHandlers) {\n           this.typeHandlers = typeHandlers;\n       }\n\n       public void setTypeAliases(Class<?>[] typeAliases) {\n           this.typeAliases = typeAliases;\n       }\n\n       public void setFailFast(boolean failFast) {\n           this.failFast = failFast;\n       }\n\n       public void setConfigLocation(Resource configLocation) {\n           this.configLocation = configLocation;\n       }\n\n       public void setMapperLocations(Resource[] mapperLocations) {\n           this.mapperLocations = mapperLocations;\n       }\n\n       public void setConfigurationProperties(Properties sqlSessionFactoryProperties) {\n           this.configurationProperties = sqlSessionFactoryProperties;\n       }\n\n       public void setDataSource(DataSource dataSource) {\n           if ((dataSource instanceof TransactionAwareDataSourceProxy)) {\n               this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();\n           } else\n               this.dataSource = dataSource;\n       }\n\n       public void setSqlSessionFactoryBuilder(SqlSessionFactoryBuilder sqlSessionFactoryBuilder) {\n           this.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;\n       }\n\n       public void setTransactionFactory(TransactionFactory transactionFactory) {\n           this.transactionFactory = transactionFactory;\n       }\n\n       public void setEnvironment(String environment) {\n           this.environment = environment;\n       }\n\n       public void afterPropertiesSet() throws Exception {\n           Assert.notNull(this.dataSource, \"Property 'dataSource' is required\");\n           Assert.notNull(this.sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n\n           this.sqlSessionFactory = buildSqlSessionFactory();\n       }\n\n       protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n           XMLConfigBuilder xmlConfigBuilder = null;\n           Configuration configuration;\n           if (this.configLocation != null) {\n               xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null,\n                       this.configurationProperties);\n               configuration = xmlConfigBuilder.getConfiguration();\n           } else {\n               if (logger.isDebugEnabled()) {\n                   logger.debug(\"Property 'configLocation' not specified, using default MyBatis Configuration\");\n               }\n               configuration = new Configuration();\n               configuration.setVariables(this.configurationProperties);\n           }\n\n           if (this.objectFactory != null) {\n               configuration.setObjectFactory(this.objectFactory);\n           }\n\n           if (this.objectWrapperFactory != null) {\n               configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n           }\n\n           if (StringUtils.hasLength(this.typeAliasesPackage)) {\n               String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(this.typeAliasesPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeAliasPackageArray) {\n\n                   // 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                   try {\n                       configuration.getTypeAliasRegistry().registerAliases(packageToScan,\n                               typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n                   } catch (Exception ex) {\n                       logger.error(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                       throw new NestedIOException(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n                   // 修改处：ThinkGem end\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeAliases)) {\n               for (Class typeAlias : this.typeAliases) {\n                   configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.plugins)) {\n               for (Interceptor plugin : this.plugins) {\n                   configuration.addInterceptor(plugin);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered plugin: '\" + plugin + \"'\");\n                   }\n               }\n           }\n\n           if (StringUtils.hasLength(this.typeHandlersPackage)) {\n               String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(this.typeHandlersPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeHandlersPackageArray) {\n                   configuration.getTypeHandlerRegistry().register(packageToScan);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeHandlers)) {\n               for (TypeHandler typeHandler : this.typeHandlers) {\n                   configuration.getTypeHandlerRegistry().register(typeHandler);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n                   }\n               }\n           }\n\n           if (xmlConfigBuilder != null) {\n               try {\n                   xmlConfigBuilder.parse();\n\n                   if (logger.isDebugEnabled())\n                       logger.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n               } catch (Exception ex) {\n                   throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n               } finally {\n                   ErrorContext.instance().reset();\n               }\n           }\n\n           if (this.transactionFactory == null) {\n               this.transactionFactory = new SpringManagedTransactionFactory();\n           }\n\n           Environment environment = new Environment(this.environment, this.transactionFactory, this.dataSource);\n           configuration.setEnvironment(environment);\n\n           if (this.databaseIdProvider != null) {\n               try {\n                   configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n               } catch (SQLException e) {\n                   throw new NestedIOException(\"Failed getting a databaseId\", e);\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.mapperLocations)) {\n               for (Resource mapperLocation : this.mapperLocations) {\n                   if (mapperLocation == null) {\n                       continue;\n                   }\n                   try {\n                       XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n                               configuration, mapperLocation.toString(), configuration.getSqlFragments());\n\n                       xmlMapperBuilder.parse();\n                   } catch (Exception e) {\n\n                       // 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                       logger.error(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n\n                       throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n                   }\n               }\n\n               // 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。\n               new MapperRefresh(this.mapperLocations, configuration).run();\n\n           } else if (logger.isDebugEnabled()) {\n               logger.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n           }\n\n           return this.sqlSessionFactoryBuilder.build(configuration);\n       }\n\n       public SqlSessionFactory getObject() throws Exception {\n           if (this.sqlSessionFactory == null) {\n               afterPropertiesSet();\n           }\n\n           return this.sqlSessionFactory;\n       }\n\n       public Class<? extends SqlSessionFactory> getObjectType() {\n           return this.sqlSessionFactory == null ? SqlSessionFactory.class : this.sqlSessionFactory.getClass();\n       }\n\n       public boolean isSingleton() {\n           return true;\n       }\n\n       public void onApplicationEvent(ApplicationEvent event) {\n           if ((this.failFast) && ((event instanceof ContextRefreshedEvent))) {\n               this.sqlSessionFactory.getConfiguration().getMappedStatementNames();\n           }\n       }\n   }\n   ```\n\n   3. 接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。**重新部署当前项目** Servers > Tomcat 8.x > 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。\n\n   4. 去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"/>\n\n      </div>\n\n   5. 这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用[*jd-gui.exe(一款JAVA反编译工具)*](http://pan.baidu.com/s/1skKW2st)比较是不是和上面写的代码对应！！！！\n\n      **检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      ​\n\n      # 创建mybatis-refresh.properties文件\n\n      一切准备就绪，还剩下最后一个属性文件， 创建**mybatis-refresh.properties**文件，记得把文件格式改成**UTF-8**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      **mybatis-refresh.properties文件内容为：**\n\n      ```javascript\n      #是否开启刷新线程\n      enabled=true\n      #延迟启动刷新程序的秒数\n      delaySeconds=60  \n      #刷新扫描间隔的时长秒数\n      sleepSeconds=3\n      #扫描Mapper文件的资源路径\n      mappingPath=mapper\n      ```\n\n      # 测试\n\n      1. 删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。\n\n      2. 启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！**这样就不用重启项目，也能加载到你修改的mapper.xml文件了** 。\n\n         <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"/>\n\n         </div>\n\n      # 注意\n\n      1. 注意各个文件的位置和名称。\n      2. 注意**MapperRefresh.java**文件中**mybatis-refresh.properties**的路径。\n      3. 注意用jd-gui.exe**检查编译后的SqlSessionFactoryBean.class文件**。","source":"_posts/Spring-Mybatis之Mapper热部署.md","raw":"---\ntitle: Spring+Mybatis之Mapper热部署\ndate: 2017-09-15 16:52:07\ntags: [java,tips]\ncategories: technology\n---\n\n# 前言\n\n​\tSpring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。\n\n​\t功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且**只加载被修改的mapper文件**！这个可省事了，效率又高，简直爽到爆。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 创建MapperRefresh刷新类\n\n在src下创建一个util包，包下面创建一个类，类名为：**MapperRefresh**\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"/>\n\n</div>\n\n代码为下面的一串，注意修改下**mybatis-refresh.properties** 的路径。\n\n```java\npackage com.talkweb.nets.netsTestLib.data.util;\n\nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileNotFoundException;  \nimport java.io.InputStream;  \nimport java.lang.reflect.Field;  \nimport java.util.ArrayList;  \nimport java.util.HashMap;  \nimport java.util.List;  \nimport java.util.Map;  \nimport java.util.Properties;  \nimport java.util.Set;  \n\nimport org.apache.commons.lang3.StringUtils;  \nimport org.apache.ibatis.builder.xml.XMLMapperBuilder;  \nimport org.apache.ibatis.executor.ErrorContext;  \nimport org.apache.ibatis.session.Configuration;  \nimport org.apache.log4j.Logger;  \nimport org.springframework.core.NestedIOException;  \nimport org.springframework.core.io.Resource;  \n\nimport com.google.common.collect.Sets;  \n\n/** \n * 刷新MyBatis Mapper XML 线程 \n * @author ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪\n * @version 2016-5-29 \n */  \npublic class MapperRefresh implements java.lang.Runnable {  \n\n    public static Logger log = Logger.getLogger(MapperRefresh.class);  \n\n    private static String filename = \"mybatis-refresh.properties\";  //注意修改路径\n    private static Properties prop = new Properties();  \n\n    private static boolean enabled;         // 是否启用Mapper刷新线程功能  \n    private static boolean refresh;         // 刷新启用后，是否启动了刷新线程  \n\n    private Set<String> location;         // Mapper实际资源路径  \n\n    private Resource[] mapperLocations;     // Mapper资源路径  \n    private Configuration configuration;        // MyBatis配置对象  \n\n    private Long beforeTime = 0L;           // 上一次刷新时间  \n    private static int delaySeconds;        // 延迟刷新秒数  \n    private static int sleepSeconds;        // 休眠时间  \n    private static String mappingPath;      // xml文件夹匹配字符串，需要根据需要修改  \n\n    static {  \n\n        try {  \n            prop.load(MapperRefresh.class.getResourceAsStream(filename));  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n            System.out.println(\"Load mybatis-refresh “\"+filename+\"” file error.\");  \n        }  \n\n        enabled = \"true\".equalsIgnoreCase(getPropString(\"enabled\"));  \n\n        delaySeconds = getPropInt(\"delaySeconds\");  \n        sleepSeconds = getPropInt(\"sleepSeconds\");  \n        mappingPath = getPropString(\"mappingPath\");  \n\n        delaySeconds = delaySeconds == 0 ? 50 : delaySeconds;  \n        sleepSeconds = sleepSeconds == 0 ? 3 : sleepSeconds;  \n        mappingPath = StringUtils.isBlank(mappingPath) ? \"mappings\" : mappingPath;  \n\n        log.debug(\"[enabled] \" + enabled);  \n        log.debug(\"[delaySeconds] \" + delaySeconds);  \n        log.debug(\"[sleepSeconds] \" + sleepSeconds);  \n        log.debug(\"[mappingPath] \" + mappingPath);  \n    }  \n\n    public static boolean isRefresh() {  \n        return refresh;  \n    }  \n\n    public MapperRefresh(Resource[] mapperLocations, Configuration configuration) {  \n        this.mapperLocations = mapperLocations;  \n        this.configuration = configuration;  \n    }  \n\n    @Override  \n    public void run() {  \n\n        beforeTime = System.currentTimeMillis();  \n\n        log.debug(\"[location] \" + location);  \n        log.debug(\"[configuration] \" + configuration);  \n\n        if (enabled) {  \n            // 启动刷新线程  \n            final MapperRefresh runnable = this;  \n            new Thread(new java.lang.Runnable() {  \n                @Override  \n                public void run() {  \n\n                    if (location == null){  \n                        location = Sets.newHashSet();  \n                        log.debug(\"MapperLocation's length:\" + mapperLocations.length);  \n                        for (Resource mapperLocation : mapperLocations) {  \n                            String s = mapperLocation.toString().replaceAll(\"\\\\\\\\\", \"/\");  \n                            s = s.substring(\"file [\".length(), s.lastIndexOf(mappingPath) + mappingPath.length());  \n                            if (!location.contains(s)) {  \n                                location.add(s);  \n                                log.debug(\"Location:\" + s);  \n                            }  \n                        }  \n                        log.debug(\"Locarion's size:\" + location.size());  \n                    }  \n\n                    try {  \n                        Thread.sleep(delaySeconds * 1000);  \n                    } catch (InterruptedException e2) {  \n                        e2.printStackTrace();  \n                    }  \n                    refresh = true;  \n\n                    System.out.println(\"========= Enabled refresh mybatis mapper =========\");  \n\n                    while (true) {  \n                        try {  \n                            for (String s : location) {  \n                                runnable.refresh(s, beforeTime);  \n                            }  \n                        } catch (Exception e1) {  \n                            e1.printStackTrace();  \n                        }  \n                        try {  \n                            Thread.sleep(sleepSeconds * 1000);  \n                        } catch (InterruptedException e) {  \n                            e.printStackTrace();  \n                        }  \n\n                    }  \n                }  \n            }, \"MyBatis-Mapper-Refresh\").start();  \n        }  \n    }  \n\n    /** \n     * 执行刷新 \n     * @param filePath 刷新目录 \n     * @param beforeTime 上次刷新时间 \n     * @throws NestedIOException 解析异常 \n     * @throws FileNotFoundException 文件未找到 \n     * @author ThinkGem \n     */  \n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })  \n    private void refresh(String filePath, Long beforeTime) throws Exception {  \n\n        // 本次刷新时间  \n        Long refrehTime = System.currentTimeMillis();  \n\n        // 获取需要刷新的Mapper文件列表  \n        List<File> fileList = this.getRefreshFile(new File(filePath), beforeTime);  \n        if (fileList.size() > 0) {  \n            log.debug(\"Refresh file: \" + fileList.size());  \n        }  \n        for (int i = 0; i < fileList.size(); i++) {  \n            InputStream inputStream = new FileInputStream(fileList.get(i));  \n            String resource = fileList.get(i).getAbsolutePath();  \n            try {  \n\n                // 清理原有资源，更新为自己的StrictMap方便，增量重新加载  \n                String[] mapFieldNames = new String[]{  \n                    \"mappedStatements\", \"caches\",  \n                    \"resultMaps\", \"parameterMaps\",  \n                    \"keyGenerators\", \"sqlFragments\"  \n                };  \n                for (String fieldName : mapFieldNames){  \n                    Field field = configuration.getClass().getDeclaredField(fieldName);  \n                    field.setAccessible(true);  \n                    Map map = ((Map)field.get(configuration));  \n                    if (!(map instanceof StrictMap)){  \n                        Map newMap = new StrictMap(StringUtils.capitalize(fieldName) + \"collection\");  \n                        for (Object key : map.keySet()){  \n                            try {  \n                                newMap.put(key, map.get(key));  \n                            }catch(IllegalArgumentException ex){  \n                                newMap.put(key, ex.getMessage());  \n                            }  \n                        }  \n                        field.set(configuration, newMap);  \n                    }  \n                }  \n\n                // 清理已加载的资源标识，方便让它重新加载。  \n                Field loadedResourcesField = configuration.getClass().getDeclaredField(\"loadedResources\");  \n                loadedResourcesField.setAccessible(true);  \n                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  \n                loadedResourcesSet.remove(resource);  \n\n                //重新编译加载资源文件。  \n                XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(inputStream, configuration,   \n                        resource, configuration.getSqlFragments());  \n                xmlMapperBuilder.parse();  \n            } catch (Exception e) {  \n                throw new NestedIOException(\"Failed to parse mapping resource: '\" + resource + \"'\", e);  \n            } finally {  \n                ErrorContext.instance().reset();  \n            }  \n            System.out.println(\"Refresh file: \" + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  \n            if (log.isDebugEnabled()) {  \n                log.debug(\"Refresh file: \" + fileList.get(i).getAbsolutePath());  \n                log.debug(\"Refresh filename: \" + fileList.get(i).getName());  \n            }  \n        }  \n        // 如果刷新了文件，则修改刷新时间，否则不修改  \n        if (fileList.size() > 0) {  \n            this.beforeTime = refrehTime;  \n        }  \n    }  \n\n    /** \n     * 获取需要刷新的文件列表 \n     * @param dir 目录 \n     * @param beforeTime 上次刷新时间 \n     * @return 刷新文件列表 \n     */  \n    private List<File> getRefreshFile(File dir, Long beforeTime) {  \n        List<File> fileList = new ArrayList<File>();  \n\n        File[] files = dir.listFiles();  \n        if (files != null) {  \n            for (int i = 0; i < files.length; i++) {  \n                File file = files[i];  \n                if (file.isDirectory()) {  \n                    fileList.addAll(this.getRefreshFile(file, beforeTime));  \n                } else if (file.isFile()) {  \n                    if (this.checkFile(file, beforeTime)) {  \n                        fileList.add(file);  \n                    }  \n                } else {  \n                    System.out.println(\"Error file.\" + file.getName());  \n                }  \n            }  \n        }  \n        return fileList;  \n    }  \n\n    /** \n     * 判断文件是否需要刷新 \n     * @param file 文件 \n     * @param beforeTime 上次刷新时间 \n     * @return 需要刷新返回true，否则返回false \n     */  \n    private boolean checkFile(File file, Long beforeTime) {  \n        if (file.lastModified() > beforeTime) {  \n            return true;  \n        }  \n        return false;  \n    }  \n\n    /** \n     * 获取整数属性 \n     * @param key \n     * @return \n     */  \n    private static int getPropInt(String key) {  \n        int i = 0;  \n        try {  \n            i = Integer.parseInt(getPropString(key));  \n        } catch (Exception e) {  \n        }  \n        return i;  \n    }  \n\n    /** \n     * 获取字符串属性 \n     * @param key \n     * @return \n     */  \n    private static String getPropString(String key) {  \n        return prop == null ? null : prop.getProperty(key);  \n    }  \n\n    /** \n     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 \n     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 \n     */  \n    public static class StrictMap<V> extends HashMap<String, V> {  \n\n        private static final long serialVersionUID = -4950446264854982944L;  \n        private String name;  \n\n        public StrictMap(String name, int initialCapacity, float loadFactor) {  \n            super(initialCapacity, loadFactor);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, int initialCapacity) {  \n            super(initialCapacity);  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name) {  \n            super();  \n            this.name = name;  \n        }  \n\n        public StrictMap(String name, Map<String, ? extends V> m) {  \n            super(m);  \n            this.name = name;  \n        }  \n\n        @SuppressWarnings(\"unchecked\")  \n        public V put(String key, V value) {  \n            // ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  \n            if (MapperRefresh.isRefresh()) {  \n                remove(key);  \n                MapperRefresh.log.debug(\"refresh key:\" + key.substring(key.lastIndexOf(\".\") + 1));  \n            }  \n            // ThinkGem end  \n            if (containsKey(key)) {  \n                throw new IllegalArgumentException(name + \" already contains value for \" + key);  \n            }  \n            if (key.contains(\".\")) {  \n                final String shortKey = getShortName(key);  \n                if (super.get(shortKey) == null) {  \n                    super.put(shortKey, value);  \n                } else {  \n                    super.put(shortKey, (V) new Ambiguity(shortKey));  \n                }  \n            }  \n            return super.put(key, value);  \n        }  \n\n        public V get(Object key) {  \n            V value = super.get(key);  \n            if (value == null) {  \n                throw new IllegalArgumentException(name + \" does not contain value for \" + key);  \n            }  \n            if (value instanceof Ambiguity) {  \n                throw new IllegalArgumentException(((Ambiguity) value).getSubject() + \" is ambiguous in \" + name  \n                        + \" (try using the full name including the namespace, or rename one of the entries)\");  \n            }  \n            return value;  \n        }  \n\n        private String getShortName(String key) {  \n            final String[] keyparts = key.split(\"\\\\.\");  \n            return keyparts[keyparts.length - 1];  \n        }  \n\n        protected static class Ambiguity {  \n            private String subject;  \n\n            public Ambiguity(String subject) {  \n                this.subject = subject;  \n            }  \n\n            public String getSubject() {  \n                return subject;  \n            }  \n        }  \n    }  \n}\n```\n\n# 重写SqlSessionFactoryBean\n\nMyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：\n\n1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。 \n3、加入启动MapperRefresh.java线程服务。\n\n思路就是用我们**自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class**。\n\n1. 在当前项目下新建一个包：右键 *src > new Package >* *org.mybatis.spring*，创建SqlSessionFactoryBean.java类。\n\n   <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"/>\n\n   </div>\n\n2. 复制下面一串代码到SqlSessionFactoryBean.java，注意导入`MapperRefresh`正确的包。\n\n   ```java\n   package org.mybatis.spring;\n\n   import java.io.IOException;\n   import java.sql.SQLException;\n   import java.util.Properties;\n\n   import javax.sql.DataSource;\n\n   import org.apache.ibatis.builder.xml.XMLConfigBuilder;\n   import org.apache.ibatis.builder.xml.XMLMapperBuilder;\n   import org.apache.ibatis.executor.ErrorContext;\n   import org.apache.ibatis.logging.Log;\n   import org.apache.ibatis.logging.LogFactory;\n   import org.apache.ibatis.mapping.DatabaseIdProvider;\n   import org.apache.ibatis.mapping.Environment;\n   import org.apache.ibatis.plugin.Interceptor;\n   import org.apache.ibatis.reflection.factory.ObjectFactory;\n   import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\n   import org.apache.ibatis.session.Configuration;\n   import org.apache.ibatis.session.SqlSessionFactory;\n   import org.apache.ibatis.session.SqlSessionFactoryBuilder;\n   import org.apache.ibatis.transaction.TransactionFactory;\n   import org.apache.ibatis.type.TypeAliasRegistry;\n   import org.apache.ibatis.type.TypeHandler;\n   import org.apache.ibatis.type.TypeHandlerRegistry;\n   import org.mybatis.spring.transaction.SpringManagedTransactionFactory;\n   import org.springframework.beans.factory.FactoryBean;\n   import org.springframework.beans.factory.InitializingBean;\n   import org.springframework.context.ApplicationEvent;\n   import org.springframework.context.ApplicationListener;\n   import org.springframework.context.event.ContextRefreshedEvent;\n   import org.springframework.core.NestedIOException;\n   import org.springframework.core.io.Resource;\n   import org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;\n   import org.springframework.util.Assert;\n   import org.springframework.util.ObjectUtils;\n   import org.springframework.util.StringUtils;\n\n   import com.talkweb.nets.netsTestLib.data.util.MapperRefresh;\n\n   public class SqlSessionFactoryBean\n           implements FactoryBean<SqlSessionFactory>, InitializingBean, ApplicationListener<ApplicationEvent> {\n       private static final Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);\n       private Resource configLocation;\n       private Resource[] mapperLocations;\n       private DataSource dataSource;\n       private TransactionFactory transactionFactory;\n       private Properties configurationProperties;\n       private SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();\n       private SqlSessionFactory sqlSessionFactory;\n       private String environment = SqlSessionFactoryBean.class.getSimpleName();\n       private boolean failFast;\n       private Interceptor[] plugins;\n       private TypeHandler<?>[] typeHandlers;\n       private String typeHandlersPackage;\n       private Class<?>[] typeAliases;\n       private String typeAliasesPackage;\n       private Class<?> typeAliasesSuperType;\n       private DatabaseIdProvider databaseIdProvider;\n       private ObjectFactory objectFactory;\n       private ObjectWrapperFactory objectWrapperFactory;\n\n       public void setObjectFactory(ObjectFactory objectFactory) {\n           this.objectFactory = objectFactory;\n       }\n\n       public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {\n           this.objectWrapperFactory = objectWrapperFactory;\n       }\n\n       public DatabaseIdProvider getDatabaseIdProvider() {\n           return this.databaseIdProvider;\n       }\n\n       public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {\n           this.databaseIdProvider = databaseIdProvider;\n       }\n\n       public void setPlugins(Interceptor[] plugins) {\n           this.plugins = plugins;\n       }\n\n       public void setTypeAliasesPackage(String typeAliasesPackage) {\n           this.typeAliasesPackage = typeAliasesPackage;\n       }\n\n       public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {\n           this.typeAliasesSuperType = typeAliasesSuperType;\n       }\n\n       public void setTypeHandlersPackage(String typeHandlersPackage) {\n           this.typeHandlersPackage = typeHandlersPackage;\n       }\n\n       public void setTypeHandlers(TypeHandler<?>[] typeHandlers) {\n           this.typeHandlers = typeHandlers;\n       }\n\n       public void setTypeAliases(Class<?>[] typeAliases) {\n           this.typeAliases = typeAliases;\n       }\n\n       public void setFailFast(boolean failFast) {\n           this.failFast = failFast;\n       }\n\n       public void setConfigLocation(Resource configLocation) {\n           this.configLocation = configLocation;\n       }\n\n       public void setMapperLocations(Resource[] mapperLocations) {\n           this.mapperLocations = mapperLocations;\n       }\n\n       public void setConfigurationProperties(Properties sqlSessionFactoryProperties) {\n           this.configurationProperties = sqlSessionFactoryProperties;\n       }\n\n       public void setDataSource(DataSource dataSource) {\n           if ((dataSource instanceof TransactionAwareDataSourceProxy)) {\n               this.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();\n           } else\n               this.dataSource = dataSource;\n       }\n\n       public void setSqlSessionFactoryBuilder(SqlSessionFactoryBuilder sqlSessionFactoryBuilder) {\n           this.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;\n       }\n\n       public void setTransactionFactory(TransactionFactory transactionFactory) {\n           this.transactionFactory = transactionFactory;\n       }\n\n       public void setEnvironment(String environment) {\n           this.environment = environment;\n       }\n\n       public void afterPropertiesSet() throws Exception {\n           Assert.notNull(this.dataSource, \"Property 'dataSource' is required\");\n           Assert.notNull(this.sqlSessionFactoryBuilder, \"Property 'sqlSessionFactoryBuilder' is required\");\n\n           this.sqlSessionFactory = buildSqlSessionFactory();\n       }\n\n       protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n           XMLConfigBuilder xmlConfigBuilder = null;\n           Configuration configuration;\n           if (this.configLocation != null) {\n               xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null,\n                       this.configurationProperties);\n               configuration = xmlConfigBuilder.getConfiguration();\n           } else {\n               if (logger.isDebugEnabled()) {\n                   logger.debug(\"Property 'configLocation' not specified, using default MyBatis Configuration\");\n               }\n               configuration = new Configuration();\n               configuration.setVariables(this.configurationProperties);\n           }\n\n           if (this.objectFactory != null) {\n               configuration.setObjectFactory(this.objectFactory);\n           }\n\n           if (this.objectWrapperFactory != null) {\n               configuration.setObjectWrapperFactory(this.objectWrapperFactory);\n           }\n\n           if (StringUtils.hasLength(this.typeAliasesPackage)) {\n               String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(this.typeAliasesPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeAliasPackageArray) {\n\n                   // 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                   try {\n                       configuration.getTypeAliasRegistry().registerAliases(packageToScan,\n                               typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);\n                   } catch (Exception ex) {\n                       logger.error(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                       throw new NestedIOException(\"Scanned package: '\" + packageToScan + \"' for aliases\", ex);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n                   // 修改处：ThinkGem end\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for aliases\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeAliases)) {\n               for (Class typeAlias : this.typeAliases) {\n                   configuration.getTypeAliasRegistry().registerAlias(typeAlias);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type alias: '\" + typeAlias + \"'\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.plugins)) {\n               for (Interceptor plugin : this.plugins) {\n                   configuration.addInterceptor(plugin);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered plugin: '\" + plugin + \"'\");\n                   }\n               }\n           }\n\n           if (StringUtils.hasLength(this.typeHandlersPackage)) {\n               String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(this.typeHandlersPackage, \",; \\t\\n\");\n\n               for (String packageToScan : typeHandlersPackageArray) {\n                   configuration.getTypeHandlerRegistry().register(packageToScan);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Scanned package: '\" + packageToScan + \"' for type handlers\");\n                   }\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.typeHandlers)) {\n               for (TypeHandler typeHandler : this.typeHandlers) {\n                   configuration.getTypeHandlerRegistry().register(typeHandler);\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Registered type handler: '\" + typeHandler + \"'\");\n                   }\n               }\n           }\n\n           if (xmlConfigBuilder != null) {\n               try {\n                   xmlConfigBuilder.parse();\n\n                   if (logger.isDebugEnabled())\n                       logger.debug(\"Parsed configuration file: '\" + this.configLocation + \"'\");\n               } catch (Exception ex) {\n                   throw new NestedIOException(\"Failed to parse config resource: \" + this.configLocation, ex);\n               } finally {\n                   ErrorContext.instance().reset();\n               }\n           }\n\n           if (this.transactionFactory == null) {\n               this.transactionFactory = new SpringManagedTransactionFactory();\n           }\n\n           Environment environment = new Environment(this.environment, this.transactionFactory, this.dataSource);\n           configuration.setEnvironment(environment);\n\n           if (this.databaseIdProvider != null) {\n               try {\n                   configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource));\n               } catch (SQLException e) {\n                   throw new NestedIOException(\"Failed getting a databaseId\", e);\n               }\n           }\n\n           if (!ObjectUtils.isEmpty(this.mapperLocations)) {\n               for (Resource mapperLocation : this.mapperLocations) {\n                   if (mapperLocation == null) {\n                       continue;\n                   }\n                   try {\n                       XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n                               configuration, mapperLocation.toString(), configuration.getSqlFragments());\n\n                       xmlMapperBuilder.parse();\n                   } catch (Exception e) {\n\n                       // 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动\n                       logger.error(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n\n                       throw new NestedIOException(\"Failed to parse mapping resource: '\" + mapperLocation + \"'\", e);\n                   } finally {\n                       ErrorContext.instance().reset();\n                   }\n\n                   if (logger.isDebugEnabled()) {\n                       logger.debug(\"Parsed mapper file: '\" + mapperLocation + \"'\");\n                   }\n               }\n\n               // 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。\n               new MapperRefresh(this.mapperLocations, configuration).run();\n\n           } else if (logger.isDebugEnabled()) {\n               logger.debug(\"Property 'mapperLocations' was not specified or no matching resources found\");\n           }\n\n           return this.sqlSessionFactoryBuilder.build(configuration);\n       }\n\n       public SqlSessionFactory getObject() throws Exception {\n           if (this.sqlSessionFactory == null) {\n               afterPropertiesSet();\n           }\n\n           return this.sqlSessionFactory;\n       }\n\n       public Class<? extends SqlSessionFactory> getObjectType() {\n           return this.sqlSessionFactory == null ? SqlSessionFactory.class : this.sqlSessionFactory.getClass();\n       }\n\n       public boolean isSingleton() {\n           return true;\n       }\n\n       public void onApplicationEvent(ApplicationEvent event) {\n           if ((this.failFast) && ((event instanceof ContextRefreshedEvent))) {\n               this.sqlSessionFactory.getConfiguration().getMappedStatementNames();\n           }\n       }\n   }\n   ```\n\n   3. 接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。**重新部署当前项目** Servers > Tomcat 8.x > 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。\n\n   4. 去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"/>\n\n      </div>\n\n   5. 这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用[*jd-gui.exe(一款JAVA反编译工具)*](http://pan.baidu.com/s/1skKW2st)比较是不是和上面写的代码对应！！！！\n\n      **检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      ​\n\n      # 创建mybatis-refresh.properties文件\n\n      一切准备就绪，还剩下最后一个属性文件， 创建**mybatis-refresh.properties**文件，记得把文件格式改成**UTF-8**。\n\n      <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"/>\n\n      </div>\n\n      **mybatis-refresh.properties文件内容为：**\n\n      ```javascript\n      #是否开启刷新线程\n      enabled=true\n      #延迟启动刷新程序的秒数\n      delaySeconds=60  \n      #刷新扫描间隔的时长秒数\n      sleepSeconds=3\n      #扫描Mapper文件的资源路径\n      mappingPath=mapper\n      ```\n\n      # 测试\n\n      1. 删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。\n\n      2. 启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！**这样就不用重启项目，也能加载到你修改的mapper.xml文件了** 。\n\n         <div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"/>\n\n         </div>\n\n      # 注意\n\n      1. 注意各个文件的位置和名称。\n      2. 注意**MapperRefresh.java**文件中**mybatis-refresh.properties**的路径。\n      3. 注意用jd-gui.exe**检查编译后的SqlSessionFactoryBean.class文件**。","slug":"Spring-Mybatis之Mapper热部署","published":1,"updated":"2017-09-22T01:57:43.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfae0010swg6882ju5hz","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    Spring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。</p>\n<p>​    功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且<strong>只加载被修改的mapper文件</strong>！这个可省事了，效率又高，简直爽到爆。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"创建MapperRefresh刷新类\"><a href=\"#创建MapperRefresh刷新类\" class=\"headerlink\" title=\"创建MapperRefresh刷新类\"></a>创建MapperRefresh刷新类</h1><p>在src下创建一个util包，包下面创建一个类，类名为：<strong>MapperRefresh</strong></p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"><br><br></div>\n\n<p>代码为下面的一串，注意修改下<strong>mybatis-refresh.properties</strong> 的路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.talkweb.nets.netsTestLib.data.util;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.Sets;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** </span></div><div class=\"line\"> * 刷新MyBatis Mapper XML 线程 </div><div class=\"line\"> * <span class=\"doctag\">@author</span> ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 2016-5-29 </div><div class=\"line\"> */  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapperRefresh</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Runnable</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Logger log = Logger.getLogger(MapperRefresh.class);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String filename = <span class=\"string\">\"mybatis-refresh.properties\"</span>;  <span class=\"comment\">//注意修改路径</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Properties prop = <span class=\"keyword\">new</span> Properties();  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> enabled;         <span class=\"comment\">// 是否启用Mapper刷新线程功能  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> refresh;         <span class=\"comment\">// 刷新启用后，是否启动了刷新线程  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; location;         <span class=\"comment\">// Mapper实际资源路径  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;     <span class=\"comment\">// Mapper资源路径  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> Configuration configuration;        <span class=\"comment\">// MyBatis配置对象  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Long beforeTime = <span class=\"number\">0L</span>;           <span class=\"comment\">// 上一次刷新时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> delaySeconds;        <span class=\"comment\">// 延迟刷新秒数  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sleepSeconds;        <span class=\"comment\">// 休眠时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String mappingPath;      <span class=\"comment\">// xml文件夹匹配字符串，需要根据需要修改  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            prop.load(MapperRefresh.class.getResourceAsStream(filename));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Load mybatis-refresh “\"</span>+filename+<span class=\"string\">\"” file error.\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        enabled = <span class=\"string\">\"true\"</span>.equalsIgnoreCase(getPropString(<span class=\"string\">\"enabled\"</span>));  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = getPropInt(<span class=\"string\">\"delaySeconds\"</span>);  </div><div class=\"line\">        sleepSeconds = getPropInt(<span class=\"string\">\"sleepSeconds\"</span>);  </div><div class=\"line\">        mappingPath = getPropString(<span class=\"string\">\"mappingPath\"</span>);  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = delaySeconds == <span class=\"number\">0</span> ? <span class=\"number\">50</span> : delaySeconds;  </div><div class=\"line\">        sleepSeconds = sleepSeconds == <span class=\"number\">0</span> ? <span class=\"number\">3</span> : sleepSeconds;  </div><div class=\"line\">        mappingPath = StringUtils.isBlank(mappingPath) ? <span class=\"string\">\"mappings\"</span> : mappingPath;  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[enabled] \"</span> + enabled);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[delaySeconds] \"</span> + delaySeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[sleepSeconds] \"</span> + sleepSeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[mappingPath] \"</span> + mappingPath);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRefresh</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> refresh;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapperRefresh</span><span class=\"params\">(Resource[] mapperLocations, Configuration configuration)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.configuration = configuration;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        beforeTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[location] \"</span> + location);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[configuration] \"</span> + configuration);  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (enabled) &#123;  </div><div class=\"line\">            <span class=\"comment\">// 启动刷新线程  </span></div><div class=\"line\">            <span class=\"keyword\">final</span> MapperRefresh runnable = <span class=\"keyword\">this</span>;  </div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> java.lang.Runnable() &#123;  </div><div class=\"line\">                <span class=\"meta\">@Override</span>  </div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (location == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">                        location = Sets.newHashSet();  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"MapperLocation's length:\"</span> + mapperLocations.length);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Resource mapperLocation : mapperLocations) &#123;  </div><div class=\"line\">                            String s = mapperLocation.toString().replaceAll(<span class=\"string\">\"\\\\\\\\\"</span>, <span class=\"string\">\"/\"</span>);  </div><div class=\"line\">                            s = s.substring(<span class=\"string\">\"file [\"</span>.length(), s.lastIndexOf(mappingPath) + mappingPath.length());  </div><div class=\"line\">                            <span class=\"keyword\">if</span> (!location.contains(s)) &#123;  </div><div class=\"line\">                                location.add(s);  </div><div class=\"line\">                                log.debug(<span class=\"string\">\"Location:\"</span> + s);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"Locarion's size:\"</span> + location.size());  </div><div class=\"line\">                    &#125;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(delaySeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e2) &#123;  </div><div class=\"line\">                        e2.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                    refresh = <span class=\"keyword\">true</span>;  </div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"========= Enabled refresh mybatis mapper =========\"</span>);  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            <span class=\"keyword\">for</span> (String s : location) &#123;  </div><div class=\"line\">                                runnable.refresh(s, beforeTime);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;  </div><div class=\"line\">                            e1.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            Thread.sleep(sleepSeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                            e.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\"></div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;, <span class=\"string\">\"MyBatis-Mapper-Refresh\"</span>).start();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 执行刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath 刷新目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> NestedIOException 解析异常 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> FileNotFoundException 文件未找到 </div><div class=\"line\">     * <span class=\"doctag\">@author</span> ThinkGem </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(String filePath, Long beforeTime)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 本次刷新时间  </span></div><div class=\"line\">        Long refrehTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取需要刷新的Mapper文件列表  </span></div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">this</span>.getRefreshFile(<span class=\"keyword\">new</span> File(filePath), beforeTime);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.size());  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileList.size(); i++) &#123;  </div><div class=\"line\">            InputStream inputStream = <span class=\"keyword\">new</span> FileInputStream(fileList.get(i));  </div><div class=\"line\">            String resource = fileList.get(i).getAbsolutePath();  </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理原有资源，更新为自己的StrictMap方便，增量重新加载  </span></div><div class=\"line\">                String[] mapFieldNames = <span class=\"keyword\">new</span> String[]&#123;  </div><div class=\"line\">                    <span class=\"string\">\"mappedStatements\"</span>, <span class=\"string\">\"caches\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"resultMaps\"</span>, <span class=\"string\">\"parameterMaps\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"keyGenerators\"</span>, <span class=\"string\">\"sqlFragments\"</span>  </div><div class=\"line\">                &#125;;  </div><div class=\"line\">                <span class=\"keyword\">for</span> (String fieldName : mapFieldNames)&#123;  </div><div class=\"line\">                    Field field = configuration.getClass().getDeclaredField(fieldName);  </div><div class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                    Map map = ((Map)field.get(configuration));  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (!(map <span class=\"keyword\">instanceof</span> StrictMap))&#123;  </div><div class=\"line\">                        Map newMap = <span class=\"keyword\">new</span> StrictMap(StringUtils.capitalize(fieldName) + <span class=\"string\">\"collection\"</span>);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Object key : map.keySet())&#123;  </div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                                newMap.put(key, map.get(key));  </div><div class=\"line\">                            &#125;<span class=\"keyword\">catch</span>(IllegalArgumentException ex)&#123;  </div><div class=\"line\">                                newMap.put(key, ex.getMessage());  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        field.set(configuration, newMap);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理已加载的资源标识，方便让它重新加载。  </span></div><div class=\"line\">                Field loadedResourcesField = configuration.getClass().getDeclaredField(<span class=\"string\">\"loadedResources\"</span>);  </div><div class=\"line\">                loadedResourcesField.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  </div><div class=\"line\">                loadedResourcesSet.remove(resource);  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//重新编译加载资源文件。  </span></div><div class=\"line\">                XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(inputStream, configuration,   </div><div class=\"line\">                        resource, configuration.getSqlFragments());  </div><div class=\"line\">                xmlMapperBuilder.parse();  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + resource + <span class=\"string\">\"'\"</span>, e);  </div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;  </div><div class=\"line\">                ErrorContext.instance().reset();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Refresh file: \"</span> + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  </div><div class=\"line\">            <span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.get(i).getAbsolutePath());  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh filename: \"</span> + fileList.get(i).getName());  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"comment\">// 如果刷新了文件，则修改刷新时间，否则不修改  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.beforeTime = refrehTime;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 获取需要刷新的文件列表 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> dir 目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 刷新文件列表 </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;File&gt; <span class=\"title\">getRefreshFile</span><span class=\"params\">(File dir, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">new</span> ArrayList&lt;File&gt;();  </div><div class=\"line\"></div><div class=\"line\">        File[] files = dir.listFiles();  </div><div class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;  </div><div class=\"line\">                File file = files[i];  </div><div class=\"line\">                <span class=\"keyword\">if</span> (file.isDirectory()) &#123;  </div><div class=\"line\">                    fileList.addAll(<span class=\"keyword\">this</span>.getRefreshFile(file, beforeTime));  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (file.isFile()) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.checkFile(file, beforeTime)) &#123;  </div><div class=\"line\">                        fileList.add(file);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Error file.\"</span> + file.getName());  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> fileList;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 判断文件是否需要刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> file 文件 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 需要刷新返回true，否则返回false </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkFile</span><span class=\"params\">(File file, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (file.lastModified() &gt; beforeTime) &#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 获取整数属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getPropInt</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            i = Integer.parseInt(getPropString(key));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> i;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 获取字符串属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getPropString</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> prop == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : prop.getProperty(key);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 </div><div class=\"line\">     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 </div><div class=\"line\">     */  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrictMap</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">V</span>&gt; </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">4950446264854982944L</span>;  </div><div class=\"line\">        <span class=\"keyword\">private</span> String name;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity, loadFactor);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>();  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, Map&lt;String, ? extends V&gt; m)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(m);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(String key, V value)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (MapperRefresh.isRefresh()) &#123;  </div><div class=\"line\">                remove(key);  </div><div class=\"line\">                MapperRefresh.log.debug(<span class=\"string\">\"refresh key:\"</span> + key.substring(key.lastIndexOf(<span class=\"string\">\".\"</span>) + <span class=\"number\">1</span>));  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem end  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (containsKey(key)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" already contains value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (key.contains(<span class=\"string\">\".\"</span>)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">final</span> String shortKey = getShortName(key);  </div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">super</span>.get(shortKey) == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, value);  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, (V) <span class=\"keyword\">new</span> Ambiguity(shortKey));  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.put(key, value);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;  </div><div class=\"line\">            V value = <span class=\"keyword\">super</span>.get(key);  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" does not contain value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Ambiguity) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(((Ambiguity) value).getSubject() + <span class=\"string\">\" is ambiguous in \"</span> + name  </div><div class=\"line\">                        + <span class=\"string\">\" (try using the full name including the namespace, or rename one of the entries)\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> value;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getShortName</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">final</span> String[] keyparts = key.split(<span class=\"string\">\"\\\\.\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> keyparts[keyparts.length - <span class=\"number\">1</span>];  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ambiguity</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">private</span> String subject;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Ambiguity</span><span class=\"params\">(String subject)</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">this</span>.subject = subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">return</span> subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"重写SqlSessionFactoryBean\"><a href=\"#重写SqlSessionFactoryBean\" class=\"headerlink\" title=\"重写SqlSessionFactoryBean\"></a>重写SqlSessionFactoryBean</h1><p>MyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：</p>\n<p>1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>3、加入启动MapperRefresh.java线程服务。</p>\n<p>思路就是用我们<strong>自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class</strong>。</p>\n<ol>\n<li><p>在当前项目下新建一个包：右键 <em>src &gt; new Package &gt;</em> <em>org.mybatis.spring</em>，创建SqlSessionFactoryBean.java类。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"><br><br></div>\n</li>\n<li><p>复制下面一串代码到SqlSessionFactoryBean.java，注意导入<code>MapperRefresh</code>正确的包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.mybatis.spring;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLConfigBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.DatabaseIdProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.plugin.Interceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.factory.ObjectFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.transaction.TransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeAliasRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.InitializingBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.event.ContextRefreshedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.ObjectUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.talkweb.nets.netsTestLib.data.util.MapperRefresh;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlSessionFactoryBean</span></span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">SqlSessionFactory</span>&gt;, <span class=\"title\">InitializingBean</span>, <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ApplicationEvent</span>&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource configLocation;</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;</div><div class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</div><div class=\"line\">    <span class=\"keyword\">private</span> TransactionFactory transactionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties configurationProperties;</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> String environment = SqlSessionFactoryBean.class.getSimpleName();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> failFast;</div><div class=\"line\">    <span class=\"keyword\">private</span> Interceptor[] plugins;</div><div class=\"line\">    <span class=\"keyword\">private</span> TypeHandler&lt;?&gt;[] typeHandlers;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeHandlersPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt;[] typeAliases;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeAliasesPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt; typeAliasesSuperType;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabaseIdProvider databaseIdProvider;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory objectFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectWrapperFactory objectWrapperFactory;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectFactory</span><span class=\"params\">(ObjectFactory objectFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectFactory = objectFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectWrapperFactory</span><span class=\"params\">(ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectWrapperFactory = objectWrapperFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DatabaseIdProvider <span class=\"title\">getDatabaseIdProvider</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDatabaseIdProvider</span><span class=\"params\">(DatabaseIdProvider databaseIdProvider)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.databaseIdProvider = databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPlugins</span><span class=\"params\">(Interceptor[] plugins)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.plugins = plugins;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesPackage</span><span class=\"params\">(String typeAliasesPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesPackage = typeAliasesPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesSuperType</span><span class=\"params\">(Class&lt;?&gt; typeAliasesSuperType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesSuperType = typeAliasesSuperType;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlersPackage</span><span class=\"params\">(String typeHandlersPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlersPackage = typeHandlersPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlers</span><span class=\"params\">(TypeHandler&lt;?&gt;[] typeHandlers)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlers = typeHandlers;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliases</span><span class=\"params\">(Class&lt;?&gt;[] typeAliases)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliases = typeAliases;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFailFast</span><span class=\"params\">(<span class=\"keyword\">boolean</span> failFast)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.failFast = failFast;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigLocation</span><span class=\"params\">(Resource configLocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configLocation = configLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMapperLocations</span><span class=\"params\">(Resource[] mapperLocations)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurationProperties</span><span class=\"params\">(Properties sqlSessionFactoryProperties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configurationProperties = sqlSessionFactoryProperties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((dataSource <span class=\"keyword\">instanceof</span> TransactionAwareDataSourceProxy)) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = dataSource;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSqlSessionFactoryBuilder</span><span class=\"params\">(SqlSessionFactoryBuilder sqlSessionFactoryBuilder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTransactionFactory</span><span class=\"params\">(TransactionFactory transactionFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.transactionFactory = transactionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEnvironment</span><span class=\"params\">(String environment)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.dataSource, <span class=\"string\">\"Property 'dataSource' is required\"</span>);</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.sqlSessionFactoryBuilder, <span class=\"string\">\"Property 'sqlSessionFactoryBuilder' is required\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactory = buildSqlSessionFactory();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SqlSessionFactory <span class=\"title\">buildSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        XMLConfigBuilder xmlConfigBuilder = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Configuration configuration;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.configLocation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            xmlConfigBuilder = <span class=\"keyword\">new</span> XMLConfigBuilder(<span class=\"keyword\">this</span>.configLocation.getInputStream(), <span class=\"keyword\">null</span>,</div><div class=\"line\">                    <span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">            configuration = xmlConfigBuilder.getConfiguration();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                logger.debug(<span class=\"string\">\"Property 'configLocation' not specified, using default MyBatis Configuration\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            configuration = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">            configuration.setVariables(<span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectFactory(<span class=\"keyword\">this</span>.objectFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectWrapperFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectWrapperFactory(<span class=\"keyword\">this</span>.objectWrapperFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeAliasesPackage)) &#123;</div><div class=\"line\">            String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeAliasesPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeAliasPackageArray) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    configuration.getTypeAliasRegistry().registerAliases(packageToScan,</div><div class=\"line\">                            typeAliasesSuperType == <span class=\"keyword\">null</span> ? Object.class : typeAliasesSuperType);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                    logger.error(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem end</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeAliases)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Class typeAlias : <span class=\"keyword\">this</span>.typeAliases) &#123;</div><div class=\"line\">                configuration.getTypeAliasRegistry().registerAlias(typeAlias);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type alias: '\"</span> + typeAlias + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.plugins)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Interceptor plugin : <span class=\"keyword\">this</span>.plugins) &#123;</div><div class=\"line\">                configuration.addInterceptor(plugin);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered plugin: '\"</span> + plugin + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeHandlersPackage)) &#123;</div><div class=\"line\">            String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeHandlersPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeHandlersPackageArray) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(packageToScan);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for type handlers\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeHandlers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (TypeHandler typeHandler : <span class=\"keyword\">this</span>.typeHandlers) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(typeHandler);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type handler: '\"</span> + typeHandler + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlConfigBuilder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlConfigBuilder.parse();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled())</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed configuration file: '\"</span> + <span class=\"keyword\">this</span>.configLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse config resource: \"</span> + <span class=\"keyword\">this</span>.configLocation, ex);</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                ErrorContext.instance().reset();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.transactionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.transactionFactory = <span class=\"keyword\">new</span> SpringManagedTransactionFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Environment environment = <span class=\"keyword\">new</span> Environment(<span class=\"keyword\">this</span>.environment, <span class=\"keyword\">this</span>.transactionFactory, <span class=\"keyword\">this</span>.dataSource);</div><div class=\"line\">        configuration.setEnvironment(environment);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.databaseIdProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                configuration.setDatabaseId(<span class=\"keyword\">this</span>.databaseIdProvider.getDatabaseId(<span class=\"keyword\">this</span>.dataSource));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed getting a databaseId\"</span>, e);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.mapperLocations)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Resource mapperLocation : <span class=\"keyword\">this</span>.mapperLocations) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mapperLocation == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(mapperLocation.getInputStream(),</div><div class=\"line\">                            configuration, mapperLocation.toString(), configuration.getSqlFragments());</div><div class=\"line\"></div><div class=\"line\">                    xmlMapperBuilder.parse();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                    logger.error(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed mapper file: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。</span></div><div class=\"line\">            <span class=\"keyword\">new</span> MapperRefresh(<span class=\"keyword\">this</span>.mapperLocations, configuration).run();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">            logger.debug(<span class=\"string\">\"Property 'mapperLocations' was not specified or no matching resources found\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder.build(configuration);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            afterPropertiesSet();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends SqlSessionFactory&gt; getObjectType() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span> ? SqlSessionFactory.class : <span class=\"keyword\">this</span>.sqlSessionFactory.getClass();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.failFast) &amp;&amp; ((event <span class=\"keyword\">instanceof</span> ContextRefreshedEvent))) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sqlSessionFactory.getConfiguration().getMappedStatementNames();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。<strong>重新部署当前项目</strong> Servers &gt; Tomcat 8.x &gt; 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。</p>\n</li>\n<li><p>去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"><br><br></div>\n</li>\n<li><p>这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用<a href=\"http://pan.baidu.com/s/1skKW2st\" target=\"_blank\" rel=\"external\"><em>jd-gui.exe(一款JAVA反编译工具)</em></a>比较是不是和上面写的代码对应！！！！</p>\n<p><strong>检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件</strong>。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"><br><br></div>\n\n<p>​</p>\n<h1 id=\"创建mybatis-refresh-properties文件\"><a href=\"#创建mybatis-refresh-properties文件\" class=\"headerlink\" title=\"创建mybatis-refresh.properties文件\"></a>创建mybatis-refresh.properties文件</h1><p>一切准备就绪，还剩下最后一个属性文件， 创建<strong>mybatis-refresh.properties</strong>文件，记得把文件格式改成<strong>UTF-8</strong>。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"><br><br></div>\n\n<p><strong>mybatis-refresh.properties文件内容为：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#是否开启刷新线程</div><div class=\"line\">enabled=true</div><div class=\"line\">#延迟启动刷新程序的秒数</div><div class=\"line\">delaySeconds=60  </div><div class=\"line\">#刷新扫描间隔的时长秒数</div><div class=\"line\">sleepSeconds=3</div><div class=\"line\">#扫描Mapper文件的资源路径</div><div class=\"line\">mappingPath=mapper</div></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ol>\n<li><p>删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。</p>\n</li>\n<li><p>启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！<strong>这样就不用重启项目，也能加载到你修改的mapper.xml文件了</strong> 。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"><br><br></div>\n\n</li>\n</ol>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>注意各个文件的位置和名称。</li>\n<li>注意<strong>MapperRefresh.java</strong>文件中<strong>mybatis-refresh.properties</strong>的路径。</li>\n<li>注意用jd-gui.exe<strong>检查编译后的SqlSessionFactoryBean.class文件</strong>。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    Spring+Mybatis经常用，在项目中最痛苦的就是修改mapper文件的时候需要重启一下项目，每修改一次就需要重启一次项目。项目小还好，如果项目大，重启一次项目简直是要命。所以，去网上查资料看有没有办法让mybatis热部署，每次更新mapper文件不需要重启项目。</p>\n<p>​    功夫不负有心人，终于找到了，这玩意只要发现mapper文件被修改，就会重新加载被修改的mapper文件。且<strong>只加载被修改的mapper文件</strong>！这个可省事了，效率又高，简直爽到爆。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/relationship-with-mybatis.png\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"创建MapperRefresh刷新类\"><a href=\"#创建MapperRefresh刷新类\" class=\"headerlink\" title=\"创建MapperRefresh刷新类\"></a>创建MapperRefresh刷新类</h1><p>在src下创建一个util包，包下面创建一个类，类名为：<strong>MapperRefresh</strong></p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/refresh.png\" algin=\"center\"/><br><br></div>\n\n<p>代码为下面的一串，注意修改下<strong>mybatis-refresh.properties</strong> 的路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.talkweb.nets.netsTestLib.data.util;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.File;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Map;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;  </div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Set;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.log4j.Logger;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;  </div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.google.common.collect.Sets;  </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** </div><div class=\"line\"> * 刷新MyBatis Mapper XML 线程 </div><div class=\"line\"> * <span class=\"doctag\">@author</span> ThinkGem 这个是原著的作者，我只是直接拿来用了，原著莫怪</div><div class=\"line\"> * <span class=\"doctag\">@version</span> 2016-5-29 </div><div class=\"line\"> */</span>  </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapperRefresh</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Runnable</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Logger log = Logger.getLogger(MapperRefresh.class);  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String filename = <span class=\"string\">\"mybatis-refresh.properties\"</span>;  <span class=\"comment\">//注意修改路径</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Properties prop = <span class=\"keyword\">new</span> Properties();  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> enabled;         <span class=\"comment\">// 是否启用Mapper刷新线程功能  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> refresh;         <span class=\"comment\">// 刷新启用后，是否启动了刷新线程  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; location;         <span class=\"comment\">// Mapper实际资源路径  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;     <span class=\"comment\">// Mapper资源路径  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> Configuration configuration;        <span class=\"comment\">// MyBatis配置对象  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Long beforeTime = <span class=\"number\">0L</span>;           <span class=\"comment\">// 上一次刷新时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> delaySeconds;        <span class=\"comment\">// 延迟刷新秒数  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sleepSeconds;        <span class=\"comment\">// 休眠时间  </span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String mappingPath;      <span class=\"comment\">// xml文件夹匹配字符串，需要根据需要修改  </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            prop.load(MapperRefresh.class.getResourceAsStream(filename));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Load mybatis-refresh “\"</span>+filename+<span class=\"string\">\"” file error.\"</span>);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        enabled = <span class=\"string\">\"true\"</span>.equalsIgnoreCase(getPropString(<span class=\"string\">\"enabled\"</span>));  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = getPropInt(<span class=\"string\">\"delaySeconds\"</span>);  </div><div class=\"line\">        sleepSeconds = getPropInt(<span class=\"string\">\"sleepSeconds\"</span>);  </div><div class=\"line\">        mappingPath = getPropString(<span class=\"string\">\"mappingPath\"</span>);  </div><div class=\"line\"></div><div class=\"line\">        delaySeconds = delaySeconds == <span class=\"number\">0</span> ? <span class=\"number\">50</span> : delaySeconds;  </div><div class=\"line\">        sleepSeconds = sleepSeconds == <span class=\"number\">0</span> ? <span class=\"number\">3</span> : sleepSeconds;  </div><div class=\"line\">        mappingPath = StringUtils.isBlank(mappingPath) ? <span class=\"string\">\"mappings\"</span> : mappingPath;  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[enabled] \"</span> + enabled);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[delaySeconds] \"</span> + delaySeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[sleepSeconds] \"</span> + sleepSeconds);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[mappingPath] \"</span> + mappingPath);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRefresh</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> refresh;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MapperRefresh</span><span class=\"params\">(Resource[] mapperLocations, Configuration configuration)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;  </div><div class=\"line\">        <span class=\"keyword\">this</span>.configuration = configuration;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        beforeTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        log.debug(<span class=\"string\">\"[location] \"</span> + location);  </div><div class=\"line\">        log.debug(<span class=\"string\">\"[configuration] \"</span> + configuration);  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (enabled) &#123;  </div><div class=\"line\">            <span class=\"comment\">// 启动刷新线程  </span></div><div class=\"line\">            <span class=\"keyword\">final</span> MapperRefresh runnable = <span class=\"keyword\">this</span>;  </div><div class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> java.lang.Runnable() &#123;  </div><div class=\"line\">                <span class=\"meta\">@Override</span>  </div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">if</span> (location == <span class=\"keyword\">null</span>)&#123;  </div><div class=\"line\">                        location = Sets.newHashSet();  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"MapperLocation's length:\"</span> + mapperLocations.length);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Resource mapperLocation : mapperLocations) &#123;  </div><div class=\"line\">                            String s = mapperLocation.toString().replaceAll(<span class=\"string\">\"\\\\\\\\\"</span>, <span class=\"string\">\"/\"</span>);  </div><div class=\"line\">                            s = s.substring(<span class=\"string\">\"file [\"</span>.length(), s.lastIndexOf(mappingPath) + mappingPath.length());  </div><div class=\"line\">                            <span class=\"keyword\">if</span> (!location.contains(s)) &#123;  </div><div class=\"line\">                                location.add(s);  </div><div class=\"line\">                                log.debug(<span class=\"string\">\"Location:\"</span> + s);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        log.debug(<span class=\"string\">\"Locarion's size:\"</span> + location.size());  </div><div class=\"line\">                    &#125;  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(delaySeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e2) &#123;  </div><div class=\"line\">                        e2.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                    refresh = <span class=\"keyword\">true</span>;  </div><div class=\"line\"></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"========= Enabled refresh mybatis mapper =========\"</span>);  </div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            <span class=\"keyword\">for</span> (String s : location) &#123;  </div><div class=\"line\">                                runnable.refresh(s, beforeTime);  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (Exception e1) &#123;  </div><div class=\"line\">                            e1.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                            Thread.sleep(sleepSeconds * <span class=\"number\">1000</span>);  </div><div class=\"line\">                        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                            e.printStackTrace();  </div><div class=\"line\">                        &#125;  </div><div class=\"line\"></div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;, <span class=\"string\">\"MyBatis-Mapper-Refresh\"</span>).start();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 执行刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> filePath 刷新目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> NestedIOException 解析异常 </div><div class=\"line\">     * <span class=\"doctag\">@throws</span> FileNotFoundException 文件未找到 </div><div class=\"line\">     * <span class=\"doctag\">@author</span> ThinkGem </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(&#123; <span class=\"string\">\"rawtypes\"</span>, <span class=\"string\">\"unchecked\"</span> &#125;)  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(String filePath, Long beforeTime)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 本次刷新时间  </span></div><div class=\"line\">        Long refrehTime = System.currentTimeMillis();  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取需要刷新的Mapper文件列表  </span></div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">this</span>.getRefreshFile(<span class=\"keyword\">new</span> File(filePath), beforeTime);  </div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.size());  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileList.size(); i++) &#123;  </div><div class=\"line\">            InputStream inputStream = <span class=\"keyword\">new</span> FileInputStream(fileList.get(i));  </div><div class=\"line\">            String resource = fileList.get(i).getAbsolutePath();  </div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理原有资源，更新为自己的StrictMap方便，增量重新加载  </span></div><div class=\"line\">                String[] mapFieldNames = <span class=\"keyword\">new</span> String[]&#123;  </div><div class=\"line\">                    <span class=\"string\">\"mappedStatements\"</span>, <span class=\"string\">\"caches\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"resultMaps\"</span>, <span class=\"string\">\"parameterMaps\"</span>,  </div><div class=\"line\">                    <span class=\"string\">\"keyGenerators\"</span>, <span class=\"string\">\"sqlFragments\"</span>  </div><div class=\"line\">                &#125;;  </div><div class=\"line\">                <span class=\"keyword\">for</span> (String fieldName : mapFieldNames)&#123;  </div><div class=\"line\">                    Field field = configuration.getClass().getDeclaredField(fieldName);  </div><div class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                    Map map = ((Map)field.get(configuration));  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (!(map <span class=\"keyword\">instanceof</span> StrictMap))&#123;  </div><div class=\"line\">                        Map newMap = <span class=\"keyword\">new</span> StrictMap(StringUtils.capitalize(fieldName) + <span class=\"string\">\"collection\"</span>);  </div><div class=\"line\">                        <span class=\"keyword\">for</span> (Object key : map.keySet())&#123;  </div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                                newMap.put(key, map.get(key));  </div><div class=\"line\">                            &#125;<span class=\"keyword\">catch</span>(IllegalArgumentException ex)&#123;  </div><div class=\"line\">                                newMap.put(key, ex.getMessage());  </div><div class=\"line\">                            &#125;  </div><div class=\"line\">                        &#125;  </div><div class=\"line\">                        field.set(configuration, newMap);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 清理已加载的资源标识，方便让它重新加载。  </span></div><div class=\"line\">                Field loadedResourcesField = configuration.getClass().getDeclaredField(<span class=\"string\">\"loadedResources\"</span>);  </div><div class=\"line\">                loadedResourcesField.setAccessible(<span class=\"keyword\">true</span>);  </div><div class=\"line\">                Set loadedResourcesSet = ((Set)loadedResourcesField.get(configuration));  </div><div class=\"line\">                loadedResourcesSet.remove(resource);  </div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//重新编译加载资源文件。  </span></div><div class=\"line\">                XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(inputStream, configuration,   </div><div class=\"line\">                        resource, configuration.getSqlFragments());  </div><div class=\"line\">                xmlMapperBuilder.parse();  </div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + resource + <span class=\"string\">\"'\"</span>, e);  </div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;  </div><div class=\"line\">                ErrorContext.instance().reset();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            System.out.println(<span class=\"string\">\"Refresh file: \"</span> + mappingPath + StringUtils.substringAfterLast(fileList.get(i).getAbsolutePath(), mappingPath));  </div><div class=\"line\">            <span class=\"keyword\">if</span> (log.isDebugEnabled()) &#123;  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh file: \"</span> + fileList.get(i).getAbsolutePath());  </div><div class=\"line\">                log.debug(<span class=\"string\">\"Refresh filename: \"</span> + fileList.get(i).getName());  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"comment\">// 如果刷新了文件，则修改刷新时间，否则不修改  </span></div><div class=\"line\">        <span class=\"keyword\">if</span> (fileList.size() &gt; <span class=\"number\">0</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">this</span>.beforeTime = refrehTime;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 获取需要刷新的文件列表 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> dir 目录 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 刷新文件列表 </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> List&lt;File&gt; <span class=\"title\">getRefreshFile</span><span class=\"params\">(File dir, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        List&lt;File&gt; fileList = <span class=\"keyword\">new</span> ArrayList&lt;File&gt;();  </div><div class=\"line\"></div><div class=\"line\">        File[] files = dir.listFiles();  </div><div class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; files.length; i++) &#123;  </div><div class=\"line\">                File file = files[i];  </div><div class=\"line\">                <span class=\"keyword\">if</span> (file.isDirectory()) &#123;  </div><div class=\"line\">                    fileList.addAll(<span class=\"keyword\">this</span>.getRefreshFile(file, beforeTime));  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (file.isFile()) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.checkFile(file, beforeTime)) &#123;  </div><div class=\"line\">                        fileList.add(file);  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Error file.\"</span> + file.getName());  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> fileList;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 判断文件是否需要刷新 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> file 文件 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> beforeTime 上次刷新时间 </div><div class=\"line\">     * <span class=\"doctag\">@return</span> 需要刷新返回true，否则返回false </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkFile</span><span class=\"params\">(File file, Long beforeTime)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (file.lastModified() &gt; beforeTime) &#123;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 获取整数属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getPropInt</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">            i = Integer.parseInt(getPropString(key));  </div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        <span class=\"keyword\">return</span> i;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 获取字符串属性 </div><div class=\"line\">     * <span class=\"doctag\">@param</span> key </div><div class=\"line\">     * <span class=\"doctag\">@return</span> </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getPropString</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"keyword\">return</span> prop == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : prop.getProperty(key);  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * 重写 org.apache.ibatis.session.Configuration.StrictMap 类 </div><div class=\"line\">     * 来自 MyBatis3.4.0版本，修改 put 方法，允许反复 put更新。 </div><div class=\"line\">     */</span>  </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StrictMap</span>&lt;<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">HashMap</span>&lt;<span class=\"title\">String</span>, <span class=\"title\">V</span>&gt; </span>&#123;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">4950446264854982944L</span>;  </div><div class=\"line\">        <span class=\"keyword\">private</span> String name;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity, loadFactor);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(initialCapacity);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>();  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StrictMap</span><span class=\"params\">(String name, Map&lt;String, ? extends V&gt; m)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">super</span>(m);  </div><div class=\"line\">            <span class=\"keyword\">this</span>.name = name;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)  </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(String key, V value)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem 如果现在状态为刷新，则刷新(先删除后添加)  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (MapperRefresh.isRefresh()) &#123;  </div><div class=\"line\">                remove(key);  </div><div class=\"line\">                MapperRefresh.log.debug(<span class=\"string\">\"refresh key:\"</span> + key.substring(key.lastIndexOf(<span class=\"string\">\".\"</span>) + <span class=\"number\">1</span>));  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"comment\">// ThinkGem end  </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (containsKey(key)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" already contains value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (key.contains(<span class=\"string\">\".\"</span>)) &#123;  </div><div class=\"line\">                <span class=\"keyword\">final</span> String shortKey = getShortName(key);  </div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">super</span>.get(shortKey) == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, value);  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    <span class=\"keyword\">super</span>.put(shortKey, (V) <span class=\"keyword\">new</span> Ambiguity(shortKey));  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.put(key, value);  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;  </div><div class=\"line\">            V value = <span class=\"keyword\">super</span>.get(key);  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(name + <span class=\"string\">\" does not contain value for \"</span> + key);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> Ambiguity) &#123;  </div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(((Ambiguity) value).getSubject() + <span class=\"string\">\" is ambiguous in \"</span> + name  </div><div class=\"line\">                        + <span class=\"string\">\" (try using the full name including the namespace, or rename one of the entries)\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">            <span class=\"keyword\">return</span> value;  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getShortName</span><span class=\"params\">(String key)</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">final</span> String[] keyparts = key.split(<span class=\"string\">\"\\\\.\"</span>);  </div><div class=\"line\">            <span class=\"keyword\">return</span> keyparts[keyparts.length - <span class=\"number\">1</span>];  </div><div class=\"line\">        &#125;  </div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Ambiguity</span> </span>&#123;  </div><div class=\"line\">            <span class=\"keyword\">private</span> String subject;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Ambiguity</span><span class=\"params\">(String subject)</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">this</span>.subject = subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\"></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getSubject</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">return</span> subject;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"重写SqlSessionFactoryBean\"><a href=\"#重写SqlSessionFactoryBean\" class=\"headerlink\" title=\"重写SqlSessionFactoryBean\"></a>重写SqlSessionFactoryBean</h1><p>MyBatis有几个不太好的地方，是当实体类别名重名的时候，Mapper XML有错误的时候，系统启动时会一直等待无法正常启动（其实是加载失败后又重新加载，进入了死循环），这里重写下SqlSessionFactoryBean.java文件，解决这个问题，在这个文件里也加入启动上面写的线程类：</p>\n<p>1、修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>2、MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动。<br>3、加入启动MapperRefresh.java线程服务。</p>\n<p>思路就是用我们<strong>自己重写的SqlSessionFactoryBean.class替换mybatis-spring-1.2.2.jar中的SqlSessionFactoryBean.class</strong>。</p>\n<ol>\n<li><p>在当前项目下新建一个包：右键 <em>src &gt; new Package &gt;</em> <em>org.mybatis.spring</em>，创建SqlSessionFactoryBean.java类。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlSessionfactory-java.png\" algin=\"center\"/><br><br></div>\n</li>\n<li><p>复制下面一串代码到SqlSessionFactoryBean.java，注意导入<code>MapperRefresh</code>正确的包。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.mybatis.spring;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.Properties;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLConfigBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.builder.xml.XMLMapperBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.executor.ErrorContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.DatabaseIdProvider;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.mapping.Environment;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.plugin.Interceptor;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.factory.ObjectFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.Configuration;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.transaction.TransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeAliasRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandler;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.type.TypeHandlerRegistry;</div><div class=\"line\"><span class=\"keyword\">import</span> org.mybatis.spring.transaction.SpringManagedTransactionFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.InitializingBean;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationListener;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.event.ContextRefreshedEvent;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.NestedIOException;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.core.io.Resource;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.Assert;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.ObjectUtils;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.util.StringUtils;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.talkweb.nets.netsTestLib.data.util.MapperRefresh;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqlSessionFactoryBean</span></div><div class=\"line\">        <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">SqlSessionFactory</span>&gt;, <span class=\"title\">InitializingBean</span>, <span class=\"title\">ApplicationListener</span>&lt;<span class=\"title\">ApplicationEvent</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Log logger = LogFactory.getLog(SqlSessionFactoryBean.class);</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource configLocation;</div><div class=\"line\">    <span class=\"keyword\">private</span> Resource[] mapperLocations;</div><div class=\"line\">    <span class=\"keyword\">private</span> DataSource dataSource;</div><div class=\"line\">    <span class=\"keyword\">private</span> TransactionFactory transactionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> Properties configurationProperties;</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder();</div><div class=\"line\">    <span class=\"keyword\">private</span> SqlSessionFactory sqlSessionFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> String environment = SqlSessionFactoryBean.class.getSimpleName();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> failFast;</div><div class=\"line\">    <span class=\"keyword\">private</span> Interceptor[] plugins;</div><div class=\"line\">    <span class=\"keyword\">private</span> TypeHandler&lt;?&gt;[] typeHandlers;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeHandlersPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt;[] typeAliases;</div><div class=\"line\">    <span class=\"keyword\">private</span> String typeAliasesPackage;</div><div class=\"line\">    <span class=\"keyword\">private</span> Class&lt;?&gt; typeAliasesSuperType;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabaseIdProvider databaseIdProvider;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectFactory objectFactory;</div><div class=\"line\">    <span class=\"keyword\">private</span> ObjectWrapperFactory objectWrapperFactory;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectFactory</span><span class=\"params\">(ObjectFactory objectFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectFactory = objectFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setObjectWrapperFactory</span><span class=\"params\">(ObjectWrapperFactory objectWrapperFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.objectWrapperFactory = objectWrapperFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DatabaseIdProvider <span class=\"title\">getDatabaseIdProvider</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDatabaseIdProvider</span><span class=\"params\">(DatabaseIdProvider databaseIdProvider)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.databaseIdProvider = databaseIdProvider;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPlugins</span><span class=\"params\">(Interceptor[] plugins)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.plugins = plugins;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesPackage</span><span class=\"params\">(String typeAliasesPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesPackage = typeAliasesPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliasesSuperType</span><span class=\"params\">(Class&lt;?&gt; typeAliasesSuperType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliasesSuperType = typeAliasesSuperType;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlersPackage</span><span class=\"params\">(String typeHandlersPackage)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlersPackage = typeHandlersPackage;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeHandlers</span><span class=\"params\">(TypeHandler&lt;?&gt;[] typeHandlers)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeHandlers = typeHandlers;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTypeAliases</span><span class=\"params\">(Class&lt;?&gt;[] typeAliases)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.typeAliases = typeAliases;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setFailFast</span><span class=\"params\">(<span class=\"keyword\">boolean</span> failFast)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.failFast = failFast;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigLocation</span><span class=\"params\">(Resource configLocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configLocation = configLocation;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMapperLocations</span><span class=\"params\">(Resource[] mapperLocations)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mapperLocations = mapperLocations;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setConfigurationProperties</span><span class=\"params\">(Properties sqlSessionFactoryProperties)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.configurationProperties = sqlSessionFactoryProperties;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDataSource</span><span class=\"params\">(DataSource dataSource)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((dataSource <span class=\"keyword\">instanceof</span> TransactionAwareDataSourceProxy)) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = ((TransactionAwareDataSourceProxy) dataSource).getTargetDataSource();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">this</span>.dataSource = dataSource;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSqlSessionFactoryBuilder</span><span class=\"params\">(SqlSessionFactoryBuilder sqlSessionFactoryBuilder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder = sqlSessionFactoryBuilder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTransactionFactory</span><span class=\"params\">(TransactionFactory transactionFactory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.transactionFactory = transactionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEnvironment</span><span class=\"params\">(String environment)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.environment = environment;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.dataSource, <span class=\"string\">\"Property 'dataSource' is required\"</span>);</div><div class=\"line\">        Assert.notNull(<span class=\"keyword\">this</span>.sqlSessionFactoryBuilder, <span class=\"string\">\"Property 'sqlSessionFactoryBuilder' is required\"</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">this</span>.sqlSessionFactory = buildSqlSessionFactory();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SqlSessionFactory <span class=\"title\">buildSqlSessionFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        XMLConfigBuilder xmlConfigBuilder = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Configuration configuration;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.configLocation != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            xmlConfigBuilder = <span class=\"keyword\">new</span> XMLConfigBuilder(<span class=\"keyword\">this</span>.configLocation.getInputStream(), <span class=\"keyword\">null</span>,</div><div class=\"line\">                    <span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">            configuration = xmlConfigBuilder.getConfiguration();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                logger.debug(<span class=\"string\">\"Property 'configLocation' not specified, using default MyBatis Configuration\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            configuration = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">            configuration.setVariables(<span class=\"keyword\">this</span>.configurationProperties);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectFactory(<span class=\"keyword\">this</span>.objectFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.objectWrapperFactory != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            configuration.setObjectWrapperFactory(<span class=\"keyword\">this</span>.objectWrapperFactory);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeAliasesPackage)) &#123;</div><div class=\"line\">            String[] typeAliasPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeAliasesPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeAliasPackageArray) &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem 修改实体类重名的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    configuration.getTypeAliasRegistry().registerAliases(packageToScan,</div><div class=\"line\">                            typeAliasesSuperType == <span class=\"keyword\">null</span> ? Object.class : typeAliasesSuperType);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                    logger.error(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>, ex);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">// 修改处：ThinkGem end</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for aliases\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeAliases)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Class typeAlias : <span class=\"keyword\">this</span>.typeAliases) &#123;</div><div class=\"line\">                configuration.getTypeAliasRegistry().registerAlias(typeAlias);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type alias: '\"</span> + typeAlias + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.plugins)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Interceptor plugin : <span class=\"keyword\">this</span>.plugins) &#123;</div><div class=\"line\">                configuration.addInterceptor(plugin);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered plugin: '\"</span> + plugin + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasLength(<span class=\"keyword\">this</span>.typeHandlersPackage)) &#123;</div><div class=\"line\">            String[] typeHandlersPackageArray = StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.typeHandlersPackage, <span class=\"string\">\",; \\t\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (String packageToScan : typeHandlersPackageArray) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(packageToScan);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Scanned package: '\"</span> + packageToScan + <span class=\"string\">\"' for type handlers\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.typeHandlers)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (TypeHandler typeHandler : <span class=\"keyword\">this</span>.typeHandlers) &#123;</div><div class=\"line\">                configuration.getTypeHandlerRegistry().register(typeHandler);</div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Registered type handler: '\"</span> + typeHandler + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlConfigBuilder != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlConfigBuilder.parse();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled())</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed configuration file: '\"</span> + <span class=\"keyword\">this</span>.configLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse config resource: \"</span> + <span class=\"keyword\">this</span>.configLocation, ex);</div><div class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                ErrorContext.instance().reset();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.transactionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.transactionFactory = <span class=\"keyword\">new</span> SpringManagedTransactionFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Environment environment = <span class=\"keyword\">new</span> Environment(<span class=\"keyword\">this</span>.environment, <span class=\"keyword\">this</span>.transactionFactory, <span class=\"keyword\">this</span>.dataSource);</div><div class=\"line\">        configuration.setEnvironment(environment);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.databaseIdProvider != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                configuration.setDatabaseId(<span class=\"keyword\">this</span>.databaseIdProvider.getDatabaseId(<span class=\"keyword\">this</span>.dataSource));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed getting a databaseId\"</span>, e);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(<span class=\"keyword\">this</span>.mapperLocations)) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (Resource mapperLocation : <span class=\"keyword\">this</span>.mapperLocations) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mapperLocation == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    XMLMapperBuilder xmlMapperBuilder = <span class=\"keyword\">new</span> XMLMapperBuilder(mapperLocation.getInputStream(),</div><div class=\"line\">                            configuration, mapperLocation.toString(), configuration.getSqlFragments());</div><div class=\"line\"></div><div class=\"line\">                    xmlMapperBuilder.parse();</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 修改处：ThinkGem MapperXML有错误的时候抛出并打印异常，否则系统会一直递归造成无法启动</span></div><div class=\"line\">                    logger.error(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedIOException(<span class=\"string\">\"Failed to parse mapping resource: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>, e);</div><div class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                    ErrorContext.instance().reset();</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">                    logger.debug(<span class=\"string\">\"Parsed mapper file: '\"</span> + mapperLocation + <span class=\"string\">\"'\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 修改处：ThinkGem 启动刷新MapperXML定时器（有助于开发者调试）。</span></div><div class=\"line\">            <span class=\"keyword\">new</span> MapperRefresh(<span class=\"keyword\">this</span>.mapperLocations, configuration).run();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</div><div class=\"line\">            logger.debug(<span class=\"string\">\"Property 'mapperLocations' was not specified or no matching resources found\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactoryBuilder.build(configuration);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            afterPropertiesSet();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> Class&lt;? extends SqlSessionFactory&gt; getObjectType() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.sqlSessionFactory == <span class=\"keyword\">null</span> ? SqlSessionFactory.class : <span class=\"keyword\">this</span>.sqlSessionFactory.getClass();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.failFast) &amp;&amp; ((event <span class=\"keyword\">instanceof</span> ContextRefreshedEvent))) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.sqlSessionFactory.getConfiguration().getMappedStatementNames();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>接下来我们就需要把这个SqlSessionFactoryBean.java文件编译成class文件，然后再复制到mybatis-spring-1.2.2.jar包里面 。<strong>重新部署当前项目</strong> Servers &gt; Tomcat 8.x &gt; 右键你的项目 Remove deployment 然后再 Add Deployment…你的项目。</p>\n</li>\n<li><p>去Tomcat 8的根目录找到对应的SqlSessionFactoryBean.class文件复制出来。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/sqlsessionfactory-class.jpg\" algin=\"center\"/><br><br></div>\n</li>\n<li><p>这里记得检查一下编译过的class文件是否正确，将你编译好的SqlSessionFactoryBean.class文件再次拖入，用<a href=\"http://pan.baidu.com/s/1skKW2st\"><em>jd-gui.exe(一款JAVA反编译工具)</em></a>比较是不是和上面写的代码对应！！！！</p>\n<p><strong>检查无误之后，把SqlSessionFactoryBean.class复制到mybatis-spring-1.2.2.jar(是你本地项目中的jar)包中，替换原来的class文件</strong>。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/%E6%9B%BF%E6%8D%A2class%E6%96%87%E4%BB%B6.png\" algin=\"center\"/><br><br></div>\n\n<p>​</p>\n<h1 id=\"创建mybatis-refresh-properties文件\"><a href=\"#创建mybatis-refresh-properties文件\" class=\"headerlink\" title=\"创建mybatis-refresh.properties文件\"></a>创建mybatis-refresh.properties文件</h1><p>一切准备就绪，还剩下最后一个属性文件， 创建<strong>mybatis-refresh.properties</strong>文件，记得把文件格式改成<strong>UTF-8</strong>。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/properties%E6%96%87%E4%BB%B6.png\" algin=\"center\"/><br><br></div>\n\n<p><strong>mybatis-refresh.properties文件内容为：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">#是否开启刷新线程</div><div class=\"line\">enabled=true</div><div class=\"line\">#延迟启动刷新程序的秒数</div><div class=\"line\">delaySeconds=60  </div><div class=\"line\">#刷新扫描间隔的时长秒数</div><div class=\"line\">sleepSeconds=3</div><div class=\"line\">#扫描Mapper文件的资源路径</div><div class=\"line\">mappingPath=mapper</div></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ol>\n<li><p>删除org.mybatis.spring包及下面的SqlSessionFactoryBean.java文件。</p>\n</li>\n<li><p>启动项目，然后随便修改一个mapper.xml文件，然后稍等片刻，在控制台出现如下输出，就表示你成功啦！<strong>这样就不用重启项目，也能加载到你修改的mapper.xml文件了</strong> 。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-15/mybatis-mapper/success.png\" algin=\"center\"/><br><br></div>\n\n</li>\n</ol>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><ol>\n<li>注意各个文件的位置和名称。</li>\n<li>注意<strong>MapperRefresh.java</strong>文件中<strong>mybatis-refresh.properties</strong>的路径。</li>\n<li>注意用jd-gui.exe<strong>检查编译后的SqlSessionFactoryBean.class文件</strong>。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>"},{"title":"博客建成第一天","date":"2017-03-07T05:30:26.000Z","_content":"> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","source":"_posts/博客建成第一天.md","raw":"---\ntitle: 博客建成第一天\ndate: 2017-03-7 13:30:26\ntags: [firstday]\ncategories: life\n---\n> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","slug":"博客建成第一天","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfat0014swg60mfcbj32","content":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=\"center\"><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"></div>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n"},{"title":"微信公众号网页开发","date":"2017-06-01T07:27:34.000Z","_content":"\n# 前言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","source":"_posts/微信公众号网页开发.md","raw":"---\ntitle: 微信公众号网页开发\ndate: 2017-06-01 15:27:34\ntags: [js,移动端]\ncategories: technology\n---\n\n# 前言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","slug":"微信公众号网页开发","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfat0017swg6be10eqvx","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\" target=\"_blank\" rel=\"external\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>"},{"title":"浅谈共享单车","date":"2017-03-24T09:40:22.000Z","_content":"\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","source":"_posts/浅谈共享单车.md","raw":"---\ntitle: 浅谈共享单车\ndate: 2017-03-24 17:40:22\ntags: [nowHot]\ncategories: society\n---\n\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","slug":"浅谈共享单车","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfat001cswg6f3w4qzpb","content":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=\"center\"><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\" target=\"_blank\" rel=\"external\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\" target=\"_blank\" rel=\"external\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>","more":"<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>"},{"title":"系统中功能点的版本控制","date":"2017-09-21T10:40:41.000Z","_content":"\n# 前言\n\n​\t开发过程中我们会使用`版本控制工具`，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要`记录每一次修改的详细信息`，`每次版本之间的差异`，甚至还可以`版本回滚`。\n\n​\t例如题目编号为*20170919170800000061*的题目被*A*创建，依次被*B*、*C*、*D*各修改了一次，此时需要比较*B*和*A*间的差异、*C*和*B*间的差异、*D*和*C*间的差异，到最后审核阶段如果*B* 的版本比较符合，则需要把试题版本内容回滚到*B*版本作为最后的版本。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n仔细分析一下题干，我们的需求是*1.比较版本的差异，2.版本的回滚*。之前有考虑过两种方案：\n\n1. 修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。\n2. 把所有版本信息全部存储在数据库，在请求时后台进行比较差异。\n\n第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。\n\n下图是数据库中的版本修改记录\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"/>\n\n</div>\n\n题目的所有信息全部存储在**itemJson**中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。\n\n通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。\n\n# 版本差异（比较Json的方法）\n\n计较两个Json(X，Y)，其中可能情况：\n\n1. X和Y中均有相同字段\n2. X中存在Y中不存在的字段\n3. Y中存在X中不存在的字段\n\n需要掌握：\n\n1. **各个字段的用处和意义**\n2. **字段在Map、Json、JavaBean、List、JsonString形态之间的转换**\n\n## 通过Map间接比较\n\n### 引入Maven依赖\n\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-annotations</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>23.0</version>\n</dependency>\n```\n\n### 定义静态工具类\n\n```java\n//处理json字符串\npublic static <T> T readJsonToObject(String jsonString, TypeReference<T> tr) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    if (jsonString == null || \"\".equals(jsonString)) {\n        return null;\n    } else {\n        try {\n            return (T) objectMapper.readValue(jsonString, tr);\n        } catch (Exception e) {\n\n            logger.debug(\"json error:\" + e);\n        }\n    }\n    return null;\n}\n```\n\n### 定义Map比较的工具类\n\n​\t通过google的`guava`表达式中的 *Maps.difference(map1,map2)*方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：\n\n```java\npublic static List<Map<String, String>> compareMap(Map<String, Object> oldVersion, Map<String, Object> newVersion) {\n        MapDifference<String, Object> difference = Maps.difference(oldVersion, newVersion);\n\n        // 获取所有不同点\n        Map<String, MapDifference.ValueDifference<Object>> differenceMap = difference.entriesDiffering();\n        List<Map<String, String>> result = new ArrayList<>();\n        Iterator diffIterator = differenceMap.entrySet().iterator();\n        while (diffIterator.hasNext()) {\n            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();\n\n            MapDifference.ValueDifference<Object> valueDifference = (MapDifference.ValueDifference<Object>) entry\n                    .getValue();\n            boolean isList = valueDifference.leftValue() instanceof List\n                    && valueDifference.rightValue() instanceof List;\n            boolean isMap = valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map;\n            if (!isList && !isMap) {\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n\n                // 选择题中选项内容改变\n                if (oldVersion.get(\"content\") != null && oldVersion.get(\"name\") != null) {\n                    map.put(\"fieldName\", judgeOption(oldVersion.get(\"name\").toString()));\n                } else {\n                    map.put(\"fieldName\", judgeFiledName(fieldKey));\n                }\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));\n                map.put(\"newValue\", judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));\n                result.add(map);\n            }\n\n            // 处理结果是否为List,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof List && valueDifference.rightValue() instanceof List) {\n                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));\n                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));\n                JSONObject js = new JSONObject();\n                JSONObject js1 = new JSONObject();\n                for (int i = 0; i < j.size(); i++) {\n                    js.put(i + \"\", j.get(i));\n                }\n                for (int i = 0; i < p.size(); i++) {\n                    js1.put(i + \"\", p.get(i));\n                }\n                Map<String, Object> requestMap = JsonUtils.readJsonToObject(js.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                Map<String, Object> requestMap1 = JsonUtils.readJsonToObject(js1.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                List<Map<String, String>> m = compareMap(requestMap, requestMap1);  //当修改多个选项\n                for (int i = 0; i < m.size(); i++) {\n                    result.add(compareMap(requestMap, requestMap1).get(i));\n                }\n            }\n            // 处理结果是否为Map,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map) {\n                result.add(compareMap((Map<String, Object>) valueDifference.leftValue(),\n                        (Map<String, Object>) valueDifference.rightValue()).get(0));\n            }\n        }\n\n        // 若A中有B中不存在的值\n        Map<String, Object> entriesOnlyOnLeft = difference.entriesOnlyOnLeft();\n        if (entriesOnlyOnLeft != null && !entriesOnlyOnLeft.isEmpty()) {\n\n            Iterator it = entriesOnlyOnLeft.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = entry.getKey();\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                map.put(\"newValue\", \"\");\n                result.add(map);\n            }\n        }\n\n        // 若B中有A中不存在的值\n        Map<String, Object> onlyOnRightMap = difference.entriesOnlyOnRight();\n        if (onlyOnRightMap != null && !onlyOnRightMap.isEmpty()) {\n            Iterator it = onlyOnRightMap.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", \"\");\n                map.put(\"newValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                result.add(map);\n            }\n        }\n        return result;\n    }\n```\n\n### 定义静态调用方法\n\n```java\npublic static List<Map<String, String>> compareJSON(String jsonOld, String jsonNew) {\n        Map<String, Object> oldVersion = JsonUtils.readJsonToObject(jsonOld, new TypeReference<Map<String, Object>>() {\n        });\n        Map<String, Object> newVersion = JsonUtils.readJsonToObject(jsonNew, new TypeReference<Map<String, Object>>() {\n        });\n        return compareMap(oldVersion, newVersion);\n }\n```\n\n### 返回结果\n\n经过处理后的返回结果\n\n```json\n[\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"分数\",\n                    \"fieldKey\": \"score\",\n                    \"oldValue\": \"8\"\n                },\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"教材依据\",\n                    \"fieldKey\": \"teachingMaterialBasis\",\n                    \"oldValue\": \"2\"\n                },\n                {\n                    \"newValue\": \"2\",\n                    \"fieldName\": \"大纲依据\",\n                    \"fieldKey\": \"syllabusBasis\",\n                    \"oldValue\": \"1\"\n                },\n                {\n                    \"newValue\": \"1.0\",\n                    \"fieldName\": \"难度系数\",\n                    \"fieldKey\": \"difficult\",\n                    \"oldValue\": \"0.4\"\n                },\n                {\n                    \"newValue\": \"掌握\",\n                    \"fieldName\": \"能力层次\",\n                    \"fieldKey\": \"abilityLevel\",\n                    \"oldValue\": \"熟悉\"\n                },\n                {\n                    \"newValue\": \"测试关键词\",\n                    \"fieldName\": \"关键字\",\n                    \"fieldKey\": \"keyWord\",\n                    \"oldValue\": \"个\"\n                }\n            ]\n```\n\n查看所有源码点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip)\n\n## 转为JavaBean比较\n\n将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。\n\n### 引入Javers的Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>org.javers</groupId>\n\t\t<artifactId>javers-core</artifactId>\n\t\t<version>3.5.0</version>\n\t</dependency>\n```\n\n### 将itemJson转为JavaBean\n\n#### 方式一：利用Jackson\n\n##### 工具类JsonUtils\n\n```java\npublic class JsonUtils {\n    // 定义jackson对象\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    /**\n     * 将对象转换成json字符串。\n     * <p>Title: pojoToJson</p>\n     * <p>Description: </p>\n     * @param data\n     * @return\n     */\n    public static String objectToJson(Object data) {\n    \ttry {\n\t\t\tString string = MAPPER.writeValueAsString(data);\n\t\t\treturn string;\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \treturn null;\n    }\n    \n    /**\n     * 将json结果集转化为对象\n     * \n     * @param jsonData json数据\n     * @param clazz 对象中的object类型\n     * @return\n     */\n    public static <T> T jsonToPojo(String jsonData, Class<T> beanType) {\n        try {\n            T t = MAPPER.readValue(jsonData, beanType);\n            return t;\n        } catch (Exception e) {\n        \te.printStackTrace();\n        }\n        return null;\n    }\n    \n    /**\n     * 将json数据转换成pojo对象list\n     * <p>Title: jsonToList</p>\n     * <p>Description: </p>\n     * @param jsonData\n     * @param beanType\n     * @return\n     */\n    public static <T>List<T> jsonToList(String jsonData, Class<T> beanType) {\n    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);\n    \ttry {\n    \t\tList<T> list = MAPPER.readValue(jsonData, javaType);\n    \t\treturn list;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \t\n    \treturn null;\n    }\n}\n```\n\n##### \tJson转Pojo\n\n```java\nItem item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);\nItem item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);\n```\n\n#### 方式二：利用fastJson\n\n##### 引入Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>com.alibaba</groupId>\n\t\t<artifactId>fastjson</artifactId>\n\t\t<version>1.1.26</version>\n\t</dependency>\n```\n\n##### Json转Pojo\n\n```java\nItem item1 = JSONObject.parseObject(json3, Item.class);\nItem item2 = JSONObject.parseObject(json4, Item.class);\n```\n\n### 利用Javers比较JavaBean\n\n```java\nJavers j = JaversBuilder.javers().build();\n        Diff diff = j.compare(item1, item2);\n        if (diff.hasChanges()) {\n            List<Change> changes = diff.getChanges();\n            for (Change change : changes) {\n                if (change instanceof ValueChange) {\n                    ValueChange valChange = (ValueChange) change;\n                    System.out.println(valChange.getPropertyName() + \" -- \" + valChange.getLeft() + \"--\" + valChange.getRight());\n                }\n            }\n        }\n```\n\n# 版本回滚\n\n​\t其实版本回滚在上面的比较中已经说了，就是把**需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录**即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n\n# 总结\n\n1. 熟悉业务。\n2. 掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n3. 版本需要存储所有信息便于回滚。\n4. 个人倾向使用Javers比较JavaBean进行比较版本差异。","source":"_posts/系统中功能点的版本控制.md","raw":"---\ntitle: 系统中功能点的版本控制\ndate: 2017-09-21 18:40:41\ntags: [java,tips]\ncategories: technology\n---\n\n# 前言\n\n​\t开发过程中我们会使用`版本控制工具`，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要`记录每一次修改的详细信息`，`每次版本之间的差异`，甚至还可以`版本回滚`。\n\n​\t例如题目编号为*20170919170800000061*的题目被*A*创建，依次被*B*、*C*、*D*各修改了一次，此时需要比较*B*和*A*间的差异、*C*和*B*间的差异、*D*和*C*间的差异，到最后审核阶段如果*B* 的版本比较符合，则需要把试题版本内容回滚到*B*版本作为最后的版本。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n仔细分析一下题干，我们的需求是*1.比较版本的差异，2.版本的回滚*。之前有考虑过两种方案：\n\n1. 修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。\n2. 把所有版本信息全部存储在数据库，在请求时后台进行比较差异。\n\n第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。\n\n下图是数据库中的版本修改记录\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"/>\n\n</div>\n\n题目的所有信息全部存储在**itemJson**中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。\n\n通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。\n\n# 版本差异（比较Json的方法）\n\n计较两个Json(X，Y)，其中可能情况：\n\n1. X和Y中均有相同字段\n2. X中存在Y中不存在的字段\n3. Y中存在X中不存在的字段\n\n需要掌握：\n\n1. **各个字段的用处和意义**\n2. **字段在Map、Json、JavaBean、List、JsonString形态之间的转换**\n\n## 通过Map间接比较\n\n### 引入Maven依赖\n\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-annotations</artifactId>\n    <version>2.9.1</version>\n</dependency>\n<dependency>\n    <groupId>com.google.guava</groupId>\n    <artifactId>guava</artifactId>\n    <version>23.0</version>\n</dependency>\n```\n\n### 定义静态工具类\n\n```java\n//处理json字符串\npublic static <T> T readJsonToObject(String jsonString, TypeReference<T> tr) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    if (jsonString == null || \"\".equals(jsonString)) {\n        return null;\n    } else {\n        try {\n            return (T) objectMapper.readValue(jsonString, tr);\n        } catch (Exception e) {\n\n            logger.debug(\"json error:\" + e);\n        }\n    }\n    return null;\n}\n```\n\n### 定义Map比较的工具类\n\n​\t通过google的`guava`表达式中的 *Maps.difference(map1,map2)*方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：\n\n```java\npublic static List<Map<String, String>> compareMap(Map<String, Object> oldVersion, Map<String, Object> newVersion) {\n        MapDifference<String, Object> difference = Maps.difference(oldVersion, newVersion);\n\n        // 获取所有不同点\n        Map<String, MapDifference.ValueDifference<Object>> differenceMap = difference.entriesDiffering();\n        List<Map<String, String>> result = new ArrayList<>();\n        Iterator diffIterator = differenceMap.entrySet().iterator();\n        while (diffIterator.hasNext()) {\n            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();\n\n            MapDifference.ValueDifference<Object> valueDifference = (MapDifference.ValueDifference<Object>) entry\n                    .getValue();\n            boolean isList = valueDifference.leftValue() instanceof List\n                    && valueDifference.rightValue() instanceof List;\n            boolean isMap = valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map;\n            if (!isList && !isMap) {\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n\n                // 选择题中选项内容改变\n                if (oldVersion.get(\"content\") != null && oldVersion.get(\"name\") != null) {\n                    map.put(\"fieldName\", judgeOption(oldVersion.get(\"name\").toString()));\n                } else {\n                    map.put(\"fieldName\", judgeFiledName(fieldKey));\n                }\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));\n                map.put(\"newValue\", judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));\n                result.add(map);\n            }\n\n            // 处理结果是否为List,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof List && valueDifference.rightValue() instanceof List) {\n                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));\n                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));\n                JSONObject js = new JSONObject();\n                JSONObject js1 = new JSONObject();\n                for (int i = 0; i < j.size(); i++) {\n                    js.put(i + \"\", j.get(i));\n                }\n                for (int i = 0; i < p.size(); i++) {\n                    js1.put(i + \"\", p.get(i));\n                }\n                Map<String, Object> requestMap = JsonUtils.readJsonToObject(js.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                Map<String, Object> requestMap1 = JsonUtils.readJsonToObject(js1.toString(),\n                        new TypeReference<Map<String, Object>>() {\n                        });\n                List<Map<String, String>> m = compareMap(requestMap, requestMap1);  //当修改多个选项\n                for (int i = 0; i < m.size(); i++) {\n                    result.add(compareMap(requestMap, requestMap1).get(i));\n                }\n            }\n            // 处理结果是否为Map,则递归执行比较规则\n            if (valueDifference.leftValue() instanceof Map && valueDifference.rightValue() instanceof Map) {\n                result.add(compareMap((Map<String, Object>) valueDifference.leftValue(),\n                        (Map<String, Object>) valueDifference.rightValue()).get(0));\n            }\n        }\n\n        // 若A中有B中不存在的值\n        Map<String, Object> entriesOnlyOnLeft = difference.entriesOnlyOnLeft();\n        if (entriesOnlyOnLeft != null && !entriesOnlyOnLeft.isEmpty()) {\n\n            Iterator it = entriesOnlyOnLeft.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = entry.getKey();\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                map.put(\"newValue\", \"\");\n                result.add(map);\n            }\n        }\n\n        // 若B中有A中不存在的值\n        Map<String, Object> onlyOnRightMap = difference.entriesOnlyOnRight();\n        if (onlyOnRightMap != null && !onlyOnRightMap.isEmpty()) {\n            Iterator it = onlyOnRightMap.entrySet().iterator();\n            while (it.hasNext()) {\n                Map.Entry<String, String> entry = (java.util.Map.Entry) it.next();\n                Map<String, String> map = new HashMap<>();\n                String fieldKey = String.valueOf(entry.getKey());\n                map.put(\"fieldKey\", fieldKey);\n                map.put(\"fieldName\", judgeFiledName(fieldKey));\n                map.put(\"oldValue\", \"\");\n                map.put(\"newValue\", judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));\n                result.add(map);\n            }\n        }\n        return result;\n    }\n```\n\n### 定义静态调用方法\n\n```java\npublic static List<Map<String, String>> compareJSON(String jsonOld, String jsonNew) {\n        Map<String, Object> oldVersion = JsonUtils.readJsonToObject(jsonOld, new TypeReference<Map<String, Object>>() {\n        });\n        Map<String, Object> newVersion = JsonUtils.readJsonToObject(jsonNew, new TypeReference<Map<String, Object>>() {\n        });\n        return compareMap(oldVersion, newVersion);\n }\n```\n\n### 返回结果\n\n经过处理后的返回结果\n\n```json\n[\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"分数\",\n                    \"fieldKey\": \"score\",\n                    \"oldValue\": \"8\"\n                },\n                {\n                    \"newValue\": \"10\",\n                    \"fieldName\": \"教材依据\",\n                    \"fieldKey\": \"teachingMaterialBasis\",\n                    \"oldValue\": \"2\"\n                },\n                {\n                    \"newValue\": \"2\",\n                    \"fieldName\": \"大纲依据\",\n                    \"fieldKey\": \"syllabusBasis\",\n                    \"oldValue\": \"1\"\n                },\n                {\n                    \"newValue\": \"1.0\",\n                    \"fieldName\": \"难度系数\",\n                    \"fieldKey\": \"difficult\",\n                    \"oldValue\": \"0.4\"\n                },\n                {\n                    \"newValue\": \"掌握\",\n                    \"fieldName\": \"能力层次\",\n                    \"fieldKey\": \"abilityLevel\",\n                    \"oldValue\": \"熟悉\"\n                },\n                {\n                    \"newValue\": \"测试关键词\",\n                    \"fieldName\": \"关键字\",\n                    \"fieldKey\": \"keyWord\",\n                    \"oldValue\": \"个\"\n                }\n            ]\n```\n\n查看所有源码点击：[*下载*](http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip)\n\n## 转为JavaBean比较\n\n将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。\n\n### 引入Javers的Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>org.javers</groupId>\n\t\t<artifactId>javers-core</artifactId>\n\t\t<version>3.5.0</version>\n\t</dependency>\n```\n\n### 将itemJson转为JavaBean\n\n#### 方式一：利用Jackson\n\n##### 工具类JsonUtils\n\n```java\npublic class JsonUtils {\n    // 定义jackson对象\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    /**\n     * 将对象转换成json字符串。\n     * <p>Title: pojoToJson</p>\n     * <p>Description: </p>\n     * @param data\n     * @return\n     */\n    public static String objectToJson(Object data) {\n    \ttry {\n\t\t\tString string = MAPPER.writeValueAsString(data);\n\t\t\treturn string;\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \treturn null;\n    }\n    \n    /**\n     * 将json结果集转化为对象\n     * \n     * @param jsonData json数据\n     * @param clazz 对象中的object类型\n     * @return\n     */\n    public static <T> T jsonToPojo(String jsonData, Class<T> beanType) {\n        try {\n            T t = MAPPER.readValue(jsonData, beanType);\n            return t;\n        } catch (Exception e) {\n        \te.printStackTrace();\n        }\n        return null;\n    }\n    \n    /**\n     * 将json数据转换成pojo对象list\n     * <p>Title: jsonToList</p>\n     * <p>Description: </p>\n     * @param jsonData\n     * @param beanType\n     * @return\n     */\n    public static <T>List<T> jsonToList(String jsonData, Class<T> beanType) {\n    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);\n    \ttry {\n    \t\tList<T> list = MAPPER.readValue(jsonData, javaType);\n    \t\treturn list;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n    \t\n    \treturn null;\n    }\n}\n```\n\n##### \tJson转Pojo\n\n```java\nItem item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);\nItem item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);\n```\n\n#### 方式二：利用fastJson\n\n##### 引入Maven依赖\n\n```xml\n\t<dependency>\n\t\t<groupId>com.alibaba</groupId>\n\t\t<artifactId>fastjson</artifactId>\n\t\t<version>1.1.26</version>\n\t</dependency>\n```\n\n##### Json转Pojo\n\n```java\nItem item1 = JSONObject.parseObject(json3, Item.class);\nItem item2 = JSONObject.parseObject(json4, Item.class);\n```\n\n### 利用Javers比较JavaBean\n\n```java\nJavers j = JaversBuilder.javers().build();\n        Diff diff = j.compare(item1, item2);\n        if (diff.hasChanges()) {\n            List<Change> changes = diff.getChanges();\n            for (Change change : changes) {\n                if (change instanceof ValueChange) {\n                    ValueChange valChange = (ValueChange) change;\n                    System.out.println(valChange.getPropertyName() + \" -- \" + valChange.getLeft() + \"--\" + valChange.getRight());\n                }\n            }\n        }\n```\n\n# 版本回滚\n\n​\t其实版本回滚在上面的比较中已经说了，就是把**需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录**即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n\n# 总结\n\n1. 熟悉业务。\n2. 掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。\n3. 版本需要存储所有信息便于回滚。\n4. 个人倾向使用Javers比较JavaBean进行比较版本差异。","slug":"系统中功能点的版本控制","published":1,"updated":"2017-09-25T07:48:14.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfat001fswg614ysco9e","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    开发过程中我们会使用<code>版本控制工具</code>，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要<code>记录每一次修改的详细信息</code>，<code>每次版本之间的差异</code>，甚至还可以<code>版本回滚</code>。</p>\n<p>​    例如题目编号为<em>20170919170800000061</em>的题目被<em>A</em>创建，依次被<em>B</em>、<em>C</em>、<em>D</em>各修改了一次，此时需要比较<em>B</em>和<em>A</em>间的差异、<em>C</em>和<em>B</em>间的差异、<em>D</em>和<em>C</em>间的差异，到最后审核阶段如果<em>B</em> 的版本比较符合，则需要把试题版本内容回滚到<em>B</em>版本作为最后的版本。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<p>仔细分析一下题干，我们的需求是<em>1.比较版本的差异，2.版本的回滚</em>。之前有考虑过两种方案：</p>\n<ol>\n<li>修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。</li>\n<li>把所有版本信息全部存储在数据库，在请求时后台进行比较差异。</li>\n</ol>\n<p>第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。</p>\n<p>下图是数据库中的版本修改记录</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"><br><br></div>\n\n<p>题目的所有信息全部存储在<strong>itemJson</strong>中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。</p>\n<p>通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。</p>\n<h1 id=\"版本差异（比较Json的方法）\"><a href=\"#版本差异（比较Json的方法）\" class=\"headerlink\" title=\"版本差异（比较Json的方法）\"></a>版本差异（比较Json的方法）</h1><p>计较两个Json(X，Y)，其中可能情况：</p>\n<ol>\n<li>X和Y中均有相同字段</li>\n<li>X中存在Y中不存在的字段</li>\n<li>Y中存在X中不存在的字段</li>\n</ol>\n<p>需要掌握：</p>\n<ol>\n<li><strong>各个字段的用处和意义</strong></li>\n<li><strong>字段在Map、Json、JavaBean、List、JsonString形态之间的转换</strong></li>\n</ol>\n<h2 id=\"通过Map间接比较\"><a href=\"#通过Map间接比较\" class=\"headerlink\" title=\"通过Map间接比较\"></a>通过Map间接比较</h2><h3 id=\"引入Maven依赖\"><a href=\"#引入Maven依赖\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>23.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"定义静态工具类\"><a href=\"#定义静态工具类\" class=\"headerlink\" title=\"定义静态工具类\"></a>定义静态工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理json字符串</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">readJsonToObject</span><span class=\"params\">(String jsonString, TypeReference&lt;T&gt; tr)</span> </span>&#123;</div><div class=\"line\">    ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (jsonString == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(jsonString)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) objectMapper.readValue(jsonString, tr);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">            logger.debug(<span class=\"string\">\"json error:\"</span> + e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义Map比较的工具类\"><a href=\"#定义Map比较的工具类\" class=\"headerlink\" title=\"定义Map比较的工具类\"></a>定义Map比较的工具类</h3><p>​    通过google的<code>guava</code>表达式中的 <em>Maps.difference(map1,map2)</em>方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareMap(Map&lt;String, Object&gt; oldVersion, Map&lt;String, Object&gt; newVersion) &#123;</div><div class=\"line\">        MapDifference&lt;String, Object&gt; difference = Maps.difference(oldVersion, newVersion);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取所有不同点</span></div><div class=\"line\">        Map&lt;String, MapDifference.ValueDifference&lt;Object&gt;&gt; differenceMap = difference.entriesDiffering();</div><div class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        Iterator diffIterator = differenceMap.entrySet().iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span> (diffIterator.hasNext()) &#123;</div><div class=\"line\">            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();</div><div class=\"line\"></div><div class=\"line\">            MapDifference.ValueDifference&lt;Object&gt; valueDifference = (MapDifference.ValueDifference&lt;Object&gt;) entry</div><div class=\"line\">                    .getValue();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isList = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List</div><div class=\"line\">                    &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isMap = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isList &amp;&amp; !isMap) &#123;</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 选择题中选项内容改变</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (oldVersion.get(<span class=\"string\">\"content\"</span>) != <span class=\"keyword\">null</span> &amp;&amp; oldVersion.get(<span class=\"string\">\"name\"</span>) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeOption(oldVersion.get(<span class=\"string\">\"name\"</span>).toString()));</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为List,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List) &#123;</div><div class=\"line\">                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));</div><div class=\"line\">                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));</div><div class=\"line\">                JSONObject js = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                JSONObject js1 = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; j.size(); i++) &#123;</div><div class=\"line\">                    js.put(i + <span class=\"string\">\"\"</span>, j.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); i++) &#123;</div><div class=\"line\">                    js1.put(i + <span class=\"string\">\"\"</span>, p.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap = JsonUtils.readJsonToObject(js.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap1 = JsonUtils.readJsonToObject(js1.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                List&lt;Map&lt;String, String&gt;&gt; m = compareMap(requestMap, requestMap1);  <span class=\"comment\">//当修改多个选项</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m.size(); i++) &#123;</div><div class=\"line\">                    result.add(compareMap(requestMap, requestMap1).get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为Map,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map) &#123;</div><div class=\"line\">                result.add(compareMap((Map&lt;String, Object&gt;) valueDifference.leftValue(),</div><div class=\"line\">                        (Map&lt;String, Object&gt;) valueDifference.rightValue()).get(<span class=\"number\">0</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若A中有B中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; entriesOnlyOnLeft = difference.entriesOnlyOnLeft();</div><div class=\"line\">        <span class=\"keyword\">if</span> (entriesOnlyOnLeft != <span class=\"keyword\">null</span> &amp;&amp; !entriesOnlyOnLeft.isEmpty()) &#123;</div><div class=\"line\"></div><div class=\"line\">            Iterator it = entriesOnlyOnLeft.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = entry.getKey();</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若B中有A中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; onlyOnRightMap = difference.entriesOnlyOnRight();</div><div class=\"line\">        <span class=\"keyword\">if</span> (onlyOnRightMap != <span class=\"keyword\">null</span> &amp;&amp; !onlyOnRightMap.isEmpty()) &#123;</div><div class=\"line\">            Iterator it = onlyOnRightMap.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义静态调用方法\"><a href=\"#定义静态调用方法\" class=\"headerlink\" title=\"定义静态调用方法\"></a>定义静态调用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareJSON(String jsonOld, String jsonNew) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; oldVersion = JsonUtils.readJsonToObject(jsonOld, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        Map&lt;String, Object&gt; newVersion = JsonUtils.readJsonToObject(jsonNew, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> compareMap(oldVersion, newVersion);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p>经过处理后的返回结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"分数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"score\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"8\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"教材依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"teachingMaterialBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"2\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"2\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"大纲依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"syllabusBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"1\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"难度系数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"difficult\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"0.4\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"掌握\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"能力层次\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"abilityLevel\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"熟悉\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"测试关键词\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"关键字\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"keyWord\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"个\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div></pre></td></tr></table></figure>\n<p>查看所有源码点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip\" target=\"_blank\" rel=\"external\"><em>下载</em></a></p>\n<h2 id=\"转为JavaBean比较\"><a href=\"#转为JavaBean比较\" class=\"headerlink\" title=\"转为JavaBean比较\"></a>转为JavaBean比较</h2><p>将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。</p>\n<h3 id=\"引入Javers的Maven依赖\"><a href=\"#引入Javers的Maven依赖\" class=\"headerlink\" title=\"引入Javers的Maven依赖\"></a>引入Javers的Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javers<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javers-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"将itemJson转为JavaBean\"><a href=\"#将itemJson转为JavaBean\" class=\"headerlink\" title=\"将itemJson转为JavaBean\"></a>将itemJson转为JavaBean</h3><h4 id=\"方式一：利用Jackson\"><a href=\"#方式一：利用Jackson\" class=\"headerlink\" title=\"方式一：利用Jackson\"></a>方式一：利用Jackson</h4><h5 id=\"工具类JsonUtils\"><a href=\"#工具类JsonUtils\" class=\"headerlink\" title=\"工具类JsonUtils\"></a>工具类JsonUtils</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义jackson对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ObjectMapper MAPPER = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将对象转换成json字符串。</div><div class=\"line\">     * &lt;p&gt;Title: pojoToJson&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> data</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToJson</span><span class=\"params\">(Object data)</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString string = MAPPER.writeValueAsString(data);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> string;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将json结果集转化为对象</div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData json数据</div><div class=\"line\">     * <span class=\"doctag\">@param</span> clazz 对象中的object类型</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">jsonToPojo</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            T t = MAPPER.readValue(jsonData, beanType);</div><div class=\"line\">            <span class=\"keyword\">return</span> t;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        \te.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将json数据转换成pojo对象list</div><div class=\"line\">     * &lt;p&gt;Title: jsonToList&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData</div><div class=\"line\">     * <span class=\"doctag\">@param</span> beanType</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;<span class=\"function\">List&lt;T&gt; <span class=\"title\">jsonToList</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    \t\tList&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo\"><a href=\"#Json转Pojo\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);</div><div class=\"line\">Item item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);</div></pre></td></tr></table></figure>\n<h4 id=\"方式二：利用fastJson\"><a href=\"#方式二：利用fastJson\" class=\"headerlink\" title=\"方式二：利用fastJson\"></a>方式二：利用fastJson</h4><h5 id=\"引入Maven依赖-1\"><a href=\"#引入Maven依赖-1\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.26<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo-1\"><a href=\"#Json转Pojo-1\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JSONObject.parseObject(json3, Item.class);</div><div class=\"line\">Item item2 = JSONObject.parseObject(json4, Item.class);</div></pre></td></tr></table></figure>\n<h3 id=\"利用Javers比较JavaBean\"><a href=\"#利用Javers比较JavaBean\" class=\"headerlink\" title=\"利用Javers比较JavaBean\"></a>利用Javers比较JavaBean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javers j = JaversBuilder.javers().build();</div><div class=\"line\">        Diff diff = j.compare(item1, item2);</div><div class=\"line\">        <span class=\"keyword\">if</span> (diff.hasChanges()) &#123;</div><div class=\"line\">            List&lt;Change&gt; changes = diff.getChanges();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Change change : changes) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (change <span class=\"keyword\">instanceof</span> ValueChange) &#123;</div><div class=\"line\">                    ValueChange valChange = (ValueChange) change;</div><div class=\"line\">                    System.out.println(valChange.getPropertyName() + <span class=\"string\">\" -- \"</span> + valChange.getLeft() + <span class=\"string\">\"--\"</span> + valChange.getRight());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"版本回滚\"><a href=\"#版本回滚\" class=\"headerlink\" title=\"版本回滚\"></a>版本回滚</h1><p>​    其实版本回滚在上面的比较中已经说了，就是把<strong>需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录</strong>即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>熟悉业务。</li>\n<li>掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。</li>\n<li>版本需要存储所有信息便于回滚。</li>\n<li>个人倾向使用Javers比较JavaBean进行比较版本差异。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    开发过程中我们会使用<code>版本控制工具</code>，如SVN、Git等。但是我们一样会遇到一种情形：在一套试题系统中，有新建题目、编辑题目、删除题目等功能，且题目可以被多个人修改，每人修改一次即是一个版本。现在的需求就是需要<code>记录每一次修改的详细信息</code>，<code>每次版本之间的差异</code>，甚至还可以<code>版本回滚</code>。</p>\n<p>​    例如题目编号为<em>20170919170800000061</em>的题目被<em>A</em>创建，依次被<em>B</em>、<em>C</em>、<em>D</em>各修改了一次，此时需要比较<em>B</em>和<em>A</em>间的差异、<em>C</em>和<em>B</em>间的差异、<em>D</em>和<em>C</em>间的差异，到最后审核阶段如果<em>B</em> 的版本比较符合，则需要把试题版本内容回滚到<em>B</em>版本作为最后的版本。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/v1.jpg\" algin=\"center\"/><br><br></div>","more":"<p>仔细分析一下题干，我们的需求是<em>1.比较版本的差异，2.版本的回滚</em>。之前有考虑过两种方案：</p>\n<ol>\n<li>修改时在前端进行比较，只记录版本的差异，后台只需要进行存取即可。</li>\n<li>把所有版本信息全部存储在数据库，在请求时后台进行比较差异。</li>\n</ol>\n<p>第一种方案带来的问题是没法进行版本回滚，只记录下来了差异，回滚时将会是灾难，那么第二种方案才是较合适的选择。</p>\n<p>下图是数据库中的版本修改记录</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControlitem_mysql.png\" algin=\"center\"/><br><br></div>\n\n<p>题目的所有信息全部存储在<strong>itemJson</strong>中，比较版本间的差异即是比较版本间的itemJson，现在的目标就是要提取两个版本中itemJson中的差异。</p>\n<p>通过从网上查找资料找到了两种比较合适的方法，值得借鉴一下。</p>\n<h1 id=\"版本差异（比较Json的方法）\"><a href=\"#版本差异（比较Json的方法）\" class=\"headerlink\" title=\"版本差异（比较Json的方法）\"></a>版本差异（比较Json的方法）</h1><p>计较两个Json(X，Y)，其中可能情况：</p>\n<ol>\n<li>X和Y中均有相同字段</li>\n<li>X中存在Y中不存在的字段</li>\n<li>Y中存在X中不存在的字段</li>\n</ol>\n<p>需要掌握：</p>\n<ol>\n<li><strong>各个字段的用处和意义</strong></li>\n<li><strong>字段在Map、Json、JavaBean、List、JsonString形态之间的转换</strong></li>\n</ol>\n<h2 id=\"通过Map间接比较\"><a href=\"#通过Map间接比较\" class=\"headerlink\" title=\"通过Map间接比较\"></a>通过Map间接比较</h2><h3 id=\"引入Maven依赖\"><a href=\"#引入Maven依赖\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.guava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guava<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>23.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"定义静态工具类\"><a href=\"#定义静态工具类\" class=\"headerlink\" title=\"定义静态工具类\"></a>定义静态工具类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//处理json字符串</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">readJsonToObject</span><span class=\"params\">(String jsonString, TypeReference&lt;T&gt; tr)</span> </span>&#123;</div><div class=\"line\">    ObjectMapper objectMapper = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\">    <span class=\"keyword\">if</span> (jsonString == <span class=\"keyword\">null</span> || <span class=\"string\">\"\"</span>.equals(jsonString)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> (T) objectMapper.readValue(jsonString, tr);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">            logger.debug(<span class=\"string\">\"json error:\"</span> + e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义Map比较的工具类\"><a href=\"#定义Map比较的工具类\" class=\"headerlink\" title=\"定义Map比较的工具类\"></a>定义Map比较的工具类</h3><p>​    通过google的<code>guava</code>表达式中的 <em>Maps.difference(map1,map2)</em>方法进行比较，单此方法可比较正常的Map和String内容，对于List方式的比较，同时进行了数值和list内容顺序的比较，显然不符合我们的匹配规则，所以我们要对这个方法配合List的containAll方法进一步做封装。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareMap(Map&lt;String, Object&gt; oldVersion, Map&lt;String, Object&gt; newVersion) &#123;</div><div class=\"line\">        MapDifference&lt;String, Object&gt; difference = Maps.difference(oldVersion, newVersion);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取所有不同点</span></div><div class=\"line\">        Map&lt;String, MapDifference.ValueDifference&lt;Object&gt;&gt; differenceMap = difference.entriesDiffering();</div><div class=\"line\">        List&lt;Map&lt;String, String&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        Iterator diffIterator = differenceMap.entrySet().iterator();</div><div class=\"line\">        <span class=\"keyword\">while</span> (diffIterator.hasNext()) &#123;</div><div class=\"line\">            Map.Entry entry = (java.util.Map.Entry) diffIterator.next();</div><div class=\"line\"></div><div class=\"line\">            MapDifference.ValueDifference&lt;Object&gt; valueDifference = (MapDifference.ValueDifference&lt;Object&gt;) entry</div><div class=\"line\">                    .getValue();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isList = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List</div><div class=\"line\">                    &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List;</div><div class=\"line\">            <span class=\"keyword\">boolean</span> isMap = valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isList &amp;&amp; !isMap) &#123;</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 选择题中选项内容改变</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (oldVersion.get(<span class=\"string\">\"content\"</span>) != <span class=\"keyword\">null</span> &amp;&amp; oldVersion.get(<span class=\"string\">\"name\"</span>) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeOption(oldVersion.get(<span class=\"string\">\"name\"</span>).toString()));</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                &#125;</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, valueDifference.leftValue().toString()));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, valueDifference.rightValue().toString()));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为List,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> List &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> List) &#123;</div><div class=\"line\">                JSONArray j = JSONArray.parseArray(JSON.toJSONString(valueDifference.leftValue()));</div><div class=\"line\">                JSONArray p = JSONArray.parseArray(JSON.toJSONString(valueDifference.rightValue()));</div><div class=\"line\">                JSONObject js = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                JSONObject js1 = <span class=\"keyword\">new</span> JSONObject();</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; j.size(); i++) &#123;</div><div class=\"line\">                    js.put(i + <span class=\"string\">\"\"</span>, j.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p.size(); i++) &#123;</div><div class=\"line\">                    js1.put(i + <span class=\"string\">\"\"</span>, p.get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap = JsonUtils.readJsonToObject(js.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                Map&lt;String, Object&gt; requestMap1 = JsonUtils.readJsonToObject(js1.toString(),</div><div class=\"line\">                        <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">                        &#125;);</div><div class=\"line\">                List&lt;Map&lt;String, String&gt;&gt; m = compareMap(requestMap, requestMap1);  <span class=\"comment\">//当修改多个选项</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m.size(); i++) &#123;</div><div class=\"line\">                    result.add(compareMap(requestMap, requestMap1).get(i));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 处理结果是否为Map,则递归执行比较规则</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (valueDifference.leftValue() <span class=\"keyword\">instanceof</span> Map &amp;&amp; valueDifference.rightValue() <span class=\"keyword\">instanceof</span> Map) &#123;</div><div class=\"line\">                result.add(compareMap((Map&lt;String, Object&gt;) valueDifference.leftValue(),</div><div class=\"line\">                        (Map&lt;String, Object&gt;) valueDifference.rightValue()).get(<span class=\"number\">0</span>));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若A中有B中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; entriesOnlyOnLeft = difference.entriesOnlyOnLeft();</div><div class=\"line\">        <span class=\"keyword\">if</span> (entriesOnlyOnLeft != <span class=\"keyword\">null</span> &amp;&amp; !entriesOnlyOnLeft.isEmpty()) &#123;</div><div class=\"line\"></div><div class=\"line\">            Iterator it = entriesOnlyOnLeft.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = entry.getKey();</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 若B中有A中不存在的值</span></div><div class=\"line\">        Map&lt;String, Object&gt; onlyOnRightMap = difference.entriesOnlyOnRight();</div><div class=\"line\">        <span class=\"keyword\">if</span> (onlyOnRightMap != <span class=\"keyword\">null</span> &amp;&amp; !onlyOnRightMap.isEmpty()) &#123;</div><div class=\"line\">            Iterator it = onlyOnRightMap.entrySet().iterator();</div><div class=\"line\">            <span class=\"keyword\">while</span> (it.hasNext()) &#123;</div><div class=\"line\">                Map.Entry&lt;String, String&gt; entry = (java.util.Map.Entry) it.next();</div><div class=\"line\">                Map&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</div><div class=\"line\">                String fieldKey = String.valueOf(entry.getKey());</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldKey\"</span>, fieldKey);</div><div class=\"line\">                map.put(<span class=\"string\">\"fieldName\"</span>, judgeFiledName(fieldKey));</div><div class=\"line\">                map.put(<span class=\"string\">\"oldValue\"</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">                map.put(<span class=\"string\">\"newValue\"</span>, judgeFiledKey(fieldKey, String.valueOf(entry.getValue())));</div><div class=\"line\">                result.add(map);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义静态调用方法\"><a href=\"#定义静态调用方法\" class=\"headerlink\" title=\"定义静态调用方法\"></a>定义静态调用方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Map&lt;String, String&gt;&gt; compareJSON(String jsonOld, String jsonNew) &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; oldVersion = JsonUtils.readJsonToObject(jsonOld, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        Map&lt;String, Object&gt; newVersion = JsonUtils.readJsonToObject(jsonNew, <span class=\"keyword\">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">return</span> compareMap(oldVersion, newVersion);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p>经过处理后的返回结果</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"分数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"score\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"8\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"10\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"教材依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"teachingMaterialBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"2\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"2\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"大纲依据\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"syllabusBasis\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"1\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"难度系数\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"difficult\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"0.4\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"掌握\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"能力层次\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"abilityLevel\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"熟悉\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"attr\">\"newValue\"</span>: <span class=\"string\">\"测试关键词\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldName\"</span>: <span class=\"string\">\"关键字\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"fieldKey\"</span>: <span class=\"string\">\"keyWord\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"oldValue\"</span>: <span class=\"string\">\"个\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            ]</div></pre></td></tr></table></figure>\n<p>查看所有源码点击：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-9-21/versionControl/2017-09-21-code.zip\"><em>下载</em></a></p>\n<h2 id=\"转为JavaBean比较\"><a href=\"#转为JavaBean比较\" class=\"headerlink\" title=\"转为JavaBean比较\"></a>转为JavaBean比较</h2><p>将itemJson字符串转化为JavaBean，比较JavaBean之前的差异。比较JavaBean间的差异可以用Javers。</p>\n<h3 id=\"引入Javers的Maven依赖\"><a href=\"#引入Javers的Maven依赖\" class=\"headerlink\" title=\"引入Javers的Maven依赖\"></a>引入Javers的Maven依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.javers<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javers-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"将itemJson转为JavaBean\"><a href=\"#将itemJson转为JavaBean\" class=\"headerlink\" title=\"将itemJson转为JavaBean\"></a>将itemJson转为JavaBean</h3><h4 id=\"方式一：利用Jackson\"><a href=\"#方式一：利用Jackson\" class=\"headerlink\" title=\"方式一：利用Jackson\"></a>方式一：利用Jackson</h4><h5 id=\"工具类JsonUtils\"><a href=\"#工具类JsonUtils\" class=\"headerlink\" title=\"工具类JsonUtils\"></a>工具类JsonUtils</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 定义jackson对象</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ObjectMapper MAPPER = <span class=\"keyword\">new</span> ObjectMapper();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 将对象转换成json字符串。</div><div class=\"line\">     * &lt;p&gt;Title: pojoToJson&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> data</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">objectToJson</span><span class=\"params\">(Object data)</span> </span>&#123;</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tString string = MAPPER.writeValueAsString(data);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> string;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (JsonProcessingException e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 将json结果集转化为对象</div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData json数据</div><div class=\"line\">     * <span class=\"doctag\">@param</span> clazz 对象中的object类型</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">jsonToPojo</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            T t = MAPPER.readValue(jsonData, beanType);</div><div class=\"line\">            <span class=\"keyword\">return</span> t;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        \te.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 将json数据转换成pojo对象list</div><div class=\"line\">     * &lt;p&gt;Title: jsonToList&lt;/p&gt;</div><div class=\"line\">     * &lt;p&gt;Description: &lt;/p&gt;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> jsonData</div><div class=\"line\">     * <span class=\"doctag\">@param</span> beanType</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt;<span class=\"function\">List&lt;T&gt; <span class=\"title\">jsonToList</span><span class=\"params\">(String jsonData, Class&lt;T&gt; beanType)</span> </span>&#123;</div><div class=\"line\">    \tJavaType javaType = MAPPER.getTypeFactory().constructParametricType(List.class, beanType);</div><div class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    \t\tList&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);</div><div class=\"line\">    \t\t<span class=\"keyword\">return</span> list;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    \t</div><div class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo\"><a href=\"#Json转Pojo\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JsonUtils.jsonToPojo(itemJsonOld, Item.class);</div><div class=\"line\">Item item2 = JsonUtils.jsonToPojo(itemJsonNew, Item.class);</div></pre></td></tr></table></figure>\n<h4 id=\"方式二：利用fastJson\"><a href=\"#方式二：利用fastJson\" class=\"headerlink\" title=\"方式二：利用fastJson\"></a>方式二：利用fastJson</h4><h5 id=\"引入Maven依赖-1\"><a href=\"#引入Maven依赖-1\" class=\"headerlink\" title=\"引入Maven依赖\"></a>引入Maven依赖</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.26<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h5 id=\"Json转Pojo-1\"><a href=\"#Json转Pojo-1\" class=\"headerlink\" title=\"Json转Pojo\"></a>Json转Pojo</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Item item1 = JSONObject.parseObject(json3, Item.class);</div><div class=\"line\">Item item2 = JSONObject.parseObject(json4, Item.class);</div></pre></td></tr></table></figure>\n<h3 id=\"利用Javers比较JavaBean\"><a href=\"#利用Javers比较JavaBean\" class=\"headerlink\" title=\"利用Javers比较JavaBean\"></a>利用Javers比较JavaBean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javers j = JaversBuilder.javers().build();</div><div class=\"line\">        Diff diff = j.compare(item1, item2);</div><div class=\"line\">        <span class=\"keyword\">if</span> (diff.hasChanges()) &#123;</div><div class=\"line\">            List&lt;Change&gt; changes = diff.getChanges();</div><div class=\"line\">            <span class=\"keyword\">for</span> (Change change : changes) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (change <span class=\"keyword\">instanceof</span> ValueChange) &#123;</div><div class=\"line\">                    ValueChange valChange = (ValueChange) change;</div><div class=\"line\">                    System.out.println(valChange.getPropertyName() + <span class=\"string\">\" -- \"</span> + valChange.getLeft() + <span class=\"string\">\"--\"</span> + valChange.getRight());</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"版本回滚\"><a href=\"#版本回滚\" class=\"headerlink\" title=\"版本回滚\"></a>版本回滚</h1><p>​    其实版本回滚在上面的比较中已经说了，就是把<strong>需要回滚的版本itemJson转化为JavaBean传给前台，同时生成一份最新的版本为当前版本，记录操作人、操作时间等等记录</strong>即可。需要了解及使用Gson、fastJson、Jackson的使用，及使用工具将Map、Json、JavaBean、List、JsonString对象之间状态的转换。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>熟悉业务。</li>\n<li>掌握Map、Json、JavaBean、List、JsonString对象之间状态的转换。</li>\n<li>版本需要存储所有信息便于回滚。</li>\n<li>个人倾向使用Javers比较JavaBean进行比较版本差异。</li>\n</ol>"},{"title":"静态服务器搭建及前端知识点","date":"2017-06-13T06:24:21.000Z","_content":"\n# 前言\n\n​\t虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# NodeJS搭建静态资源服务器\n\n对`Node.js`只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：\n\n1. 下载node.js，进入node.js官网http://nodejs.cn下载对应的版本。\n2. 安装node.js。\n3. 启动node.js，在命令行输入命令安装需要的模块，依次执行命令。\n\n```html\nnpm install express\nnpm install request\nnpm install http-server \n```\n\n## 简单的静态服务器\n\n新建server.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar request = require('request');\nvar app = express();\n//启动端口为81\nvar port = process.env.PORT||81;\n \n//静态资源存放的路径\n app.use(express.static('E:/SmallTools/StaticServer'));\nhttp.createServer(app).listen(port);\nconsole.log(\"服务启动成功\");\n```\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"/>\n\n</div>\n\n启动server.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问a.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明搭建成功！\n\n## 带反向代理静态服务器搭建\n\n新建server-kaow-school.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar https = require('https');\nvar request = require('request');\nvar app = express();\n//app.disable('x-powered-by');\nvar port = process.env.PORT||81;\n\napp.use(express.static('E:/SmallTools/StaticServer'));\n\n\nfunction proxy(app,route,remoteDomain){\n    app.use(route,function(req,res){\n      var url = remoteDomain+req.url;\n      req.pipe(request(url)).pipe(res);\n    });\n}\n\n//10.9.4.215:8380  测试服务器ip\nproxy(app,'/163','http://www.163.com');\n//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');\n \nhttp.createServer(app).listen(port);\nconsole.log(\"服务器启动完成,请使用locahost:\"+port+\"访问\");\n```\n\n启动server-kaow-school.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问b.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"/>\n\n</div>\n\n访问/163\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明带反向代理的静态服务器搭建成功！\n\n# 前端知识点\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"/>\n\n</div>\n\n## JS字符串截取空白trim()的原型实现\n\n```javascript\nString.prototype.trim = function(){\n\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");\n}\n```\n\n## JS屏蔽键盘按键\n\n```javascript\n<body oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\" onbeforecopy=\"return false\" onmouseup=document.selection.empty() oncopy=document.selection.empty() onselect=document.selection.empty()></body> \n讲上面红色显示的插入到网页中就可以实现鼠标右击无效\n禁止选择\t\t\t\t\t\tonselectstart=\"return false\"    \t\t\t\n禁止拖放\t\t\t\t\t\tondragstart=\"return false\"\t\t\t\n禁止拷贝\t\t\t\t\t\tncopy=document.selection.empty()\t\t\n禁止保存(放在head里面)\t\t\t<noscript><iframe src=\"*.htm\"></iframe></noscript>\n禁止粘贴\t\t\t\t\t\t<input type=text onpaste=\"return false\">\n关闭输入法\t\t\t\t\t<input style=\"ime-mode:disabled\">\n屏蔽鼠标右键\t\t\t\t\t function document.oncontextmenu(){event.returnValue=false;}\n屏蔽F1帮助\t\t\t\t\tfunction window.onhelp(){return false} \n\n屏蔽其他键\nfunction document.onkeydown() { \n   if ((window.event.altKey)&& \n   \t((window.event.keyCode==37)||\t //屏蔽 Alt+ 方向键 ← \n \t  (window.event.keyCode==39))) \t\t//屏蔽 Alt+ 方向键 → { \n   \t alert(\"不准你使用ALT+方向键前进或后退网页！\"); \n \t   event.returnValue=false; \n   } \n    /* 注：这还不是真正地屏蔽 Alt+ 方向键， \n    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， \n    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 \n    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/ \n   if ((event.keyCode==8)   ||                 //屏蔽退格删除键 \n \t  (event.keyCode==116)||                 //屏蔽 F5 刷新键 \n \t  (event.ctrlKey && event.keyCode==82)){ //Ctrl + R \n \t  event.keyCode=0; \n    \tevent.returnValue=false; \n    } \n屏蔽F11    if (event.keyCode==122){event.keyCode=0;event.returnValue=false;}\n屏蔽\t\t Ctrl+n    if (event.ctrlKey && event.keyCode==78) event.returnValue=false; \n   if (event.shiftKey && event.keyCode==121)   event.returnValue=false;   //屏蔽 shift+F10 \n   if (window.event.srcElement.tagName == \"A\" && window.event.shiftKey)  \n   window.event.returnValue = false;          //屏蔽 shift 加鼠标左键新开一网页 \n   if ((window.event.altKey)&&(window.event.keyCode==115)){        //屏蔽Alt+F4 \n   window.showModelessDialog(\"about:blank\",\"\",\"dialogWidth:1px;dialogheight:1px\"); \n   \t\treturn false; \n   } \n}\n\n屏蔽打印：\n<style> \n@media print{ \n* {display:none} \n} \n</style>\n```\n\n## HTML之间传值(通过解析url)\n\n```javascript\nvar hrefInfo = getUrlVars(window.location.href); // 得到参数信息\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n\t}\n\n//解析url中的参数\nfunction getUrlVars(hrf) {\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n## Jquery获取radio,checkbox\n\n```javascript\n//获取radio的id                          \n$(\"input[name='r']:checked\").attr(\"id\");  \n//获得checkbox数目\n$(\"input[name='c']:checked\").length;\n//遍历checkbox\n$(\"input[name='c']:check\").eq(i).attr(\"id\");\n//全选checkbox\n$(\"input[name='c']:checkbox\").attr(\"checked\",\"true\");\n//获取选中的checkbox  \n$(\"input[name='c']:checked\").map(function(){return $(this).val();}).get().join(\",\");\n//获取下拉框选中的id                     \n$(\"#s option:selected\").attr(\"value\");\n```\n\n## Jquery页面查询(数据量大时禁用)\n\n```javascript\n function search(){\n        var nameSearch = $(\"#itemName\").val(); //搜索框ID\n        var tableObj = $(\"#itemList tr:gt(0)\"); // table的ID\n        if(nameSearch.trim()!=\"\"){\n             tableObj.hide();\n             tableObj.each(function(){\n             \tvar tr = $(this);\n             \tvar fuHe = tr.children(\":eq(0)\").html();\n             \tif(fuHe.indexOf(nameSearch)==0){\n                        tr.show();\n                    }\n                });\n            }else{\n                tableObj.show();\n            } \n}\n```\n\n## Jquery 回车(Enter)移到下一个输入框\n\n```javascript\n$(document).ready(function () {\n            $('input:text:first').focus();\n            $('input:text').bind(\"keydown\", function (e) {\n                if (e.which == 13) {       //Enter key\n                    e.preventDefault();     //to skip default behaviour of enter key\n                    var nextinput = $('input:text')[$('input:text').index(this) + 1];\n                    if (nextinput != undefined) {\n                        nextinput.focus();\n                    } else {\n                        alert(\"没有下一个输入框！\");\n                    }\n                }\n            });\n        });\n```\n\n## JS,Jquery获取各种屏幕的宽度和高度\n\n```javascript\n//Javascript:\n网页可见区域宽： \tdocument.body.clientWidth\n网页可见区域高： \tdocument.body.clientHeight\n网页可见区域宽： \tdocument.body.offsetWidth (包括边线的宽)\n网页可见区域高： \tdocument.body.offsetHeight (包括边线的高)\n网页正文全文宽： \tdocument.body.scrollWidth\n网页正文全文高： \tdocument.body.scrollHeight\n网页被卷去的高： \tdocument.body.scrollTop\n网页被卷去的左： \tdocument.body.scrollLeft\n网页正文部分上： \twindow.screenTop\n网页正文部分左： \twindow.screenLeft\n屏幕分辨率的高： \twindow.screen.height\n屏幕分辨率的宽： \twindow.screen.width\n屏幕可用工作区高度： \twindow.screen.availHeight\n屏幕可用工作区宽度： \twindow.screen.availWidth\n \n//JQuery:\n$(document).ready(function(){\n\talert($(window).height()); //浏览器当前窗口可视区域高度\n\talert($(document).height()); //浏览器当前窗口文档的高度\n\talert($(document.body).height());//浏览器当前窗口文档body的高度\n\talert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\n\talert($(window).width()); //浏览器当前窗口可视区域宽度\n\talert($(document).width());//浏览器当前窗口文档对象宽度\n\talert($(document.body).width());//浏览器当前窗口文档body的宽度\n\talert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n## Ajax,Get时请求异步缓存问题\n\n用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在`异步缓存`的问题。\n\n因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。\n\n解决办法：\n\n1.  ajax get请求时比较简单 只需将cache设置为false就好。\n\n   ```javascript\n   $.ajax({  \n           type: 'get',\t//get请求时  \n           url: '....',  \n           cache: false,\t//不缓存  \n           data: { },  \n           success: function (result) {  \n                 //  \n            }  \n    });  \n   ```\n\n2. 访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]\n\n   设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。","source":"_posts/静态服务器搭建及前端知识点.md","raw":"---\ntitle: 静态服务器搭建及前端知识点\ndate: 2017-06-13 14:24:21\ntags: [前端,tips,js]\ncategories: technology\n---\n\n# 前言\n\n​\t虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# NodeJS搭建静态资源服务器\n\n对`Node.js`只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：\n\n1. 下载node.js，进入node.js官网http://nodejs.cn下载对应的版本。\n2. 安装node.js。\n3. 启动node.js，在命令行输入命令安装需要的模块，依次执行命令。\n\n```html\nnpm install express\nnpm install request\nnpm install http-server \n```\n\n## 简单的静态服务器\n\n新建server.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar request = require('request');\nvar app = express();\n//启动端口为81\nvar port = process.env.PORT||81;\n \n//静态资源存放的路径\n app.use(express.static('E:/SmallTools/StaticServer'));\nhttp.createServer(app).listen(port);\nconsole.log(\"服务启动成功\");\n```\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"/>\n\n</div>\n\n启动server.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问a.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明搭建成功！\n\n## 带反向代理静态服务器搭建\n\n新建server-kaow-school.js，内容为\n\n```javascript\nvar express = require('express');\nvar http = require(\"http\");\nvar https = require('https');\nvar request = require('request');\nvar app = express();\n//app.disable('x-powered-by');\nvar port = process.env.PORT||81;\n\napp.use(express.static('E:/SmallTools/StaticServer'));\n\n\nfunction proxy(app,route,remoteDomain){\n    app.use(route,function(req,res){\n      var url = remoteDomain+req.url;\n      req.pipe(request(url)).pipe(res);\n    });\n}\n\n//10.9.4.215:8380  测试服务器ip\nproxy(app,'/163','http://www.163.com');\n//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');\n \nhttp.createServer(app).listen(port);\nconsole.log(\"服务器启动完成,请使用locahost:\"+port+\"访问\");\n```\n\n启动server-kaow-school.js\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"/>\n\n</div>\n\n通过http请求访问b.html页面\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"/>\n\n</div>\n\n访问/163\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"/>\n\n</div>\n\n可以访问说明带反向代理的静态服务器搭建成功！\n\n# 前端知识点\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"/>\n\n</div>\n\n## JS字符串截取空白trim()的原型实现\n\n```javascript\nString.prototype.trim = function(){\n\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");\n}\n```\n\n## JS屏蔽键盘按键\n\n```javascript\n<body oncontextmenu=\"return false\" onselectstart=\"return false\" ondragstart=\"return false\" onbeforecopy=\"return false\" onmouseup=document.selection.empty() oncopy=document.selection.empty() onselect=document.selection.empty()></body> \n讲上面红色显示的插入到网页中就可以实现鼠标右击无效\n禁止选择\t\t\t\t\t\tonselectstart=\"return false\"    \t\t\t\n禁止拖放\t\t\t\t\t\tondragstart=\"return false\"\t\t\t\n禁止拷贝\t\t\t\t\t\tncopy=document.selection.empty()\t\t\n禁止保存(放在head里面)\t\t\t<noscript><iframe src=\"*.htm\"></iframe></noscript>\n禁止粘贴\t\t\t\t\t\t<input type=text onpaste=\"return false\">\n关闭输入法\t\t\t\t\t<input style=\"ime-mode:disabled\">\n屏蔽鼠标右键\t\t\t\t\t function document.oncontextmenu(){event.returnValue=false;}\n屏蔽F1帮助\t\t\t\t\tfunction window.onhelp(){return false} \n\n屏蔽其他键\nfunction document.onkeydown() { \n   if ((window.event.altKey)&& \n   \t((window.event.keyCode==37)||\t //屏蔽 Alt+ 方向键 ← \n \t  (window.event.keyCode==39))) \t\t//屏蔽 Alt+ 方向键 → { \n   \t alert(\"不准你使用ALT+方向键前进或后退网页！\"); \n \t   event.returnValue=false; \n   } \n    /* 注：这还不是真正地屏蔽 Alt+ 方向键， \n    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， \n    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 \n    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/ \n   if ((event.keyCode==8)   ||                 //屏蔽退格删除键 \n \t  (event.keyCode==116)||                 //屏蔽 F5 刷新键 \n \t  (event.ctrlKey && event.keyCode==82)){ //Ctrl + R \n \t  event.keyCode=0; \n    \tevent.returnValue=false; \n    } \n屏蔽F11    if (event.keyCode==122){event.keyCode=0;event.returnValue=false;}\n屏蔽\t\t Ctrl+n    if (event.ctrlKey && event.keyCode==78) event.returnValue=false; \n   if (event.shiftKey && event.keyCode==121)   event.returnValue=false;   //屏蔽 shift+F10 \n   if (window.event.srcElement.tagName == \"A\" && window.event.shiftKey)  \n   window.event.returnValue = false;          //屏蔽 shift 加鼠标左键新开一网页 \n   if ((window.event.altKey)&&(window.event.keyCode==115)){        //屏蔽Alt+F4 \n   window.showModelessDialog(\"about:blank\",\"\",\"dialogWidth:1px;dialogheight:1px\"); \n   \t\treturn false; \n   } \n}\n\n屏蔽打印：\n<style> \n@media print{ \n* {display:none} \n} \n</style>\n```\n\n## HTML之间传值(通过解析url)\n\n```javascript\nvar hrefInfo = getUrlVars(window.location.href); // 得到参数信息\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n\t}\n\n//解析url中的参数\nfunction getUrlVars(hrf) {\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n## Jquery获取radio,checkbox\n\n```javascript\n//获取radio的id                          \n$(\"input[name='r']:checked\").attr(\"id\");  \n//获得checkbox数目\n$(\"input[name='c']:checked\").length;\n//遍历checkbox\n$(\"input[name='c']:check\").eq(i).attr(\"id\");\n//全选checkbox\n$(\"input[name='c']:checkbox\").attr(\"checked\",\"true\");\n//获取选中的checkbox  \n$(\"input[name='c']:checked\").map(function(){return $(this).val();}).get().join(\",\");\n//获取下拉框选中的id                     \n$(\"#s option:selected\").attr(\"value\");\n```\n\n## Jquery页面查询(数据量大时禁用)\n\n```javascript\n function search(){\n        var nameSearch = $(\"#itemName\").val(); //搜索框ID\n        var tableObj = $(\"#itemList tr:gt(0)\"); // table的ID\n        if(nameSearch.trim()!=\"\"){\n             tableObj.hide();\n             tableObj.each(function(){\n             \tvar tr = $(this);\n             \tvar fuHe = tr.children(\":eq(0)\").html();\n             \tif(fuHe.indexOf(nameSearch)==0){\n                        tr.show();\n                    }\n                });\n            }else{\n                tableObj.show();\n            } \n}\n```\n\n## Jquery 回车(Enter)移到下一个输入框\n\n```javascript\n$(document).ready(function () {\n            $('input:text:first').focus();\n            $('input:text').bind(\"keydown\", function (e) {\n                if (e.which == 13) {       //Enter key\n                    e.preventDefault();     //to skip default behaviour of enter key\n                    var nextinput = $('input:text')[$('input:text').index(this) + 1];\n                    if (nextinput != undefined) {\n                        nextinput.focus();\n                    } else {\n                        alert(\"没有下一个输入框！\");\n                    }\n                }\n            });\n        });\n```\n\n## JS,Jquery获取各种屏幕的宽度和高度\n\n```javascript\n//Javascript:\n网页可见区域宽： \tdocument.body.clientWidth\n网页可见区域高： \tdocument.body.clientHeight\n网页可见区域宽： \tdocument.body.offsetWidth (包括边线的宽)\n网页可见区域高： \tdocument.body.offsetHeight (包括边线的高)\n网页正文全文宽： \tdocument.body.scrollWidth\n网页正文全文高： \tdocument.body.scrollHeight\n网页被卷去的高： \tdocument.body.scrollTop\n网页被卷去的左： \tdocument.body.scrollLeft\n网页正文部分上： \twindow.screenTop\n网页正文部分左： \twindow.screenLeft\n屏幕分辨率的高： \twindow.screen.height\n屏幕分辨率的宽： \twindow.screen.width\n屏幕可用工作区高度： \twindow.screen.availHeight\n屏幕可用工作区宽度： \twindow.screen.availWidth\n \n//JQuery:\n$(document).ready(function(){\n\talert($(window).height()); //浏览器当前窗口可视区域高度\n\talert($(document).height()); //浏览器当前窗口文档的高度\n\talert($(document.body).height());//浏览器当前窗口文档body的高度\n\talert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\n\talert($(window).width()); //浏览器当前窗口可视区域宽度\n\talert($(document).width());//浏览器当前窗口文档对象宽度\n\talert($(document.body).width());//浏览器当前窗口文档body的宽度\n\talert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n## Ajax,Get时请求异步缓存问题\n\n用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在`异步缓存`的问题。\n\n因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。\n\n解决办法：\n\n1.  ajax get请求时比较简单 只需将cache设置为false就好。\n\n   ```javascript\n   $.ajax({  \n           type: 'get',\t//get请求时  \n           url: '....',  \n           cache: false,\t//不缓存  \n           data: { },  \n           success: function (result) {  \n                 //  \n            }  \n    });  \n   ```\n\n2. 访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]\n\n   设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。","slug":"静态服务器搭建及前端知识点","published":1,"updated":"2017-09-13T07:59:45.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfb9001jswg6zw93k9h9","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。</p>\n<div align=\"center\"><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"NodeJS搭建静态资源服务器\"><a href=\"#NodeJS搭建静态资源服务器\" class=\"headerlink\" title=\"NodeJS搭建静态资源服务器\"></a>NodeJS搭建静态资源服务器</h1><p>对<code>Node.js</code>只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：</p>\n<ol>\n<li>下载node.js，进入node.js官网<a href=\"http://nodejs.cn下载对应的版本。\" target=\"_blank\" rel=\"external\">http://nodejs.cn下载对应的版本。</a></li>\n<li>安装node.js。</li>\n<li>启动node.js，在命令行输入命令安装需要的模块，依次执行命令。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express</div><div class=\"line\">npm install request</div><div class=\"line\">npm install http-server</div></pre></td></tr></table></figure>\n<h2 id=\"简单的静态服务器\"><a href=\"#简单的静态服务器\" class=\"headerlink\" title=\"简单的静态服务器\"></a>简单的静态服务器</h2><p>新建server.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//启动端口为81</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//静态资源存放的路径</span></div><div class=\"line\"> app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务启动成功\"</span>);</div></pre></td></tr></table></figure>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"><br><br></div>\n\n<p>启动server.js</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"><br><br></div>\n\n<p>通过http请求访问a.html页面</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"><br><br></div>\n\n<p>可以访问说明搭建成功！</p>\n<h2 id=\"带反向代理静态服务器搭建\"><a href=\"#带反向代理静态服务器搭建\" class=\"headerlink\" title=\"带反向代理静态服务器搭建\"></a>带反向代理静态服务器搭建</h2><p>新建server-kaow-school.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//app.disable('x-powered-by');</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">app,route,remoteDomain</span>)</span>&#123;</div><div class=\"line\">    app.use(route,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> url = remoteDomain+req.url;</div><div class=\"line\">      req.pipe(request(url)).pipe(res);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//10.9.4.215:8380  测试服务器ip</span></div><div class=\"line\">proxy(app,<span class=\"string\">'/163'</span>,<span class=\"string\">'http://www.163.com'</span>);</div><div class=\"line\"><span class=\"comment\">//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');</span></div><div class=\"line\"> </div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器启动完成,请使用locahost:\"</span>+port+<span class=\"string\">\"访问\"</span>);</div></pre></td></tr></table></figure>\n<p>启动server-kaow-school.js</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"><br><br></div>\n\n<p>通过http请求访问b.html页面</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"><br><br></div>\n\n<p>访问/163</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"><br><br></div>\n\n<p>可以访问说明带反向代理的静态服务器搭建成功！</p>\n<h1 id=\"前端知识点\"><a href=\"#前端知识点\" class=\"headerlink\" title=\"前端知识点\"></a>前端知识点</h1><div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"JS字符串截取空白trim-的原型实现\"><a href=\"#JS字符串截取空白trim-的原型实现\" class=\"headerlink\" title=\"JS字符串截取空白trim()的原型实现\"></a>JS字符串截取空白trim()的原型实现</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String.prototype.trim = function()&#123;</div><div class=\"line\">\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"JS屏蔽键盘按键\"><a href=\"#JS屏蔽键盘按键\" class=\"headerlink\" title=\"JS屏蔽键盘按键\"></a>JS屏蔽键盘按键</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body oncontextmenu=<span class=\"string\">\"return false\"</span> onselectstart=<span class=\"string\">\"return false\"</span> ondragstart=<span class=\"string\">\"return false\"</span> onbeforecopy=<span class=\"string\">\"return false\"</span> onmouseup=<span class=\"built_in\">document</span>.selection.empty() oncopy=<span class=\"built_in\">document</span>.selection.empty() onselect=<span class=\"built_in\">document</span>.selection.empty()&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span> </div><div class=\"line\">讲上面红色显示的插入到网页中就可以实现鼠标右击无效</div><div class=\"line\">禁止选择\t\t\t\t\t\tonselectstart=<span class=\"string\">\"return false\"</span>    \t\t\t</div><div class=\"line\">禁止拖放\t\t\t\t\t\tondragstart=<span class=\"string\">\"return false\"</span>\t\t\t</div><div class=\"line\">禁止拷贝\t\t\t\t\t\tncopy=<span class=\"built_in\">document</span>.selection.empty()\t\t</div><div class=\"line\">禁止保存(放在head里面)\t\t\t&lt;noscript&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"*.htm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span></div><div class=\"line\">禁止粘贴\t\t\t\t\t\t&lt;input type=text onpaste=<span class=\"string\">\"return false\"</span>&gt;</div><div class=\"line\">关闭输入法\t\t\t\t\t&lt;input style=<span class=\"string\">\"ime-mode:disabled\"</span>&gt;</div><div class=\"line\">屏蔽鼠标右键\t\t\t\t\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">oncontextmenu</span>(<span class=\"params\"></span>)</span>&#123;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽F1帮助\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">window</span>.<span class=\"title\">onhelp</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125; </div><div class=\"line\"></div><div class=\"line\">屏蔽其他键</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">onkeydown</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp; </div><div class=\"line\">   \t((<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">37</span>)||\t <span class=\"comment\">//屏蔽 Alt+ 方向键 ← </span></div><div class=\"line\"> \t  (<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">39</span>))) \t\t<span class=\"comment\">//屏蔽 Alt+ 方向键 → &#123; </span></div><div class=\"line\">   \t alert(<span class=\"string\">\"不准你使用ALT+方向键前进或后退网页！\"</span>); </div><div class=\"line\"> \t   event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">    <span class=\"comment\">/* 注：这还不是真正地屏蔽 Alt+ 方向键， </span></div><div class=\"line\">    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， </div><div class=\"line\">    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 </div><div class=\"line\">    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/ </div><div class=\"line\">   <span class=\"keyword\">if</span> ((event.keyCode==<span class=\"number\">8</span>)   ||                 <span class=\"comment\">//屏蔽退格删除键 </span></div><div class=\"line\"> \t  (event.keyCode==<span class=\"number\">116</span>)||                 <span class=\"comment\">//屏蔽 F5 刷新键 </span></div><div class=\"line\"> \t  (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">82</span>))&#123; <span class=\"comment\">//Ctrl + R </span></div><div class=\"line\"> \t  event.keyCode=<span class=\"number\">0</span>; </div><div class=\"line\">    \tevent.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">屏蔽F11    <span class=\"keyword\">if</span> (event.keyCode==<span class=\"number\">122</span>)&#123;event.keyCode=<span class=\"number\">0</span>;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽\t\t Ctrl+n    <span class=\"keyword\">if</span> (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">78</span>) event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   <span class=\"keyword\">if</span> (event.shiftKey &amp;&amp; event.keyCode==<span class=\"number\">121</span>)   event.returnValue=<span class=\"literal\">false</span>;   <span class=\"comment\">//屏蔽 shift+F10 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event.srcElement.tagName == <span class=\"string\">\"A\"</span> &amp;&amp; <span class=\"built_in\">window</span>.event.shiftKey)  </div><div class=\"line\">   <span class=\"built_in\">window</span>.event.returnValue = <span class=\"literal\">false</span>;          <span class=\"comment\">//屏蔽 shift 加鼠标左键新开一网页 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp;(<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">115</span>))&#123;        <span class=\"comment\">//屏蔽Alt+F4 </span></div><div class=\"line\">   <span class=\"built_in\">window</span>.showModelessDialog(<span class=\"string\">\"about:blank\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"dialogWidth:1px;dialogheight:1px\"</span>); </div><div class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">屏蔽打印：</div><div class=\"line\">&lt;style&gt; </div><div class=\"line\">@media print&#123; </div><div class=\"line\">* &#123;<span class=\"attr\">display</span>:none&#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"HTML之间传值-通过解析url\"><a href=\"#HTML之间传值-通过解析url\" class=\"headerlink\" title=\"HTML之间传值(通过解析url)\"></a>HTML之间传值(通过解析url)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href); <span class=\"comment\">// 得到参数信息</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解析url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery获取radio-checkbox\"><a href=\"#Jquery获取radio-checkbox\" class=\"headerlink\" title=\"Jquery获取radio,checkbox\"></a>Jquery获取radio,checkbox</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取radio的id                          </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='r']:checked\"</span>).attr(<span class=\"string\">\"id\"</span>);  </div><div class=\"line\"><span class=\"comment\">//获得checkbox数目</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).length;</div><div class=\"line\"><span class=\"comment\">//遍历checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:check\"</span>).eq(i).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\"><span class=\"comment\">//全选checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checkbox\"</span>).attr(<span class=\"string\">\"checked\"</span>,<span class=\"string\">\"true\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取选中的checkbox  </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>).val();&#125;).get().join(<span class=\"string\">\",\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取下拉框选中的id                     </span></div><div class=\"line\">$(<span class=\"string\">\"#s option:selected\"</span>).attr(<span class=\"string\">\"value\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery页面查询-数据量大时禁用\"><a href=\"#Jquery页面查询-数据量大时禁用\" class=\"headerlink\" title=\"Jquery页面查询(数据量大时禁用)\"></a>Jquery页面查询(数据量大时禁用)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nameSearch = $(<span class=\"string\">\"#itemName\"</span>).val(); <span class=\"comment\">//搜索框ID</span></div><div class=\"line\">        <span class=\"keyword\">var</span> tableObj = $(<span class=\"string\">\"#itemList tr:gt(0)\"</span>); <span class=\"comment\">// table的ID</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(nameSearch.trim()!=<span class=\"string\">\"\"</span>)&#123;</div><div class=\"line\">             tableObj.hide();</div><div class=\"line\">             tableObj.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">             \t<span class=\"keyword\">var</span> tr = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">             \t<span class=\"keyword\">var</span> fuHe = tr.children(<span class=\"string\">\":eq(0)\"</span>).html();</div><div class=\"line\">             \t<span class=\"keyword\">if</span>(fuHe.indexOf(nameSearch)==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                        tr.show();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                tableObj.show();</div><div class=\"line\">            &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery-回车-Enter-移到下一个输入框\"><a href=\"#Jquery-回车-Enter-移到下一个输入框\" class=\"headerlink\" title=\"Jquery 回车(Enter)移到下一个输入框\"></a>Jquery 回车(Enter)移到下一个输入框</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'input:text:first'</span>).focus();</div><div class=\"line\">            $(<span class=\"string\">'input:text'</span>).bind(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.which == <span class=\"number\">13</span>) &#123;       <span class=\"comment\">//Enter key</span></div><div class=\"line\">                    e.preventDefault();     <span class=\"comment\">//to skip default behaviour of enter key</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> nextinput = $(<span class=\"string\">'input:text'</span>)[$(<span class=\"string\">'input:text'</span>).index(<span class=\"keyword\">this</span>) + <span class=\"number\">1</span>];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (nextinput != <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                        nextinput.focus();</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        alert(<span class=\"string\">\"没有下一个输入框！\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"JS-Jquery获取各种屏幕的宽度和高度\"><a href=\"#JS-Jquery获取各种屏幕的宽度和高度\" class=\"headerlink\" title=\"JS,Jquery获取各种屏幕的宽度和高度\"></a>JS,Jquery获取各种屏幕的宽度和高度</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Javascript:</span></div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.clientWidth</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.clientHeight</div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)</div><div class=\"line\">网页正文全文宽： \t<span class=\"built_in\">document</span>.body.scrollWidth</div><div class=\"line\">网页正文全文高： \t<span class=\"built_in\">document</span>.body.scrollHeight</div><div class=\"line\">网页被卷去的高： \t<span class=\"built_in\">document</span>.body.scrollTop</div><div class=\"line\">网页被卷去的左： \t<span class=\"built_in\">document</span>.body.scrollLeft</div><div class=\"line\">网页正文部分上： \t<span class=\"built_in\">window</span>.screenTop</div><div class=\"line\">网页正文部分左： \t<span class=\"built_in\">window</span>.screenLeft</div><div class=\"line\">屏幕分辨率的高： \t<span class=\"built_in\">window</span>.screen.height</div><div class=\"line\">屏幕分辨率的宽： \t<span class=\"built_in\">window</span>.screen.width</div><div class=\"line\">屏幕可用工作区高度： \t<span class=\"built_in\">window</span>.screen.availHeight</div><div class=\"line\">屏幕可用工作区宽度： \t<span class=\"built_in\">window</span>.screen.availWidth</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//JQuery:</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).height()); <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).height()); <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).height());<span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).width()); <span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).width());<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).width());<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Ajax-Get时请求异步缓存问题\"><a href=\"#Ajax-Get时请求异步缓存问题\" class=\"headerlink\" title=\"Ajax,Get时请求异步缓存问题\"></a>Ajax,Get时请求异步缓存问题</h2><p>用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在<code>异步缓存</code>的问题。</p>\n<p>因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>ajax get请求时比较简单 只需将cache设置为false就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;  </div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,\t<span class=\"comment\">//get请求时  </span></div><div class=\"line\">        url: <span class=\"string\">'....'</span>,  </div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,\t<span class=\"comment\">//不缓存  </span></div><div class=\"line\">        data: &#123; &#125;,  </div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">              <span class=\"comment\">//  </span></div><div class=\"line\">         &#125;  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]</p>\n<p>设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>​    虽然是做后台开发，但是很多时候自己也兼顾了前台，并不是所有的项目都是前后台分离开发，所以在开发期间自己也总结和学习了前端了一些小知识，在这里进行总结，以便自己温习。</p>\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%89%8D%E7%AB%AF.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"NodeJS搭建静态资源服务器\"><a href=\"#NodeJS搭建静态资源服务器\" class=\"headerlink\" title=\"NodeJS搭建静态资源服务器\"></a>NodeJS搭建静态资源服务器</h1><p>对<code>Node.js</code>只有浅显的认识，但是有时候又要自己搭建静态服务器进行测试。搭建静态服务器需要以下几个步骤：</p>\n<ol>\n<li>下载node.js，进入node.js官网<a href=\"http://nodejs.cn下载对应的版本。\">http://nodejs.cn下载对应的版本。</a></li>\n<li>安装node.js。</li>\n<li>启动node.js，在命令行输入命令安装需要的模块，依次执行命令。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express</div><div class=\"line\">npm install request</div><div class=\"line\">npm install http-server</div></pre></td></tr></table></figure>\n<h2 id=\"简单的静态服务器\"><a href=\"#简单的静态服务器\" class=\"headerlink\" title=\"简单的静态服务器\"></a>简单的静态服务器</h2><p>新建server.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//启动端口为81</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//静态资源存放的路径</span></div><div class=\"line\"> app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务启动成功\"</span>);</div></pre></td></tr></table></figure>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/file.png\" algin=\"center\"/><br><br></div>\n\n<p>启动server.js</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E7%AE%80%E5%8D%95.png\" algin=\"center\"/><br><br></div>\n\n<p>通过http请求访问a.html页面</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E7%AE%80%E5%8D%95html.png\" algin=\"center\"/><br><br></div>\n\n<p>可以访问说明搭建成功！</p>\n<h2 id=\"带反向代理静态服务器搭建\"><a href=\"#带反向代理静态服务器搭建\" class=\"headerlink\" title=\"带反向代理静态服务器搭建\"></a>带反向代理静态服务器搭建</h2><p>新建server-kaow-school.js，内容为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//app.disable('x-powered-by');</span></div><div class=\"line\"><span class=\"keyword\">var</span> port = process.env.PORT||<span class=\"number\">81</span>;</div><div class=\"line\"></div><div class=\"line\">app.use(express.static(<span class=\"string\">'E:/SmallTools/StaticServer'</span>));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy</span>(<span class=\"params\">app,route,remoteDomain</span>)</span>&#123;</div><div class=\"line\">    app.use(route,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> url = remoteDomain+req.url;</div><div class=\"line\">      req.pipe(request(url)).pipe(res);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//10.9.4.215:8380  测试服务器ip</span></div><div class=\"line\">proxy(app,<span class=\"string\">'/163'</span>,<span class=\"string\">'http://www.163.com'</span>);</div><div class=\"line\"><span class=\"comment\">//proxy(app,'/MonitorService/','http://10.9.4.215:9192/MonitorService/');</span></div><div class=\"line\"> </div><div class=\"line\">http.createServer(app).listen(port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"服务器启动完成,请使用locahost:\"</span>+port+<span class=\"string\">\"访问\"</span>);</div></pre></td></tr></table></figure>\n<p>启动server-kaow-school.js</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/cmd%E5%A4%8D%E6%9D%82.png\" algin=\"center\"/><br><br></div>\n\n<p>通过http请求访问b.html页面</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82html.png\" algin=\"center\"/><br><br></div>\n\n<p>访问/163</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/%E5%A4%8D%E6%9D%82-163.png\" algin=\"center\"/><br><br></div>\n\n<p>可以访问说明带反向代理的静态服务器搭建成功！</p>\n<h1 id=\"前端知识点\"><a href=\"#前端知识点\" class=\"headerlink\" title=\"前端知识点\"></a>前端知识点</h1><div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/%E5%89%8D%E7%AB%AF%E6%8A%80%E5%B7%A7/tips.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"JS字符串截取空白trim-的原型实现\"><a href=\"#JS字符串截取空白trim-的原型实现\" class=\"headerlink\" title=\"JS字符串截取空白trim()的原型实现\"></a>JS字符串截取空白trim()的原型实现</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">String.prototype.trim = function()&#123;</div><div class=\"line\">\treturn this.replace( /(^\\s*)|(\\s*$)/g , ''\");</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"JS屏蔽键盘按键\"><a href=\"#JS屏蔽键盘按键\" class=\"headerlink\" title=\"JS屏蔽键盘按键\"></a>JS屏蔽键盘按键</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body oncontextmenu=<span class=\"string\">\"return false\"</span> onselectstart=<span class=\"string\">\"return false\"</span> ondragstart=<span class=\"string\">\"return false\"</span> onbeforecopy=<span class=\"string\">\"return false\"</span> onmouseup=<span class=\"built_in\">document</span>.selection.empty() oncopy=<span class=\"built_in\">document</span>.selection.empty() onselect=<span class=\"built_in\">document</span>.selection.empty()&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span> </div><div class=\"line\">讲上面红色显示的插入到网页中就可以实现鼠标右击无效</div><div class=\"line\">禁止选择\t\t\t\t\t\tonselectstart=<span class=\"string\">\"return false\"</span>    \t\t\t</div><div class=\"line\">禁止拖放\t\t\t\t\t\tondragstart=<span class=\"string\">\"return false\"</span>\t\t\t</div><div class=\"line\">禁止拷贝\t\t\t\t\t\tncopy=<span class=\"built_in\">document</span>.selection.empty()\t\t</div><div class=\"line\">禁止保存(放在head里面)\t\t\t&lt;noscript&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">\"*.htm\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span></div><div class=\"line\">禁止粘贴\t\t\t\t\t\t&lt;input type=text onpaste=<span class=\"string\">\"return false\"</span>&gt;</div><div class=\"line\">关闭输入法\t\t\t\t\t&lt;input style=<span class=\"string\">\"ime-mode:disabled\"</span>&gt;</div><div class=\"line\">屏蔽鼠标右键\t\t\t\t\t <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">oncontextmenu</span>(<span class=\"params\"></span>)</span>&#123;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽F1帮助\t\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">window</span>.<span class=\"title\">onhelp</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>&#125; </div><div class=\"line\"></div><div class=\"line\">屏蔽其他键</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">document</span>.<span class=\"title\">onkeydown</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp; </div><div class=\"line\">   \t((<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">37</span>)||\t <span class=\"comment\">//屏蔽 Alt+ 方向键 ← </span></div><div class=\"line\"> \t  (<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">39</span>))) \t\t<span class=\"comment\">//屏蔽 Alt+ 方向键 → &#123; </span></div><div class=\"line\">   \t alert(<span class=\"string\">\"不准你使用ALT+方向键前进或后退网页！\"</span>); </div><div class=\"line\"> \t   event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">    <span class=\"comment\">/* 注：这还不是真正地屏蔽 Alt+ 方向键， </div><div class=\"line\">    因为 Alt+ 方向键弹出警告框时，按住 Alt 键不放， </div><div class=\"line\">    用鼠标点掉警告框，这种屏蔽方法就失效了。以后若 </div><div class=\"line\">    有哪位高手有真正屏蔽 Alt 键的方法，请告知。*/</span> </div><div class=\"line\">   <span class=\"keyword\">if</span> ((event.keyCode==<span class=\"number\">8</span>)   ||                 <span class=\"comment\">//屏蔽退格删除键 </span></div><div class=\"line\"> \t  (event.keyCode==<span class=\"number\">116</span>)||                 <span class=\"comment\">//屏蔽 F5 刷新键 </span></div><div class=\"line\"> \t  (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">82</span>))&#123; <span class=\"comment\">//Ctrl + R </span></div><div class=\"line\"> \t  event.keyCode=<span class=\"number\">0</span>; </div><div class=\"line\">    \tevent.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">屏蔽F11    <span class=\"keyword\">if</span> (event.keyCode==<span class=\"number\">122</span>)&#123;event.keyCode=<span class=\"number\">0</span>;event.returnValue=<span class=\"literal\">false</span>;&#125;</div><div class=\"line\">屏蔽\t\t Ctrl+n    <span class=\"keyword\">if</span> (event.ctrlKey &amp;&amp; event.keyCode==<span class=\"number\">78</span>) event.returnValue=<span class=\"literal\">false</span>; </div><div class=\"line\">   <span class=\"keyword\">if</span> (event.shiftKey &amp;&amp; event.keyCode==<span class=\"number\">121</span>)   event.returnValue=<span class=\"literal\">false</span>;   <span class=\"comment\">//屏蔽 shift+F10 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.event.srcElement.tagName == <span class=\"string\">\"A\"</span> &amp;&amp; <span class=\"built_in\">window</span>.event.shiftKey)  </div><div class=\"line\">   <span class=\"built_in\">window</span>.event.returnValue = <span class=\"literal\">false</span>;          <span class=\"comment\">//屏蔽 shift 加鼠标左键新开一网页 </span></div><div class=\"line\">   <span class=\"keyword\">if</span> ((<span class=\"built_in\">window</span>.event.altKey)&amp;&amp;(<span class=\"built_in\">window</span>.event.keyCode==<span class=\"number\">115</span>))&#123;        <span class=\"comment\">//屏蔽Alt+F4 </span></div><div class=\"line\">   <span class=\"built_in\">window</span>.showModelessDialog(<span class=\"string\">\"about:blank\"</span>,<span class=\"string\">\"\"</span>,<span class=\"string\">\"dialogWidth:1px;dialogheight:1px\"</span>); </div><div class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </div><div class=\"line\">   &#125; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">屏蔽打印：</div><div class=\"line\">&lt;style&gt; </div><div class=\"line\">@media print&#123; </div><div class=\"line\">* &#123;<span class=\"attr\">display</span>:none&#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&lt;<span class=\"regexp\">/style&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"HTML之间传值-通过解析url\"><a href=\"#HTML之间传值-通过解析url\" class=\"headerlink\" title=\"HTML之间传值(通过解析url)\"></a>HTML之间传值(通过解析url)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href); <span class=\"comment\">// 得到参数信息</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//解析url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery获取radio-checkbox\"><a href=\"#Jquery获取radio-checkbox\" class=\"headerlink\" title=\"Jquery获取radio,checkbox\"></a>Jquery获取radio,checkbox</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取radio的id                          </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='r']:checked\"</span>).attr(<span class=\"string\">\"id\"</span>);  </div><div class=\"line\"><span class=\"comment\">//获得checkbox数目</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).length;</div><div class=\"line\"><span class=\"comment\">//遍历checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:check\"</span>).eq(i).attr(<span class=\"string\">\"id\"</span>);</div><div class=\"line\"><span class=\"comment\">//全选checkbox</span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checkbox\"</span>).attr(<span class=\"string\">\"checked\"</span>,<span class=\"string\">\"true\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取选中的checkbox  </span></div><div class=\"line\">$(<span class=\"string\">\"input[name='c']:checked\"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"keyword\">return</span> $(<span class=\"keyword\">this</span>).val();&#125;).get().join(<span class=\"string\">\",\"</span>);</div><div class=\"line\"><span class=\"comment\">//获取下拉框选中的id                     </span></div><div class=\"line\">$(<span class=\"string\">\"#s option:selected\"</span>).attr(<span class=\"string\">\"value\"</span>);</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery页面查询-数据量大时禁用\"><a href=\"#Jquery页面查询-数据量大时禁用\" class=\"headerlink\" title=\"Jquery页面查询(数据量大时禁用)\"></a>Jquery页面查询(数据量大时禁用)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">search</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> nameSearch = $(<span class=\"string\">\"#itemName\"</span>).val(); <span class=\"comment\">//搜索框ID</span></div><div class=\"line\">        <span class=\"keyword\">var</span> tableObj = $(<span class=\"string\">\"#itemList tr:gt(0)\"</span>); <span class=\"comment\">// table的ID</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(nameSearch.trim()!=<span class=\"string\">\"\"</span>)&#123;</div><div class=\"line\">             tableObj.hide();</div><div class=\"line\">             tableObj.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">             \t<span class=\"keyword\">var</span> tr = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">             \t<span class=\"keyword\">var</span> fuHe = tr.children(<span class=\"string\">\":eq(0)\"</span>).html();</div><div class=\"line\">             \t<span class=\"keyword\">if</span>(fuHe.indexOf(nameSearch)==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">                        tr.show();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                tableObj.show();</div><div class=\"line\">            &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Jquery-回车-Enter-移到下一个输入框\"><a href=\"#Jquery-回车-Enter-移到下一个输入框\" class=\"headerlink\" title=\"Jquery 回车(Enter)移到下一个输入框\"></a>Jquery 回车(Enter)移到下一个输入框</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">'input:text:first'</span>).focus();</div><div class=\"line\">            $(<span class=\"string\">'input:text'</span>).bind(<span class=\"string\">\"keydown\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (e.which == <span class=\"number\">13</span>) &#123;       <span class=\"comment\">//Enter key</span></div><div class=\"line\">                    e.preventDefault();     <span class=\"comment\">//to skip default behaviour of enter key</span></div><div class=\"line\">                    <span class=\"keyword\">var</span> nextinput = $(<span class=\"string\">'input:text'</span>)[$(<span class=\"string\">'input:text'</span>).index(<span class=\"keyword\">this</span>) + <span class=\"number\">1</span>];</div><div class=\"line\">                    <span class=\"keyword\">if</span> (nextinput != <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">                        nextinput.focus();</div><div class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                        alert(<span class=\"string\">\"没有下一个输入框！\"</span>);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"JS-Jquery获取各种屏幕的宽度和高度\"><a href=\"#JS-Jquery获取各种屏幕的宽度和高度\" class=\"headerlink\" title=\"JS,Jquery获取各种屏幕的宽度和高度\"></a>JS,Jquery获取各种屏幕的宽度和高度</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Javascript:</span></div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.clientWidth</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.clientHeight</div><div class=\"line\">网页可见区域宽： \t<span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)</div><div class=\"line\">网页可见区域高： \t<span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)</div><div class=\"line\">网页正文全文宽： \t<span class=\"built_in\">document</span>.body.scrollWidth</div><div class=\"line\">网页正文全文高： \t<span class=\"built_in\">document</span>.body.scrollHeight</div><div class=\"line\">网页被卷去的高： \t<span class=\"built_in\">document</span>.body.scrollTop</div><div class=\"line\">网页被卷去的左： \t<span class=\"built_in\">document</span>.body.scrollLeft</div><div class=\"line\">网页正文部分上： \t<span class=\"built_in\">window</span>.screenTop</div><div class=\"line\">网页正文部分左： \t<span class=\"built_in\">window</span>.screenLeft</div><div class=\"line\">屏幕分辨率的高： \t<span class=\"built_in\">window</span>.screen.height</div><div class=\"line\">屏幕分辨率的宽： \t<span class=\"built_in\">window</span>.screen.width</div><div class=\"line\">屏幕可用工作区高度： \t<span class=\"built_in\">window</span>.screen.availHeight</div><div class=\"line\">屏幕可用工作区宽度： \t<span class=\"built_in\">window</span>.screen.availWidth</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//JQuery:</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).height()); <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).height()); <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).height());<span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">\talert($(<span class=\"built_in\">window</span>).width()); <span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>).width());<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).width());<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">\talert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Ajax-Get时请求异步缓存问题\"><a href=\"#Ajax-Get时请求异步缓存问题\" class=\"headerlink\" title=\"Ajax,Get时请求异步缓存问题\"></a>Ajax,Get时请求异步缓存问题</h2><p>用Ajax的Get方式请求同一个地址获取数据时，经常碰到回调函数成功执行，前台又有数据的情况，但是无法请求到后台获得最新的数据。原因是ajax存在<code>异步缓存</code>的问题。</p>\n<p>因为ajax本身自带有实时异步请求的功能，而IE缓存导致请求时不会请求后台，会直接读取缓存的数据。</p>\n<p>解决办法：</p>\n<ol>\n<li><p>ajax get请求时比较简单 只需将cache设置为false就好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;  </div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,\t<span class=\"comment\">//get请求时  </span></div><div class=\"line\">        url: <span class=\"string\">'....'</span>,  </div><div class=\"line\">        <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,\t<span class=\"comment\">//不缓存  </span></div><div class=\"line\">        data: &#123; &#125;,  </div><div class=\"line\">        <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">              <span class=\"comment\">//  </span></div><div class=\"line\">         &#125;  </div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>访问就在URL后面加上 URL?+new Date();[总之就是使每次访问的URL字符串不一样的]</p>\n<p>设计WEB页面的时候 也应该遵守这个原则，因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好。</p>\n</li>\n</ol>"},{"title":"跨页面(Tab/Window)通信的几种方法","date":"2017-09-01T02:32:43.000Z","_content":"\n​\t今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用`webSocket` 进行通讯，之后通过谷歌和百度找出了更为简便的方法。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 利用webSocket进行通讯\n\n​\t第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。\n\n# 定时器不断检查cookies变化\n\n在[stackoverflow](https://stackoverflow.com/)上看到一个方案，大致思路是：\n\n1. 在页面A设置一个使用 `setInterval` 定时器不断刷新，检查 `Cookies` 的值是否发生变化，如果变化就进行刷新的操作。\n2. 由于 `Cookies` 是在同域可读的，所以在页面 B 审核的时候改变 `Cookies` 的值，页面 A 自然是可以拿到的。\n   这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。\n\n# localStorage的事件\n\n功夫不负有心人，后来发现 window 有一个 [StorageEvent](https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent) ，每当 `localStorage` 改变的时候可以触发这个事件。（这个原理就像你给一个`DOM` 绑定了 `click` 事件，当你点击它的时候，就会自动触发。）也就是说，我给 `window` 绑定这个事件后，每当我改变 `localStorage` 的时候，他都会触发这个事件。\n\n```\nwindow.addEventListener('storage', function (event) {\n  console.log(event);\n});\n```\n\n这个回调中的`event`与普通的[EVNET](https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties),基本差不多，但是它比其他的`event`多了如下几个属性:\n\n| 属性       | 描述                          |\n| -------- | --------------------------- |\n| key      | 受影响的 `localStorage` 的 `key` |\n| newValue | 新的值                         |\n| oldValue | 旧的值                         |\n| url      | 触发此事件的url                   |\n\n每当一个页面改变了 `localStorage` 的值，都会触发这个事件。也就是说可以很容易的通过改变 `localStorage` 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 `localStorage` 发生**改变**的时候才会被触发，如果没改变则**不会触发**此事件。\n\n```\nlocalStorage.setItem('delete',1); //触发\nlocalStorage.setItem('delete',1); //不触发\nlocalStorage.setItem('delete',2); //触发\n```\n\n在使用的时候务必注意这一点。\n最终实现代码:\n\n**页面A：**\n\n```\n//页面 A\nwindow.addEventListener('storage', function (event) {\n    if(event.key === 'delete_verify_list'){\n        //页面操作\n    }\n});\n```\n\n**页面B：**\n\n```\n//页面 B\n/**\n *  获取一个随机id\n * @return {String} - 返回一个5位的随机字符串\n */\nfunction randomId() {\n    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();\n}\n\n//每当需要页面A更新时 执行此方法\nif (localStorage) {\n\t//为保证每次页面A都执行，此处我设置里一个随机字符串\n    localStorage.setItem('delete_verify_list', randomId());\n}\n```\n\n参考：<https://ponyfoo.com/articles/cross-tab-communication>\n\n","source":"_posts/跨页面-Tab-Window-通信的几种方法.md","raw":"---\ntitle: 跨页面(Tab/Window)通信的几种方法\ndate: 2017-09-01 10:32:43\ntags: [前端,tips,js]\ncategories: technology\n---\n\n​\t今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用`webSocket` 进行通讯，之后通过谷歌和百度找出了更为简便的方法。\n\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 利用webSocket进行通讯\n\n​\t第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。\n\n# 定时器不断检查cookies变化\n\n在[stackoverflow](https://stackoverflow.com/)上看到一个方案，大致思路是：\n\n1. 在页面A设置一个使用 `setInterval` 定时器不断刷新，检查 `Cookies` 的值是否发生变化，如果变化就进行刷新的操作。\n2. 由于 `Cookies` 是在同域可读的，所以在页面 B 审核的时候改变 `Cookies` 的值，页面 A 自然是可以拿到的。\n   这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。\n\n# localStorage的事件\n\n功夫不负有心人，后来发现 window 有一个 [StorageEvent](https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent) ，每当 `localStorage` 改变的时候可以触发这个事件。（这个原理就像你给一个`DOM` 绑定了 `click` 事件，当你点击它的时候，就会自动触发。）也就是说，我给 `window` 绑定这个事件后，每当我改变 `localStorage` 的时候，他都会触发这个事件。\n\n```\nwindow.addEventListener('storage', function (event) {\n  console.log(event);\n});\n```\n\n这个回调中的`event`与普通的[EVNET](https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties),基本差不多，但是它比其他的`event`多了如下几个属性:\n\n| 属性       | 描述                          |\n| -------- | --------------------------- |\n| key      | 受影响的 `localStorage` 的 `key` |\n| newValue | 新的值                         |\n| oldValue | 旧的值                         |\n| url      | 触发此事件的url                   |\n\n每当一个页面改变了 `localStorage` 的值，都会触发这个事件。也就是说可以很容易的通过改变 `localStorage` 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 `localStorage` 发生**改变**的时候才会被触发，如果没改变则**不会触发**此事件。\n\n```\nlocalStorage.setItem('delete',1); //触发\nlocalStorage.setItem('delete',1); //不触发\nlocalStorage.setItem('delete',2); //触发\n```\n\n在使用的时候务必注意这一点。\n最终实现代码:\n\n**页面A：**\n\n```\n//页面 A\nwindow.addEventListener('storage', function (event) {\n    if(event.key === 'delete_verify_list'){\n        //页面操作\n    }\n});\n```\n\n**页面B：**\n\n```\n//页面 B\n/**\n *  获取一个随机id\n * @return {String} - 返回一个5位的随机字符串\n */\nfunction randomId() {\n    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();\n}\n\n//每当需要页面A更新时 执行此方法\nif (localStorage) {\n\t//为保证每次页面A都执行，此处我设置里一个随机字符串\n    localStorage.setItem('delete_verify_list', randomId());\n}\n```\n\n参考：<https://ponyfoo.com/articles/cross-tab-communication>\n\n","slug":"跨页面-Tab-Window-通信的几种方法","published":1,"updated":"2017-09-13T06:33:07.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjaw2xfb9001nswg6wnn8nov5","content":"<p>​    今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用<code>webSocket</code> 进行通讯，之后通过谷歌和百度找出了更为简便的方法。</p>\n<div align=\"center\"><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"利用webSocket进行通讯\"><a href=\"#利用webSocket进行通讯\" class=\"headerlink\" title=\"利用webSocket进行通讯\"></a>利用webSocket进行通讯</h1><p>​    第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。</p>\n<h1 id=\"定时器不断检查cookies变化\"><a href=\"#定时器不断检查cookies变化\" class=\"headerlink\" title=\"定时器不断检查cookies变化\"></a>定时器不断检查cookies变化</h1><p>在<a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"external\">stackoverflow</a>上看到一个方案，大致思路是：</p>\n<ol>\n<li>在页面A设置一个使用 <code>setInterval</code> 定时器不断刷新，检查 <code>Cookies</code> 的值是否发生变化，如果变化就进行刷新的操作。</li>\n<li>由于 <code>Cookies</code> 是在同域可读的，所以在页面 B 审核的时候改变 <code>Cookies</code> 的值，页面 A 自然是可以拿到的。<br>这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。</li>\n</ol>\n<h1 id=\"localStorage的事件\"><a href=\"#localStorage的事件\" class=\"headerlink\" title=\"localStorage的事件\"></a>localStorage的事件</h1><p>功夫不负有心人，后来发现 window 有一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent\" target=\"_blank\" rel=\"external\">StorageEvent</a> ，每当 <code>localStorage</code> 改变的时候可以触发这个事件。（这个原理就像你给一个<code>DOM</code> 绑定了 <code>click</code> 事件，当你点击它的时候，就会自动触发。）也就是说，我给 <code>window</code> 绑定这个事件后，每当我改变 <code>localStorage</code> 的时候，他都会触发这个事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">  console.log(event);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个回调中的<code>event</code>与普通的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties\" target=\"_blank\" rel=\"external\">EVNET</a>,基本差不多，但是它比其他的<code>event</code>多了如下几个属性:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>受影响的 <code>localStorage</code> 的 <code>key</code></td>\n</tr>\n<tr>\n<td>newValue</td>\n<td>新的值</td>\n</tr>\n<tr>\n<td>oldValue</td>\n<td>旧的值</td>\n</tr>\n<tr>\n<td>url</td>\n<td>触发此事件的url</td>\n</tr>\n</tbody>\n</table>\n<p>每当一个页面改变了 <code>localStorage</code> 的值，都会触发这个事件。也就是说可以很容易的通过改变 <code>localStorage</code> 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 <code>localStorage</code> 发生<strong>改变</strong>的时候才会被触发，如果没改变则<strong>不会触发</strong>此事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //不触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,2); //触发</div></pre></td></tr></table></figure>\n<p>在使用的时候务必注意这一点。<br>最终实现代码:</p>\n<p><strong>页面A：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 A</div><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">    if(event.key === &apos;delete_verify_list&apos;)&#123;</div><div class=\"line\">        //页面操作</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>页面B：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 B</div><div class=\"line\">/**</div><div class=\"line\"> *  获取一个随机id</div><div class=\"line\"> * @return &#123;String&#125; - 返回一个5位的随机字符串</div><div class=\"line\"> */</div><div class=\"line\">function randomId() &#123;</div><div class=\"line\">    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//每当需要页面A更新时 执行此方法</div><div class=\"line\">if (localStorage) &#123;</div><div class=\"line\">\t//为保证每次页面A都执行，此处我设置里一个随机字符串</div><div class=\"line\">    localStorage.setItem(&apos;delete_verify_list&apos;, randomId());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://ponyfoo.com/articles/cross-tab-communication\" target=\"_blank\" rel=\"external\">https://ponyfoo.com/articles/cross-tab-communication</a></p>\n","site":{"data":{}},"excerpt":"<p>​    今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用<code>webSocket</code> 进行通讯，之后通过谷歌和百度找出了更为简便的方法。</p>\n<div align=center><img width=\"450\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-13/additional/html%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC.png\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"利用webSocket进行通讯\"><a href=\"#利用webSocket进行通讯\" class=\"headerlink\" title=\"利用webSocket进行通讯\"></a>利用webSocket进行通讯</h1><p>​    第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。</p>\n<h1 id=\"定时器不断检查cookies变化\"><a href=\"#定时器不断检查cookies变化\" class=\"headerlink\" title=\"定时器不断检查cookies变化\"></a>定时器不断检查cookies变化</h1><p>在<a href=\"https://stackoverflow.com/\">stackoverflow</a>上看到一个方案，大致思路是：</p>\n<ol>\n<li>在页面A设置一个使用 <code>setInterval</code> 定时器不断刷新，检查 <code>Cookies</code> 的值是否发生变化，如果变化就进行刷新的操作。</li>\n<li>由于 <code>Cookies</code> 是在同域可读的，所以在页面 B 审核的时候改变 <code>Cookies</code> 的值，页面 A 自然是可以拿到的。<br>这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。</li>\n</ol>\n<h1 id=\"localStorage的事件\"><a href=\"#localStorage的事件\" class=\"headerlink\" title=\"localStorage的事件\"></a>localStorage的事件</h1><p>功夫不负有心人，后来发现 window 有一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent\">StorageEvent</a> ，每当 <code>localStorage</code> 改变的时候可以触发这个事件。（这个原理就像你给一个<code>DOM</code> 绑定了 <code>click</code> 事件，当你点击它的时候，就会自动触发。）也就是说，我给 <code>window</code> 绑定这个事件后，每当我改变 <code>localStorage</code> 的时候，他都会触发这个事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">  console.log(event);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个回调中的<code>event</code>与普通的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties\">EVNET</a>,基本差不多，但是它比其他的<code>event</code>多了如下几个属性:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>受影响的 <code>localStorage</code> 的 <code>key</code></td>\n</tr>\n<tr>\n<td>newValue</td>\n<td>新的值</td>\n</tr>\n<tr>\n<td>oldValue</td>\n<td>旧的值</td>\n</tr>\n<tr>\n<td>url</td>\n<td>触发此事件的url</td>\n</tr>\n</tbody>\n</table>\n<p>每当一个页面改变了 <code>localStorage</code> 的值，都会触发这个事件。也就是说可以很容易的通过改变 <code>localStorage</code> 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 <code>localStorage</code> 发生<strong>改变</strong>的时候才会被触发，如果没改变则<strong>不会触发</strong>此事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //不触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,2); //触发</div></pre></td></tr></table></figure>\n<p>在使用的时候务必注意这一点。<br>最终实现代码:</p>\n<p><strong>页面A：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 A</div><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">    if(event.key === &apos;delete_verify_list&apos;)&#123;</div><div class=\"line\">        //页面操作</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>页面B：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 B</div><div class=\"line\">/**</div><div class=\"line\"> *  获取一个随机id</div><div class=\"line\"> * @return &#123;String&#125; - 返回一个5位的随机字符串</div><div class=\"line\"> */</div><div class=\"line\">function randomId() &#123;</div><div class=\"line\">    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//每当需要页面A更新时 执行此方法</div><div class=\"line\">if (localStorage) &#123;</div><div class=\"line\">\t//为保证每次页面A都执行，此处我设置里一个随机字符串</div><div class=\"line\">    localStorage.setItem(&apos;delete_verify_list&apos;, randomId());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://ponyfoo.com/articles/cross-tab-communication\">https://ponyfoo.com/articles/cross-tab-communication</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjaw2xf900009swg63xd6r7ga","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xf9g000eswg6onc9komw"},{"post_id":"cjaw2xf8k0001swg6wxp8dt8z","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xf9g000iswg69zalthjp"},{"post_id":"cjaw2xf9g000aswg6g9lthz1m","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfa0000lswg6rbg00us6"},{"post_id":"cjaw2xf9g000dswg63uogux7u","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfa5000pswg69xrqfeg7"},{"post_id":"cjaw2xf8k0003swg6fdbivtpy","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfad000sswg6zuaxhz81"},{"post_id":"cjaw2xf9g000fswg6njxy4upb","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfae000wswg6kmqg3xju"},{"post_id":"cjaw2xf9x000jswg6hkty714w","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfae000zswg68f20qj5e"},{"post_id":"cjaw2xf900007swg6jwdwkpff","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfat0013swg6qg3su6nb"},{"post_id":"cjaw2xfa8000qswg6w2qe76cu","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfat0016swg6tt8hst9r"},{"post_id":"cjaw2xfae000tswg6wdgulhc0","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfat001bswg6muti52x5"},{"post_id":"cjaw2xfae000xswg61e2p1jbd","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfat001eswg6orbrjrnt"},{"post_id":"cjaw2xfae0010swg6882ju5hz","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfb9001hswg69fjykczx"},{"post_id":"cjaw2xfat0017swg6be10eqvx","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfb9001mswg67kgr8b9z"},{"post_id":"cjaw2xfat001fswg614ysco9e","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfb9001pswg68xrw5w59"},{"post_id":"cjaw2xfat0014swg60mfcbj32","category_id":"cjaw2xfat001aswg6s0yb9r4y","_id":"cjaw2xfb9001sswg6x2hx1trz"},{"post_id":"cjaw2xfb9001jswg6zw93k9h9","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfb9001uswg6ia5akoy7"},{"post_id":"cjaw2xfb9001nswg6wnn8nov5","category_id":"cjaw2xf900005swg6byb6odt3","_id":"cjaw2xfbp001xswg64ygwdged"},{"post_id":"cjaw2xfat001cswg6f3w4qzpb","category_id":"cjaw2xfb9001kswg6a7f17gat","_id":"cjaw2xfbq001zswg6o6fzqu1y"}],"PostTag":[{"post_id":"cjaw2xf8k0001swg6wxp8dt8z","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xf9z000kswg6fsxb7yqm"},{"post_id":"cjaw2xf8k0001swg6wxp8dt8z","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfa3000nswg6tcjvy857"},{"post_id":"cjaw2xf9g000fswg6njxy4upb","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfab000rswg69lqgsyy3"},{"post_id":"cjaw2xf9g000fswg6njxy4upb","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfae000uswg67neb2l4t"},{"post_id":"cjaw2xf9x000jswg6hkty714w","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfae000yswg6cizq3py9"},{"post_id":"cjaw2xf9x000jswg6hkty714w","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfat0011swg6v4tsbwa5"},{"post_id":"cjaw2xfa1000mswg69m8hm9de","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfat0015swg6sdwbw8zj"},{"post_id":"cjaw2xf8k0003swg6fdbivtpy","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfat0018swg6gpb8w7ek"},{"post_id":"cjaw2xf8k0003swg6fdbivtpy","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfat001dswg604euxza4"},{"post_id":"cjaw2xfae0010swg6882ju5hz","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfb9001gswg6ersllyr1"},{"post_id":"cjaw2xfae0010swg6882ju5hz","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfb9001lswg68qpmsj3n"},{"post_id":"cjaw2xf900007swg6jwdwkpff","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfb9001oswg63sqppkh6"},{"post_id":"cjaw2xf900007swg6jwdwkpff","tag_id":"cjaw2xfat0012swg6wu03f0xi","_id":"cjaw2xfb9001rswg6q6m364vq"},{"post_id":"cjaw2xf900009swg63xd6r7ga","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfb9001tswg615pgl7a2"},{"post_id":"cjaw2xf900009swg63xd6r7ga","tag_id":"cjaw2xfat0019swg6tkj5tdis","_id":"cjaw2xfbo001wswg65osoef2j"},{"post_id":"cjaw2xfat001fswg614ysco9e","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfbp001yswg6z9s1m6u7"},{"post_id":"cjaw2xfat001fswg614ysco9e","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfbr0020swg6nhl9qev1"},{"post_id":"cjaw2xf9g000aswg6g9lthz1m","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfbt0022swg67yozdar6"},{"post_id":"cjaw2xf9g000aswg6g9lthz1m","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfbt0023swg68lc44on2"},{"post_id":"cjaw2xf9g000dswg63uogux7u","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfbv0025swg6uadcntj6"},{"post_id":"cjaw2xf9g000dswg63uogux7u","tag_id":"cjaw2xfb9001qswg6qtiswcwv","_id":"cjaw2xfbv0026swg65f3wh1rn"},{"post_id":"cjaw2xfa8000qswg6w2qe76cu","tag_id":"cjaw2xfbn001vswg619nt7cz8","_id":"cjaw2xfby0028swg6t844lt46"},{"post_id":"cjaw2xfae000tswg6wdgulhc0","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfbz0029swg6871vps5b"},{"post_id":"cjaw2xfae000tswg6wdgulhc0","tag_id":"cjaw2xfbr0021swg615m3ufwl","_id":"cjaw2xfc0002bswg64zll25c3"},{"post_id":"cjaw2xfae000xswg61e2p1jbd","tag_id":"cjaw2xf900006swg6pbu0k0c9","_id":"cjaw2xfc0002cswg6awgh5c91"},{"post_id":"cjaw2xfae000xswg61e2p1jbd","tag_id":"cjaw2xfb9001qswg6qtiswcwv","_id":"cjaw2xfc1002eswg6o4wgdf1m"},{"post_id":"cjaw2xfat0014swg60mfcbj32","tag_id":"cjaw2xfbv0027swg647guilcv","_id":"cjaw2xfc1002fswg6s1unflwd"},{"post_id":"cjaw2xfat0017swg6be10eqvx","tag_id":"cjaw2xfbz002aswg6l4kwdxt6","_id":"cjaw2xfc3002hswg6qb9v6k2u"},{"post_id":"cjaw2xfat0017swg6be10eqvx","tag_id":"cjaw2xfc0002dswg6i9878rt0","_id":"cjaw2xfc3002iswg6h8cjq634"},{"post_id":"cjaw2xfat001cswg6f3w4qzpb","tag_id":"cjaw2xfc2002gswg616njv5av","_id":"cjaw2xfc5002kswg6t3f78gun"},{"post_id":"cjaw2xfb9001jswg6zw93k9h9","tag_id":"cjaw2xfc4002jswg64iiubze5","_id":"cjaw2xfc8002nswg6egvq413i"},{"post_id":"cjaw2xfb9001jswg6zw93k9h9","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfc8002oswg6d6ujnzvi"},{"post_id":"cjaw2xfb9001jswg6zw93k9h9","tag_id":"cjaw2xfbz002aswg6l4kwdxt6","_id":"cjaw2xfc9002qswg6funtli64"},{"post_id":"cjaw2xfb9001nswg6wnn8nov5","tag_id":"cjaw2xfc4002jswg64iiubze5","_id":"cjaw2xfca002rswg63fh76hh2"},{"post_id":"cjaw2xfb9001nswg6wnn8nov5","tag_id":"cjaw2xf9g000cswg6vxduho7l","_id":"cjaw2xfca002sswg6t00vodez"},{"post_id":"cjaw2xfb9001nswg6wnn8nov5","tag_id":"cjaw2xfbz002aswg6l4kwdxt6","_id":"cjaw2xfcc002tswg6pflux8pj"}],"Tag":[{"name":"java","_id":"cjaw2xf900006swg6pbu0k0c9"},{"name":"tips","_id":"cjaw2xf9g000cswg6vxduho7l"},{"name":"extendKW","_id":"cjaw2xfat0012swg6wu03f0xi"},{"name":"jvm","_id":"cjaw2xfat0019swg6tkj5tdis"},{"name":"mysql","_id":"cjaw2xfb9001qswg6qtiswcwv"},{"name":"sql","_id":"cjaw2xfbn001vswg619nt7cz8"},{"name":"spring","_id":"cjaw2xfbr0021swg615m3ufwl"},{"name":"firstday","_id":"cjaw2xfbv0027swg647guilcv"},{"name":"js","_id":"cjaw2xfbz002aswg6l4kwdxt6"},{"name":"移动端","_id":"cjaw2xfc0002dswg6i9878rt0"},{"name":"nowHot","_id":"cjaw2xfc2002gswg616njv5av"},{"name":"前端","_id":"cjaw2xfc4002jswg64iiubze5"}]}}
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinPay.jpg","path":"images/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/1.png","path":"uploads/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/header-bk.jpg","path":"uploads/header-bk.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/weixinPay.jpg","path":"uploads/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"a3f8273b83519c20388f6fb0245850204ed710d9","modified":1490112342141},{"_id":"source/CNAME","hash":"68f171e51cfb4edfbc77d45b70fc2562088c67df","modified":1490099407885},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1490059479124},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1490059479125},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1490059479126},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1490059479129},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1490059479130},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1490059479131},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1490059479131},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1490059479132},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1490059479132},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1490059479133},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1490059479134},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1490059479135},{"_id":"themes/next/_config.yml","hash":"d0f0b5b299c3203f4794f0d36903b6a4cfda97b4","modified":1491562472852},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1490059479136},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1490059479136},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1490059479219},{"_id":"source/_posts/JAVA定时调度-Timer和Executors.md","hash":"c796ff3f49dd18ca72e632f60d073e26fa51f341","modified":1491107615918},{"_id":"source/_posts/JAVA实现简单爬虫.md","hash":"3801a3f794cbc656e2c5a839b5605664ceeacaa7","modified":1491443880489},{"_id":"source/_posts/Markdown语法.md","hash":"478e074003e7029e9ed3856a50cb3a858e510dcf","modified":1491443627400},{"_id":"source/_posts/微信公众号网页开发.md","hash":"e220695dcb060bb8050ab5b07e423d6ca0694a8c","modified":1496365324384},{"_id":"source/_posts/Linux基本命令.md","hash":"f1064a9f9b1376094a836f68568a1782a22e6873","modified":1491576883085},{"_id":"source/_posts/博客建成第一天.md","hash":"7b965577a692db315a78580cdfe5fac19d97448e","modified":1490686902858},{"_id":"source/_posts/浅谈共享单车.md","hash":"da764d80cedc68a3215a4d76367ede0751ddd77d","modified":1491036954514},{"_id":"source/_posts/MySQL优化.md","hash":"d7cec6cf4f9869b129f58a207b72102c8b802552","modified":1492403781398},{"_id":"source/about/index.md","hash":"98440174c0a5feee882109b861955d345f85e531","modified":1490676531966},{"_id":"source/categories/index.md","hash":"90bb103e21f9645871d8ce6122db99407c76ea87","modified":1490160807691},{"_id":"source/tags/index.md","hash":"11c6ba3279f347c97931477f61bc326b07f0714e","modified":1490160821217},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1490059479127},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1490059479128},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1490059479141},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1490059479143},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1490059479139},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1490059479145},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1490059479146},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1490059479144},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1490059479147},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1490059479146},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1490059479147},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1490059479148},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1490059479149},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1490059479149},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1490059479148},{"_id":"themes/next/layout/_layout.swig","hash":"d604474da075c3409128a39fdc756963b702ada0","modified":1490190590311},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1490059479212},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1490059479212},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1490059479213},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1490188444847},{"_id":"themes/next/layout/page.swig","hash":"467def05e26cff67dfe690d060f7e58dc1ba0d75","modified":1490111357868},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1490059479218},{"_id":"themes/next/layout/tag.swig","hash":"e3f91b5784aa401e73aed0e2f668458ab6d434f7","modified":1490670223090},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1490059479220},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1490059479222},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1490059479399},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1490059479399},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1490059479400},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490059479324},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490339781805},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1490059479151},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1490059479152},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1490059479154},{"_id":"themes/next/layout/_macro/post.swig","hash":"c31716bc20ade1cc02f1b472dabd7357f3bce3d9","modified":1490666542211},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"7df8cb744844efce0135ff76ac1983a598a7dfbf","modified":1491576721300},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1490059479159},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1490059479160},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fe8e5c9f840e8643c95c2c8b4510083aa24c2002","modified":1490059479161},{"_id":"themes/next/layout/_partials/footer.swig","hash":"12db06ad603797e02306576e64cd1d3758d0bc48","modified":1490274073194},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1490059479162},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1490059479172},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1490059479173},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1490059479174},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1490059479175},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1490059479183},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1490059479183},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"bd174c8ad620da37616cad735503fc847240a3e7","modified":1490339344753},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1490059479201},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1490059479200},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1490059479203},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1490059479202},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1490059479224},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1490059479223},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1490059479224},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1490059479224},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1490059479226},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1490059479228},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1490113055749},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1490059479325},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1490059479326},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1490059479327},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1490059479327},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1490059479328},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1490059479328},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1490059479329},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1490059479330},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490059479330},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490059479331},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1490059479331},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1490059479332},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490059479332},{"_id":"themes/next/source/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1490071522748},{"_id":"themes/next/source/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1490763617852},{"_id":"themes/next/source/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1490279591545},{"_id":"themes/next/source/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1490071522748},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490059479184},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490059479184},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490059479300},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490059479300},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490059479303},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490059479320},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1490184356563},{"_id":"source/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1490243897225},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1490059479169},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1490059479170},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1490059479175},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1490059479177},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1490059479178},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1490059479180},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1490059479181},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1490059479181},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1490059479182},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1490059479184},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1490059479185},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1490059479187},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1490059479189},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1490059479191},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1490059479192},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1490059479193},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1490059479193},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1490059479194},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1490059479194},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1490059479196},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1490059479196},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1490059479197},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1490059479195},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1490059479197},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1490059479198},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1490059479198},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1490059479199},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1490059479199},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1490059479199},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1490059479200},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1490059479209},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1490059479210},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1490059479211},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1490059479211},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"cc4fe0d21b1178075b31f96449e6ebc2e5b7dade","modified":1491227426461},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1490059479301},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1490059479302},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1490059479320},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1490059479322},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1490059479323},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"ec4e2bf37dbe9c09fef9f31ca712cb80d06e44e9","modified":1491319009801},{"_id":"themes/next/source/css/_variables/donate.styl","hash":"cebab8d0ed9a749382ec3638361e6d4c51bc13e8","modified":1490112874101},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1490059479333},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1490059479334},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1490059479334},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1490059479335},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1490059479335},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1490059479336},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1490059479337},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1490059479338},{"_id":"themes/next/source/js/src/utils.js","hash":"988f29f78e68fa184c4412b722f5895fa78a4783","modified":1490059479339},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490059479341},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490059479346},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1490059479347},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1490059479347},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1490059479357},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1490059479357},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1490059479358},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1490059479359},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1490059479361},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1490059479362},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1490059479361},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1490059479362},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1490059479362},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1490059479387},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1490059479389},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1490059479389},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1490059479390},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1490059479390},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1490059479391},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1490059479390},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1490059479393},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1490059479394},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1490059479397},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1490059479398},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1490059479398},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"b070490e0588c4625e84bcd4f847dc6275a97a81","modified":1490339344753},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1490059479388},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1490059479208},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1490059479209},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1490059479231},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1490059479232},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1490059479232},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1490059479231},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1490059479233},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1490059479249},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1490059479282},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1490059479297},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1490059479297},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1490059479298},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1490059479298},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1490059479299},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1490059479307},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1490059479296},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1490059479308},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1490059479308},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1490059479309},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1490059479309},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490059479310},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1490059479310},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1490059479312},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1490059479313},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1490059479313},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1490059479316},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1490059479317},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dd763e86a3bfd9820e49cffce0d9c593489af9d4","modified":1490059479317},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1490059479318},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1490059479318},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1490059479315},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1490059479318},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1490059479319},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1490059479338},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490059479348},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490059479348},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490059479349},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490059479349},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490059479350},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490059479350},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1490059479354},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1490059479356},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1490059479356},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1490059479360},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490059479360},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1490059479364},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1490059479364},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1490059479365},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1490059479392},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1490059479393},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1490059479384},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1490059479386},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1490059479396},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1490059479234},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"0918eda6f9439bb388e7c772d0e22a91c28a9bac","modified":1490244057156},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1490179220659},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1490059479239},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1490059479242},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1490059479243},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"d406a09af606be82f716c15e4ad597b7fdcf0728","modified":1490059479244},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1490059479245},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1490059479246},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1490059479247},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1490059479248},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1490059479247},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1490059479249},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1490059479244},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1490059479250},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1490059479252},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1490059479257},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1490059479254},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1490059479258},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1490059479259},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1490059479260},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1490059479260},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1490059479267},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1490059479269},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1490059479270},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1490059479269},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1490059479273},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1490059479274},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1490059479260},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1490059479275},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1490059479277},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1490059479279},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"1f4cb55864d7b7e45cd27c64d7bfbd6edd119f48","modified":1490189709522},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1490059479280},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1490059479281},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1490059479290},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1490059479286},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1490059479292},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1490059479293},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1490059479294},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1490059479294},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1490059479295},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1490059479283},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1490059479283},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1490059479284},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1490059479284},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1490059479285},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1490059479285},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1490059479287},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1490059479278},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1490059479311},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1490059479311},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1490059479316},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1490059479351},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1490059479352},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1490059479353},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1490059479353},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1490059479354},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490059479351},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1490059479369},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1490059479373},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1490059479382},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1490059479345},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1490339344769},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1490059479379},{"_id":"public/baidusitemap.xml","hash":"9dbf8f697765c5918971ff0256283c67d31b06a5","modified":1496365352418},{"_id":"public/sitemap.xml","hash":"67e8c5242725a4f6ef07e5a536e751e0acfa3a44","modified":1496365352450},{"_id":"public/search.xml","hash":"0c055d692376f94d1597dead96834e18ad000e14","modified":1496365352451},{"_id":"public/404.html","hash":"311e58d19648fce6876a2e23d0803173ee7fddaa","modified":1496365352482},{"_id":"public/about/index.html","hash":"3b2c0a1165b0a2ea0cb19f376a53c11152bdc1c8","modified":1496365352483},{"_id":"public/categories/index.html","hash":"107bcbcf1031f5e0bcb3d28ef886886a3c0c3c2f","modified":1496365352483},{"_id":"public/tags/index.html","hash":"0ccd8b4e55a57a140a4d148c1d865de54616891b","modified":1496365352483},{"_id":"public/2017/03/07/博客建成第一天/index.html","hash":"d9ae77b8068cf76d05b29ddf7e8f9221de124c19","modified":1496365352483},{"_id":"public/2017/03/21/Markdown语法/index.html","hash":"79b33c8e1f39522faf6d4acc86fe9b98cd0dce27","modified":1496365352483},{"_id":"public/2017/03/24/浅谈共享单车/index.html","hash":"6ae5e1fe073d6714e0b0565efe4a53b3ffff364e","modified":1496365352483},{"_id":"public/2017/03/27/JAVA定时调度-Timer和Executors/index.html","hash":"9e6a733a74966bce76cc30797881295575dd94b6","modified":1496365352484},{"_id":"public/2017/04/01/JAVA实现简单爬虫/index.html","hash":"c80d5dcedefcfec29db7143b68aa326862022a91","modified":1496365352484},{"_id":"public/2017/04/07/Linux基本命令/index.html","hash":"f4bbb25a4164d4fb66932020b8500007536d1d1a","modified":1496365352484},{"_id":"public/2017/04/17/MySQL优化/index.html","hash":"f7c6298ae75102d9b6686240d26ced2a1b17c85f","modified":1496365352484},{"_id":"public/2017/06/01/微信公众号网页开发/index.html","hash":"99b0c2fdbb5e2744296b1b7f562bf9605ed687c9","modified":1496365352484},{"_id":"public/archives/index.html","hash":"7f8166f3b32963e78b5efb3751cd2bb190d660cb","modified":1496365352484},{"_id":"public/archives/page/2/index.html","hash":"886b6001b9b1fae58c654d7116021fc67bdae8c5","modified":1496365352485},{"_id":"public/archives/2017/index.html","hash":"a4664a839d4228756d642c4c01a1616150511867","modified":1496365352485},{"_id":"public/archives/2017/page/2/index.html","hash":"f45349241a23d8235aaeab699fa4e2f223ba8fcc","modified":1496365352485},{"_id":"public/archives/2017/03/index.html","hash":"b4560ee5b5582732c9f3a9d9e527026f650d5ce4","modified":1496365352485},{"_id":"public/archives/2017/04/index.html","hash":"c47a9e43492fa002d50229632cdb1bb1e7159023","modified":1496365352485},{"_id":"public/archives/2017/06/index.html","hash":"c5779de236845db3f9b9342ba3eb33913a6bd2f6","modified":1496365352486},{"_id":"public/categories/technology/index.html","hash":"132097c3b888c37cdd9ba25f2be3794dfa155daa","modified":1496365352486},{"_id":"public/categories/life/index.html","hash":"d88e9494b359db588854eeb647ee05ca67445c2e","modified":1496365352486},{"_id":"public/categories/society/index.html","hash":"67969c80702e61cd359fbfe8c0021ede89768bd3","modified":1496365352486},{"_id":"public/index.html","hash":"37723266796a766d2eabee46d7723173a7192892","modified":1496365352486},{"_id":"public/page/2/index.html","hash":"1e71a56c648fe987ed3d424072bf306901a09963","modified":1496365352486},{"_id":"public/tags/java/index.html","hash":"3f7a2a96f825bcea9a729ffe5659ac80c2a9e891","modified":1496365352487},{"_id":"public/tags/extendKW/index.html","hash":"3c48b48d1bb784d2288a80b6dfce821376380f25","modified":1496365352487},{"_id":"public/tags/tips/index.html","hash":"0d0e9a08997bf399ff0a761e3f94e5aa3bad37f5","modified":1496365352487},{"_id":"public/tags/js/index.html","hash":"06d95d0e9f5b57af8242f92db67b24130f25987f","modified":1496365352487},{"_id":"public/tags/移动端/index.html","hash":"b5f3f039267a9c1bf8ec5ffbfefb26a0f543dd88","modified":1496365352487},{"_id":"public/tags/firstday/index.html","hash":"539a8f9d362b4f8c29c14b320d48e264197ec87c","modified":1496365352487},{"_id":"public/tags/nowHot/index.html","hash":"930f6862abe83d8fb4c5ce0e6e6c9491a6bc46cc","modified":1496365352487},{"_id":"public/tags/sql/index.html","hash":"ae920535e65ee1b074b8b4911f90b65b8583cfbf","modified":1496365352488},{"_id":"public/CNAME","hash":"68f171e51cfb4edfbc77d45b70fc2562088c67df","modified":1496365352558},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1496365352558},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1496365352558},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1496365352558},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1496365352559},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1496365352559},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1496365352559},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1496365352559},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1496365352560},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496365352560},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496365352560},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1496365352560},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1496365352560},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496365352560},{"_id":"public/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496365352561},{"_id":"public/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1496365352561},{"_id":"public/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1496365352561},{"_id":"public/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496365352561},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1496365352562},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1496365352562},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496365352562},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496365352562},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496365352562},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496365352562},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496365352563},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496365352563},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1496365352563},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496365352563},{"_id":"public/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1496365355058},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496365355061},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496365355078},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496365355102},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496365355103},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496365355103},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496365355104},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496365355104},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496365355104},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496365355104},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496365355104},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1496365355105},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496365355105},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496365355105},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1496365355105},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1496365355106},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1496365355106},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1496365355107},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1496365355107},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1496365355107},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496365355107},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496365355108},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1496365355108},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496365355108},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496365355108},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496365355108},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496365355109},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496365355109},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496365355109},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496365355109},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496365355110},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496365355110},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496365355110},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496365355110},{"_id":"public/css/main.css","hash":"83af84504f70fd1679b3116be2656dc30a3eadd7","modified":1496365355110},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496365355111},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496365355111},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1496365355111},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496365355111},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496365355111},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496365355112},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496365355112},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496365355112},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496365355112},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496365355112},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496365355113},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496365355113},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496365355113},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496365355114},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496365355114},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1496365355216},{"_id":"public/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1496365355227}],"Category":[{"name":"technology","_id":"cj3f5agrd0005n8g60lid85e1"},{"name":"life","_id":"cj3f5agt4000fn8g6g7ly8bpl"},{"name":"society","_id":"cj3f5agtm000mn8g6sbm9jhpp"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-04-07T10:15:25.505Z","updated":"2017-03-21T16:05:42.141Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj3f5agij0000n8g6vo0u2w19","content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"About","date":"2017-03-07T01:00:07.000Z","_content":"\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","source":"about/index.md","raw":"---\ntitle: About\ndate: 2017-03-07 09:00:07\n---\n\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","updated":"2017-03-28T04:48:51.966Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3f5agqt0002n8g6frfd7jhs","content":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n"},{"title":"分类","date":"2017-03-22T01:01:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-22 09:01:55\ntype: \"categories\"\n---\n","updated":"2017-03-22T05:33:27.691Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj3f5agr60004n8g63h3f83e8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-03-22T01:01:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-22 09:01:22\ntype: \"tags\"\n---\n","updated":"2017-03-22T05:33:41.217Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj3f5ahdf0019n8g66nbm9l9f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JAVA实现简单网络爬虫","date":"2017-04-01T06:17:39.000Z","_content":"\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","source":"_posts/JAVA实现简单爬虫.md","raw":"---\ntitle: JAVA实现简单网络爬虫\ndate: 2017-04-01 14:17:39\ntags: [java, extendKW]\ncategories: technology\n---\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","slug":"JAVA实现简单爬虫","published":1,"updated":"2017-04-06T01:58:00.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5agpz0001n8g6wh6jqca8","content":"<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"external\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\" target=\"_blank\" rel=\"external\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\" target=\"_blank\" rel=\"external\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>\n","site":{"data":{}},"excerpt":"<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>","more":"<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>"},{"title":"JAVA定时调度 Timer和Executors","date":"2017-03-27T09:42:49.000Z","_content":"\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。\n\n<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","source":"_posts/JAVA定时调度-Timer和Executors.md","raw":"---\ntitle: 'JAVA定时调度 Timer和Executors'\ndate: 2017-03-27 17:42:49\ntags: [java,tips]\ncategories: technology\n---\n\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。\n\n<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","slug":"JAVA定时调度-Timer和Executors","published":1,"updated":"2017-04-02T04:33:35.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5agr00003n8g6z4rnvdlv","content":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。</p>\n<a id=\"more\"></a>\n<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。</p>","more":"<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Markdown语法指南","date":"2017-03-21T14:51:10.000Z","_content":"花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>\n\n<!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","source":"_posts/Markdown语法.md","raw":"---\ntitle: Markdown语法指南\ndate: 2017-03-21 22:51:10\ntags: [tips]\n---\n花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>\n\n<!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","slug":"Markdown语法","published":1,"updated":"2017-04-06T01:53:47.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5agrt0007n8g62fh3eh9e","content":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\" target=\"_blank\" rel=\"external\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\" target=\"_blank\" rel=\"external\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\" target=\"_blank\" rel=\"external\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\" target=\"_blank\" rel=\"external\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\" target=\"_blank\" rel=\"external\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`<span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;&lt;/pre&gt; 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* &lt;/b&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>\n","site":{"data":{}},"excerpt":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>","more":"<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`</span><span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;&lt;/pre&gt; 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* &lt;/b&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>"},{"title":"微信公众号网页开发","date":"2017-06-01T07:27:34.000Z","_content":"\n# 前言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","source":"_posts/微信公众号网页开发.md","raw":"---\ntitle: 微信公众号网页开发\ndate: 2017-06-01 15:27:34\ntags: [js,移动端]\ncategories: technology\n---\n\n# 前言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","slug":"微信公众号网页开发","published":1,"updated":"2017-06-02T01:02:04.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5ags80008n8g6hxm7lqdg","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\" target=\"_blank\" rel=\"external\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>"},{"title":"博客建成第一天","date":"2017-03-07T05:30:26.000Z","_content":"> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","source":"_posts/博客建成第一天.md","raw":"---\ntitle: 博客建成第一天\ndate: 2017-03-7 13:30:26\ntags: [firstday]\ncategories: life\n---\n> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","slug":"博客建成第一天","published":1,"updated":"2017-03-28T07:41:42.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5agsm0009n8g61fmy2q2u","content":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=\"center\"><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"></div>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n"},{"title":"浅谈共享单车","date":"2017-03-24T09:40:22.000Z","_content":"\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","source":"_posts/浅谈共享单车.md","raw":"---\ntitle: 浅谈共享单车\ndate: 2017-03-24 17:40:22\ntags: [nowHot]\ncategories: society\n---\n\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","slug":"浅谈共享单车","published":1,"updated":"2017-04-01T08:55:54.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5agsv000cn8g6c9zpfbjq","content":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=\"center\"><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\" target=\"_blank\" rel=\"external\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\" target=\"_blank\" rel=\"external\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>","more":"<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>"},{"title":"MySQL优化","date":"2017-04-17T04:31:55.000Z","_content":"\n# 前言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","source":"_posts/MySQL优化.md","raw":"---\ntitle: MySQL优化\ndate: 2017-04-17 12:31:55\ntags: [sql]\ncategories: technology\n---\n\n# 前言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","slug":"MySQL优化","published":1,"updated":"2017-04-17T04:36:21.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5agt1000en8g6u6e9d5ip","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\" target=\"_blank\" rel=\"external\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=\"center\"><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>"},{"title":"Linux基本命令","date":"2017-04-07T07:59:22.000Z","_content":"\n# 前言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看`http://www.cnblogs.com/skillup/articles/1877812.html`","source":"_posts/Linux基本命令.md","raw":"---\ntitle: Linux基本命令\ndate: 2017-04-07 15:59:22\ntags: [java, tips]\ncategories: technology\n---\n\n# 前言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看`http://www.cnblogs.com/skillup/articles/1877812.html`","slug":"Linux基本命令","published":1,"updated":"2017-04-07T14:54:43.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3f5agta000in8g60rm8hbzp","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\" target=\"_blank\" rel=\"external\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\" target=\"_blank\" rel=\"external\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\" target=\"_blank\" rel=\"external\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<code>http://www.cnblogs.com/skillup/articles/1877812.html</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<code>http://www.cnblogs.com/skillup/articles/1877812.html</code></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3f5ags80008n8g6hxm7lqdg","category_id":"cj3f5agrd0005n8g60lid85e1","_id":"cj3f5agsz000dn8g6v165du20"},{"post_id":"cj3f5agpz0001n8g6wh6jqca8","category_id":"cj3f5agrd0005n8g60lid85e1","_id":"cj3f5agt9000hn8g6c9ydy88o"},{"post_id":"cj3f5agr00003n8g6z4rnvdlv","category_id":"cj3f5agrd0005n8g60lid85e1","_id":"cj3f5agth000kn8g6s56jx7rc"},{"post_id":"cj3f5agt1000en8g6u6e9d5ip","category_id":"cj3f5agrd0005n8g60lid85e1","_id":"cj3f5agto000on8g6x1oovggf"},{"post_id":"cj3f5agta000in8g60rm8hbzp","category_id":"cj3f5agrd0005n8g60lid85e1","_id":"cj3f5agtq000pn8g6p3dwfebd"},{"post_id":"cj3f5agsm0009n8g61fmy2q2u","category_id":"cj3f5agt4000fn8g6g7ly8bpl","_id":"cj3f5agtx000rn8g6m9w54ra2"},{"post_id":"cj3f5agsv000cn8g6c9zpfbjq","category_id":"cj3f5agtm000mn8g6sbm9jhpp","_id":"cj3f5agu0000tn8g6qhsbi4yb"}],"PostTag":[{"post_id":"cj3f5agpz0001n8g6wh6jqca8","tag_id":"cj3f5agrn0006n8g6sh8a5kec","_id":"cj3f5agtf000jn8g6r2yu33ac"},{"post_id":"cj3f5agpz0001n8g6wh6jqca8","tag_id":"cj3f5agsr000bn8g6wtjuf13f","_id":"cj3f5agtj000ln8g6n6lk6nvs"},{"post_id":"cj3f5agr00003n8g6z4rnvdlv","tag_id":"cj3f5agrn0006n8g6sh8a5kec","_id":"cj3f5agtz000sn8g6rg7fhekq"},{"post_id":"cj3f5agr00003n8g6z4rnvdlv","tag_id":"cj3f5agtn000nn8g62v23o0mh","_id":"cj3f5agu0000un8g69ff0gkh6"},{"post_id":"cj3f5agrt0007n8g62fh3eh9e","tag_id":"cj3f5agtn000nn8g62v23o0mh","_id":"cj3f5agu3000wn8g68mft86lf"},{"post_id":"cj3f5ags80008n8g6hxm7lqdg","tag_id":"cj3f5agu1000vn8g6h94etj6m","_id":"cj3f5agu5000zn8g670nzxuia"},{"post_id":"cj3f5ags80008n8g6hxm7lqdg","tag_id":"cj3f5agu3000xn8g6oqik4jfl","_id":"cj3f5agu60010n8g6jl2i6ge1"},{"post_id":"cj3f5agsm0009n8g61fmy2q2u","tag_id":"cj3f5agu4000yn8g67z281601","_id":"cj3f5agu70012n8g6g718nrzw"},{"post_id":"cj3f5agsv000cn8g6c9zpfbjq","tag_id":"cj3f5agu60011n8g6p4tts1sc","_id":"cj3f5agug0014n8g61nnr5v3g"},{"post_id":"cj3f5agt1000en8g6u6e9d5ip","tag_id":"cj3f5agu90013n8g69g29xj14","_id":"cj3f5aguj0016n8g6iusn4asz"},{"post_id":"cj3f5agta000in8g60rm8hbzp","tag_id":"cj3f5agrn0006n8g6sh8a5kec","_id":"cj3f5aguk0017n8g6nc8rp249"},{"post_id":"cj3f5agta000in8g60rm8hbzp","tag_id":"cj3f5agtn000nn8g62v23o0mh","_id":"cj3f5aguo0018n8g6ycbzzyso"}],"Tag":[{"name":"java","_id":"cj3f5agrn0006n8g6sh8a5kec"},{"name":"extendKW","_id":"cj3f5agsr000bn8g6wtjuf13f"},{"name":"tips","_id":"cj3f5agtn000nn8g62v23o0mh"},{"name":"js","_id":"cj3f5agu1000vn8g6h94etj6m"},{"name":"移动端","_id":"cj3f5agu3000xn8g6oqik4jfl"},{"name":"firstday","_id":"cj3f5agu4000yn8g67z281601"},{"name":"nowHot","_id":"cj3f5agu60011n8g6p4tts1sc"},{"name":"sql","_id":"cj3f5agu90013n8g69g29xj14"}]}}
{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weixinPay.jpg","path":"images/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/1.png","path":"uploads/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/header-bk.jpg","path":"uploads/header-bk.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/weixinPay.jpg","path":"uploads/weixinPay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":1},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"578e1d55dcc56999bea63e923e2fe8c822a15ea0","modified":1496540493000},{"_id":"source/CNAME","hash":"68f171e51cfb4edfbc77d45b70fc2562088c67df","modified":1496540493000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1496540493000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1496540493000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1496540493000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1496540493000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1496540493000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1496540493000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1496540493000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1496540493000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1496540493000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1496540493000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1496540493000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1496540493000},{"_id":"themes/next/_config.yml","hash":"56349ba7c8abd3b3849e89d5f6cd39d3557d6348","modified":1496540493000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1496540493000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1496540493000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1496540493000},{"_id":"source/_posts/JAVA定时调度-Timer和Executors.md","hash":"c796ff3f49dd18ca72e632f60d073e26fa51f341","modified":1503811442506},{"_id":"source/_posts/JAVA实现HTML转PDF.md","hash":"0b4a7a4c778458e147642a5b9efc2fe6e9c3433d","modified":1505212732895},{"_id":"source/_posts/JAVA实现简单爬虫.md","hash":"3801a3f794cbc656e2c5a839b5605664ceeacaa7","modified":1496540493000},{"_id":"source/_posts/Linux基本命令.md","hash":"f1064a9f9b1376094a836f68568a1782a22e6873","modified":1496540493000},{"_id":"source/_posts/Markdown语法.md","hash":"478e074003e7029e9ed3856a50cb3a858e510dcf","modified":1496540493000},{"_id":"source/_posts/MySQL优化.md","hash":"d7cec6cf4f9869b129f58a207b72102c8b802552","modified":1503811062660},{"_id":"source/_posts/spring-aop两种配置方式.md","hash":"bc71f8a6828ed763cbe9827c11fa7bf49a893e9d","modified":1505216094495},{"_id":"source/_posts/博客建成第一天.md","hash":"7b965577a692db315a78580cdfe5fac19d97448e","modified":1496540493000},{"_id":"source/_posts/微信公众号网页开发.md","hash":"e220695dcb060bb8050ab5b07e423d6ca0694a8c","modified":1496540493000},{"_id":"source/_posts/浅谈共享单车.md","hash":"da764d80cedc68a3215a4d76367ede0751ddd77d","modified":1496540493000},{"_id":"source/_posts/跨页面-Tab-Window-通信的几种方法.md","hash":"257382064457bcbe95d65d16282c954d22e90faa","modified":1504509192669},{"_id":"source/about/index.md","hash":"98440174c0a5feee882109b861955d345f85e531","modified":1496540493000},{"_id":"source/categories/index.md","hash":"90bb103e21f9645871d8ce6122db99407c76ea87","modified":1496540493000},{"_id":"source/tags/index.md","hash":"11c6ba3279f347c97931477f61bc326b07f0714e","modified":1496540493000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1496540493000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1496540493000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1496540493000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1496540493000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1496540493000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1496540493000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1496540493000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1496540493000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1496540493000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1496540493000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1496540493000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1496540493000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1496540493000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1496540493000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1496540493000},{"_id":"themes/next/layout/_layout.swig","hash":"577b57ef558343fe184221a02589efc068cc6370","modified":1496540493000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1496540493000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1496540493000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1496540493000},{"_id":"themes/next/layout/page.swig","hash":"2166316fcd0e93bf9f8a54ce55a8f675eeab23ae","modified":1496540493000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1496540493000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1496540493000},{"_id":"themes/next/layout/tag.swig","hash":"9f71c3428ce3c21e14e0c4fd0eb21d97170eb492","modified":1496540493000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1496540493000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1496540493000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1496540493000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1496540493000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1496540493000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496540493000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496540493000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1496540493000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1496540493000},{"_id":"themes/next/layout/_macro/post.swig","hash":"3ac53a81c7a1abede8f533008eb0034aabec0ad6","modified":1496540493000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1496540493000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e373ae99e1ffe14c9892ffc0efa93a52a715924b","modified":1496540493000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1496540493000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3543660367ff829abb3c56e0a9c04c209bcfbf8d","modified":1496540493000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3610c011f285501132e5655ae4d1819e6d33e7de","modified":1496540493000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1496540493000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1496540493000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1496540493000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1496540493000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1496540493000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1496540493000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1496540493000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1496540493000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1496540493000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1496540493000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1496540493000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1496540493000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1496540493000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1496540493000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1496540493000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1496540493000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1496540493000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1496540493000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1496540493000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1496540493000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1496540493000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1496540493000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1496540493000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496540493000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496540493000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1496540493000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1496540493000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496540493000},{"_id":"themes/next/source/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496540493000},{"_id":"themes/next/source/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1496540493000},{"_id":"themes/next/source/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1496540493000},{"_id":"themes/next/source/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496540493000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1496540493000},{"_id":"source/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1504510516600},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1496540493000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1496540493000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1496540493000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1496540493000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1496540493000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1496540493000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1496540493000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1496540493000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1496540493000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"c9dfa6b127661e34fe976df36a34ae42d07f175e","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1496540493000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1496540493000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1496540493000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1496540493000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"9fbdeb83a3a824fc27c16865ed3706889e99a04e","modified":1496540493000},{"_id":"themes/next/source/css/_variables/donate.styl","hash":"5ce88441b2400ebda1e13ae0903880f9ceaa3593","modified":1496540493000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496540493000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496540493000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496540493000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496540493000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496540493000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496540493000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496540493000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496540493000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1496540493000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1496540493000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496540493000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496540493000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496540493000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496540493000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1496540493000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1496540493000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1496540493000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1496540493000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496540493000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496540493000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496540493000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496540493000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"737f317cb83de04002f3bfda24f996775ff05f8e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"0f0d6d0f2a3a45df70acf8c553d1fc5aac2fdff2","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1496540493000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496540493000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496540493000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496540493000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496540493000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496540493000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496540493000},{"_id":"public/search.xml","hash":"8d7c76fb83f84b9c4d0beb22426f39253a3e1135","modified":1505216120098},{"_id":"public/sitemap.xml","hash":"10830ee85261a7500d92bc5bb0fa267569e22ee1","modified":1505216120220},{"_id":"public/baidusitemap.xml","hash":"c0549d30adb3693eae0ded5c0fb08a6401a49351","modified":1505216120220},{"_id":"public/404.html","hash":"ff1d8b21f80f4f1f5c9f880e33bd57b92b0e5df1","modified":1505216120241},{"_id":"public/about/index.html","hash":"4471f061f15a1ebe39da60eebb86a29ace96bbbf","modified":1505216120241},{"_id":"public/tags/index.html","hash":"184f38bffb719f98de78c57f954074c042e9099b","modified":1505216120241},{"_id":"public/categories/index.html","hash":"6e3c22c97606b3ea755a6aef58e0f4cb5c479b02","modified":1505216120241},{"_id":"public/2017/03/07/博客建成第一天/index.html","hash":"e6c43391976b80e6006c1b518d411901b87092ac","modified":1505216120241},{"_id":"public/2017/03/21/Markdown语法/index.html","hash":"1c3eb1a7efe845f3506110d0ce2b25c9270e0263","modified":1505216120241},{"_id":"public/2017/03/24/浅谈共享单车/index.html","hash":"542be01673657ba9bf14bdc9a696e3f21fce948d","modified":1505216120241},{"_id":"public/2017/03/27/JAVA定时调度-Timer和Executors/index.html","hash":"c149fa1081e4de85d86577db016ec49d9f00a460","modified":1505216120241},{"_id":"public/2017/04/01/JAVA实现简单爬虫/index.html","hash":"3939f3e72f2f96ffde2fa4f05337acd8fc3768ed","modified":1505216120241},{"_id":"public/2017/04/07/Linux基本命令/index.html","hash":"0a671c7600413c730403d75540c42ad9fddddd20","modified":1505216120242},{"_id":"public/2017/04/17/MySQL优化/index.html","hash":"cffdfe3a3ffde23edbe13ee55674c3ca758a5562","modified":1505216120242},{"_id":"public/2017/06/01/微信公众号网页开发/index.html","hash":"b02e8c495cf912e8f122c8832929e4b3cb3d2e71","modified":1505216120242},{"_id":"public/2017/07/27/JAVA实现HTML转PDF/index.html","hash":"bb60448ea2a2f257623d62f7e68bf7f4cdb88ca0","modified":1505216120242},{"_id":"public/2017/09/01/跨页面-Tab-Window-通信的几种方法/index.html","hash":"9ad8dca816fa80c71661d9fea0f3dab83cab8a5c","modified":1505216120242},{"_id":"public/2017/09/12/spring-aop两种配置方式/index.html","hash":"abfc056c964ecabaa4ac91f170fff0db835e9193","modified":1505216120242},{"_id":"public/archives/index.html","hash":"b1396733e4cd25387a9175e3b9b35277abb034d5","modified":1505216120242},{"_id":"public/archives/page/2/index.html","hash":"7fc779a95d81bc3ac5e84ba0f965c07e59ba0846","modified":1505216120242},{"_id":"public/archives/page/3/index.html","hash":"35af8dd1c56c640cfe01db9b70af4862c584b696","modified":1505216120242},{"_id":"public/archives/2017/index.html","hash":"f9386f28739a46f6366329229b353f43c2570f8f","modified":1505216120242},{"_id":"public/archives/2017/page/2/index.html","hash":"484f9430e03d2ceed89d9754d3bffc0b8967f035","modified":1505216120242},{"_id":"public/archives/2017/page/3/index.html","hash":"ab31688c422d7798caed3552ade9cc550fc6e351","modified":1505216120242},{"_id":"public/archives/2017/03/index.html","hash":"a468e0dece27294ca972b1aa69f7f1d1f0db7ce4","modified":1505216120243},{"_id":"public/archives/2017/04/index.html","hash":"37a6d9f3720dbbc170c19cc371eaf36e6ec1d97d","modified":1505216120244},{"_id":"public/archives/2017/06/index.html","hash":"dee83262d58387204ec666c797654efd614c40eb","modified":1505216120244},{"_id":"public/archives/2017/07/index.html","hash":"3f6f5924855c4b203b49f77739dcfdb3ff30cf5c","modified":1505216120244},{"_id":"public/archives/2017/09/index.html","hash":"04613863ff0068b182c4f415ec4266b823eebcae","modified":1505216120244},{"_id":"public/categories/technology/index.html","hash":"220b73587e026dd46e5037f9124b60c68b3466e3","modified":1505216120244},{"_id":"public/categories/technology/page/2/index.html","hash":"066addada63fa1591a7b2078160aba05dce16a3a","modified":1505216120245},{"_id":"public/categories/life/index.html","hash":"7354cccb5bf14d07117d704ad5093bb938d2df99","modified":1505216120245},{"_id":"public/categories/society/index.html","hash":"c309504de7f1c3fb82b11f1a8ef50bd6d09e1e7f","modified":1505216120245},{"_id":"public/index.html","hash":"72884897514433dcd1458a5fc95ed0bfa159271d","modified":1505216120245},{"_id":"public/page/2/index.html","hash":"e26cca7b0aa2f9443890cc1eff9f76e2bd41b620","modified":1505216120245},{"_id":"public/page/3/index.html","hash":"fea5c5fb987eb82368fc3f0ece56f444192ace1f","modified":1505216120246},{"_id":"public/tags/java/index.html","hash":"844dbde301df91d22d815a2ab9bd1ea3bb0c1b0f","modified":1505216120246},{"_id":"public/tags/tips/index.html","hash":"0da498d4e042549c40d61a4e34c9f1385ffd4290","modified":1505216120246},{"_id":"public/tags/extendKW/index.html","hash":"8e173612ce9f47b04a13c46d8c3401c84885a242","modified":1505216120246},{"_id":"public/tags/sql/index.html","hash":"67086f3ef0d0af7af6a26360bb2a4b31d1fe5a6f","modified":1505216120246},{"_id":"public/tags/spring/index.html","hash":"ec9177fe017b4bdd7edd6e06637ce47b28995b72","modified":1505216120247},{"_id":"public/tags/firstday/index.html","hash":"4b0488810c2fe8d9a95848196bd5681387fb45bf","modified":1505216120247},{"_id":"public/tags/js/index.html","hash":"f967a58b6ba8e6765b1197b2c63ff47352d1b037","modified":1505216120247},{"_id":"public/tags/移动端/index.html","hash":"aaa294f490f974512fa438938a7a142773bea581","modified":1505216120247},{"_id":"public/tags/nowHot/index.html","hash":"06604935067d6cd826b4e71493a38b33592fc0a1","modified":1505216120247},{"_id":"public/tags/前端/index.html","hash":"b067d3832a53ba5974f74e6d20858db086aa5d93","modified":1505216120247},{"_id":"public/CNAME","hash":"68f171e51cfb4edfbc77d45b70fc2562088c67df","modified":1505216120349},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1505216120349},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1505216120350},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1505216120350},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1505216120350},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1505216120350},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1505216120350},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1505216120350},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1505216120351},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1505216120351},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1505216120352},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1505216120352},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1505216120352},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1505216120352},{"_id":"public/images/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1505216120352},{"_id":"public/uploads/1.png","hash":"235e2faccdee1bc4748fd259e135751bb739d52b","modified":1505216120352},{"_id":"public/uploads/header-bk.jpg","hash":"3bc2c7d512d18b63dbcc288bcb68e5774879b46b","modified":1505216120352},{"_id":"public/uploads/weixinPay.jpg","hash":"391b05dd547564b4d93d59573968443543fe85bf","modified":1505216120352},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1505216120352},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1505216120352},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1505216120352},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505216120352},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505216120352},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505216120352},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505216120353},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505216120353},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505216120354},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505216120354},{"_id":"public/uploads/avatar.jpg","hash":"01952261089e44147787f6803d2155c37d822a54","modified":1505216121899},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1505216121902},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1505216121956},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1505216121985},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1505216121985},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1505216121985},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1505216121985},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1505216121985},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1505216121985},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1505216121985},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1505216121985},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1505216121985},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1505216121985},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1505216121986},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1505216121986},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1505216121986},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1505216121986},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1505216121986},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1505216121986},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1505216121986},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1505216121986},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1505216121986},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1505216121987},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1505216121987},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1505216121987},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1505216121987},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1505216121988},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1505216121988},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1505216121988},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1505216121988},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1505216121988},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1505216121988},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1505216121988},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1505216121989},{"_id":"public/css/main.css","hash":"7fc3984f29daa95116e9725db718ee46c8cbe6ac","modified":1505216121989},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1505216121989},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1505216121989},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1505216121989},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1505216121989},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1505216121989},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1505216121990},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1505216121990},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1505216121990},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1505216121990},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1505216121990},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1505216121990},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1505216121991},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1505216121991},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1505216121992},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1505216121992},{"_id":"public/favicon.ico","hash":"5f5289773f82f1942b79faf40d067fa646204473","modified":1505216122097},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1505216122098}],"Category":[{"name":"technology","_id":"cj7hit64h0005oog67y1wrxnd"},{"name":"life","_id":"cj7hit66s000poog6a0pi2rim"},{"name":"society","_id":"cj7hit678000woog6mptdro8p"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-08-14T09:26:38.043Z","updated":"2017-06-04T01:41:33.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj7hit5ks0000oog67nggazbb","content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<title>404 - rainbowhorse's blog</title>\n\t<meta name=\"description\" content=\"404������ҳ�治���ڣ�\">\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/javascript\" src=\"http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"About","date":"2017-03-07T01:00:07.000Z","_content":"\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","source":"about/index.md","raw":"---\ntitle: About\ndate: 2017-03-07 09:00:07\n---\n\n​\t\t\t\t\t\n\n​\t\t\t\t\t喜欢新鲜的事物，钻研技术，热爱互联网行业。\n\n​\t\t\t\t\t\t\t\t做自己喜欢做的事。\n\n​\t\t\t\t\t\t\t菜鸟程序猿一只，欢迎分享知识。\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFrom 彩虹马\n\n\n\n🐧           1223585957","updated":"2017-06-04T01:41:33.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj7hit6410002oog6jxpx77va","content":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​                    </p>\n<p>​                    喜欢新鲜的事物，钻研技术，热爱互联网行业。</p>\n<p>​                                做自己喜欢做的事。</p>\n<p>​                            菜鸟程序猿一只，欢迎分享知识。</p>\n<p>​                                                                    From 彩虹马</p>\n<p>🐧           1223585957</p>\n"},{"title":"分类","date":"2017-03-22T01:01:55.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-22 09:01:55\ntype: \"categories\"\n---\n","updated":"2017-06-04T01:41:33.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj7hit64c0004oog6v0hjo9ij","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-03-22T01:01:22.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-22 09:01:22\ntype: \"tags\"\n---\n","updated":"2017-06-04T01:41:33.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj7hit64x0008oog6xtt8iqir","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JAVA定时调度 Timer和Executors","date":"2017-03-27T09:42:49.000Z","_content":"\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。\n\n<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","source":"_posts/JAVA定时调度-Timer和Executors.md","raw":"---\ntitle: 'JAVA定时调度 Timer和Executors'\ndate: 2017-03-27 17:42:49\ntags: [java,tips]\ncategories: technology\n---\n\n近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有**Thread**、**Timer**和**Executors**三种方法，之前使用的是Timer，但是详细查了资料觉得**Executors更优**，所以在这里比较一下它们的区别。\n\n<!-- more -->\n\n## Thread类\n\n这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： \n\n```java\npublic class Task1 {  \n    public static void main(String[] args) {  \n        // run in a second  \n        final long timeInterval = 1000;  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                while (true) {  \n                    // ------- code for task to run  \n                    System.out.println(\"Hello !!\");  \n                    // ------- ends here  \n                    try {  \n                        Thread.sleep(timeInterval);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                }  \n            }  \n        };  \n        Thread thread = new Thread(runnable);  \n        thread.start();  \n    }  \n}  \n```\n\n> Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。\n\n## Timer类\n\n1. 于第一种方式相比，优势 :\n\n   (1) 当启动和去取消任务时可以控制 ;\n\n   (2) 第一次执行任务时可以指定你想要的delay时间。\n\n2. 在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 \n\n3. 当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。\n\n```java\npublic class Task2 {  \n    public static void main(String[] args) {  \n        TimerTask task = new TimerTask() {  \n            @Override  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!!\");  \n            }  \n        };  \n        Timer timer = new Timer();  \n        long delay = 0;  \n        long intevalPeriod = 1 * 1000;  \n        // schedules the task to be run in an interval  \n        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  \n    } // end of main  \n}  \n```\n\n> 缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。\n\n## Executors\n\n1. `ScheduledExecutorService`是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  \n\n2. 相比于上两个方法，它有以下好处 : \n\n   (1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;\n\n   (2) 可以很灵活的去设定第一次执行任务delay时间 ;\n\n   (3) 提供了良好的约定，以便设定执行的时间间隔 。\n\n3. 下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 \n\n```java\npublic class Task3 {  \n    public static void main(String[] args) {  \n        Runnable runnable = new Runnable() {  \n            public void run() {  \n                // task to run goes here  \n                System.out.println(\"Hello !!\");  \n            }  \n        };  \n        ScheduledExecutorService service = Executors  \n                .newSingleThreadScheduledExecutor();  \n        // 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  \n        service.scheduleAtFixedRate(runnable, 10, 1, TimeUnit.SECONDS);  \n    }  \n}  \n```\n\n> 1. 线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。\n> 2. 当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。\n> 3. 支持多个任务并发执行。\n\n## 总结\n\n`Timer`是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。\n\n`ScheduledThreadPoolExecutor`是一个可以重复执行任务的`线程池`，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。\n\n**上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。**\n\n下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。\n\n```java\n /**\n\t * 定时查询教师回复状态\n\t * @param a\n\t */\n\tpublic void getStatusSchedule(final Date replyEnd){\n\t\t\n\t\tfinal SendMessage sendMsg = new SendMessage();\n\t\tfinal ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();\n\t\t\n\t\tservice.scheduleAtFixedRate(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tDate nowDate = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));//当前时间\n\t\t\t\t\t//若截至时间在当前时间之前执行定时任务 否则不执行\n\t\t\t\t\tif (!nowDate.before(replyEnd)) {\n\t\t\t\t\t\tservice.shutdown();  //停止任务\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tMap<String,Object> map = sendMsg.getReplyMsg();  //获取回复信息\n\t\t\t\t\t\tif(!map.isEmpty()){\t\t //当map不为空时执行\t\t\t\t\t\t\n\t\t\t\t\t\t\tupdateMsgStatus(map);   //更新数据库\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (ParseException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 1, 1, TimeUnit.MINUTES); //执行后第一次查询在1分钟之后，每隔1分钟查询一次。 \n\t}\n```","slug":"JAVA定时调度-Timer和Executors","published":1,"updated":"2017-08-27T05:24:02.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit63o0001oog6ml2l4xh4","content":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。</p>\n<a id=\"more\"></a>\n<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>近期在公司做了一个关于定时执行任务的功能（没有使用框架定时），查了一下资料，有<strong>Thread</strong>、<strong>Timer</strong>和<strong>Executors</strong>三种方法，之前使用的是Timer，但是详细查了资料觉得<strong>Executors更优</strong>，所以在这里比较一下它们的区别。</p>","more":"<h2 id=\"Thread类\"><a href=\"#Thread类\" class=\"headerlink\" title=\"Thread类\"></a>Thread类</h2><p>这是最基本的，创建一个Thread，然后让它在while循环里一直运行着，通过sleep方法来达到定时任务的效果。这样可以快速简单的实现，代码如下： </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task1</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        <span class=\"comment\">// run in a second  </span></div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> timeInterval = <span class=\"number\">1000</span>;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                    <span class=\"comment\">// ------- code for task to run  </span></div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">                    <span class=\"comment\">// ------- ends here  </span></div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;  </div><div class=\"line\">                        Thread.sleep(timeInterval);  </div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </div><div class=\"line\">                        e.printStackTrace();  </div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(runnable);  </div><div class=\"line\">        thread.start();  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Thread的做定时任务的几率不大，因为不可控制启动停止时间、不能指定想要的delay时间。</p>\n</blockquote>\n<h2 id=\"Timer类\"><a href=\"#Timer类\" class=\"headerlink\" title=\"Timer类\"></a>Timer类</h2><ol>\n<li><p>于第一种方式相比，优势 :</p>\n<p>(1) 当启动和去取消任务时可以控制 ;</p>\n<p>(2) 第一次执行任务时可以指定你想要的delay时间。</p>\n</li>\n<li><p>在实现时，Timer类可以调度任务，TimerTask则是通过在run()方法里实现具体任务。 Timer实例可以调度多任务，它是线程安全的。 </p>\n</li>\n<li><p>当Timer的构造器被调用时，它创建了一个线程，这个线程可以用来调度任务。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task2</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        TimerTask task = <span class=\"keyword\">new</span> TimerTask() &#123;  </div><div class=\"line\">            <span class=\"meta\">@Override</span>  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        Timer timer = <span class=\"keyword\">new</span> Timer();  </div><div class=\"line\">        <span class=\"keyword\">long</span> delay = <span class=\"number\">0</span>;  </div><div class=\"line\">        <span class=\"keyword\">long</span> intevalPeriod = <span class=\"number\">1</span> * <span class=\"number\">1000</span>;  </div><div class=\"line\">        <span class=\"comment\">// schedules the task to be run in an interval  </span></div><div class=\"line\">        timer.scheduleAtFixedRate(task, delay, intevalPeriod);  </div><div class=\"line\">    &#125; <span class=\"comment\">// end of main  </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>缺点：如果TimerTask抛出未检查的异常，Timer将会产生无法预料的行为。Timer线程并不捕获异常，所以 TimerTask抛出的未检查的异常会终止timer线程。这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。</p>\n</blockquote>\n<h2 id=\"Executors\"><a href=\"#Executors\" class=\"headerlink\" title=\"Executors\"></a>Executors</h2><ol>\n<li><p><code>ScheduledExecutorService</code>是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。  </p>\n</li>\n<li><p>相比于上两个方法，它有以下好处 : </p>\n<p>(1) 相比于Timer的单线程，它是通过线程池的方式来执行任务的 ;</p>\n<p>(2) 可以很灵活的去设定第一次执行任务delay时间 ;</p>\n<p>(3) 提供了良好的约定，以便设定执行的时间间隔 。</p>\n</li>\n<li><p>下面是实现代码，我们通过ScheduledExecutorService展示这个例子，通过代码里参数的控制，首次执行加了delay时间。 </p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Task3</span> </span>&#123;  </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </div><div class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;  </div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">                <span class=\"comment\">// task to run goes here  </span></div><div class=\"line\">                System.out.println(<span class=\"string\">\"Hello !!\"</span>);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;;  </div><div class=\"line\">        ScheduledExecutorService service = Executors  </div><div class=\"line\">                .newSingleThreadScheduledExecutor();  </div><div class=\"line\">        <span class=\"comment\">// 第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间  </span></div><div class=\"line\">        service.scheduleAtFixedRate(runnable, <span class=\"number\">10</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>线程池能按时间计划来执行任务，允许用户设定计划执行任务的时间。</li>\n<li>当任务较多时，线程池可能会自动创建更多的工作线程来执行任务 。</li>\n<li>支持多个任务并发执行。</li>\n</ol>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>Timer</code>是单线程的。所以task都是串行执行。假如其中一个task执行需要很长的时间，那其他的task只能干巴巴的等着。</p>\n<p><code>ScheduledThreadPoolExecutor</code>是一个可以重复执行任务的<code>线程池</code>，并且可以指定任务的间隔和延迟时间。它作为比Timer/TimerTask更加通用的替代品。因为它允许多个服务线程，接受不同的时间单位，且不需要继承TimeTask（仅仅需要实现Runnable接口）。配置ScheduledThreadPoolExecutor为单线程，则与使用Timer等效。</p>\n<p><strong>上述，基本说明了在以后的开发中尽可能使用ScheduledExecutorService(JDK1.5以后)替代Timer。</strong></p>\n<p>下面是自己做的功能，通过短信API定时查询教师回复信息并更新数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 定时查询教师回复状态</div><div class=\"line\"> * <span class=\"doctag\">@param</span> a</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getStatusSchedule</span><span class=\"params\">(<span class=\"keyword\">final</span> Date replyEnd)</span></span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">final</span> SendMessage sendMsg = <span class=\"keyword\">new</span> SendMessage();</div><div class=\"line\">\t<span class=\"keyword\">final</span> ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</div><div class=\"line\">\t</div><div class=\"line\">\tservice.scheduleAtFixedRate(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\tDate nowDate = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).parse(<span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));<span class=\"comment\">//当前时间</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">//若截至时间在当前时间之前执行定时任务 否则不执行</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!nowDate.before(replyEnd)) &#123;</div><div class=\"line\">\t\t\t\t\tservice.shutdown();  <span class=\"comment\">//停止任务</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tMap&lt;String,Object&gt; map = sendMsg.getReplyMsg();  <span class=\"comment\">//获取回复信息</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(!map.isEmpty())&#123;\t\t <span class=\"comment\">//当map不为空时执行\t\t\t\t\t\t</span></div><div class=\"line\">\t\t\t\t\t\tupdateMsgStatus(map);   <span class=\"comment\">//更新数据库</span></div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>, TimeUnit.MINUTES); <span class=\"comment\">//执行后第一次查询在1分钟之后，每隔1分钟查询一次。 </span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"JAVA实现HTML转PDF","date":"2017-07-27T05:22:32.000Z","_content":"\n​\t最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：\n\n1. 使用`wkhtmltox`\n2. 使用`iText+Flying Saucer`\n\n但是还是强烈推荐用第一种方法。\n\n<!-- more -->\n\n# 使用wkhtmltox(推荐)\n\nwkhtmltox实现网页转换成图片或PDF\n\n## 命令实现\n\n1. 进入wkhtmltox官网软件下载  ：https://wkhtmltopdf.org/downloads.html\n2. 安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别`wkhtmltoimage.exe`是将HTML转化为image，`wkhtmltopdf.exe`是将HTML转化为PDF文件，这正是我们想要的。\n\n![path](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png)\n\n3. 进入${home}/bin目录下打开cmd输入以下命令验证 \n\n```java\nwkhtmltopdf HTML路径 保存路径\n如： wkhtmltopdf www.baidu.com d:\\test.pdf\n```\n\n![command](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png)\n\n生成完成后会出现Done。\n\n## 代码实现\n\nJAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段\n\n```java\n/**\n * HTMLTOPPDF\n * 利用wkhtmltopdf生成PDF\n */\npublic class HtmlToPDF {\n    //wkhtmltopdf.exe安装路径\n    public static final String toPdfTool = \"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\";\n    //需要生成PDF的URL\n    public static final String srcPath = \"http://www.jianshu.com/p/4d65857ffe5e\";\n\n    public static void main(String[] args) throws Exception{\n \t\t//设置纸张大小: A4, Letter, etc.\n        String pageSize = \"A4\";\n\t\t//生成后存放路径\n        String destPath = \"E:\\\\PDF生成教程及讲解.pdf\"; \n        convert(pageSize, destPath);\n    }\n\n    public static void convert(String pageSize, String destPath){\n        File file = new File(destPath);\n        File parent = file.getParentFile();\n        if (!parent.exists()){\n            parent.mkdirs();\n        }\n        StringBuilder cmd = new StringBuilder();\n        cmd.append(toPdfTool).append(\" \");\n        cmd.append(\"--page-size \");\n        cmd.append(pageSize).append(\" \");\n        cmd.append(srcPath).append(\" \");\n        cmd.append(destPath);\n\n        try {\n            Runtime.getRuntime().exec(cmd.toString());\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n详细参数说明可参考：<http://www.jianshu.com/p/4d65857ffe5e>\n\n\n\n# 使用iText+Flying Saucer\n\n```\n itext可实现 \n 1.可以进行块的创建\n 2.表格的使用\n 3.设置页面的事件\n 4.字体的设置\n 5.图片的设置（包含水印）\n 6.HTML转化成PDF（支持css,javascript）\n 7.表单创建\n 8.PDF之间的操作等详细的内容可以查看网站的说明。\n```\n\n## Maven配置\n\n```xml\n<dependency>\n   <groupId>com.itextpdf</groupId>\n   <artifactId>itextpdf</artifactId>\n   <version>5.8.8</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.6</version>\n</dependency>\n```\n\n## 代码片段\n\n```java\n/**\n * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。\n */\npublic class HtmlToPDF {\n    public static void main(String[] args) throws Exception{\n\n        Document document = new Document(PageSize.A4.rotate()); //设置为A4纸大小\n\n        ITextRenderer renderer = new ITextRenderer();\n        ITextFontResolver fontResolver = renderer.getFontResolver();\n        fontResolver.addFont(\"D:/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n        // step 2\n        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\"D:\\\\pdf.pdf\"));\n        // step 3\n        document.open();\n        // step 4\n        XMLWorkerHelper.getInstance().parseXHtml(writer, document,\n                new FileInputStream(\"D:/a.html\"));\n        //step 5\n        document.close();\n        System.out.println( \"PDF Created!\" );\n    }\n}\n```\n\n## 注意事项\n\n1. .输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：\n\n   ```html\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n   <html xmlns=\"http://www.w3.org/1999/xhtml\"> \n   ```\n\n\n2. 生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(\"C:/Windows/Fonts/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style='font-family:SimSun'，要是使用其他字符生成pdf时候，中文就会不显示生成PDF\n3. 设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小\n4. 所需的jar包，[下载点我](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip)。核心jar是修改后的\n\n\n\n# 比较和总结\n\n## 比较\n\nitext\n\n```\n1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。\n2. 并且itext中文适配不是很好和换行问题。\n3. 且对HTML格式要求严格。\n```\n\nwkhtmltopdf\n\n```\n1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。\n2. 小巧方便，转换速度快。\n3. 跨平台，在Liunx下用，在win下也可以用。\n```\n\n## 总结\n\n​\t综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。","source":"_posts/JAVA实现HTML转PDF.md","raw":"---\ntitle: JAVA实现HTML转PDF\ndate: 2017-07-27 13:22:32\ntags: [java,tips]\ncategories: technology\n---\n\n​\t最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：\n\n1. 使用`wkhtmltox`\n2. 使用`iText+Flying Saucer`\n\n但是还是强烈推荐用第一种方法。\n\n<!-- more -->\n\n# 使用wkhtmltox(推荐)\n\nwkhtmltox实现网页转换成图片或PDF\n\n## 命令实现\n\n1. 进入wkhtmltox官网软件下载  ：https://wkhtmltopdf.org/downloads.html\n2. 安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别`wkhtmltoimage.exe`是将HTML转化为image，`wkhtmltopdf.exe`是将HTML转化为PDF文件，这正是我们想要的。\n\n![path](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png)\n\n3. 进入${home}/bin目录下打开cmd输入以下命令验证 \n\n```java\nwkhtmltopdf HTML路径 保存路径\n如： wkhtmltopdf www.baidu.com d:\\test.pdf\n```\n\n![command](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png)\n\n生成完成后会出现Done。\n\n## 代码实现\n\nJAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段\n\n```java\n/**\n * HTMLTOPPDF\n * 利用wkhtmltopdf生成PDF\n */\npublic class HtmlToPDF {\n    //wkhtmltopdf.exe安装路径\n    public static final String toPdfTool = \"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\";\n    //需要生成PDF的URL\n    public static final String srcPath = \"http://www.jianshu.com/p/4d65857ffe5e\";\n\n    public static void main(String[] args) throws Exception{\n \t\t//设置纸张大小: A4, Letter, etc.\n        String pageSize = \"A4\";\n\t\t//生成后存放路径\n        String destPath = \"E:\\\\PDF生成教程及讲解.pdf\"; \n        convert(pageSize, destPath);\n    }\n\n    public static void convert(String pageSize, String destPath){\n        File file = new File(destPath);\n        File parent = file.getParentFile();\n        if (!parent.exists()){\n            parent.mkdirs();\n        }\n        StringBuilder cmd = new StringBuilder();\n        cmd.append(toPdfTool).append(\" \");\n        cmd.append(\"--page-size \");\n        cmd.append(pageSize).append(\" \");\n        cmd.append(srcPath).append(\" \");\n        cmd.append(destPath);\n\n        try {\n            Runtime.getRuntime().exec(cmd.toString());\n        }catch (IOException e){\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n详细参数说明可参考：<http://www.jianshu.com/p/4d65857ffe5e>\n\n\n\n# 使用iText+Flying Saucer\n\n```\n itext可实现 \n 1.可以进行块的创建\n 2.表格的使用\n 3.设置页面的事件\n 4.字体的设置\n 5.图片的设置（包含水印）\n 6.HTML转化成PDF（支持css,javascript）\n 7.表单创建\n 8.PDF之间的操作等详细的内容可以查看网站的说明。\n```\n\n## Maven配置\n\n```xml\n<dependency>\n   <groupId>com.itextpdf</groupId>\n   <artifactId>itextpdf</artifactId>\n   <version>5.8.8</version>\n</dependency>\n<dependency>\n    <groupId>org.xhtmlrenderer</groupId>\n    <artifactId>flying-saucer-pdf</artifactId>\n    <version>9.1.6</version>\n</dependency>\n```\n\n## 代码片段\n\n```java\n/**\n * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。\n */\npublic class HtmlToPDF {\n    public static void main(String[] args) throws Exception{\n\n        Document document = new Document(PageSize.A4.rotate()); //设置为A4纸大小\n\n        ITextRenderer renderer = new ITextRenderer();\n        ITextFontResolver fontResolver = renderer.getFontResolver();\n        fontResolver.addFont(\"D:/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);\n        // step 2\n        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(\"D:\\\\pdf.pdf\"));\n        // step 3\n        document.open();\n        // step 4\n        XMLWorkerHelper.getInstance().parseXHtml(writer, document,\n                new FileInputStream(\"D:/a.html\"));\n        //step 5\n        document.close();\n        System.out.println( \"PDF Created!\" );\n    }\n}\n```\n\n## 注意事项\n\n1. .输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：\n\n   ```html\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n   <html xmlns=\"http://www.w3.org/1999/xhtml\"> \n   ```\n\n\n2. 生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(\"C:/Windows/Fonts/simsun.ttc\", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style='font-family:SimSun'，要是使用其他字符生成pdf时候，中文就会不显示生成PDF\n3. 设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小\n4. 所需的jar包，[下载点我](http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip)。核心jar是修改后的\n\n\n\n# 比较和总结\n\n## 比较\n\nitext\n\n```\n1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。\n2. 并且itext中文适配不是很好和换行问题。\n3. 且对HTML格式要求严格。\n```\n\nwkhtmltopdf\n\n```\n1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。\n2. 小巧方便，转换速度快。\n3. 跨平台，在Liunx下用，在win下也可以用。\n```\n\n## 总结\n\n​\t综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。","slug":"JAVA实现HTML转PDF","published":1,"updated":"2017-09-12T10:38:52.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit6470003oog6n7smc06v","content":"<p>​    最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：</p>\n<ol>\n<li>使用<code>wkhtmltox</code></li>\n<li>使用<code>iText+Flying Saucer</code></li>\n</ol>\n<p>但是还是强烈推荐用第一种方法。</p>\n<a id=\"more\"></a>\n<h1 id=\"使用wkhtmltox-推荐\"><a href=\"#使用wkhtmltox-推荐\" class=\"headerlink\" title=\"使用wkhtmltox(推荐)\"></a>使用wkhtmltox(推荐)</h1><p>wkhtmltox实现网页转换成图片或PDF</p>\n<h2 id=\"命令实现\"><a href=\"#命令实现\" class=\"headerlink\" title=\"命令实现\"></a>命令实现</h2><ol>\n<li>进入wkhtmltox官网软件下载  ：<a href=\"https://wkhtmltopdf.org/downloads.html\" target=\"_blank\" rel=\"external\">https://wkhtmltopdf.org/downloads.html</a></li>\n<li>安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别<code>wkhtmltoimage.exe</code>是将HTML转化为image，<code>wkhtmltopdf.exe</code>是将HTML转化为PDF文件，这正是我们想要的。</li>\n</ol>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png\" alt=\"path\"></p>\n<ol>\n<li>进入${home}/bin目录下打开cmd输入以下命令验证 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wkhtmltopdf HTML路径 保存路径</div><div class=\"line\">如： wkhtmltopdf www.baidu.com d:\\test.pdf</div></pre></td></tr></table></figure>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png\" alt=\"command\"></p>\n<p>生成完成后会出现Done。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>JAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * HTMLTOPPDF</div><div class=\"line\"> * 利用wkhtmltopdf生成PDF</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//wkhtmltopdf.exe安装路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String toPdfTool = <span class=\"string\">\"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\"</span>;</div><div class=\"line\">    <span class=\"comment\">//需要生成PDF的URL</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String srcPath = <span class=\"string\">\"http://www.jianshu.com/p/4d65857ffe5e\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//设置纸张大小: A4, Letter, etc.</span></div><div class=\"line\">        String pageSize = <span class=\"string\">\"A4\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//生成后存放路径</span></div><div class=\"line\">        String destPath = <span class=\"string\">\"E:\\\\PDF生成教程及讲解.pdf\"</span>; </div><div class=\"line\">        convert(pageSize, destPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">convert</span><span class=\"params\">(String pageSize, String destPath)</span></span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(destPath);</div><div class=\"line\">        File parent = file.getParentFile();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!parent.exists())&#123;</div><div class=\"line\">            parent.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder cmd = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        cmd.append(toPdfTool).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(<span class=\"string\">\"--page-size \"</span>);</div><div class=\"line\">        cmd.append(pageSize).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(srcPath).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(destPath);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Runtime.getRuntime().exec(cmd.toString());</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细参数说明可参考：<a href=\"http://www.jianshu.com/p/4d65857ffe5e\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/4d65857ffe5e</a></p>\n<h1 id=\"使用iText-Flying-Saucer\"><a href=\"#使用iText-Flying-Saucer\" class=\"headerlink\" title=\"使用iText+Flying Saucer\"></a>使用iText+Flying Saucer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext可实现 </div><div class=\"line\">1.可以进行块的创建</div><div class=\"line\">2.表格的使用</div><div class=\"line\">3.设置页面的事件</div><div class=\"line\">4.字体的设置</div><div class=\"line\">5.图片的设置（包含水印）</div><div class=\"line\">6.HTML转化成PDF（支持css,javascript）</div><div class=\"line\">7.表单创建</div><div class=\"line\">8.PDF之间的操作等详细的内容可以查看网站的说明。</div></pre></td></tr></table></figure>\n<h2 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Document document = <span class=\"keyword\">new</span> Document(PageSize.A4.rotate()); <span class=\"comment\">//设置为A4纸大小</span></div><div class=\"line\"></div><div class=\"line\">        ITextRenderer renderer = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">        ITextFontResolver fontResolver = renderer.getFontResolver();</div><div class=\"line\">        fontResolver.addFont(<span class=\"string\">\"D:/simsun.ttc\"</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">        <span class=\"comment\">// step 2</span></div><div class=\"line\">        PdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\pdf.pdf\"</span>));</div><div class=\"line\">        <span class=\"comment\">// step 3</span></div><div class=\"line\">        document.open();</div><div class=\"line\">        <span class=\"comment\">// step 4</span></div><div class=\"line\">        XMLWorkerHelper.getInstance().parseXHtml(writer, document,</div><div class=\"line\">                <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"D:/a.html\"</span>));</div><div class=\"line\">        <span class=\"comment\">//step 5</span></div><div class=\"line\">        document.close();</div><div class=\"line\">        System.out.println( <span class=\"string\">\"PDF Created!\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>.输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(“C:/Windows/Fonts/simsun.ttc”, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style=’font-family:SimSun’，要是使用其他字符生成pdf时候，中文就会不显示生成PDF</p>\n</li>\n<li>设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小</li>\n<li>所需的jar包，<a href=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip\" target=\"_blank\" rel=\"external\">下载点我</a>。核心jar是修改后的</li>\n</ol>\n<h1 id=\"比较和总结\"><a href=\"#比较和总结\" class=\"headerlink\" title=\"比较和总结\"></a>比较和总结</h1><h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>itext</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。</div><div class=\"line\">2. 并且itext中文适配不是很好和换行问题。</div><div class=\"line\">3. 且对HTML格式要求严格。</div></pre></td></tr></table></figure>\n<p>wkhtmltopdf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。</div><div class=\"line\">2. 小巧方便，转换速度快。</div><div class=\"line\">3. 跨平台，在Liunx下用，在win下也可以用。</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。</p>\n","site":{"data":{}},"excerpt":"<p>​    最近公司里面有一个任务，在线题卡，就是把客户在线编辑的题卡样式保存下来，然后可以导出为PDF格式。于是上网找了一系列的资料，找到了以下两种方法：</p>\n<ol>\n<li>使用<code>wkhtmltox</code></li>\n<li>使用<code>iText+Flying Saucer</code></li>\n</ol>\n<p>但是还是强烈推荐用第一种方法。</p>","more":"<h1 id=\"使用wkhtmltox-推荐\"><a href=\"#使用wkhtmltox-推荐\" class=\"headerlink\" title=\"使用wkhtmltox(推荐)\"></a>使用wkhtmltox(推荐)</h1><p>wkhtmltox实现网页转换成图片或PDF</p>\n<h2 id=\"命令实现\"><a href=\"#命令实现\" class=\"headerlink\" title=\"命令实现\"></a>命令实现</h2><ol>\n<li>进入wkhtmltox官网软件下载  ：<a href=\"https://wkhtmltopdf.org/downloads.html\">https://wkhtmltopdf.org/downloads.html</a></li>\n<li>安装完成后进入${home}/bin目录下有两个exe文件，通过名称就可以辨别<code>wkhtmltoimage.exe</code>是将HTML转化为image，<code>wkhtmltopdf.exe</code>是将HTML转化为PDF文件，这正是我们想要的。</li>\n</ol>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/HtmlToPdf.png\" alt=\"path\"></p>\n<ol>\n<li>进入${home}/bin目录下打开cmd输入以下命令验证 </li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wkhtmltopdf HTML路径 保存路径</div><div class=\"line\">如： wkhtmltopdf www.baidu.com d:\\test.pdf</div></pre></td></tr></table></figure>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/command.png\" alt=\"command\"></p>\n<p>生成完成后会出现Done。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>JAVA代码中调用wkhtmltopdf生成PDF文件，以下为代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * HTMLTOPPDF</div><div class=\"line\"> * 利用wkhtmltopdf生成PDF</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//wkhtmltopdf.exe安装路径</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String toPdfTool = <span class=\"string\">\"E:\\\\SmallTools\\\\wkhtmltox\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe\"</span>;</div><div class=\"line\">    <span class=\"comment\">//需要生成PDF的URL</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String srcPath = <span class=\"string\">\"http://www.jianshu.com/p/4d65857ffe5e\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"> \t\t<span class=\"comment\">//设置纸张大小: A4, Letter, etc.</span></div><div class=\"line\">        String pageSize = <span class=\"string\">\"A4\"</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//生成后存放路径</span></div><div class=\"line\">        String destPath = <span class=\"string\">\"E:\\\\PDF生成教程及讲解.pdf\"</span>; </div><div class=\"line\">        convert(pageSize, destPath);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">convert</span><span class=\"params\">(String pageSize, String destPath)</span></span>&#123;</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(destPath);</div><div class=\"line\">        File parent = file.getParentFile();</div><div class=\"line\">        <span class=\"keyword\">if</span> (!parent.exists())&#123;</div><div class=\"line\">            parent.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder cmd = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        cmd.append(toPdfTool).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(<span class=\"string\">\"--page-size \"</span>);</div><div class=\"line\">        cmd.append(pageSize).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(srcPath).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">        cmd.append(destPath);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            Runtime.getRuntime().exec(cmd.toString());</div><div class=\"line\">        &#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>详细参数说明可参考：<a href=\"http://www.jianshu.com/p/4d65857ffe5e\">http://www.jianshu.com/p/4d65857ffe5e</a></p>\n<h1 id=\"使用iText-Flying-Saucer\"><a href=\"#使用iText-Flying-Saucer\" class=\"headerlink\" title=\"使用iText+Flying Saucer\"></a>使用iText+Flying Saucer</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">itext可实现 </div><div class=\"line\">1.可以进行块的创建</div><div class=\"line\">2.表格的使用</div><div class=\"line\">3.设置页面的事件</div><div class=\"line\">4.字体的设置</div><div class=\"line\">5.图片的设置（包含水印）</div><div class=\"line\">6.HTML转化成PDF（支持css,javascript）</div><div class=\"line\">7.表单创建</div><div class=\"line\">8.PDF之间的操作等详细的内容可以查看网站的说明。</div></pre></td></tr></table></figure>\n<h2 id=\"Maven配置\"><a href=\"#Maven配置\" class=\"headerlink\" title=\"Maven配置\"></a>Maven配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.itextpdf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>itextpdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.xhtmlrenderer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>flying-saucer-pdf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>9.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 生成pdf，添加生成pdf所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HtmlToPDF</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\"></div><div class=\"line\">        Document document = <span class=\"keyword\">new</span> Document(PageSize.A4.rotate()); <span class=\"comment\">//设置为A4纸大小</span></div><div class=\"line\"></div><div class=\"line\">        ITextRenderer renderer = <span class=\"keyword\">new</span> ITextRenderer();</div><div class=\"line\">        ITextFontResolver fontResolver = renderer.getFontResolver();</div><div class=\"line\">        fontResolver.addFont(<span class=\"string\">\"D:/simsun.ttc\"</span>, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);</div><div class=\"line\">        <span class=\"comment\">// step 2</span></div><div class=\"line\">        PdfWriter writer = PdfWriter.getInstance(document, <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"D:\\\\pdf.pdf\"</span>));</div><div class=\"line\">        <span class=\"comment\">// step 3</span></div><div class=\"line\">        document.open();</div><div class=\"line\">        <span class=\"comment\">// step 4</span></div><div class=\"line\">        XMLWorkerHelper.getInstance().parseXHtml(writer, document,</div><div class=\"line\">                <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"D:/a.html\"</span>));</div><div class=\"line\">        <span class=\"comment\">//step 5</span></div><div class=\"line\">        document.close();</div><div class=\"line\">        System.out.println( <span class=\"string\">\"PDF Created!\"</span> );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ol>\n<li><p>.输入的HTML页面必须是标准的XHTML页面。页面的顶上必须是这样的格式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>生成PDF，添加生成PDF所使用的字符集.注：这里字符集要和模板中使用的字符集一一致。 比如:java中使用宋体 renderer.getFontResolver().addFont(“C:/Windows/Fonts/simsun.ttc”, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); 那么HTML的body中样式必须加上 style=’font-family:SimSun’，要是使用其他字符生成pdf时候，中文就会不显示生成PDF</p>\n</li>\n<li>设置PDF的页面大小模板页面中添加该样式：@page { size: 8.5in 11in; }这时候生成PDF页面正好是A4纸大小</li>\n<li>所需的jar包，<a href=\"http://on937g0jc.bkt.clouddn.com/2017-8-27/HtmlToPdf/flyingsaucer.zip\">下载点我</a>。核心jar是修改后的</li>\n</ol>\n<h1 id=\"比较和总结\"><a href=\"#比较和总结\" class=\"headerlink\" title=\"比较和总结\"></a>比较和总结</h1><h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><p>itext</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. java生成PDF大部分都是用itext，itext的确是java开源组件的第一选择。不过itext也有局限，就是要自己写模版，系统中的表单数量有好几百个，为每个表单做一个导出模版不现实。</div><div class=\"line\">2. 并且itext中文适配不是很好和换行问题。</div><div class=\"line\">3. 且对HTML格式要求严格。</div></pre></td></tr></table></figure>\n<p>wkhtmltopdf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 生成PDF时会自动根据你在HTML页面中H标签生成树形目录结构。</div><div class=\"line\">2. 小巧方便，转换速度快。</div><div class=\"line\">3. 跨平台，在Liunx下用，在win下也可以用。</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    综上比较，wkhtmltopdf是将HTML转为图片或是PDF最好的选择。</p>"},{"title":"JAVA实现简单网络爬虫","date":"2017-04-01T06:17:39.000Z","_content":"\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","source":"_posts/JAVA实现简单爬虫.md","raw":"---\ntitle: JAVA实现简单网络爬虫\ndate: 2017-04-01 14:17:39\ntags: [java, extendKW]\ncategories: technology\n---\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>\n\n<!-- more -->\n\n## 爬虫基本理解\n\n> 通俗一点，`爬虫`是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：\n>\n> (1) 对抓取目标的描述或定义；\n>\n> (2) 对网页或数据的分析与过滤；\n>\n> (3) 对URL的搜索策略。\n>\n> 很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈...\n\n## 实现爬虫需要\n\n### 知识点\n\n- 简单**HTML、CSS、JS**等前端知识\n- [**正则表达式**](http://deerchao.net/tutorials/regex/regex.htm)（很重要，用于过滤不需要的信息）\n- JAVA**语言知识**（可换成其他语言）\n\n### 参数\n\n1. 首先你要给它一个种子链接`URL`\n2. 在种子链接的页面查找其他的URL，重复1步骤\n3. 有链接有页面，然后你可以在页面中查找需要的内容\n\n## 简单爬虫代码\n\n在这里做个示例：把网站`https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1`  图片全部down下来并保存到本地磁盘的操作。\n\n### JAVA基本方式\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");\n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\n                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");\n\t\t\tconnection.setRequestMethod(\"GET\");\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true);\n\t\t\tconnection.setDoOutput(true);\n\t\t\tif (connection.getResponseCode() == 200) {\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tReptile reptile = new Reptile()\n\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/\n                                       newspagenid=7953839918275534&n_type=0&p_from=1\");\n\n\t\tFile f = new File(\"E://imgs\");\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\n\t\tPattern pattern = Pattern.compile(\"<img.*src=(.*?)[^>]*?>\"); //匹配Imag标签\n\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配\n      \n\t\tSystem.out.println(\"正在下载\");\n\t\twhile (matcher.find()) {\n\t\t\tString imgs = matcher.group();\n\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|>|\\\\s+)\").matcher(imgs);\n\t\t\twhile (srcMatcher.find()) {\n\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);\n\t\t\t\tSystem.out.println(src);\n              \t // 获取后缀名\n\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());\n\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地\n\t\t\t}\n\t\t}\n\t}\n\t//下载图片到本地\n\tpublic void downLoad(String src, String imageName) throws Exception {\n\t\tURL url = new URL(src);\n      \n\t\tURLConnection uri = url.openConnection();\n\t\tInputStream is = uri.getInputStream(); // 获取数据流\n\t\t// 写入数据流\n\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));\n\t\tbyte[] buf = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\tos.write(buf, 0, len);\n\t\t}\n\t\tos.close();\n\t\tis.close();\n\t}\n}\n```\n\n> JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。\n\n### [Jsoup](http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_)方式\n\n> `Jsoup` 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。\n>\n> 需要下载JAR包，下载地址：[*点我*](http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar)\n>\n> `Jsoup API`：详见：*http://www.open-open.com/jsoup/*\n\n**工具类StreamTool** ：将byte对象转化为String对象\n\n```java\npublic class StreamTool {\n//  将byte对象转化为String对象\n\tpublic static String inToStringByByte(InputStream in) throws Exception {\n\t\tByteArrayOutputStream outStr = new ByteArrayOutputStream();\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\tStringBuilder content = new StringBuilder();\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tcontent.append(new String(buffer, 0, len, \"UTF-8\"));\n\t\t}\n\t\toutStr.close();\n\t\treturn content.toString();\n\t}\n}\n```\n\n**基本实现类Reptile**\n\n```java\npublic class Reptile {\n\tpublic static String doGet(String urlStr) throws Exception {\n\t\tURL url;\n\t\tString html = \"\";\n\t\ttry {\n\t\t\turl = new URL(urlStr);\n\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\t\t\t//伪装爬虫，不然会报403错误\n\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); \n\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");\n\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)\n              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");\n\t\t\t\n\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式\n\t\t\tconnection.setConnectTimeout(5000);\n\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;\n\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; \n\t\t\tif (connection.getResponseCode() == 200) { //连接成功\n\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");\n\t\t\t\tInputStream in = connection.getInputStream();\n\t\t\t\thtml = StreamTool.inToStringByByte(in);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(connection.getResponseCode());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tthrow new Exception(\"get请求失败\");\n\t\t}\n\t\treturn html;\n\t}\n\n\tpublic static void main(String[] args) throws Exception {\n      \tURL url ;\n     \tInputStream is = null;\n\t\tOutputStream os = null;\n     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\";\n      \n\t\tString htmlStr = Reptile.doGet(urlStr);\n\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象\n\n\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs\n\t\tif (!f.exists()) {\n\t\t\tf.mkdirs();\n\t\t}\n\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片\n//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片\n\t\tint i = 1;\t //计数\n\t\tfor (Element e : pngs) {\n\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径\n\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,\n             \t\tsrc.length());\t// 获取后缀名\n\n\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);\n\t\t\t\n\t\t\tURL url = new URL(src); \t// 连接url\n\t\t\tURLConnection uri = url.openConnection();\n\t\t\t\n\t\t\tis = uri.getInputStream();\t // 获取数据流\n\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流\n\t\t\tbyte[] buf = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(buf)) != -1) {\n\t\t\t\tos.write(buf, 0, len);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n      \t\tos.close();\n      \t\tis.close();\n\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");\n\t}\n}\n```\n\n## 总结\n\n在这里只做个一个简单的爬虫示例，**通过两种方式的比较后，发现Jsoup更佳。**\n\n`JAVA`基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。\n\n`Jsoup`这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看[*Jsoup的API*](http://www.open-open.com/jsoup/)。\n\n现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。\n\n## 附\n\n还有一种更为简单强大的方式，在`Linux环境`下，利用`wget命令`只需要一行命令就可以实现以上功能。\n\n```linux\nwget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&n_type=0&p_from=1\n```\n\n在下篇博客写一下Linux的基本命令。","slug":"JAVA实现简单爬虫","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit64v0007oog6og0xa3qd","content":"<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\" target=\"_blank\" rel=\"external\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\" target=\"_blank\" rel=\"external\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\" target=\"_blank\" rel=\"external\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\" target=\"_blank\" rel=\"external\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>\n","site":{"data":{}},"excerpt":"<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/%E7%88%AC%E8%99%AB.jpg\" algin=\"center\"/></div>","more":"<h2 id=\"爬虫基本理解\"><a href=\"#爬虫基本理解\" class=\"headerlink\" title=\"爬虫基本理解\"></a>爬虫基本理解</h2><blockquote>\n<p>通俗一点，<code>爬虫</code>是用来快速、批量获取我们在网络需要的东西，过滤掉不需要的东西，比如我可以爬一个网站的所有图片省的一张一张去保存，也可以爬其他数据来做研究、统计、数据分析，即是：</p>\n<p>(1) 对抓取目标的描述或定义；</p>\n<p>(2) 对网页或数据的分析与过滤；</p>\n<p>(3) 对URL的搜索策略。</p>\n<p>很多语言都可以做爬虫，在这里记录JAVA做一个简单的爬虫，等以后学会其他语言了再用其他语言做爬虫，哈哈…</p>\n</blockquote>\n<h2 id=\"实现爬虫需要\"><a href=\"#实现爬虫需要\" class=\"headerlink\" title=\"实现爬虫需要\"></a>实现爬虫需要</h2><h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ul>\n<li>简单<strong>HTML、CSS、JS</strong>等前端知识</li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\"><strong>正则表达式</strong></a>（很重要，用于过滤不需要的信息）</li>\n<li>JAVA<strong>语言知识</strong>（可换成其他语言）</li>\n</ul>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ol>\n<li>首先你要给它一个种子链接<code>URL</code></li>\n<li>在种子链接的页面查找其他的URL，重复1步骤</li>\n<li>有链接有页面，然后你可以在页面中查找需要的内容</li>\n</ol>\n<h2 id=\"简单爬虫代码\"><a href=\"#简单爬虫代码\" class=\"headerlink\" title=\"简单爬虫代码\"></a>简单爬虫代码</h2><p>在这里做个示例：把网站<code>https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</code>  图片全部down下来并保存到本地磁盘的操作。</p>\n<h3 id=\"JAVA基本方式\"><a href=\"#JAVA基本方式\" class=\"headerlink\" title=\"JAVA基本方式\"></a>JAVA基本方式</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",</div><div class=\"line\">                    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.22 (KHTML, like Gecko) \t\t\t\t\tChrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\");</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true);</div><div class=\"line\">\t\t\tconnection.setDoOutput(true);</div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">\t\tReptile reptile = new Reptile()</div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(\"https://www.baidu.com/home/news/data/</div><div class=\"line\">                                       newspagenid=7953839918275534&amp;n_type=0&amp;p_from=1\");</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tPattern pattern = Pattern.compile(\"&lt;img.*src=(.*?)[^&gt;]*?&gt;\"); //匹配Imag标签</div><div class=\"line\">\t\tMatcher matcher = pattern.matcher(htmlStr); // 定义一个matcher用来做匹配</div><div class=\"line\">      </div><div class=\"line\">\t\tSystem.out.println(\"正在下载\");</div><div class=\"line\">\t\twhile (matcher.find()) &#123;</div><div class=\"line\">\t\t\tString imgs = matcher.group();</div><div class=\"line\">\t\t\tMatcher srcMatcher = Pattern.compile(\"https:\\\"?(.*?)(\\\"|&gt;|\\\\s+)\").matcher(imgs);</div><div class=\"line\">\t\t\twhile (srcMatcher.find()) &#123;</div><div class=\"line\">\t\t\t\tString src = srcMatcher.group().substring(0,srcMatcher.group().length() - 1);</div><div class=\"line\">\t\t\t\tSystem.out.println(src);</div><div class=\"line\">              \t // 获取后缀名</div><div class=\"line\">\t\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,src.length());</div><div class=\"line\">\t\t\t\treptile.downLoad(src, imageName);   //下载图片到本地</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t//下载图片到本地</div><div class=\"line\">\tpublic void downLoad(String src, String imageName) throws Exception &#123;</div><div class=\"line\">\t\tURL url = new URL(src);</div><div class=\"line\">      </div><div class=\"line\">\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\tInputStream is = uri.getInputStream(); // 获取数据流</div><div class=\"line\">\t\t// 写入数据流</div><div class=\"line\">\t\tOutputStream os = new FileOutputStream(new File(\"E://imgs\", imageName));</div><div class=\"line\">\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\tint len = 0;</div><div class=\"line\">\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tos.close();</div><div class=\"line\">\t\tis.close();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>JAVA基本方法主要是利用JAVA中的正则表达式匹配我们我需要的元素，然后再进行其他操作。简单、粗暴。</p>\n</blockquote>\n<h3 id=\"Jsoup方式\"><a href=\"#Jsoup方式\" class=\"headerlink\" title=\"Jsoup方式\"></a><a href=\"http://baike.baidu.com/link?url=utl_VUDcVYjjpjXYnY1NKXoTbfToHXosLWBr9qmIjSe0DuYkIUv-zgBbXbJsMPoVjp6YGRMjt_B95v4mRKCdK_\">Jsoup</a>方式</h3><blockquote>\n<p><code>Jsoup</code> 是一个 Java 的开源HTML解析器，可直接解析某个URL地址、HTML文本内容。同时提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。可以直接使用DOM或者JQuery方法和表达式取出数据。</p>\n<p>需要下载JAR包，下载地址：<a href=\"http://on937g0jc.bkt.clouddn.com/2017-4-1/jsoup-1.10.2.jar\"><em>点我</em></a></p>\n<p><code>Jsoup API</code>：详见：<em><a href=\"http://www.open-open.com/jsoup/\">http://www.open-open.com/jsoup/</a></em></p>\n</blockquote>\n<p><strong>工具类StreamTool</strong> ：将byte对象转化为String对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StreamTool</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  将byte对象转化为String对象</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">inToStringByByte</span><span class=\"params\">(InputStream in)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">\t\tByteArrayOutputStream outStr = <span class=\"keyword\">new</span> ByteArrayOutputStream();</div><div class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tStringBuilder content = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tcontent.append(<span class=\"keyword\">new</span> String(buffer, <span class=\"number\">0</span>, len, <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\toutStr.close();</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> content.toString();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>基本实现类Reptile</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Reptile &#123;</div><div class=\"line\">\tpublic static String doGet(String urlStr) throws Exception &#123;</div><div class=\"line\">\t\tURL url;</div><div class=\"line\">\t\tString html = \"\";</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\turl = new URL(urlStr);</div><div class=\"line\">\t\t\tHttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class=\"line\">\t\t\t//伪装爬虫，不然会报403错误</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept\", \"text/html\"); </div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Charset\", \"utf-8\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"Accept-Language\", \"en-US,en\");</div><div class=\"line\">\t\t\tconnection.setRequestProperty(\"User-Agent\",\"Mozilla/5.0 (X11; Linux x86_64)</div><div class=\"line\">              AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.160 Safari/537.22\");</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tconnection.setRequestMethod(\"GET\"); // 定义请求方式</div><div class=\"line\">\t\t\tconnection.setConnectTimeout(5000);</div><div class=\"line\">\t\t\tconnection.setDoInput(true); //设置是否向httpUrlConnection输出， 默认情况下是false;</div><div class=\"line\">\t\t\tconnection.setDoOutput(true); // 设置是否从httpUrlConnection读入，默认情况下是true; </div><div class=\"line\">\t\t\tif (connection.getResponseCode() == 200) &#123; //连接成功</div><div class=\"line\">\t\t\t\tSystem.out.println(\"已连接，正在解析。。。。。。\");</div><div class=\"line\">\t\t\t\tInputStream in = connection.getInputStream();</div><div class=\"line\">\t\t\t\thtml = StreamTool.inToStringByByte(in);</div><div class=\"line\">\t\t\t&#125; else &#123;</div><div class=\"line\">\t\t\t\tSystem.out.println(connection.getResponseCode());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\tthrow new Exception(\"get请求失败\");</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\treturn html;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static void main(String[] args) throws Exception &#123;</div><div class=\"line\">      \tURL url ;</div><div class=\"line\">     \tInputStream is = null;</div><div class=\"line\">\t\tOutputStream os = null;</div><div class=\"line\">     \tString urlStr = \"https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1\";</div><div class=\"line\">      </div><div class=\"line\">\t\tString htmlStr = Reptile.doGet(urlStr);</div><div class=\"line\">\t\tDocument doc = Jsoup.parse(htmlStr); // 将获取的网页 HTML 源代码转化为 Document对象</div><div class=\"line\"></div><div class=\"line\">\t\tFile f = new File(\"E://imgs\");  //把文件存在E://imgs</div><div class=\"line\">\t\tif (!f.exists()) &#123;</div><div class=\"line\">\t\t\tf.mkdirs();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tElements pngs = doc.select(\"img[src]\");  //获取所有图片</div><div class=\"line\">//\t\tElements pngs = doc.select(\"img[src$=.png]\");只爬取png图片</div><div class=\"line\">\t\tint i = 1;\t //计数</div><div class=\"line\">\t\tfor (Element e : pngs) &#123;</div><div class=\"line\">\t\t\tString src = e.attr(\"src\");  // 获取img中的src路径</div><div class=\"line\">\t\t\tString imageName = src.substring(src.lastIndexOf(\"/\") + 1,</div><div class=\"line\">             \t\tsrc.length());\t// 获取后缀名</div><div class=\"line\"></div><div class=\"line\">\t\t\tSystem.out.println(\"正在下载第\" + i + \"张图片：\"+ imageName);</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tURL url = new URL(src); \t// 连接url</div><div class=\"line\">\t\t\tURLConnection uri = url.openConnection();</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t\tis = uri.getInputStream();\t // 获取数据流</div><div class=\"line\">\t\t\tos = new FileOutputStream(new File(\"E://imgs\",imageName));// 写入数据流</div><div class=\"line\">\t\t\tbyte[] buf = new byte[1024];</div><div class=\"line\">\t\t\tint len = 0;</div><div class=\"line\">\t\t\twhile ((len = is.read(buf)) != -1) &#123;</div><div class=\"line\">\t\t\t\tos.write(buf, 0, len);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\ti++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">      \t\tos.close();</div><div class=\"line\">      \t\tis.close();</div><div class=\"line\">\t\tSystem.out.println(\"共有\" + (i-1) + \"张图片。\");</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在这里只做个一个简单的爬虫示例，<strong>通过两种方式的比较后，发现Jsoup更佳。</strong></p>\n<p><code>JAVA</code>基本的方式能用正则表达式来匹配所需要的元素，灵活性不高。</p>\n<p><code>Jsoup</code>这个强大的工具提供了DOM和JQuery方法，可以直接操作节点，同时也支持正则表达式，更加的灵活、省力，同时选择性、可玩性和扩展性更高。Jsoup更多的方法可以查看<a href=\"http://www.open-open.com/jsoup/\"><em>Jsoup的API</em></a>。</p>\n<p>现在已经有很多开源的爬虫的框架供我们选择，比如webmagic、Heritrix等，可以适当选择。</p>\n<h2 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h2><p>还有一种更为简单强大的方式，在<code>Linux环境</code>下，利用<code>wget命令</code>只需要一行命令就可以实现以上功能。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -m -H -nd -l 1 -t 1 -A .jpg,.png,.jpeg,.JPEG -e robots=off -P /opt/download --no-check-certificate https://www.baidu.com/home/news/data/newspage?nid=7953839918275534&amp;n_type=0&amp;p_from=1</div></pre></td></tr></table></figure>\n<p>在下篇博客写一下Linux的基本命令。</p>"},{"title":"Linux基本命令","date":"2017-04-07T07:59:22.000Z","_content":"\n# 前言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看`http://www.cnblogs.com/skillup/articles/1877812.html`","source":"_posts/Linux基本命令.md","raw":"---\ntitle: Linux基本命令\ndate: 2017-04-07 15:59:22\ntags: [java, tips]\ncategories: technology\n---\n\n# 前言\n\n之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# Linux简介\n\n## 简介\n\n**Linux**，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian\n\n安装VMware或VirtualBox虚拟机。Linux的定义和历史右转[*百度百科*](http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK)。具体安装步骤，找百度。\n\n## 常用版本\n\n我常用的Linux版本有两个`Centos`和`Ubuntu`，全都是开源免费的,其中Ubuntu属于桌面版。\n\n```\nCentos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。\n另附其官网:http://www.centos.org/。\n另外，它适合作为服务器用。\n```\n\n```\nUbuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。\n```\n\n# 基本命令\n\n> Linux 操作系统位数识别: `uname -a（uname -p）`\n>\n> Linux 32位操作系统：Linux x86  [i586  i386  i686 i...](http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm)\n>\n> Linux 64位操作系统：Linux x64x86_64  X64 ...\n\n1. `man`          命令不会用了，找男人  如：man ls\n2. `ifconfig`     显示系统信息\n3. `ls 或ll`      查看目录文件\n4. `pwd`      查看目前路径\n5. `cat 文件名`     从第一个字节开始正向查看文件的内容\n6. `head -2 file1`    查看一个文件的前两行 \n7. `tail -2 file1` 查看一个文件的最后两行\n8. `mv 老名 新名`      重命名/剪切\n9. `cp 老文件路径+文件名 新文件路径（+文件名）`    复制 \n10. `cd`       进入个人的主目录 \n11. `cd 路径名`    进入新路径\n12. `cd ..`     后退一步\n13. `date`    显示系统日期\n14. `shutdown -h now`    关闭系统(1) \n15. `shutdown -r now`    重启(1) \n16. `reboot`    重启(2) \n17. `halt`          关机(推荐)\n18. `logout`     注销 \n19. `mkdir dir1`    创建一个叫做 'dir1' 的目录' \n20. `rm -f file1`    删除一个叫做 'file1' 的文件'\n21. `rmdir dir1`    删除一个叫做 'dir1' 的目录'\n22. `rm -rf dir1`    删除一个叫做 'dir1' 的目录并同时删除其内\n23. `find / -name file1`     从 '/' 开始进入根文件系统搜索文件和目录 \n24. `tar -zxvf archive.tar`     解压一个包\n25. `rpm -ivh package.rpm`   安装一个rpm包 \n\n\n\n高级一点的命令，也是比较难懂、需要实践和琢磨的命令：\n\n1. `chmod +权限(ugo)`    (u、g、o表示user、group、other)\n\n   > 三种基本权限\n   >\n   > R           读         数值表示为4\n   >\n   > W          写         数值表示为2\n   >\n   > X           可执行  数值表示为1\n\n   ​\t例如：chmod 777   表示user、group、other都具有RWX权限。\t\n\n2. `grep  [options] `    grep命令是一种强大的文本搜索工具\n\n   > grep 'test' d*\n   > 显示所有以d开头的文件中包含 test的行。\n\n3. `ps [options] `      对进程进行监测和控制\n\n   > ps -aux|grep 8080      查看8080端口占用情况\n\n4. `yum yum [options][command] [package ...]`       工具\n\n   > yum list     列出当前系统中安装的所有包\n\n5. `wget wget [OPTION]… [URL]…`      wget是一个从网络上自动下载文件的自由工具\n\n   > wget http://example.com/file.iso    从网上下载单个文件\n\n...............\n\n# 总结\n\nLinux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。\n\n更多的命令可以查看`http://www.cnblogs.com/skillup/articles/1877812.html`","slug":"Linux基本命令","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit6590009oog6gt45bs03","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\" target=\"_blank\" rel=\"external\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\" target=\"_blank\" rel=\"external\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\" target=\"_blank\" rel=\"external\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<code>http://www.cnblogs.com/skillup/articles/1877812.html</code></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前的公司有用过Linux，自己也学习了一段时间，但是很久没有用了，最近又在腾讯云租了个空间把系统装成Centos系统了，所以又把Linux系统重新捡起来，重温下Linux的基本知识。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-6/Linux.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"Linux简介\"><a href=\"#Linux简介\" class=\"headerlink\" title=\"Linux简介\"></a>Linux简介</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><strong>Linux</strong>，免费开源，多用户多任务系统。基于Linux有多个版本的衍生。RedHat、Ubuntu、Debian</p>\n<p>安装VMware或VirtualBox虚拟机。Linux的定义和历史右转<a href=\"http://baike.baidu.com/link?url=ImcCu-CQii_EX-Tiet8ChTjtjNUpDHYUFagNy65U41CX-jqb7oGTOkfew0hJyLhOBPrhC6yZmwUC8Sy-6COiWK\"><em>百度百科</em></a>。具体安装步骤，找百度。</p>\n<h2 id=\"常用版本\"><a href=\"#常用版本\" class=\"headerlink\" title=\"常用版本\"></a>常用版本</h2><p>我常用的Linux版本有两个<code>Centos</code>和<code>Ubuntu</code>，全都是开源免费的,其中Ubuntu属于桌面版。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Centos是免费的企业版Linux操作系统。是RedHat企业版的优化操作系统。具体可以参照百科：http://baike.baidu.com/view/26404.htm。里面有详解。</div><div class=\"line\">另附其官网:http://www.centos.org/。</div><div class=\"line\">另外，它适合作为服务器用。</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Ubuntu之前有在环境中开发过项目，虽然时间不久，但还是有所体会。免费、无毒、免折腾、比较接近底层。</div></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><blockquote>\n<p>Linux 操作系统位数识别: <code>uname -a（uname -p）</code></p>\n<p>Linux 32位操作系统：Linux x86  <a href=\"http://download.oracle.com/otn-pub/java/jdk/7u45-b18/jdk-7u45-linux-i586.rpm\">i586  i386  i686 i…</a></p>\n<p>Linux 64位操作系统：Linux x64x86_64  X64 …</p>\n</blockquote>\n<ol>\n<li><code>man</code>          命令不会用了，找男人  如：man ls</li>\n<li><code>ifconfig</code>     显示系统信息</li>\n<li><code>ls 或ll</code>      查看目录文件</li>\n<li><code>pwd</code>      查看目前路径</li>\n<li><code>cat 文件名</code>     从第一个字节开始正向查看文件的内容</li>\n<li><code>head -2 file1</code>    查看一个文件的前两行 </li>\n<li><code>tail -2 file1</code> 查看一个文件的最后两行</li>\n<li><code>mv 老名 新名</code>      重命名/剪切</li>\n<li><code>cp 老文件路径+文件名 新文件路径（+文件名）</code>    复制 </li>\n<li><code>cd</code>       进入个人的主目录 </li>\n<li><code>cd 路径名</code>    进入新路径</li>\n<li><code>cd ..</code>     后退一步</li>\n<li><code>date</code>    显示系统日期</li>\n<li><code>shutdown -h now</code>    关闭系统(1) </li>\n<li><code>shutdown -r now</code>    重启(1) </li>\n<li><code>reboot</code>    重启(2) </li>\n<li><code>halt</code>          关机(推荐)</li>\n<li><code>logout</code>     注销 </li>\n<li><code>mkdir dir1</code>    创建一个叫做 ‘dir1’ 的目录’ </li>\n<li><code>rm -f file1</code>    删除一个叫做 ‘file1’ 的文件’</li>\n<li><code>rmdir dir1</code>    删除一个叫做 ‘dir1’ 的目录’</li>\n<li><code>rm -rf dir1</code>    删除一个叫做 ‘dir1’ 的目录并同时删除其内</li>\n<li><code>find / -name file1</code>     从 ‘/‘ 开始进入根文件系统搜索文件和目录 </li>\n<li><code>tar -zxvf archive.tar</code>     解压一个包</li>\n<li><code>rpm -ivh package.rpm</code>   安装一个rpm包 </li>\n</ol>\n<p>高级一点的命令，也是比较难懂、需要实践和琢磨的命令：</p>\n<ol>\n<li><p><code>chmod +权限(ugo)</code>    (u、g、o表示user、group、other)</p>\n<blockquote>\n<p>三种基本权限</p>\n<p>R           读         数值表示为4</p>\n<p>W          写         数值表示为2</p>\n<p>X           可执行  数值表示为1</p>\n</blockquote>\n<p>​    例如：chmod 777   表示user、group、other都具有RWX权限。    </p>\n</li>\n<li><p><code>grep  [options]</code>    grep命令是一种强大的文本搜索工具</p>\n<blockquote>\n<p>grep ‘test’ d*<br>显示所有以d开头的文件中包含 test的行。</p>\n</blockquote>\n</li>\n<li><p><code>ps [options]</code>      对进程进行监测和控制</p>\n<blockquote>\n<p>ps -aux|grep 8080      查看8080端口占用情况</p>\n</blockquote>\n</li>\n<li><p><code>yum yum [options][command] [package ...]</code>       工具</p>\n<blockquote>\n<p>yum list     列出当前系统中安装的所有包</p>\n</blockquote>\n</li>\n<li><p><code>wget wget [OPTION]… [URL]…</code>      wget是一个从网络上自动下载文件的自由工具</p>\n<blockquote>\n<p>wget <a href=\"http://example.com/file.iso\">http://example.com/file.iso</a>    从网上下载单个文件</p>\n</blockquote>\n</li>\n</ol>\n<p>……………</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Linux博大精深，有很多的命令自己使用的比较少也没有用到，用到的时候再去查资料。</p>\n<p>更多的命令可以查看<code>http://www.cnblogs.com/skillup/articles/1877812.html</code></p>"},{"title":"Markdown语法指南","date":"2017-03-21T14:51:10.000Z","_content":"花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>\n\n<!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","source":"_posts/Markdown语法.md","raw":"---\ntitle: Markdown语法指南\ndate: 2017-03-21 22:51:10\ntags: [tips]\n---\n花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>\n\n<!-- more -->\n\n> **Markdown**是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台[WordPress](http://baike.baidu.com/item/WordPress)和大型CMS如[Joomla](http://baike.baidu.com/item/Joomla)、[Drupal](http://baike.baidu.com/item/Drupal)都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有[Ghost](http://baike.baidu.com/item/Ghost/17013737)和[Typecho](http://baike.baidu.com/item/Typecho)。\n\n## 基本技巧\n\n### 1  代码\n\n如果你只想高亮语句中的某个函数名或关键字，可以使用 \\``function_name()`\\` 实现\n\n通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 \\`\\`\\` 包裹一段代码，并指定一种语言\n\n```javascript\n​```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n​``` \n```\n支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml\n\n也可以使用 4 空格缩进，再贴上代码，实现相同的的效果\n\n```javascript\n    　　def g(x):\n        　　yield from range(x, 0, -1)\n    　　yield from range(x)\n```\n\n### 2  标题\n\n文章内容较多时，可以用标题分段：\n\n```\n标题1\n======\n\n标题2\n-----\n\n## 大标题 ##\n### 小标题 ###\n```\n\n### 3  粗斜体\n\n```\n*斜体文本*    _斜体文本_\n**粗体文本**    __粗体文本__\n***粗斜体文本***    ___粗斜体文本___\n```\n\n### 4  链接\n\n4.1 常用链接方法\n\n```\n文字链接 ![链接名称](http://链接网址)\n网址链接 <http://链接网址>\n```\n\n4.2 高级链接技巧\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n### 5  列表\n\n5.1 普通无序列表\n\n```\n- 列表文本前使用 [减号+空格]\n+ 列表文本前使用 [加号+空格]\n* 列表文本前使用 [星号+空格]\n```\n\n5.2 普通有序列表\n\n```\n1. 列表前使用 [数字+空格]\n2. 我们会自动帮你添加数字\n7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3\n```\n\n5.3 列表嵌套\n\n```\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n4. 列表里代码段：\n前面四个空格，之后按代码语法 ``` 书写\n​``` \n\n    或者直接空八个，引入代码块\n```\n### 6  引用\n\n6.1 普通引用\n\n```\n> 引用文本前使用 [大于号+空格]\n> 折行可以不加，新起一行都要加上哦\n```\n\n6.2 引用里嵌套引用\n\n```\n> 最外层引用\n> > 多一个 > 嵌套一层引用\n> > > 可以嵌套很多层\n```\n\n6.3 引用里嵌套列表\n\n```\n> - 这是引用里嵌套的一个列表\n> - 还可以有子列表\n>     * 子列表需要从 - 之后延后四个空格开始\n```\n\n6.4 引用里嵌套代码块\n\n```\n>     同样的，在前面加四个空格形成代码块\n>  \n> \n> 或者使用 ``` 形成代码块\n> ``\n```\n\n### 7 图片\n\n7.1 跟链接的方法区别在于前面加了个感叹号 `!`，这样是不是觉得好记多了呢？\n\n```\n![图片名称](http://图片网址)\n```\n\n7.2 当然，你也可以像网址那样对图片网址使用变量\n\n```javascript\n这个链接用 1 作为网址变量 [Google][1].\n然后在文档的结尾位变量赋值（网址）\n\n [1]: http://www.google.com/logo.png\n```\n\n也可以使用 HTML 的图片语法来自定义图片的宽高大小\n\n```javascript\n<img src=\"htt://example.com/sample.png\" width=\"400\" height=\"100\">\n```\n\n### 8  换行\n\n如果另起一行，只需在当前行结尾加 2 个空格\n\n```java\n在当前行的结尾加 2 个空格  \n这行就会新起一行\n```\n\n如果是要起一个新段落，只需要空出一行即可。\n\n### 9  分隔符\n\n如果你有写分割线的习惯，可以新起一行输入三个减号`-`。当前后都有段落时，请空出一行：\n\n```java\n前面的段落\n\n---\n\n后面的段落\n```\n\n## 高级技巧\n\n### 1 行内 HTML 元素\n\n目前只支持部分段内 HTML 元素效果，包括 `      ` ，如\n\n键位显示\n\n```javascript\n使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n\n代码块\n\n```javascript\n使用 <pre></pre> 元素同样可以形成代码块\n```\n\n粗斜体\n\n```javascript\n<b> Markdown 在此处同样适用，如 *加粗* </b>\n```\n\n### 2  符号转义\n\n如果你的描述中需要用到 markdown 的符号，比如 `_` `#` `*` 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 `\\_` `\\#``\\*` 进行避免。\n\n```javascript\n\\_不想这里的文本变斜体\\_\n\\*\\*不想这里的文本被加粗\\*\\*\n```\n\n### 3  扩展\n\n支持** jsfiddle、gist、runjs、优酷视频**，直接填写 url，在其之后会自动添加预览点击会展开相关内容。\n\n```javascript\nhttp://{url_of_the_fiddle}/embedded/[{tabs}/[{style}]]/\nhttps://gist.github.com/{gist_id}\nhttp://runjs.cn/detail/{id}\nhttp://v.youku.com/v_show/id_{video_id}.html\n```\n\n### 4  公式\n\n当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：\n\n```java\n$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}. $$\n\n$$\nx \\href{why-equal.html}{=} y^2 + 1\n$$\n```\n\n同时也支持 HTML 属性，如：\n\n```java\n$$ (x+1)^2 = \\class{hidden}{(x+1)(x+1)} $$\n\n$$\n(x+1)^2 = \\cssId{step1}{\\style{visibility:hidden}{(x+1)(x+1)}}\n$$\n```\n## 总结\n\nmarkdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是`Typora`编辑器，使用起来比其他的更简单、舒适，方便。","slug":"Markdown语法","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit65c000aoog60019datl","content":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\" target=\"_blank\" rel=\"external\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\" target=\"_blank\" rel=\"external\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\" target=\"_blank\" rel=\"external\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\" target=\"_blank\" rel=\"external\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\" target=\"_blank\" rel=\"external\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`<span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span></span> 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span> 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>\n","site":{"data":{}},"excerpt":"<p>花了一段时间把自己的个人博客搭建好了，但是博客必须是要用Markdown书写，所以查了一下Markdown编辑器的语法，在这里做个记录。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-23/markdown.png\" algin=\"center\"/></div>","more":"<blockquote>\n<p><strong>Markdown</strong>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台<a href=\"http://baike.baidu.com/item/WordPress\">WordPress</a>和大型CMS如<a href=\"http://baike.baidu.com/item/Joomla\">Joomla</a>、<a href=\"http://baike.baidu.com/item/Drupal\">Drupal</a>都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有<a href=\"http://baike.baidu.com/item/Ghost/17013737\">Ghost</a>和<a href=\"http://baike.baidu.com/item/Typecho\">Typecho</a>。</p>\n</blockquote>\n<h2 id=\"基本技巧\"><a href=\"#基本技巧\" class=\"headerlink\" title=\"基本技巧\"></a>基本技巧</h2><h3 id=\"1-代码\"><a href=\"#1-代码\" class=\"headerlink\" title=\"1  代码\"></a>1  代码</h3><p>如果你只想高亮语句中的某个函数名或关键字，可以使用 `<code>function_name()</code>` 实现</p>\n<p>通常编辑器根据代码片段适配合适的高亮方法，但你也可以用 ``` 包裹一段代码，并指定一种语言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">​<span class=\"string\">``</span><span class=\"string\">`javascript</div><div class=\"line\">$(document).ready(function () &#123;</div><div class=\"line\">    alert('hello world');</div><div class=\"line\">&#125;);</div><div class=\"line\">​`</span><span class=\"string\">``</span></div></pre></td></tr></table></figure>\n<p>支持的语言：actionscript, apache, bash, clojure, cmake, coffeescript, cpp, cs, css, d, delphi, django, erlang, go, haskell, html, http, ini, java, javascript, json, lisp, lua, markdown, matlab, nginx, objectivec, perl, php, python, r, ruby, scala, smalltalk, sql, tex, vbscript, xml</p>\n<p>也可以使用 4 空格缩进，再贴上代码，实现相同的的效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">    　　def g(x):</div><div class=\"line\">        　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x, <span class=\"number\">0</span>, <span class=\"number\">-1</span>)</div><div class=\"line\">    　　<span class=\"keyword\">yield</span> <span class=\"keyword\">from</span> range(x)</div></pre></td></tr></table></figure>\n<h3 id=\"2-标题\"><a href=\"#2-标题\" class=\"headerlink\" title=\"2  标题\"></a>2  标题</h3><p>文章内容较多时，可以用标题分段：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">标题1</div><div class=\"line\">======</div><div class=\"line\"></div><div class=\"line\">标题2</div><div class=\"line\">-----</div><div class=\"line\"></div><div class=\"line\">## 大标题 ##</div><div class=\"line\">### 小标题 ###</div></pre></td></tr></table></figure>\n<h3 id=\"3-粗斜体\"><a href=\"#3-粗斜体\" class=\"headerlink\" title=\"3  粗斜体\"></a>3  粗斜体</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">*斜体文本*    _斜体文本_</div><div class=\"line\">**粗体文本**    __粗体文本__</div><div class=\"line\">***粗斜体文本***    ___粗斜体文本___</div></pre></td></tr></table></figure>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4  链接\"></a>4  链接</h3><p>4.1 常用链接方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">文字链接 ![链接名称](http://链接网址)</div><div class=\"line\">网址链接 &lt;http://链接网址&gt;</div></pre></td></tr></table></figure>\n<p>4.2 高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 1 作为网址变量 [Google][1].</div><div class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</div><div class=\"line\">然后在文档的结尾为变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\">  [1]: http://www.google.com/</div><div class=\"line\">  [yahoo]: http://www.yahoo.com/</div></pre></td></tr></table></figure>\n<h3 id=\"5-列表\"><a href=\"#5-列表\" class=\"headerlink\" title=\"5  列表\"></a>5  列表</h3><p>5.1 普通无序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 列表文本前使用 [减号+空格]</div><div class=\"line\">+ 列表文本前使用 [加号+空格]</div><div class=\"line\">* 列表文本前使用 [星号+空格]</div></pre></td></tr></table></figure>\n<p>5.2 普通有序列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列表前使用 [数字+空格]</div><div class=\"line\">2. 我们会自动帮你添加数字</div><div class=\"line\">7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3</div></pre></td></tr></table></figure>\n<p>5.3 列表嵌套</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 列出所有元素：</div><div class=\"line\">    - 无序列表元素 A</div><div class=\"line\">        1. 元素 A 的有序子列表</div><div class=\"line\">    - 前面加四个空格</div><div class=\"line\">2. 列表里的多段换行：</div><div class=\"line\">    前面必须加四个空格，</div><div class=\"line\">    这样换行，整体的格式不会乱</div><div class=\"line\">3. 列表里引用：</div><div class=\"line\"></div><div class=\"line\">    &gt; 前面空一行</div><div class=\"line\">    &gt; 仍然需要在 &gt;  前面加四个空格</div><div class=\"line\"></div><div class=\"line\">4. 列表里代码段：</div><div class=\"line\">前面四个空格，之后按代码语法 ``` 书写</div><div class=\"line\">​``` </div><div class=\"line\"></div><div class=\"line\">    或者直接空八个，引入代码块</div></pre></td></tr></table></figure>\n<h3 id=\"6-引用\"><a href=\"#6-引用\" class=\"headerlink\" title=\"6  引用\"></a>6  引用</h3><p>6.1 普通引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 引用文本前使用 [大于号+空格]</div><div class=\"line\">&gt; 折行可以不加，新起一行都要加上哦</div></pre></td></tr></table></figure>\n<p>6.2 引用里嵌套引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; 最外层引用</div><div class=\"line\">&gt; &gt; 多一个 &gt; 嵌套一层引用</div><div class=\"line\">&gt; &gt; &gt; 可以嵌套很多层</div></pre></td></tr></table></figure>\n<p>6.3 引用里嵌套列表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; - 这是引用里嵌套的一个列表</div><div class=\"line\">&gt; - 还可以有子列表</div><div class=\"line\">&gt;     * 子列表需要从 - 之后延后四个空格开始</div></pre></td></tr></table></figure>\n<p>6.4 引用里嵌套代码块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt;     同样的，在前面加四个空格形成代码块</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt; </div><div class=\"line\">&gt; 或者使用 ``` 形成代码块</div><div class=\"line\">&gt; ``</div></pre></td></tr></table></figure>\n<h3 id=\"7-图片\"><a href=\"#7-图片\" class=\"headerlink\" title=\"7 图片\"></a>7 图片</h3><p>7.1 跟链接的方法区别在于前面加了个感叹号 <code>!</code>，这样是不是觉得好记多了呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">![图片名称](http://图片网址)</div></pre></td></tr></table></figure>\n<p>7.2 当然，你也可以像网址那样对图片网址使用变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">这个链接用 <span class=\"number\">1</span> 作为网址变量 [Google][<span class=\"number\">1</span>].</div><div class=\"line\">然后在文档的结尾位变量赋值（网址）</div><div class=\"line\"></div><div class=\"line\"> [<span class=\"number\">1</span>]: http:<span class=\"comment\">//www.google.com/logo.png</span></div></pre></td></tr></table></figure>\n<p>也可以使用 HTML 的图片语法来自定义图片的宽高大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"htt://example.com/sample.png\"</span> width=<span class=\"string\">\"400\"</span> height=<span class=\"string\">\"100\"</span>&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a href=\"#8-换行\" class=\"headerlink\" title=\"8  换行\"></a>8  换行</h3><p>如果另起一行，只需在当前行结尾加 2 个空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">在当前行的结尾加 <span class=\"number\">2</span> 个空格  </div><div class=\"line\">这行就会新起一行</div></pre></td></tr></table></figure>\n<p>如果是要起一个新段落，只需要空出一行即可。</p>\n<h3 id=\"9-分隔符\"><a href=\"#9-分隔符\" class=\"headerlink\" title=\"9  分隔符\"></a>9  分隔符</h3><p>如果你有写分割线的习惯，可以新起一行输入三个减号<code>-</code>。当前后都有段落时，请空出一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">前面的段落</div><div class=\"line\"></div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">后面的段落</div></pre></td></tr></table></figure>\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"1-行内-HTML-元素\"><a href=\"#1-行内-HTML-元素\" class=\"headerlink\" title=\"1 行内 HTML 元素\"></a>1 行内 HTML 元素</h3><p>目前只支持部分段内 HTML 元素效果，包括 <code> </code> ，如</p>\n<p>键位显示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;<span class=\"regexp\">/kbd&gt;+&lt;kbd&gt;Alt&lt;/</span>kbd&gt;+<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">kbd</span>&gt;</span>Del<span class=\"tag\">&lt;/<span class=\"name\">kbd</span>&gt;</span></span> 重启电脑</div></pre></td></tr></table></figure>\n<p>代码块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">使用 &lt;pre&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">pre</span>&gt;</span></span> 元素同样可以形成代码块</div></pre></td></tr></table></figure>\n<p>粗斜体</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt; Markdown 在此处同样适用，如 *加粗* <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"2-符号转义\"><a href=\"#2-符号转义\" class=\"headerlink\" title=\"2  符号转义\"></a>2  符号转义</h3><p>如果你的描述中需要用到 markdown 的符号，比如 <code>_</code> <code>#</code> <code>*</code> 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 <code>\\_</code> <code>\\#``\\*</code> 进行避免。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\_不想这里的文本变斜体\\_</div><div class=\"line\">\\*\\*不想这里的文本被加粗\\*\\*</div></pre></td></tr></table></figure>\n<h3 id=\"3-扩展\"><a href=\"#3-扩展\" class=\"headerlink\" title=\"3  扩展\"></a>3  扩展</h3><p>支持<strong> jsfiddle、gist、runjs、优酷视频</strong>，直接填写 url，在其之后会自动添加预览点击会展开相关内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http:<span class=\"comment\">//&#123;url_of_the_fiddle&#125;/embedded/[&#123;tabs&#125;/[&#123;style&#125;]]/</span></div><div class=\"line\">https:<span class=\"comment\">//gist.github.com/&#123;gist_id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//runjs.cn/detail/&#123;id&#125;</span></div><div class=\"line\">http:<span class=\"comment\">//v.youku.com/v_show/id_&#123;video_id&#125;.html</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-公式\"><a href=\"#4-公式\" class=\"headerlink\" title=\"4  公式\"></a>4  公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ x = &#123;-b \\pm \\sqrt&#123;b^<span class=\"number\">2</span>-<span class=\"number\">4</span>ac&#125; \\over <span class=\"number\">2</span>a&#125;. $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">x \\href&#123;why-equal.html&#125;&#123;=&#125; y^<span class=\"number\">2</span> + <span class=\"number\">1</span></div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<p>同时也支持 HTML 属性，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$$ (x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\<span class=\"class\"><span class=\"keyword\">class</span></span>&#123;hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125; $$</div><div class=\"line\"></div><div class=\"line\">$$</div><div class=\"line\">(x+<span class=\"number\">1</span>)^<span class=\"number\">2</span> = \\cssId&#123;step1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+<span class=\"number\">1</span>)(x+<span class=\"number\">1</span>)&#125;&#125;</div><div class=\"line\">$$</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>markdown语法写多了自然就会了，网上有很多markdown语法编辑器，比如有道云、马克飞象、Typora等。我目前使用的是<code>Typora</code>编辑器，使用起来比其他的更简单、舒适，方便。</p>"},{"title":"MySQL优化","date":"2017-04-17T04:31:55.000Z","_content":"\n# 前言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","source":"_posts/MySQL优化.md","raw":"---\ntitle: MySQL优化\ndate: 2017-04-17 12:31:55\ntags: [sql]\ncategories: technology\n---\n\n# 前言\n\n数据库在每个项目中都会用到，现在又分为两个门派，一种*[关系型数据库](http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK)*，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是*非关系型数据库*，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# 关于MySQL\n\nMySQL 是一个跨平台的`开源`**关系型数据库**管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。\n\nMySQL的**存储引擎**有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。\n\n# MySQL的优化\n\n对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：\n\n## 存储引擎\n\n一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。\n\n> MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。\n\n## 命名规则\n\n本着**约定优先于配置**（Convention Over Configuration）的原则，表的命名规则一样很重要。\n\n> - MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。\n> - 表名和字段名不宜过长（不超过64个字符）。\n> - 建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。\n\n## 语句+索引\n\n索引的合理建立和查询语句的优化可以迅速提升数据库性能。\n\n设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。\n\n垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。\n\n> MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。\n\n## 缓存\n\n当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：\n\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/>\n\n</div>\n\n## 复制及读写分离\n\n这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。\n\n其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。\n\n## 切分\n\n切分包括`垂直切分`和`水平切分`，实现方式上又包括分库、分表。\n\n- 垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。\n- 水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。\n- 切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。\n\n\n- 根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。\n\n\n- 垂直切分一般都要做，只不过业务粒度大小而已。\n- 分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。\n- 水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。\n\n# 总结\n\nMySQL总结可以说是： **优化SQL**，**优化结构**，**优化存储**。\n\n对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。","slug":"MySQL优化","published":1,"updated":"2017-08-27T05:17:42.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit65p000doog64o8dn9p8","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\" target=\"_blank\" rel=\"external\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=\"center\"><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>数据库在每个项目中都会用到，现在又分为两个门派，一种<em><a href=\"http://baike.baidu.com/link?url=F1B2ducJyF3-AS6F8RbkCx-1y10TqUb0tcFlxpySya025ev87isg4GprakGLkp0RvhYLO6qbgzGBTskhi-iLVM9R6yI9MtAqhHq6qy7VPj6HTfW01Y2bIhIR5O7g1xOYdZ6Zsm_qzvnKGVw5oFSzkK\">关系型数据库</a></em>，常见的有MySQL、SQL Server、Oracle、DB2等。另一种是<em>非关系型数据库</em>，也就是NOSQL( Not Only SQL)，常见的NOSQL数据库有Redis 、MongoDB、Cassandra等。数据库的优化直接影响到网站的性能，在这里记录一下MySQL的优化。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/MYSQL.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"关于MySQL\"><a href=\"#关于MySQL\" class=\"headerlink\" title=\"关于MySQL\"></a>关于MySQL</h1><p>MySQL 是一个跨平台的<code>开源</code><strong>关系型数据库</strong>管理系统，目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，许多中小型网站为了降低网站总体拥有成本而选择了 MySQL 作为网站数据库。比如淘宝、京东等知名公司也都在使用。</p>\n<p>MySQL的<strong>存储引擎</strong>有分为很多种。MyISAM、InnoDB等。每个引擎的特性都不一样，可以在不同的情况下选择不同的存储引擎。</p>\n<h1 id=\"MySQL的优化\"><a href=\"#MySQL的优化\" class=\"headerlink\" title=\"MySQL的优化\"></a>MySQL的优化</h1><p>对于一个小项目来说，MySQL优化与否可能没有那么重要，带来的优化效果也没有那么明显。但是如果面对的是一个千万级的大表、千万级甚至上亿的数据量时，优化是必不可少的。那么要从如下几方面来做优化：</p>\n<h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>一般情况可以选择MyISAM存储引擎，如果需要事务支持必须使用InnoDB存储引擎。</p>\n<blockquote>\n<p>MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。</p>\n</blockquote>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p>本着<strong>约定优先于配置</strong>（Convention Over Configuration）的原则，表的命名规则一样很重要。</p>\n<blockquote>\n<ul>\n<li>MySQL数据库、表、字段等名称统一使用小写，单词间用_下划线分隔。</li>\n<li>表名和字段名不宜过长（不超过64个字符）。</li>\n<li>建议数据库统一设置编码为utf8，不仅仅是为了应付数据库间导入导出过程中、因编码格式不统一而导致的恼人的乱码问题，也是因为utf8是一种万国码（Unicode）。</li>\n</ul>\n</blockquote>\n<h2 id=\"语句-索引\"><a href=\"#语句-索引\" class=\"headerlink\" title=\"语句+索引\"></a>语句+索引</h2><p>索引的合理建立和查询语句的优化可以迅速提升数据库性能。</p>\n<p>设计阶段就需要预计QPS（Query Per Second）及数据规模，参考业务场景对数据的要求，合理设计表结构（参考mysql在线DDL问题），甚至违反设计范式做到适当冗余。生产环境分析慢日志，优化语句。索引的设计需要知道索引是怎么用的，比如innodb的加锁机制。</p>\n<p>垃圾查询拖慢性能。不合理的schema设计也会导致数据存取慢。索引的作用不必多说，但如innodb下，错的索引带来的可能不只是查询变慢。</p>\n<blockquote>\n<p>MySQL语句优化是我们最常见也是开发过程中最需要注意的。各种关键字的使用场合、多表之间的关联(据说阿里的要求是关联表不超多三个)、索引的合理使用、批量插入、批量更新、批量删除、临时表的使用等等。</p>\n</blockquote>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>当数据库的压力太大时可以将一部分压力转嫁到缓存（我常用的是Redis），其流程如下：</p>\n<div align=center><img width=\"350\" height=\"350\" src=\"http://on937g0jc.bkt.clouddn.com/2017-4-17/redis.png\" algin=\"center\"/><br><br></div>\n\n<h2 id=\"复制及读写分离\"><a href=\"#复制及读写分离\" class=\"headerlink\" title=\"复制及读写分离\"></a>复制及读写分离</h2><p>这个是大多数场景下都是必须的。因为复制可以实现备份、高可用、负载均衡。</p>\n<p>其中读写分离可以在应用层做，效率高，也可以用三方工具，如360的atlas。</p>\n<h2 id=\"切分\"><a href=\"#切分\" class=\"headerlink\" title=\"切分\"></a>切分</h2><p>切分包括<code>垂直切分</code>和<code>水平切分</code>，实现方式上又包括分库、分表。</p>\n<ul>\n<li>垂直切分保证业务的独立性，防止不同业务争抢资源，毕竟业务是有优先级的。</li>\n<li>水平切分主要用于突破单机瓶颈。除了主主外，只有切分能真正做到将负载分配下去。</li>\n<li>切分后也可对不同片数据进行不同优化。如按时间切分，超过一定时间数据不允许修改，就可以引入压缩了，数据传输及读取减少很多。</li>\n</ul>\n<ul>\n<li>根据业务垂直切分。业务内部分库、分表。一般都需要修改应用。除分表外，其余实现不是很复杂。有第三方组件可用，但通用高效又灵活的方式，还是自己写client。</li>\n</ul>\n<ul>\n<li>垂直切分一般都要做，只不过业务粒度大小而已。</li>\n<li>分库有是经常用的，就算当前压力小，也尽量分出几个逻辑库出来。等规模上去了，很方便就迁移扩展。</li>\n<li>水平拆分有一定难度，但如果将来一定会到这个规模，又可能用到，建议越早做越好。因为对应用的改动较大，而且迁移成本高。</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>MySQL总结可以说是： <strong>优化SQL</strong>，<strong>优化结构</strong>，<strong>优化存储</strong>。</p>\n<p>对于MySQL的优化我还需要进一步提高，从表的设计建立到后期的维护考虑的问题有很多，每一步都需要注意。没有DBA，只有自己来实现。</p>"},{"title":"spring aop两种配置方式","date":"2017-09-12T10:36:06.000Z","_content":"\n# 前言\n\n## AOP\n\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：**核心关注点**和**横切关注点**。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如`权限认证`、`日志`、`事务`。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n## AOP核心概念\n\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（Aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（Joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（Pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（Advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（Weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（Introduction）\n\n在不修改代码的前提下，引入可以在**运行期**为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\n**Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理**。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、**默认使用Java动态代理来创建AOP代理**，这样就可以为任何接口实例创建代理了\n\n2、**当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理**，也可强制使用CGLIB\n\nAOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：**代理对象的方法=增强处理+被代理对象**的方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/>\n\n</div>\n\n# Spring配置AOP的两种方式\n\n## 注解配置AOP\n\n注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： \n\n1. 使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). \n\n\n2. 开发需要被拦截的类。 \n\n\n3. 将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 \n\n\n\napplicationContext的配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 -->\n\t<context:component-scan base-package=\"com.spring.aop\"/>\n\t<!-- 激活自动代理功能 -->\n\t<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\t\n    <context:annotation-config /> \n\t<!-- 用户服务对象 -->\n\t<bean id=\"userService\" class=\"com.spring.aop.service.UserService\" />\n\n</beans>\n```\n\n为Aspect切面类添加注解\n\n```java\npackage com.spring.aop.aspect;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n/**\n * 系统服务组件Aspect切面Bean\n */\n\n//声明这是一个组件\n@Component\n//声明这是一个切面Bean\n@Aspect\npublic class ServiceAspect {\n\n\tprivate final static Log log = LogFactory.getLog(ServiceAspect.class);\n\t\n\t//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点\n\t@Pointcut(\"execution(* com.spring.aop.service..*(..))\")\n\tpublic void aspect(){\t}\n\t\n\t/*\n\t * 配置前置通知,使用在方法aspect()上注册的切入点\n\t * 同时接受JoinPoint切入点对象,可以没有该参数\n\t */\n\t@Before(\"aspect()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"before \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置后置通知,使用在方法aspect()上注册的切入点\n\t@After(\"aspect()\")\n\tpublic void after(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"after \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置环绕通知,使用在方法aspect()上注册的切入点\n\t@Around(\"aspect()\")\n\tpublic void around(JoinPoint joinPoint){\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t((ProceedingJoinPoint) joinPoint).proceed();\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms!\");\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms with exception : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//配置后置返回通知,使用在方法aspect()上注册的切入点\n\t@AfterReturning(\"aspect()\")\n\tpublic void afterReturn(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterReturn \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置抛出异常后通知,使用在方法aspect()上注册的切入点\n\t@AfterThrowing(pointcut=\"aspect()\", throwing=\"ex\")\n\tpublic void afterThrow(JoinPoint joinPoint, Exception ex){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterThrow \" + joinPoint + \"\\t\" + ex.getMessage());\n\t\t}\n\t}\n\t\n}\n```\n\n测试代码\n\n```java\npackage com.spring.aop;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.aop.service.UserService;\nimport com.spring.mvc.bean.User;\n\n/**\n * Spring AOP测试\n */\npublic class Tester {\n\n\tprivate final static Log log = LogFactory.getLog(Tester.class);\n\t\n\tpublic static void main(String[] args) {\n\t\t//启动Spring容器\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取service组件\n\t\tUserService service = (UserService) context.getBean(\"userService\");\n\t\t//以普通的方式调用UserService对象的三个方法\n\t\tUser user = service.get(1L);\n\t\tservice.save(user);\n\t\ttry {\n\t\t\tservice.delete(1L);\n\t\t} catch (Exception e) {\n\t\t\tif(log.isWarnEnabled()){\n\t\t\t\tlog.warn(\"Delete user : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n控制台输出如下：\n\n```java\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.service.UserService:19] getUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(User com.spring.aop.service.UserService.get(long))\tUse time : 42 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.service.UserService:26] saveUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(void com.spring.aop.service.UserService.save(User))\tUse time : 2 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.service.UserService:32] delete method . . .\n INFO [spring.aop.aspect.ServiceAspect:65] around execution(boolean com.spring.aop.service.UserService.delete(long))\tUse time : 5 ms with exception : spring aop ThrowAdvice演示\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(boolean com.spring.aop.service.UserService.delete(long))\n WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type for: public boolean com.spring.aop.service.UserService.delete(long) throws java.lang.Exception\n```\n\n可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。\n\n## XML配置AOP\n\nXML配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 系统服务组件的切面Bean -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\"/>\n\t<!-- AOP配置 -->\n\t<aop:config>\n\t\t<!-- 声明一个切面,并注入切面Bean,相当于@Aspect -->\n\t\t<aop:aspect id=\"simpleAspect\" ref=\"serviceAspect\">\n\t\t\t<!-- 配置一个切入点,相当于@Pointcut -->\n\t\t\t<aop:pointcut expression=\"execution(* com.spring.aop.service..*(..))\" id=\"simplePointcut\"/>\n\t\t\t<!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing -->\n\t\t\t<aop:before pointcut-ref=\"simplePointcut\" method=\"before\"/>\n\t\t\t<aop:after pointcut-ref=\"simplePointcut\" method=\"after\"/>\n\t\t\t<aop:after-returning pointcut-ref=\"simplePointcut\" method=\"afterReturn\"/>\n\t\t\t<aop:after-throwing pointcut-ref=\"simplePointcut\" method=\"afterThrow\" throwing=\"ex\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n```\n\nServiceAspect.java\n\n```java\n//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法\n@Before(\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\")\npublic void beforeReturnUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeReturnUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法\n@Before(\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\")\npublic void beforeArgUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中\n@Before(\"aspect()&&args(id)\")\npublic void beforeArgId(JoinPoint joinPoint, long id){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgId \" + joinPoint + \"\\tID:\" + id);\n\t}\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n# 总结\n\nSpringAop可以用来：\n\n1. Spring声明式事务管理配置。\n2. 在执行方法前,判断是否具有权限。\n3. 对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。\n4. 使用Spring AOP实现MySQL数据库读写分离。\n5. 信息过滤\n6. ......","source":"_posts/spring-aop两种配置方式.md","raw":"---\ntitle: spring aop两种配置方式\ndate: 2017-09-12 18:36:06\ntags: [java,spring]\ncategories: technology\n---\n\n# 前言\n\n## AOP\n\nAOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\nAOP技术恰恰相反，它利用一种称为\"横切\"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为\"Aspect\"，即切面。所谓\"切面\"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。\n\n使用\"横切\"技术，AOP把软件系统分为两个部分：**核心关注点**和**横切关注点**。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如`权限认证`、`日志`、`事务`。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。\n\n## AOP核心概念\n\n1、横切关注点\n\n对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n\n2、切面（Aspect）\n\n类是对物体特征的抽象，切面就是对横切关注点的抽象\n\n3、连接点（Joinpoint）\n\n被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n\n4、切入点（Pointcut）\n\n对连接点进行拦截的定义\n\n5、通知（Advice）\n\n所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类\n\n6、目标对象\n\n代理的目标对象\n\n7、织入（Weave）\n\n将切面应用到目标对象并导致代理对象创建的过程\n\n8、引入（Introduction）\n\n在不修改代码的前提下，引入可以在**运行期**为类动态地添加一些方法或字段\n\n## Spring对AOP的支持\n\n**Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理**。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：\n\n1、**默认使用Java动态代理来创建AOP代理**，这样就可以为任何接口实例创建代理了\n\n2、**当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理**，也可强制使用CGLIB\n\nAOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：\n\n1、定义普通业务组件\n\n2、定义切入点，一个切入点可能横切多个业务组件\n\n3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作\n\n所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：**代理对象的方法=增强处理+被代理对象**的方法。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/>\n\n</div>\n\n# Spring配置AOP的两种方式\n\n## 注解配置AOP\n\n注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： \n\n1. 使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). \n\n\n2. 开发需要被拦截的类。 \n\n\n3. 将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 \n\n\n\napplicationContext的配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 -->\n\t<context:component-scan base-package=\"com.spring.aop\"/>\n\t<!-- 激活自动代理功能 -->\n\t<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n\t\n    <context:annotation-config /> \n\t<!-- 用户服务对象 -->\n\t<bean id=\"userService\" class=\"com.spring.aop.service.UserService\" />\n\n</beans>\n```\n\n为Aspect切面类添加注解\n\n```java\npackage com.spring.aop.aspect;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.AfterReturning;\nimport org.aspectj.lang.annotation.AfterThrowing;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.springframework.stereotype.Component;\n\n/**\n * 系统服务组件Aspect切面Bean\n */\n\n//声明这是一个组件\n@Component\n//声明这是一个切面Bean\n@Aspect\npublic class ServiceAspect {\n\n\tprivate final static Log log = LogFactory.getLog(ServiceAspect.class);\n\t\n\t//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点\n\t@Pointcut(\"execution(* com.spring.aop.service..*(..))\")\n\tpublic void aspect(){\t}\n\t\n\t/*\n\t * 配置前置通知,使用在方法aspect()上注册的切入点\n\t * 同时接受JoinPoint切入点对象,可以没有该参数\n\t */\n\t@Before(\"aspect()\")\n\tpublic void before(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"before \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置后置通知,使用在方法aspect()上注册的切入点\n\t@After(\"aspect()\")\n\tpublic void after(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"after \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置环绕通知,使用在方法aspect()上注册的切入点\n\t@Around(\"aspect()\")\n\tpublic void around(JoinPoint joinPoint){\n\t\tlong start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t((ProceedingJoinPoint) joinPoint).proceed();\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms!\");\n\t\t\t}\n\t\t} catch (Throwable e) {\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tif(log.isInfoEnabled()){\n\t\t\t\tlog.info(\"around \" + joinPoint + \"\\tUse time : \" + (end - start) + \" ms with exception : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//配置后置返回通知,使用在方法aspect()上注册的切入点\n\t@AfterReturning(\"aspect()\")\n\tpublic void afterReturn(JoinPoint joinPoint){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterReturn \" + joinPoint);\n\t\t}\n\t}\n\t\n\t//配置抛出异常后通知,使用在方法aspect()上注册的切入点\n\t@AfterThrowing(pointcut=\"aspect()\", throwing=\"ex\")\n\tpublic void afterThrow(JoinPoint joinPoint, Exception ex){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"afterThrow \" + joinPoint + \"\\t\" + ex.getMessage());\n\t\t}\n\t}\n\t\n}\n```\n\n测试代码\n\n```java\npackage com.spring.aop;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport com.spring.aop.service.UserService;\nimport com.spring.mvc.bean.User;\n\n/**\n * Spring AOP测试\n */\npublic class Tester {\n\n\tprivate final static Log log = LogFactory.getLog(Tester.class);\n\t\n\tpublic static void main(String[] args) {\n\t\t//启动Spring容器\n\t\tApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取service组件\n\t\tUserService service = (UserService) context.getBean(\"userService\");\n\t\t//以普通的方式调用UserService对象的三个方法\n\t\tUser user = service.get(1L);\n\t\tservice.save(user);\n\t\ttry {\n\t\t\tservice.delete(1L);\n\t\t} catch (Exception e) {\n\t\t\tif(log.isWarnEnabled()){\n\t\t\t\tlog.warn(\"Delete user : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n控制台输出如下：\n\n```java\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.service.UserService:19] getUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(User com.spring.aop.service.UserService.get(long))\tUse time : 42 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(User com.spring.aop.service.UserService.get(long))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.service.UserService:26] saveUser method . . .\n INFO [spring.aop.aspect.ServiceAspect:60] around execution(void com.spring.aop.service.UserService.save(User))\tUse time : 2 ms!\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(void com.spring.aop.service.UserService.save(User))\n INFO [spring.aop.aspect.ServiceAspect:40] before execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.service.UserService:32] delete method . . .\n INFO [spring.aop.aspect.ServiceAspect:65] around execution(boolean com.spring.aop.service.UserService.delete(long))\tUse time : 5 ms with exception : spring aop ThrowAdvice演示\n INFO [spring.aop.aspect.ServiceAspect:48] after execution(boolean com.spring.aop.service.UserService.delete(long))\n INFO [spring.aop.aspect.ServiceAspect:74] afterReturn execution(boolean com.spring.aop.service.UserService.delete(long))\n WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type for: public boolean com.spring.aop.service.UserService.delete(long) throws java.lang.Exception\n```\n\n可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。\n\n## XML配置AOP\n\nXML配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n\n\t<!-- 系统服务组件的切面Bean -->\n\t<bean id=\"serviceAspect\" class=\"com.spring.aop.aspect.ServiceAspect\"/>\n\t<!-- AOP配置 -->\n\t<aop:config>\n\t\t<!-- 声明一个切面,并注入切面Bean,相当于@Aspect -->\n\t\t<aop:aspect id=\"simpleAspect\" ref=\"serviceAspect\">\n\t\t\t<!-- 配置一个切入点,相当于@Pointcut -->\n\t\t\t<aop:pointcut expression=\"execution(* com.spring.aop.service..*(..))\" id=\"simplePointcut\"/>\n\t\t\t<!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing -->\n\t\t\t<aop:before pointcut-ref=\"simplePointcut\" method=\"before\"/>\n\t\t\t<aop:after pointcut-ref=\"simplePointcut\" method=\"after\"/>\n\t\t\t<aop:after-returning pointcut-ref=\"simplePointcut\" method=\"afterReturn\"/>\n\t\t\t<aop:after-throwing pointcut-ref=\"simplePointcut\" method=\"afterThrow\" throwing=\"ex\"/>\n\t\t</aop:aspect>\n\t</aop:config>\n</beans>\n```\n\nServiceAspect.java\n\n```java\n//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法\n@Before(\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\")\npublic void beforeReturnUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeReturnUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法\n@Before(\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\")\npublic void beforeArgUser(JoinPoint joinPoint){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgUser \" + joinPoint);\n\t}\n}\n\n//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中\n@Before(\"aspect()&&args(id)\")\npublic void beforeArgId(JoinPoint joinPoint, long id){\n\tif(log.isInfoEnabled()){\n\t\tlog.info(\"beforeArgId \" + joinPoint + \"\\tID:\" + id);\n\t}\n}\n```\n\nUserService.java\n\n```java\npackage com.spring.aop.service;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport com.spring.mvc.bean.User;\n\n/**\n * 用户服务模型\n */\npublic class UserService {\n\n\tprivate final static Log log = LogFactory.getLog(UserService.class);\n\t\n\tpublic User get(long id){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"getUser method . . .\");\n\t\t}\n\t\treturn new User();\n\t}\n\t\n\tpublic void save(User user){\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"saveUser method . . .\");\n\t\t}\n\t}\n\t\n\tpublic boolean delete(long id) throws Exception{\n\t\tif(log.isInfoEnabled()){\n\t\t\tlog.info(\"delete method . . .\");\n\t\t\tthrow new Exception(\"spring aop ThrowAdvice演示\");\n\t\t}\n\t\treturn false;\n\t}\n\t\n}\n```\n\n# 总结\n\nSpringAop可以用来：\n\n1. Spring声明式事务管理配置。\n2. 在执行方法前,判断是否具有权限。\n3. 对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。\n4. 使用Spring AOP实现MySQL数据库读写分离。\n5. 信息过滤\n6. ......","slug":"spring-aop两种配置方式","published":1,"updated":"2017-09-12T11:34:54.495Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit65u000foog6zdxedhgh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<div align=\"center\"><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如<code>权限认证</code>、<code>日志</code>、<code>事务</code>。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（Aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（Joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（Pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（Advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（Weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（Introduction）</p>\n<p>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p><strong>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</strong>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、<strong>默认使用Java动态代理来创建AOP代理</strong>，这样就可以为任何接口实例创建代理了</p>\n<p>2、<strong>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</strong>，也可强制使用CGLIB</p>\n<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<strong>代理对象的方法=增强处理+被代理对象</strong>的方法。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"><br><br></div>\n\n<h1 id=\"Spring配置AOP的两种方式\"><a href=\"#Spring配置AOP的两种方式\" class=\"headerlink\" title=\"Spring配置AOP的两种方式\"></a>Spring配置AOP的两种方式</h1><h2 id=\"注解配置AOP\"><a href=\"#注解配置AOP\" class=\"headerlink\" title=\"注解配置AOP\"></a>注解配置AOP</h2><p>注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： </p>\n<ol>\n<li>使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). </li>\n</ol>\n<ol>\n<li>开发需要被拦截的类。 </li>\n</ol>\n<ol>\n<li>将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 </li>\n</ol>\n<p>applicationContext的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.spring.aop\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活自动代理功能 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span> /&gt;</span> </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 用户服务对象 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.service.UserService\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>为Aspect切面类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.aspect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 系统服务组件Aspect切面Bean</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明这是一个组件</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"comment\">//声明这是一个切面Bean</span></div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceAspect</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(ServiceAspect.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span></span>&#123;\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/*</span></div><div class=\"line\">\t * 配置前置通知,使用在方法aspect()上注册的切入点</div><div class=\"line\">\t * 同时接受JoinPoint切入点对象,可以没有该参数</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"before \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"after \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置环绕通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t((ProceedingJoinPoint) joinPoint).proceed();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置返回通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterReturn \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置抛出异常后通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterThrowing</span>(pointcut=<span class=\"string\">\"aspect()\"</span>, throwing=<span class=\"string\">\"ex\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterThrow \"</span> + joinPoint + <span class=\"string\">\"\\t\"</span> + ex.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.aop.service.UserService;</div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Spring AOP测试</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tester</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(Tester.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//启动Spring容器</span></div><div class=\"line\">\t\tApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//获取service组件</span></div><div class=\"line\">\t\tUserService service = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//以普通的方式调用UserService对象的三个方法</span></div><div class=\"line\">\t\tUser user = service.get(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\tservice.save(user);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tservice.delete(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isWarnEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.warn(<span class=\"string\">\"Delete user : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:<span class=\"number\">40</span>] <span class=\"function\">before <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</span></div><div class=\"line\">INFO [spring.aop.service.UserService:19] getUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)\tUse time : 42 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:26] saveUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)\tUse time : 2 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:32] delete method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:65] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)\tUse time : 5 ms with exception : spring aop ThrowAdvice演示</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type <span class=\"keyword\">for</span>: <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.<span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span>)</span> <span class=\"keyword\">throws</span> java.lang.Exception</div></pre></td></tr></table></figure>\n<p>可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。</p>\n<h2 id=\"XML配置AOP\"><a href=\"#XML配置AOP\" class=\"headerlink\" title=\"XML配置AOP\"></a>XML配置AOP</h2><p>XML配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</span></div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 系统服务组件的切面Bean --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- AOP配置 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simpleAspect\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"serviceAspect\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置一个切入点,相当于@Pointcut --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simplePointcut\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"after\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterReturn\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterThrow\"</span> <span class=\"attr\">throwing</span>=<span class=\"string\">\"ex\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ServiceAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeReturnUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeReturnUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()&amp;&amp;args(id)\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgId</span><span class=\"params\">(JoinPoint joinPoint, <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgId \"</span> + joinPoint + <span class=\"string\">\"\\tID:\"</span> + id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>SpringAop可以用来：</p>\n<ol>\n<li>Spring声明式事务管理配置。</li>\n<li>在执行方法前,判断是否具有权限。</li>\n<li>对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。</li>\n<li>使用Spring AOP实现MySQL数据库读写分离。</li>\n<li>信息过滤</li>\n<li>……</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>AOP（Aspect Oriented Programming），即面向切面编程，可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p>\n<div align=center><img width=\"600\" height=\"200\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/spring.png\" algin=\"center\"/><br><br></div>","more":"<p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p>\n<p>使用”横切”技术，AOP把软件系统分为两个部分：<strong>核心关注点</strong>和<strong>横切关注点</strong>。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如<code>权限认证</code>、<code>日志</code>、<code>事务</code>。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>\n<h2 id=\"AOP核心概念\"><a href=\"#AOP核心概念\" class=\"headerlink\" title=\"AOP核心概念\"></a>AOP核心概念</h2><p>1、横切关注点</p>\n<p>对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点</p>\n<p>2、切面（Aspect）</p>\n<p>类是对物体特征的抽象，切面就是对横切关注点的抽象</p>\n<p>3、连接点（Joinpoint）</p>\n<p>被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点指的就是被拦截到的方法，实际上连接点还可以是字段或者构造器</p>\n<p>4、切入点（Pointcut）</p>\n<p>对连接点进行拦截的定义</p>\n<p>5、通知（Advice）</p>\n<p>所谓通知指的就是指拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕通知五类</p>\n<p>6、目标对象</p>\n<p>代理的目标对象</p>\n<p>7、织入（Weave）</p>\n<p>将切面应用到目标对象并导致代理对象创建的过程</p>\n<p>8、引入（Introduction）</p>\n<p>在不修改代码的前提下，引入可以在<strong>运行期</strong>为类动态地添加一些方法或字段</p>\n<h2 id=\"Spring对AOP的支持\"><a href=\"#Spring对AOP的支持\" class=\"headerlink\" title=\"Spring对AOP的支持\"></a>Spring对AOP的支持</h2><p><strong>Spring中AOP代理由Spring的IOC容器负责生成、管理，其依赖关系也由IOC容器负责管理</strong>。因此，AOP代理可以直接使用容器中的其它bean实例作为目标，这种关系可由IOC容器的依赖注入提供。Spring创建代理的规则为：</p>\n<p>1、<strong>默认使用Java动态代理来创建AOP代理</strong>，这样就可以为任何接口实例创建代理了</p>\n<p>2、<strong>当需要代理的类不是代理接口的时候，Spring会切换为使用CGLIB代理</strong>，也可强制使用CGLIB</p>\n<p>AOP编程其实是很简单的事情，纵观AOP编程，程序员只需要参与三个部分：</p>\n<p>1、定义普通业务组件</p>\n<p>2、定义切入点，一个切入点可能横切多个业务组件</p>\n<p>3、定义增强处理，增强处理就是在AOP框架为普通业务组件织入的处理动作</p>\n<p>所以进行AOP编程的关键就是定义切入点和定义增强处理，一旦定义了合适的切入点和增强处理，AOP框架将自动生成AOP代理，即：<strong>代理对象的方法=增强处理+被代理对象</strong>的方法。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-9-12/SpringAOP/Aop.png\" algin=\"center\"/><br><br></div>\n\n<h1 id=\"Spring配置AOP的两种方式\"><a href=\"#Spring配置AOP的两种方式\" class=\"headerlink\" title=\"Spring配置AOP的两种方式\"></a>Spring配置AOP的两种方式</h1><h2 id=\"注解配置AOP\"><a href=\"#注解配置AOP\" class=\"headerlink\" title=\"注解配置AOP\"></a>注解配置AOP</h2><p>注解配置AOP（使用 AspectJ 类库实现的），大致分为三步： </p>\n<ol>\n<li>使用注解@Aspect来定义一个切面，在切面中定义切入点(@Pointcut),通知类型(@Before, @AfterReturning,@After,@AfterThrowing,@Around). </li>\n</ol>\n<ol>\n<li>开发需要被拦截的类。 </li>\n</ol>\n<ol>\n<li>将切面配置到xml中，当然，我们也可以使用自动扫描Bean的方式。这样的话，那就交由Spring AOP容器管理。 </li>\n</ol>\n<p>applicationContext的配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活组件扫描功能,在包com.spring.aop及其子包下面自动扫描通过注解配置的组件 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.spring.aop\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 激活自动代理功能 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">\t</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span> /&gt;</span> </div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 用户服务对象 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.service.UserService\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>为Aspect切面类添加注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.aspect;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.After;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Around;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Aspect;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Before;</div><div class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 系统服务组件Aspect切面Bean</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明这是一个组件</span></div><div class=\"line\"><span class=\"meta\">@Component</span></div><div class=\"line\"><span class=\"comment\">//声明这是一个切面Bean</span></div><div class=\"line\"><span class=\"meta\">@Aspect</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceAspect</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(ServiceAspect.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置切入点,该方法无方法体,主要为方便同类中其他方法使用此处配置的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">aspect</span><span class=\"params\">()</span></span>&#123;\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">/*</div><div class=\"line\">\t * 配置前置通知,使用在方法aspect()上注册的切入点</div><div class=\"line\">\t * 同时接受JoinPoint切入点对象,可以没有该参数</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"before \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@After</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">after</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"after \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置环绕通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@Around</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">around</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t((ProceedingJoinPoint) joinPoint).proceed();</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms!\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">long</span> end = System.currentTimeMillis();</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.info(<span class=\"string\">\"around \"</span> + joinPoint + <span class=\"string\">\"\\tUse time : \"</span> + (end - start) + <span class=\"string\">\" ms with exception : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置后置返回通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterReturning</span>(<span class=\"string\">\"aspect()\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterReturn</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterReturn \"</span> + joinPoint);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//配置抛出异常后通知,使用在方法aspect()上注册的切入点</span></div><div class=\"line\">\t<span class=\"meta\">@AfterThrowing</span>(pointcut=<span class=\"string\">\"aspect()\"</span>, throwing=<span class=\"string\">\"ex\"</span>)</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterThrow</span><span class=\"params\">(JoinPoint joinPoint, Exception ex)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"afterThrow \"</span> + joinPoint + <span class=\"string\">\"\\t\"</span> + ex.getMessage());</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</div><div class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.aop.service.UserService;</div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Spring AOP测试</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tester</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(Tester.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//启动Spring容器</span></div><div class=\"line\">\t\tApplicationContext context = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"applicationContext.xml\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//获取service组件</span></div><div class=\"line\">\t\tUserService service = (UserService) context.getBean(<span class=\"string\">\"userService\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//以普通的方式调用UserService对象的三个方法</span></div><div class=\"line\">\t\tUser user = service.get(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\tservice.save(user);</div><div class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\tservice.delete(<span class=\"number\">1L</span>);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(log.isWarnEnabled())&#123;</div><div class=\"line\">\t\t\t\tlog.warn(<span class=\"string\">\"Delete user : \"</span> + e.getMessage());</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>控制台输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:<span class=\"number\">40</span>] <span class=\"function\">before <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:19] getUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)\tUse time : 42 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(User com.spring.aop.service.UserService.get(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:26] saveUser method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:60] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)\tUse time : 2 ms!</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">void</span> com.spring.aop.service.UserService.save(User)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:40] before <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.service.UserService:32] delete method . . .</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:65] around <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)\tUse time : 5 ms with exception : spring aop ThrowAdvice演示</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:48] after <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">INFO [spring.aop.aspect.ServiceAspect:74] afterReturn <span class=\"title\">execution</span><span class=\"params\">(<span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.delete(<span class=\"keyword\">long</span>)</span>)</div><div class=\"line\">WARN [studio.spring.aop.Tester:32] Delete user : Null return value from advice does not match primitive return type <span class=\"keyword\">for</span>: <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> com.spring.aop.service.UserService.<span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span>)</span> <span class=\"keyword\">throws</span> java.lang.Exception</span></div></pre></td></tr></table></figure>\n<p>可以看到，正如我们预期的那样，虽然我们并没有对UserSerivce类包括其调用方式做任何改变，但是Spring仍然拦截到了其中方法的调用，或许这正是AOP的魔力所在。</p>\n<h2 id=\"XML配置AOP\"><a href=\"#XML配置AOP\" class=\"headerlink\" title=\"XML配置AOP\"></a>XML配置AOP</h2><p>XML配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></div><div class=\"line\">\t<span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></div><div class=\"line\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class=\"line\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- 系统服务组件的切面Bean --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"serviceAspect\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.spring.aop.aspect.ServiceAspect\"</span>/&gt;</span></div><div class=\"line\">\t<span class=\"comment\">&lt;!-- AOP配置 --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- 声明一个切面,并注入切面Bean,相当于@Aspect --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simpleAspect\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"serviceAspect\"</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置一个切入点,相当于@Pointcut --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* com.spring.aop.service..*(..))\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"simplePointcut\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 配置通知,相当于@Before、@After、@AfterReturn、@Around、@AfterThrowing --&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"before\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"after\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterReturn\"</span>/&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"simplePointcut\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"afterThrow\"</span> <span class=\"attr\">throwing</span>=<span class=\"string\">\"ex\"</span>/&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>ServiceAspect.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截返回值为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(com.spring.mvc.bean.User com.spring.aop.service..*(..))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeReturnUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeReturnUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截参数为com.spring.mvc.bean.User的方法</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* com.spring.aop.service..*(com.spring.mvc.bean.User))\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgUser</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgUser \"</span> + joinPoint);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//配置前置通知,拦截含有long类型参数的方法,并将参数值注入到当前方法的形参id中</span></div><div class=\"line\"><span class=\"meta\">@Before</span>(<span class=\"string\">\"aspect()&amp;&amp;args(id)\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeArgId</span><span class=\"params\">(JoinPoint joinPoint, <span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\tlog.info(<span class=\"string\">\"beforeArgId \"</span> + joinPoint + <span class=\"string\">\"\\tID:\"</span> + id);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>UserService.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.spring.aop.service;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.Log;</div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.logging.LogFactory;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> com.spring.mvc.bean.User;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 用户服务模型</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> Log log = LogFactory.getLog(UserService.class);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"getUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User();</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"saveUser method . . .\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">long</span> id)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(log.isInfoEnabled())&#123;</div><div class=\"line\">\t\t\tlog.info(<span class=\"string\">\"delete method . . .\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"spring aop ThrowAdvice演示\"</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>SpringAop可以用来：</p>\n<ol>\n<li>Spring声明式事务管理配置。</li>\n<li>在执行方法前,判断是否具有权限。</li>\n<li>对部分函数的调用进行日志记录。监控部分重要函数，若抛出指定的异常，可以以短信或邮件方式通知相关人员。</li>\n<li>使用Spring AOP实现MySQL数据库读写分离。</li>\n<li>信息过滤</li>\n<li>……</li>\n</ol>"},{"title":"博客建成第一天","date":"2017-03-07T05:30:26.000Z","_content":"> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","source":"_posts/博客建成第一天.md","raw":"---\ntitle: 博客建成第一天\ndate: 2017-03-7 13:30:26\ntags: [firstday]\ncategories: life\n---\n> 经过几天的努力，自己的博客终于搭建起来了，打心里很开心。\n>\n> 这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。\n>\n> 从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!\n\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n","slug":"博客建成第一天","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit66b000joog6bikrqvr0","content":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=\"center\"><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"></div>\n\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>经过几天的努力，自己的博客终于搭建起来了，打心里很开心。</p>\n<p>这不是贴吧，不是豆瓣，不是CSDN，这是我自己在互联网上的一小点领地。</p>\n<p>从开始博客基本样式，到域名，自己一步一步摸索搭建起来的，我相信自己可以做的更好，加油!</p>\n</blockquote>\n<div align=center><img width=\"300\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/avatar.jpg\" algin=\"center\"/></div>\n\n"},{"title":"微信公众号网页开发","date":"2017-06-01T07:27:34.000Z","_content":"\n# 前言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","source":"_posts/微信公众号网页开发.md","raw":"---\ntitle: 微信公众号网页开发\ndate: 2017-06-01 15:27:34\ntags: [js,移动端]\ncategories: technology\n---\n\n# 前言\n\n最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。\n\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/>\n\n</div>\n\n<!-- more -->\n\n# HTML页面之间传值\n\nJSP之间传值已经很熟悉，HTML之间传值是通过`解析URL`获取所需参数。\n\n```javascript\n//URL传值\nURL + \"?logId=\" + logId;\n```\n\n```javascript\n//获取所需参数\nvar hrefInfo = getUrlVars(window.location.href);\n\tif (hrefInfo.logId && hrefInfo.logId != \"undefined\") {\n\t\tfillData(hrefInfo.logId);\n\t\tlogId = hrefInfo.logId;\n\t} else {\n\n}\n\n// 得到url中的参数\nfunction getUrlVars(hrf) {\n\n\tvar vars = [], hash;\n\tvar locationHref = !hrf ? window.location.href : hrf;\n\tlocationHref = locationHref.replace(/#/g, \"\");\n\n\tif (locationHref.indexOf('%') > 0) {\n\t\tlocationHref = unescape(locationHref);\n\t}\n\t\n\tvar hashes = locationHref.slice(locationHref.indexOf('?') + 1).split('&');\n\tfor ( var i = 0; i < hashes.length; i++) {\n\t\thash = hashes[i].split('=');\n\t\tvars.push(hash[0]);\n\t\tvars[hash[0]] = hash[1];\n\t}\n\treturn vars;\n}\n```\n\n# JS、JQuery获取各种屏幕的高度和宽度\n\n在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。\n\n```javascript\nJavascript:\ndocument.body.clientWidth\t\t\t\t//网页可见区域宽\ndocument.body.clientHeight\t\t\t\t//网页可见区域高\ndocument.body.offsetWidth (包括边线的宽)\t//网页可见区域宽\ndocument.body.offsetHeight (包括边线的高)\t//网页可见区域高\ndocument.body.scrollWidth\t\t\t\t//网页正文全文宽\ndocument.body.scrollHeight\t\t\t\t//网页正文全文高\ndocument.body.scrollTop\t\t\t\t\t//网页被卷去的高\ndocument.body.scrollLeft\t\t\t\t//网页被卷去的左\nwindow.screenTop\t\t\t\t\t    //网页正文部分上\nwindow.screen.width\t\t\t\t\t\t//屏幕分辨率的宽\nwindow.screen.availHeight\t\t\t\t//屏幕可用工作区高度\nwindow.screen.availWidth\t\t\t\t//屏幕可用工作区宽度\n```\n\n```javascript\nJQuery:\n$(document).ready(function(){\nalert($(window).height());\t\t\t\t //浏览器当前窗口可视区域高度\nalert($(document).height()); \t\t\t //浏览器当前窗口文档的高度\nalert($(document.body).height());\t\t //浏览器当前窗口文档body的高度\nalert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度 包括border padding margin\n\nalert($(window).width()); \t\t\t\t//浏览器当前窗口可视区域宽度\nalert($(document).width());\t\t\t\t//浏览器当前窗口文档对象宽度\nalert($(document.body).width());\t\t//浏览器当前窗口文档body的宽度\nalert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度 包括border padding margin\n})\n```\n\n# 微信浏览器缓存清理\n\n微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：\n\n## 设置HTTP头部\n\n通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用\n\n> Android下可在微信中打开http://debugx5.qq.com清除微信缓存。\n\n```html\n<html manifest=\"IGNORE.manifest\">\n\n  \n<meta charset=\"utf-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta http-equiv=\"pragma\" content=\"no-cache\">\n<meta http-equiv=\"cache-control\" content=\"no-cache\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, user-scalable=no\">\n<link rel=\"shortcut icon\" href=\"../../view/images/favicon.ico\"\n\ttype=\"image/x-icon\" />\n```\n\n## 更新版本号\n\nHTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。\n\n> 使用[`SeaJs`](http://yslove.net/seajs/)拦截所有`.js`和`.css`并在尾部加上随机数。\n\n### 引入SeaJs\n\n```html\n<script src=\"../../util/sea.js\"></script>\n```\n\n### 配置seajs_config.js\n\n> 需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置http://yslove.net/seajs/\n\n```javascript\nvar time = new Date().getTime();\nvar sea_config = {\n\t\"base\":\"/\",\t\t\t\t//web发布路径\n\t\"debug\":\"true\",\t\t\t\t//2:每次从后台获取新的js,true:console出bug,false:默认\n\t\"charset\":\"utf-8\",\t\t\t\t\t\t\t\t//字符集\n\tpreload: [\"util/jquery-1.8.0.min.js\"],\t//预加载jquery\n\tmap: [                                           //配置映射，用来版本更新强制浏览器刷新\n        ['.js','.js?version=' + time],\n        ['.css','.css?version=' + time]\n\t]\n};\n```\n\n```html\n//HTML页面引入\n<script src=\"../../config/seaConfig/seajs_config.js\"></script>\n<script>\n\tseajs.config(sea_config);\n</script>\n```\n\n## Ajax请求缓存\n\n> 在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的\n\n#### 解决方法一\n\n```javascript\n//ajax get请求时比较简单 只需将cache设置为false就好\n\t$.ajax({  \n           type: 'get',//get请求时  \n           url: '........',  \n           cache: false,//不缓存  \n           data: { },  \n           success: function (result) {  \n                   \n            }  \n\t });  \n```\n\n#### 解决方法二\n\n```javascript\n访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]\nURL?+new Date();\n设计WEB页面的时候 也应该遵守这个原则\n因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好\n```\n\n# IOS下Iframe滚动问题\n\n> 移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-cn\">\n<head>\n<meta charset=\"utf-8\" />\n<title>IOS frame 滚动条 demo</title>\n</head>\n<body>\n<style>\n#wrapper{height:500px;-webkit-overflow-scrolling:touch;overflow:auto;}\n</style>\n<div class=\"container\">\n   \t 我是一堆很长。很长，很高，很高的内容。\n</div>\n<script src=\"../jquery.js\"></script>\n<script>\n    var UA = navigator.userAgent;\n    var forIOS = function(){\n        if(!UA.match(/iPad/) && !UA.match(/iPhone/) && !UA.match(/iPod/)){\n          return;\n        }\n        if($('#wrapper').length){return;}\n        $('body').children().not('script').wrapAll('<div id=\"wrapper\"></div>');\n    }();\n</script>\n</body>\n</html>\n```\n\n# 总结\n\n这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。","slug":"微信公众号网页开发","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit66n000moog69nosazgv","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。</p>\n<div align=\"center\"><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"><br><br></div>\n\n<a id=\"more\"></a>\n<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\" target=\"_blank\" rel=\"external\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\" target=\"_blank\" rel=\"external\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近一直参与公司开发公众号，关于项目实施平台PC端简化为微信公众号，主要架构为前台H5，使用时的微信的WeUI的SDK，后台就是现在流行的SpringMVC+Mybaties，参与了全程开发，开发过程中也遇到了不少的问题，现在记录下来，希望以后能够用得到。</p>\n<div align=center><img width=\"700\" height=\"300\" src=\"http://on937g0jc.bkt.clouddn.com/2017-6-1/%E5%BE%AE%E4%BF%A1.jpg\" algin=\"center\"/><br><br></div>","more":"<h1 id=\"HTML页面之间传值\"><a href=\"#HTML页面之间传值\" class=\"headerlink\" title=\"HTML页面之间传值\"></a>HTML页面之间传值</h1><p>JSP之间传值已经很熟悉，HTML之间传值是通过<code>解析URL</code>获取所需参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//URL传值</span></div><div class=\"line\">URL + <span class=\"string\">\"?logId=\"</span> + logId;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取所需参数</span></div><div class=\"line\"><span class=\"keyword\">var</span> hrefInfo = getUrlVars(<span class=\"built_in\">window</span>.location.href);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (hrefInfo.logId &amp;&amp; hrefInfo.logId != <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">\t\tfillData(hrefInfo.logId);</div><div class=\"line\">\t\tlogId = hrefInfo.logId;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 得到url中的参数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUrlVars</span>(<span class=\"params\">hrf</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> vars = [], hash;</div><div class=\"line\">\t<span class=\"keyword\">var</span> locationHref = !hrf ? <span class=\"built_in\">window</span>.location.href : hrf;</div><div class=\"line\">\tlocationHref = locationHref.replace(<span class=\"regexp\">/#/g</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (locationHref.indexOf(<span class=\"string\">'%'</span>) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\tlocationHref = <span class=\"built_in\">unescape</span>(locationHref);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">var</span> hashes = locationHref.slice(locationHref.indexOf(<span class=\"string\">'?'</span>) + <span class=\"number\">1</span>).split(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\">\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; hashes.length; i++) &#123;</div><div class=\"line\">\t\thash = hashes[i].split(<span class=\"string\">'='</span>);</div><div class=\"line\">\t\tvars.push(hash[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\tvars[hash[<span class=\"number\">0</span>]] = hash[<span class=\"number\">1</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> vars;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"JS、JQuery获取各种屏幕的高度和宽度\"><a href=\"#JS、JQuery获取各种屏幕的高度和宽度\" class=\"headerlink\" title=\"JS、JQuery获取各种屏幕的高度和宽度\"></a>JS、JQuery获取各种屏幕的高度和宽度</h1><p>在移动端经常会用到获取屏幕的高度和宽度，在这里总结一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Javascript:</div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientWidth\t\t\t\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.clientHeight\t\t\t\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetWidth (包括边线的宽)\t<span class=\"comment\">//网页可见区域宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.offsetHeight (包括边线的高)\t<span class=\"comment\">//网页可见区域高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollWidth\t\t\t\t<span class=\"comment\">//网页正文全文宽</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollHeight\t\t\t\t<span class=\"comment\">//网页正文全文高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollTop\t\t\t\t\t<span class=\"comment\">//网页被卷去的高</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.scrollLeft\t\t\t\t<span class=\"comment\">//网页被卷去的左</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screenTop\t\t\t\t\t    <span class=\"comment\">//网页正文部分上</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.width\t\t\t\t\t\t<span class=\"comment\">//屏幕分辨率的宽</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availHeight\t\t\t\t<span class=\"comment\">//屏幕可用工作区高度</span></div><div class=\"line\"><span class=\"built_in\">window</span>.screen.availWidth\t\t\t\t<span class=\"comment\">//屏幕可用工作区宽度</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">JQuery:</div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).height());\t\t\t\t <span class=\"comment\">//浏览器当前窗口可视区域高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).height()); \t\t\t <span class=\"comment\">//浏览器当前窗口文档的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).height());\t\t <span class=\"comment\">//浏览器当前窗口文档body的高度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerHeight(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总高度 包括border padding margin</span></div><div class=\"line\"></div><div class=\"line\">alert($(<span class=\"built_in\">window</span>).width()); \t\t\t\t<span class=\"comment\">//浏览器当前窗口可视区域宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>).width());\t\t\t\t<span class=\"comment\">//浏览器当前窗口文档对象宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).width());\t\t<span class=\"comment\">//浏览器当前窗口文档body的宽度</span></div><div class=\"line\">alert($(<span class=\"built_in\">document</span>.body).outerWidth(<span class=\"literal\">true</span>));<span class=\"comment\">//浏览器当前窗口文档body的总宽度 包括border padding margin</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"微信浏览器缓存清理\"><a href=\"#微信浏览器缓存清理\" class=\"headerlink\" title=\"微信浏览器缓存清理\"></a>微信浏览器缓存清理</h1><p>微信浏览器缓存一直都是相当恶心的存在，只要页面加载，那么静态页面就会被缓存，通过Google和百度找到了以下两种方法：</p>\n<h2 id=\"设置HTTP头部\"><a href=\"#设置HTTP头部\" class=\"headerlink\" title=\"设置HTTP头部\"></a>设置HTTP头部</h2><p>通过这只HTTP头部禁止浏览器缓存，效果没有达到要求，不建议使用</p>\n<blockquote>\n<p>Android下可在微信中打开<a href=\"http://debugx5.qq.com清除微信缓存。\">http://debugx5.qq.com清除微信缓存。</a></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"IGNORE.manifest\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></div><div class=\"line\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, user-scalable=no\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../../view/images/favicon.ico\"</span></div><div class=\"line\">\t<span class=\"attr\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"更新版本号\"><a href=\"#更新版本号\" class=\"headerlink\" title=\"更新版本号\"></a>更新版本号</h2><p>HTTP头部禁止缓存不能用，就只能每次都更新版本号(加随机数)来达到自己的要求了。</p>\n<blockquote>\n<p>使用<a href=\"http://yslove.net/seajs/\"><code>SeaJs</code></a>拦截所有<code>.js</code>和<code>.css</code>并在尾部加上随机数。</p>\n</blockquote>\n<h3 id=\"引入SeaJs\"><a href=\"#引入SeaJs\" class=\"headerlink\" title=\"引入SeaJs\"></a>引入SeaJs</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../util/sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"配置seajs-config-js\"><a href=\"#配置seajs-config-js\" class=\"headerlink\" title=\"配置seajs_config.js\"></a>配置seajs_config.js</h3><blockquote>\n<p>需要配置seajs_config.js全局变量，每一个HTML页面都要引入，关于更多SeaJs配置<a href=\"http://yslove.net/seajs/\">http://yslove.net/seajs/</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> sea_config = &#123;</div><div class=\"line\">\t<span class=\"string\">\"base\"</span>:<span class=\"string\">\"/\"</span>,\t\t\t\t<span class=\"comment\">//web发布路径</span></div><div class=\"line\">\t<span class=\"string\">\"debug\"</span>:<span class=\"string\">\"true\"</span>,\t\t\t\t<span class=\"comment\">//2:每次从后台获取新的js,true:console出bug,false:默认</span></div><div class=\"line\">\t<span class=\"string\">\"charset\"</span>:<span class=\"string\">\"utf-8\"</span>,\t\t\t\t\t\t\t\t<span class=\"comment\">//字符集</span></div><div class=\"line\">\tpreload: [<span class=\"string\">\"util/jquery-1.8.0.min.js\"</span>],\t<span class=\"comment\">//预加载jquery</span></div><div class=\"line\">\tmap: [                                           <span class=\"comment\">//配置映射，用来版本更新强制浏览器刷新</span></div><div class=\"line\">        [<span class=\"string\">'.js'</span>,<span class=\"string\">'.js?version='</span> + time],</div><div class=\"line\">        [<span class=\"string\">'.css'</span>,<span class=\"string\">'.css?version='</span> + time]</div><div class=\"line\">\t]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//HTML页面引入</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../config/seaConfig/seajs_config.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">\tseajs.config(sea_config);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"Ajax请求缓存\"><a href=\"#Ajax请求缓存\" class=\"headerlink\" title=\"Ajax请求缓存\"></a>Ajax请求缓存</h2><blockquote>\n<p>在编码期间，因为有个角色是查看所有项目且数据量也比较大，所以把Ajax请求方式从POST改为了GET，结果就发现Ajax请求被缓存，只有第一次查询有效，其后全部是从缓存中取，查询资料后才发现是POST改为GET引起的</p>\n</blockquote>\n<h4 id=\"解决方法一\"><a href=\"#解决方法一\" class=\"headerlink\" title=\"解决方法一\"></a>解决方法一</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//ajax get请求时比较简单 只需将cache设置为false就好</span></div><div class=\"line\">\t$.ajax(&#123;  </div><div class=\"line\">           <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,<span class=\"comment\">//get请求时  </span></div><div class=\"line\">           url: <span class=\"string\">'........'</span>,  </div><div class=\"line\">           <span class=\"attr\">cache</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//不缓存  </span></div><div class=\"line\">           data: &#123; &#125;,  </div><div class=\"line\">           <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;  </div><div class=\"line\">                   </div><div class=\"line\">            &#125;  </div><div class=\"line\">\t &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"解决方法二\"><a href=\"#解决方法二\" class=\"headerlink\" title=\"解决方法二\"></a>解决方法二</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">访问就在URL后面加上[总之就是使每次访问的URL字符串不一样的]</div><div class=\"line\">URL?+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">设计WEB页面的时候 也应该遵守这个原则</div><div class=\"line\">因为请求同一个地址会直接读取缓存，所以可以在参数中加一个随机数数 让每次参数不一样就好</div></pre></td></tr></table></figure>\n<h1 id=\"IOS下Iframe滚动问题\"><a href=\"#IOS下Iframe滚动问题\" class=\"headerlink\" title=\"IOS下Iframe滚动问题\"></a>IOS下Iframe滚动问题</h1><blockquote>\n<p>移动端在IOS下的问题居多，后来测试组测出的bug多数属于在IOS下属性不兼容问题，其中就有IOS下Iframe里面页面无法滚动，解决方法如下</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-cn\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>IOS frame 滚动条 demo<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">#wrapper&#123;height:500px;-webkit-overflow-scrolling:touch;overflow:auto;&#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">   \t 我是一堆很长。很长，很高，很高的内容。</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../jquery.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"keyword\">var</span> UA = navigator.userAgent;</div><div class=\"line\">    <span class=\"keyword\">var</span> forIOS = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!UA.match(<span class=\"regexp\">/iPad/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPhone/</span>) &amp;&amp; !UA.match(<span class=\"regexp\">/iPod/</span>))&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($(<span class=\"string\">'#wrapper'</span>).length)&#123;<span class=\"keyword\">return</span>;&#125;</div><div class=\"line\">        $(<span class=\"string\">'body'</span>).children().not(<span class=\"string\">'script'</span>).wrapAll(<span class=\"string\">'&lt;div id=\"wrapper\"&gt;&lt;/div&gt;'</span>);</div><div class=\"line\">    &#125;();</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>这次是我第一次开发微信端，从前端的不熟悉到熟练，自己成长了许多。同时遇到了很多问题，尤其是在IOS下的兼容问题，比如还有像IOS下fixed属性不能用等问题。很多东西只有自己摸索才知道，这次也算是让自己在全栈工程师的道路上又进了一步。</p>"},{"title":"浅谈共享单车","date":"2017-03-24T09:40:22.000Z","_content":"\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","source":"_posts/浅谈共享单车.md","raw":"---\ntitle: 浅谈共享单车\ndate: 2017-03-24 17:40:22\ntags: [nowHot]\ncategories: society\n---\n\n​\t要说目前最火爆的互联网现象，当属`共享单车`。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。\n\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>\n\n<!--more-->\n\n> 共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。\n\n​\t2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。\n\n## 场景分析\n\n​\t我们站在用户角度，无非就是找车，然后骑车，交钱。\n\n![场景分析](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg)\n\n在“`寻车-用车-骑车-还车`”的场景闭环中，需要考虑的问题有很多，列举以下若干种：\n\n- 什么样的寻车方式更符合大众的日常行为？\n\n\n- 用户与单车之间如何建立一一对应的联系？\n\n\n- 使用何种开锁构件实现远程开锁和上锁？\n\n\n- 计费方式及费用节点、价格、操作流程分别采取什么方案？\n\n\n- 如何对车辆进行远程管理？\n\n\n- 如何防止逃费、盗窃、破坏等衍生问题？\n\n场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。\n\n## 业务逻辑分析\n\n以`摩拜单车`为例，用户-管理平台-单车 之间的关系如下图:\n\n![流程](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg)\n\n## 技术实现方案\n\n​\t现在共享单车最火的要数*[摩拜单车](http://mobike.com/cn/)*和*[OFO小黄车](http://www.ofo.so/?utm_source=baidu&utm_medium=pz)*了，摩拜采用**智能锁**而ofo采用的是**机械锁**。\n\n### 1  机械锁\n\n​\t原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。\n\n![机械锁](http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg)\n\n### 2  智能锁\n\n​\t原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。\n\n一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；\n二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;\n三、自行车收到服务器请求，会执行相应的开锁动作。\n\n*智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。*\n\n![mobike原理](http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png)\n\n​\t这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：![方案](http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg)\n\n​\t明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。\n\n## 一点感想\n\n​\t从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。\n\n> 之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，**亲测**：不行！还是自己乖乖注册一个吧。","slug":"浅谈共享单车","published":1,"updated":"2017-06-04T01:41:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit66x000roog6zx18iwaa","content":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=\"center\"><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"></div>\n\n<a id=\"more\"></a>\n<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\" target=\"_blank\" rel=\"external\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\" target=\"_blank\" rel=\"external\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>​    要说目前最火爆的互联网现象，当属<code>共享单车</code>。这里所谓的共享，本质上指的是需求共享。就骑车的需求，从一个地方骑到另一个地方，就是用户触点（产品投放）、产品操作（骑行过程）、付费模式（支付）的流程，从个体上来讲，这个流程是单向的。但在“共享”的模式下，扫码骑走，停车即走，把不同的人，在不同的时间和地点，相同的骑行需求，通过产品操作节点，形成需求闭环，停车点同时又是骑行出发点，这就是需求共享。</p>\n<div align=center><img width=\"600\" height=\"280\" src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/cover.jpg\" algin=\"center\"/></div>","more":"<blockquote>\n<p>共享单车是指企业与政府合作，在地铁、学校、公交站点、居民区、商业区、公共服务区等提供自行车单车共享服务，是共享经济的一种新形态。</p>\n</blockquote>\n<p>​    2016年底以来，国内共享单车突然就火爆了起来，而在街头，仿佛一夜之间，共享单车已经到了“泛滥”的地步，各大城市路边排满各种颜色的共享单车。</p>\n<h2 id=\"场景分析\"><a href=\"#场景分析\" class=\"headerlink\" title=\"场景分析\"></a>场景分析</h2><p>​    我们站在用户角度，无非就是找车，然后骑车，交钱。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90.jpg\" alt=\"场景分析\"></p>\n<p>在“<code>寻车-用车-骑车-还车</code>”的场景闭环中，需要考虑的问题有很多，列举以下若干种：</p>\n<ul>\n<li>什么样的寻车方式更符合大众的日常行为？</li>\n</ul>\n<ul>\n<li>用户与单车之间如何建立一一对应的联系？</li>\n</ul>\n<ul>\n<li>使用何种开锁构件实现远程开锁和上锁？</li>\n</ul>\n<ul>\n<li>计费方式及费用节点、价格、操作流程分别采取什么方案？</li>\n</ul>\n<ul>\n<li>如何对车辆进行远程管理？</li>\n</ul>\n<ul>\n<li>如何防止逃费、盗窃、破坏等衍生问题？</li>\n</ul>\n<p>场景分析的过程，就是解决以上若干问题的过程，针对这些问题，分别提出不同的业务流程和技术方案。</p>\n<h2 id=\"业务逻辑分析\"><a href=\"#业务逻辑分析\" class=\"headerlink\" title=\"业务逻辑分析\"></a>业务逻辑分析</h2><p>以<code>摩拜单车</code>为例，用户-管理平台-单车 之间的关系如下图:</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%B5%81%E7%A8%8B.jpg\" alt=\"流程\"></p>\n<h2 id=\"技术实现方案\"><a href=\"#技术实现方案\" class=\"headerlink\" title=\"技术实现方案\"></a>技术实现方案</h2><p>​    现在共享单车最火的要数<em><a href=\"http://mobike.com/cn/\">摩拜单车</a></em>和<em><a href=\"http://www.ofo.so/?utm_source=baidu&amp;utm_medium=pz\">OFO小黄车</a></em>了，摩拜采用<strong>智能锁</strong>而ofo采用的是<strong>机械锁</strong>。</p>\n<h3 id=\"1-机械锁\"><a href=\"#1-机械锁\" class=\"headerlink\" title=\"1  机械锁\"></a>1  机械锁</h3><p>​    原理：机械锁的原理很简单，只需要打开软件，输入对应的车牌号就可以了，其实就是后台查询数据库，判断单车是否处于正常状态，返回给用户开锁密码，用户拿着开锁密码开锁。</p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/ofo%E5%8E%9F%E7%90%86.jpg\" alt=\"机械锁\"></p>\n<h3 id=\"2-智能锁\"><a href=\"#2-智能锁\" class=\"headerlink\" title=\"2  智能锁\"></a>2  智能锁</h3><p>​    原理：对于单车的远程开锁机制，采用远程通信控制机械构件的电磁运动来实现。远程通信可采用传统的SIM卡通信的方式。</p>\n<p>一、手机扫描自行车，获得自行车唯一的ID标志，手机接着会像服务器提交一个请求（提交信息里包含：用户信息，请求动作，车辆ID）；<br>二、服务器收到用户开锁请求，此时会根据请求信息，接着向指定ID的自行车发出开锁指令;<br>三、自行车收到服务器请求，会执行相应的开锁动作。</p>\n<p><em>智能锁是耗费电能的，所以摩拜单车车篮中装有太阳能电池板，减少人力物力维护的成本、简单、高效。</em></p>\n<p><img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/mobike%E5%8E%9F%E7%90%86.png\" alt=\"mobike原理\"></p>\n<p>​    这是一个典型的大容量互联网O2O场景，连结用户、车辆，管理平台进行实时处理效率要求非常高，需制定可靠、高效的网络方案。根据业务流程，我们梳理出网络节点的职能，并从成本考虑使用最优方案：<img src=\"http://on937g0jc.bkt.clouddn.com/2017-3-24/%E6%96%B9%E6%A1%88.jpg\" alt=\"方案\"></p>\n<p>​    明确流程，界面，那么接下来的任务就是通过用户语言去实现产品流程了，即界面设计与开发实现，这里我们就不阐述了。</p>\n<h2 id=\"一点感想\"><a href=\"#一点感想\" class=\"headerlink\" title=\"一点感想\"></a>一点感想</h2><p>​    从2016年到现在已有近半年时间，共享单车的竞争也愈演愈烈，近几天，共享单车从免费到红包“撒钱” 导致竞争升级，共享单车方便了我们的出行，但是带来的问题也很多，政府也在不断的规范使用。现在都在处于资本投入和烧钱大战中，希望共享单车一直存货下去，同时希望大家能合理、合法使用。</p>\n<blockquote>\n<p>之前有听说过摩拜的扫一扫可以远程使用，假如我需要车又没有注册，我可以拍照给有车的朋友，让他们帮我远程扫就可以开启，<strong>亲测</strong>：不行！还是自己乖乖注册一个吧。</p>\n</blockquote>"},{"title":"跨页面(Tab/Window)通信的几种方法","date":"2017-09-01T02:32:43.000Z","_content":"\n​\t今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用`webSocket` 进行通讯，之后通过谷歌和百度找出了更为简便的方法。\n\n<!-- more -->\n\n# 利用webSocket进行通讯\n\n​\t第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。\n\n# 定时器不断检查cookies变化\n\n在[stackoverflow](https://stackoverflow.com/)上看到一个方案，大致思路是：\n\n1. 在页面A设置一个使用 `setInterval` 定时器不断刷新，检查 `Cookies` 的值是否发生变化，如果变化就进行刷新的操作。\n2. 由于 `Cookies` 是在同域可读的，所以在页面 B 审核的时候改变 `Cookies` 的值，页面 A 自然是可以拿到的。\n   这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。\n\n# localStorage的事件\n\n功夫不负有心人，后来发现 window 有一个 [StorageEvent](https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent) ，每当 `localStorage` 改变的时候可以触发这个事件。（这个原理就像你给一个`DOM` 绑定了 `click` 事件，当你点击它的时候，就会自动触发。）也就是说，我给 `window` 绑定这个事件后，每当我改变 `localStorage` 的时候，他都会触发这个事件。\n\n```\nwindow.addEventListener('storage', function (event) {\n  console.log(event);\n});\n```\n\n这个回调中的`event`与普通的[EVNET](https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties),基本差不多，但是它比其他的`event`多了如下几个属性:\n\n| 属性       | 描述                          |\n| -------- | --------------------------- |\n| key      | 受影响的 `localStorage` 的 `key` |\n| newValue | 新的值                         |\n| oldValue | 旧的值                         |\n| url      | 触发此事件的url                   |\n\n每当一个页面改变了 `localStorage` 的值，都会触发这个事件。也就是说可以很容易的通过改变 `localStorage` 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 `localStorage` 发生**改变**的时候才会被触发，如果没改变则**不会触发**此事件。\n\n```\nlocalStorage.setItem('delete',1); //触发\nlocalStorage.setItem('delete',1); //不触发\nlocalStorage.setItem('delete',2); //触发\n```\n\n在使用的时候务必注意这一点。\n最终实现代码:\n\n**页面A：**\n\n```\n//页面 A\nwindow.addEventListener('storage', function (event) {\n    if(event.key === 'delete_verify_list'){\n        //页面操作\n    }\n});\n```\n\n**页面B：**\n\n```\n//页面 B\n/**\n *  获取一个随机id\n * @return {String} - 返回一个5位的随机字符串\n */\nfunction randomId() {\n    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();\n}\n\n//每当需要页面A更新时 执行此方法\nif (localStorage) {\n\t//为保证每次页面A都执行，此处我设置里一个随机字符串\n    localStorage.setItem('delete_verify_list', randomId());\n}\n```\n\n参考：<https://ponyfoo.com/articles/cross-tab-communication>\n\n","source":"_posts/跨页面-Tab-Window-通信的几种方法.md","raw":"---\ntitle: 跨页面(Tab/Window)通信的几种方法\ndate: 2017-09-01 10:32:43\ntags: [前端,tips,js]\ncategories: technology\n---\n\n​\t今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用`webSocket` 进行通讯，之后通过谷歌和百度找出了更为简便的方法。\n\n<!-- more -->\n\n# 利用webSocket进行通讯\n\n​\t第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。\n\n# 定时器不断检查cookies变化\n\n在[stackoverflow](https://stackoverflow.com/)上看到一个方案，大致思路是：\n\n1. 在页面A设置一个使用 `setInterval` 定时器不断刷新，检查 `Cookies` 的值是否发生变化，如果变化就进行刷新的操作。\n2. 由于 `Cookies` 是在同域可读的，所以在页面 B 审核的时候改变 `Cookies` 的值，页面 A 自然是可以拿到的。\n   这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。\n\n# localStorage的事件\n\n功夫不负有心人，后来发现 window 有一个 [StorageEvent](https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent) ，每当 `localStorage` 改变的时候可以触发这个事件。（这个原理就像你给一个`DOM` 绑定了 `click` 事件，当你点击它的时候，就会自动触发。）也就是说，我给 `window` 绑定这个事件后，每当我改变 `localStorage` 的时候，他都会触发这个事件。\n\n```\nwindow.addEventListener('storage', function (event) {\n  console.log(event);\n});\n```\n\n这个回调中的`event`与普通的[EVNET](https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties),基本差不多，但是它比其他的`event`多了如下几个属性:\n\n| 属性       | 描述                          |\n| -------- | --------------------------- |\n| key      | 受影响的 `localStorage` 的 `key` |\n| newValue | 新的值                         |\n| oldValue | 旧的值                         |\n| url      | 触发此事件的url                   |\n\n每当一个页面改变了 `localStorage` 的值，都会触发这个事件。也就是说可以很容易的通过改变 `localStorage` 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 `localStorage` 发生**改变**的时候才会被触发，如果没改变则**不会触发**此事件。\n\n```\nlocalStorage.setItem('delete',1); //触发\nlocalStorage.setItem('delete',1); //不触发\nlocalStorage.setItem('delete',2); //触发\n```\n\n在使用的时候务必注意这一点。\n最终实现代码:\n\n**页面A：**\n\n```\n//页面 A\nwindow.addEventListener('storage', function (event) {\n    if(event.key === 'delete_verify_list'){\n        //页面操作\n    }\n});\n```\n\n**页面B：**\n\n```\n//页面 B\n/**\n *  获取一个随机id\n * @return {String} - 返回一个5位的随机字符串\n */\nfunction randomId() {\n    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();\n}\n\n//每当需要页面A更新时 执行此方法\nif (localStorage) {\n\t//为保证每次页面A都执行，此处我设置里一个随机字符串\n    localStorage.setItem('delete_verify_list', randomId());\n}\n```\n\n参考：<https://ponyfoo.com/articles/cross-tab-communication>\n\n","slug":"跨页面-Tab-Window-通信的几种方法","published":1,"updated":"2017-09-04T07:13:12.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7hit674000toog6ncofk679","content":"<p>​    今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用<code>webSocket</code> 进行通讯，之后通过谷歌和百度找出了更为简便的方法。</p>\n<a id=\"more\"></a>\n<h1 id=\"利用webSocket进行通讯\"><a href=\"#利用webSocket进行通讯\" class=\"headerlink\" title=\"利用webSocket进行通讯\"></a>利用webSocket进行通讯</h1><p>​    第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。</p>\n<h1 id=\"定时器不断检查cookies变化\"><a href=\"#定时器不断检查cookies变化\" class=\"headerlink\" title=\"定时器不断检查cookies变化\"></a>定时器不断检查cookies变化</h1><p>在<a href=\"https://stackoverflow.com/\" target=\"_blank\" rel=\"external\">stackoverflow</a>上看到一个方案，大致思路是：</p>\n<ol>\n<li>在页面A设置一个使用 <code>setInterval</code> 定时器不断刷新，检查 <code>Cookies</code> 的值是否发生变化，如果变化就进行刷新的操作。</li>\n<li>由于 <code>Cookies</code> 是在同域可读的，所以在页面 B 审核的时候改变 <code>Cookies</code> 的值，页面 A 自然是可以拿到的。<br>这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。</li>\n</ol>\n<h1 id=\"localStorage的事件\"><a href=\"#localStorage的事件\" class=\"headerlink\" title=\"localStorage的事件\"></a>localStorage的事件</h1><p>功夫不负有心人，后来发现 window 有一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent\" target=\"_blank\" rel=\"external\">StorageEvent</a> ，每当 <code>localStorage</code> 改变的时候可以触发这个事件。（这个原理就像你给一个<code>DOM</code> 绑定了 <code>click</code> 事件，当你点击它的时候，就会自动触发。）也就是说，我给 <code>window</code> 绑定这个事件后，每当我改变 <code>localStorage</code> 的时候，他都会触发这个事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">  console.log(event);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个回调中的<code>event</code>与普通的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties\" target=\"_blank\" rel=\"external\">EVNET</a>,基本差不多，但是它比其他的<code>event</code>多了如下几个属性:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>受影响的 <code>localStorage</code> 的 <code>key</code></td>\n</tr>\n<tr>\n<td>newValue</td>\n<td>新的值</td>\n</tr>\n<tr>\n<td>oldValue</td>\n<td>旧的值</td>\n</tr>\n<tr>\n<td>url</td>\n<td>触发此事件的url</td>\n</tr>\n</tbody>\n</table>\n<p>每当一个页面改变了 <code>localStorage</code> 的值，都会触发这个事件。也就是说可以很容易的通过改变 <code>localStorage</code> 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 <code>localStorage</code> 发生<strong>改变</strong>的时候才会被触发，如果没改变则<strong>不会触发</strong>此事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //不触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,2); //触发</div></pre></td></tr></table></figure>\n<p>在使用的时候务必注意这一点。<br>最终实现代码:</p>\n<p><strong>页面A：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 A</div><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">    if(event.key === &apos;delete_verify_list&apos;)&#123;</div><div class=\"line\">        //页面操作</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>页面B：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 B</div><div class=\"line\">/**</div><div class=\"line\"> *  获取一个随机id</div><div class=\"line\"> * @return &#123;String&#125; - 返回一个5位的随机字符串</div><div class=\"line\"> */</div><div class=\"line\">function randomId() &#123;</div><div class=\"line\">    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//每当需要页面A更新时 执行此方法</div><div class=\"line\">if (localStorage) &#123;</div><div class=\"line\">\t//为保证每次页面A都执行，此处我设置里一个随机字符串</div><div class=\"line\">    localStorage.setItem(&apos;delete_verify_list&apos;, randomId());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://ponyfoo.com/articles/cross-tab-communication\" target=\"_blank\" rel=\"external\">https://ponyfoo.com/articles/cross-tab-communication</a></p>\n","site":{"data":{}},"excerpt":"<p>​    今天开发一个功能遇到一个需求，在A页面点击查看详情后打开B页面进行修改或删除，删除后B页面关闭，然后刷新A页面里面的数据。相当于就是两个页面之间进行通讯，作为后端的我第一想法是利用<code>webSocket</code> 进行通讯，之后通过谷歌和百度找出了更为简便的方法。</p>","more":"<h1 id=\"利用webSocket进行通讯\"><a href=\"#利用webSocket进行通讯\" class=\"headerlink\" title=\"利用webSocket进行通讯\"></a>利用webSocket进行通讯</h1><p>​    第一想法是这个，但是这样的话工作量巨大而且还需要后端支持，太麻烦了，对于我这种懒人直接就放弃了，去寻找有没有更简便的方法。</p>\n<h1 id=\"定时器不断检查cookies变化\"><a href=\"#定时器不断检查cookies变化\" class=\"headerlink\" title=\"定时器不断检查cookies变化\"></a>定时器不断检查cookies变化</h1><p>在<a href=\"https://stackoverflow.com/\">stackoverflow</a>上看到一个方案，大致思路是：</p>\n<ol>\n<li>在页面A设置一个使用 <code>setInterval</code> 定时器不断刷新，检查 <code>Cookies</code> 的值是否发生变化，如果变化就进行刷新的操作。</li>\n<li>由于 <code>Cookies</code> 是在同域可读的，所以在页面 B 审核的时候改变 <code>Cookies</code> 的值，页面 A 自然是可以拿到的。<br>这样做确实可以实现我想要的功能，但是这样的方法相当浪费资源。虽然在这个性能过盛的时代，浪费不浪费也感觉不出来，但是这种实现方案，确实不够优(zhuāng)雅（bī）。</li>\n</ol>\n<h1 id=\"localStorage的事件\"><a href=\"#localStorage的事件\" class=\"headerlink\" title=\"localStorage的事件\"></a>localStorage的事件</h1><p>功夫不负有心人，后来发现 window 有一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/StorageEvent\">StorageEvent</a> ，每当 <code>localStorage</code> 改变的时候可以触发这个事件。（这个原理就像你给一个<code>DOM</code> 绑定了 <code>click</code> 事件，当你点击它的时候，就会自动触发。）也就是说，我给 <code>window</code> 绑定这个事件后，每当我改变 <code>localStorage</code> 的时候，他都会触发这个事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">  console.log(event);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这个回调中的<code>event</code>与普通的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Event#Properties\">EVNET</a>,基本差不多，但是它比其他的<code>event</code>多了如下几个属性:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>key</td>\n<td>受影响的 <code>localStorage</code> 的 <code>key</code></td>\n</tr>\n<tr>\n<td>newValue</td>\n<td>新的值</td>\n</tr>\n<tr>\n<td>oldValue</td>\n<td>旧的值</td>\n</tr>\n<tr>\n<td>url</td>\n<td>触发此事件的url</td>\n</tr>\n</tbody>\n</table>\n<p>每当一个页面改变了 <code>localStorage</code> 的值，都会触发这个事件。也就是说可以很容易的通过改变 <code>localStorage</code> 的值，来实现浏览器中跨页面( tab / window )之间的通讯。记住这个事件只有在 <code>localStorage</code> 发生<strong>改变</strong>的时候才会被触发，如果没改变则<strong>不会触发</strong>此事件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,1); //不触发</div><div class=\"line\">localStorage.setItem(&apos;delete&apos;,2); //触发</div></pre></td></tr></table></figure>\n<p>在使用的时候务必注意这一点。<br>最终实现代码:</p>\n<p><strong>页面A：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 A</div><div class=\"line\">window.addEventListener(&apos;storage&apos;, function (event) &#123;</div><div class=\"line\">    if(event.key === &apos;delete_verify_list&apos;)&#123;</div><div class=\"line\">        //页面操作</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>页面B：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">//页面 B</div><div class=\"line\">/**</div><div class=\"line\"> *  获取一个随机id</div><div class=\"line\"> * @return &#123;String&#125; - 返回一个5位的随机字符串</div><div class=\"line\"> */</div><div class=\"line\">function randomId() &#123;</div><div class=\"line\">    return (Math.random() * 1E18).toString(36).slice(0, 5).toUpperCase();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//每当需要页面A更新时 执行此方法</div><div class=\"line\">if (localStorage) &#123;</div><div class=\"line\">\t//为保证每次页面A都执行，此处我设置里一个随机字符串</div><div class=\"line\">    localStorage.setItem(&apos;delete_verify_list&apos;, randomId());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://ponyfoo.com/articles/cross-tab-communication\">https://ponyfoo.com/articles/cross-tab-communication</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj7hit6590009oog6gt45bs03","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit65s000eoog6yguhd95x"},{"post_id":"cj7hit63o0001oog6ml2l4xh4","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit669000ioog6jkc5eatx"},{"post_id":"cj7hit65p000doog64o8dn9p8","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit66m000loog6qroxm1g4"},{"post_id":"cj7hit6470003oog6n7smc06v","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit66u000qoog6x4ld0e84"},{"post_id":"cj7hit65u000foog6zdxedhgh","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit673000soog67w4fal4n"},{"post_id":"cj7hit64v0007oog6og0xa3qd","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit677000voog6149rbroq"},{"post_id":"cj7hit66n000moog69nosazgv","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit67g000yoog6qnyvss6q"},{"post_id":"cj7hit674000toog6ncofk679","category_id":"cj7hit64h0005oog67y1wrxnd","_id":"cj7hit67m0011oog6qw9apt0d"},{"post_id":"cj7hit66b000joog6bikrqvr0","category_id":"cj7hit66s000poog6a0pi2rim","_id":"cj7hit67o0012oog69pu0uyiu"},{"post_id":"cj7hit66x000roog6zx18iwaa","category_id":"cj7hit678000woog6mptdro8p","_id":"cj7hit67s0014oog62rx8jtaw"}],"PostTag":[{"post_id":"cj7hit63o0001oog6ml2l4xh4","tag_id":"cj7hit64t0006oog6i60ee3ih","_id":"cj7hit66i000koog64qpd7kw6"},{"post_id":"cj7hit63o0001oog6ml2l4xh4","tag_id":"cj7hit65f000coog6aums6g1s","_id":"cj7hit66o000noog6vicbbkec"},{"post_id":"cj7hit6470003oog6n7smc06v","tag_id":"cj7hit64t0006oog6i60ee3ih","_id":"cj7hit679000xoog69vjlmvm0"},{"post_id":"cj7hit6470003oog6n7smc06v","tag_id":"cj7hit65f000coog6aums6g1s","_id":"cj7hit67h000zoog617f4v132"},{"post_id":"cj7hit64v0007oog6og0xa3qd","tag_id":"cj7hit64t0006oog6i60ee3ih","_id":"cj7hit67t0015oog6wc2sewua"},{"post_id":"cj7hit64v0007oog6og0xa3qd","tag_id":"cj7hit67i0010oog6r44m6tci","_id":"cj7hit67w0016oog65cwokuu0"},{"post_id":"cj7hit6590009oog6gt45bs03","tag_id":"cj7hit64t0006oog6i60ee3ih","_id":"cj7hit67y0018oog6iuj2vyn5"},{"post_id":"cj7hit6590009oog6gt45bs03","tag_id":"cj7hit65f000coog6aums6g1s","_id":"cj7hit6810019oog6avszpf0y"},{"post_id":"cj7hit65c000aoog60019datl","tag_id":"cj7hit65f000coog6aums6g1s","_id":"cj7hit684001boog62vw6aa95"},{"post_id":"cj7hit65p000doog64o8dn9p8","tag_id":"cj7hit682001aoog6uldbfj45","_id":"cj7hit686001doog6hhqgca3t"},{"post_id":"cj7hit65u000foog6zdxedhgh","tag_id":"cj7hit64t0006oog6i60ee3ih","_id":"cj7hit68d001foog63qghzzbo"},{"post_id":"cj7hit65u000foog6zdxedhgh","tag_id":"cj7hit685001coog60ef8ms63","_id":"cj7hit68e001goog6m63ntib0"},{"post_id":"cj7hit66b000joog6bikrqvr0","tag_id":"cj7hit68a001eoog6oboatrv5","_id":"cj7hit68g001ioog64hnm1qqu"},{"post_id":"cj7hit66n000moog69nosazgv","tag_id":"cj7hit68f001hoog66mfz34yx","_id":"cj7hit68k001loog6hpcckitm"},{"post_id":"cj7hit66n000moog69nosazgv","tag_id":"cj7hit68h001joog6zkc0igyt","_id":"cj7hit68k001moog6h1ax895a"},{"post_id":"cj7hit66x000roog6zx18iwaa","tag_id":"cj7hit68j001koog60b9125y4","_id":"cj7hit68l001ooog6raw6ap07"},{"post_id":"cj7hit674000toog6ncofk679","tag_id":"cj7hit68l001noog6ah49ovzy","_id":"cj7hit68v001qoog6m27z54h3"},{"post_id":"cj7hit674000toog6ncofk679","tag_id":"cj7hit65f000coog6aums6g1s","_id":"cj7hit68x001roog6lz7fgu3g"},{"post_id":"cj7hit674000toog6ncofk679","tag_id":"cj7hit68f001hoog66mfz34yx","_id":"cj7hit68x001soog6af60ox05"}],"Tag":[{"name":"java","_id":"cj7hit64t0006oog6i60ee3ih"},{"name":"tips","_id":"cj7hit65f000coog6aums6g1s"},{"name":"extendKW","_id":"cj7hit67i0010oog6r44m6tci"},{"name":"sql","_id":"cj7hit682001aoog6uldbfj45"},{"name":"spring","_id":"cj7hit685001coog60ef8ms63"},{"name":"firstday","_id":"cj7hit68a001eoog6oboatrv5"},{"name":"js","_id":"cj7hit68f001hoog66mfz34yx"},{"name":"移动端","_id":"cj7hit68h001joog6zkc0igyt"},{"name":"nowHot","_id":"cj7hit68j001koog60b9125y4"},{"name":"前端","_id":"cj7hit68l001noog6ah49ovzy"}]}}